
ptm-machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a24c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  0800a3d4  0800a3d4  0001a3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac88  0800ac88  00020340  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac88  0800ac88  0001ac88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac90  0800ac90  00020340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac90  0800ac90  0001ac90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac94  0800ac94  0001ac94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000340  20000000  0800ac98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000340  0800afd8  00020340  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  0800afd8  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020340  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f2a  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002943  00000000  00000000  0003829a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff0  00000000  00000000  0003abe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb8  00000000  00000000  0003bbd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002377d  00000000  00000000  0003ca88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eb82  00000000  00000000  00060205  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cbe4b  00000000  00000000  0006ed87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013abd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004914  00000000  00000000  0013ac50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000340 	.word	0x20000340
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a3bc 	.word	0x0800a3bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000344 	.word	0x20000344
 80001c4:	0800a3bc 	.word	0x0800a3bc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b972 	b.w	8000ca0 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	4688      	mov	r8, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14b      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4615      	mov	r5, r2
 80009e6:	d967      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0720 	rsb	r7, r2, #32
 80009f2:	fa01 f302 	lsl.w	r3, r1, r2
 80009f6:	fa20 f707 	lsr.w	r7, r0, r7
 80009fa:	4095      	lsls	r5, r2
 80009fc:	ea47 0803 	orr.w	r8, r7, r3
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a0c:	fa1f fc85 	uxth.w	ip, r5
 8000a10:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a14:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a18:	fb07 f10c 	mul.w	r1, r7, ip
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18eb      	adds	r3, r5, r3
 8000a22:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a26:	f080 811b 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8118 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a30:	3f02      	subs	r7, #2
 8000a32:	442b      	add	r3, r5
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a48:	45a4      	cmp	ip, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	192c      	adds	r4, r5, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a52:	f080 8107 	bcs.w	8000c64 <__udivmoddi4+0x290>
 8000a56:	45a4      	cmp	ip, r4
 8000a58:	f240 8104 	bls.w	8000c64 <__udivmoddi4+0x290>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	442c      	add	r4, r5
 8000a60:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a64:	eba4 040c 	sub.w	r4, r4, ip
 8000a68:	2700      	movs	r7, #0
 8000a6a:	b11e      	cbz	r6, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c6 4300 	strd	r4, r3, [r6]
 8000a74:	4639      	mov	r1, r7
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d909      	bls.n	8000a92 <__udivmoddi4+0xbe>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80eb 	beq.w	8000c5a <__udivmoddi4+0x286>
 8000a84:	2700      	movs	r7, #0
 8000a86:	e9c6 0100 	strd	r0, r1, [r6]
 8000a8a:	4638      	mov	r0, r7
 8000a8c:	4639      	mov	r1, r7
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	fab3 f783 	clz	r7, r3
 8000a96:	2f00      	cmp	r7, #0
 8000a98:	d147      	bne.n	8000b2a <__udivmoddi4+0x156>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d302      	bcc.n	8000aa4 <__udivmoddi4+0xd0>
 8000a9e:	4282      	cmp	r2, r0
 8000aa0:	f200 80fa 	bhi.w	8000c98 <__udivmoddi4+0x2c4>
 8000aa4:	1a84      	subs	r4, r0, r2
 8000aa6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aaa:	2001      	movs	r0, #1
 8000aac:	4698      	mov	r8, r3
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d0e0      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000ab2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ab6:	e7dd      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000ab8:	b902      	cbnz	r2, 8000abc <__udivmoddi4+0xe8>
 8000aba:	deff      	udf	#255	; 0xff
 8000abc:	fab2 f282 	clz	r2, r2
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	f040 808f 	bne.w	8000be4 <__udivmoddi4+0x210>
 8000ac6:	1b49      	subs	r1, r1, r5
 8000ac8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000acc:	fa1f f885 	uxth.w	r8, r5
 8000ad0:	2701      	movs	r7, #1
 8000ad2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ad6:	0c23      	lsrs	r3, r4, #16
 8000ad8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d907      	bls.n	8000af8 <__udivmoddi4+0x124>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x122>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	f200 80cd 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000af6:	4684      	mov	ip, r0
 8000af8:	1a59      	subs	r1, r3, r1
 8000afa:	b2a3      	uxth	r3, r4
 8000afc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b00:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b04:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b08:	fb08 f800 	mul.w	r8, r8, r0
 8000b0c:	45a0      	cmp	r8, r4
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0x14c>
 8000b10:	192c      	adds	r4, r5, r4
 8000b12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x14a>
 8000b18:	45a0      	cmp	r8, r4
 8000b1a:	f200 80b6 	bhi.w	8000c8a <__udivmoddi4+0x2b6>
 8000b1e:	4618      	mov	r0, r3
 8000b20:	eba4 0408 	sub.w	r4, r4, r8
 8000b24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b28:	e79f      	b.n	8000a6a <__udivmoddi4+0x96>
 8000b2a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b2e:	40bb      	lsls	r3, r7
 8000b30:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b34:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b38:	fa01 f407 	lsl.w	r4, r1, r7
 8000b3c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b40:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b44:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b48:	4325      	orrs	r5, r4
 8000b4a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b4e:	0c2c      	lsrs	r4, r5, #16
 8000b50:	fb08 3319 	mls	r3, r8, r9, r3
 8000b54:	fa1f fa8e 	uxth.w	sl, lr
 8000b58:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b5c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b60:	429c      	cmp	r4, r3
 8000b62:	fa02 f207 	lsl.w	r2, r2, r7
 8000b66:	fa00 f107 	lsl.w	r1, r0, r7
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b0>
 8000b6c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b70:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b74:	f080 8087 	bcs.w	8000c86 <__udivmoddi4+0x2b2>
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	f240 8084 	bls.w	8000c86 <__udivmoddi4+0x2b2>
 8000b7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b82:	4473      	add	r3, lr
 8000b84:	1b1b      	subs	r3, r3, r4
 8000b86:	b2ad      	uxth	r5, r5
 8000b88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b90:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000b94:	fb00 fa0a 	mul.w	sl, r0, sl
 8000b98:	45a2      	cmp	sl, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1da>
 8000b9c:	eb1e 0404 	adds.w	r4, lr, r4
 8000ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba4:	d26b      	bcs.n	8000c7e <__udivmoddi4+0x2aa>
 8000ba6:	45a2      	cmp	sl, r4
 8000ba8:	d969      	bls.n	8000c7e <__udivmoddi4+0x2aa>
 8000baa:	3802      	subs	r0, #2
 8000bac:	4474      	add	r4, lr
 8000bae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bb2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bb6:	eba4 040a 	sub.w	r4, r4, sl
 8000bba:	454c      	cmp	r4, r9
 8000bbc:	46c2      	mov	sl, r8
 8000bbe:	464b      	mov	r3, r9
 8000bc0:	d354      	bcc.n	8000c6c <__udivmoddi4+0x298>
 8000bc2:	d051      	beq.n	8000c68 <__udivmoddi4+0x294>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d069      	beq.n	8000c9c <__udivmoddi4+0x2c8>
 8000bc8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bcc:	eb64 0403 	sbc.w	r4, r4, r3
 8000bd0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bd4:	40fd      	lsrs	r5, r7
 8000bd6:	40fc      	lsrs	r4, r7
 8000bd8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bdc:	e9c6 5400 	strd	r5, r4, [r6]
 8000be0:	2700      	movs	r7, #0
 8000be2:	e747      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000be4:	f1c2 0320 	rsb	r3, r2, #32
 8000be8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bec:	4095      	lsls	r5, r2
 8000bee:	fa01 f002 	lsl.w	r0, r1, r2
 8000bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	4338      	orrs	r0, r7
 8000bfc:	0c01      	lsrs	r1, r0, #16
 8000bfe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c02:	fa1f f885 	uxth.w	r8, r5
 8000c06:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c0e:	fb07 f308 	mul.w	r3, r7, r8
 8000c12:	428b      	cmp	r3, r1
 8000c14:	fa04 f402 	lsl.w	r4, r4, r2
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x256>
 8000c1a:	1869      	adds	r1, r5, r1
 8000c1c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c20:	d22f      	bcs.n	8000c82 <__udivmoddi4+0x2ae>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d92d      	bls.n	8000c82 <__udivmoddi4+0x2ae>
 8000c26:	3f02      	subs	r7, #2
 8000c28:	4429      	add	r1, r5
 8000c2a:	1acb      	subs	r3, r1, r3
 8000c2c:	b281      	uxth	r1, r0
 8000c2e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c32:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3a:	fb00 f308 	mul.w	r3, r0, r8
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x27e>
 8000c42:	1869      	adds	r1, r5, r1
 8000c44:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c48:	d217      	bcs.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d915      	bls.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4e:	3802      	subs	r0, #2
 8000c50:	4429      	add	r1, r5
 8000c52:	1ac9      	subs	r1, r1, r3
 8000c54:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c58:	e73b      	b.n	8000ad2 <__udivmoddi4+0xfe>
 8000c5a:	4637      	mov	r7, r6
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	e709      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c60:	4607      	mov	r7, r0
 8000c62:	e6e7      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c64:	4618      	mov	r0, r3
 8000c66:	e6fb      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c68:	4541      	cmp	r1, r8
 8000c6a:	d2ab      	bcs.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c6c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c70:	eb69 020e 	sbc.w	r2, r9, lr
 8000c74:	3801      	subs	r0, #1
 8000c76:	4613      	mov	r3, r2
 8000c78:	e7a4      	b.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c7a:	4660      	mov	r0, ip
 8000c7c:	e7e9      	b.n	8000c52 <__udivmoddi4+0x27e>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	e795      	b.n	8000bae <__udivmoddi4+0x1da>
 8000c82:	4667      	mov	r7, ip
 8000c84:	e7d1      	b.n	8000c2a <__udivmoddi4+0x256>
 8000c86:	4681      	mov	r9, r0
 8000c88:	e77c      	b.n	8000b84 <__udivmoddi4+0x1b0>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	442c      	add	r4, r5
 8000c8e:	e747      	b.n	8000b20 <__udivmoddi4+0x14c>
 8000c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c94:	442b      	add	r3, r5
 8000c96:	e72f      	b.n	8000af8 <__udivmoddi4+0x124>
 8000c98:	4638      	mov	r0, r7
 8000c9a:	e708      	b.n	8000aae <__udivmoddi4+0xda>
 8000c9c:	4637      	mov	r7, r6
 8000c9e:	e6e9      	b.n	8000a74 <__udivmoddi4+0xa0>

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void init() {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
	// Initialize
	LCD_SCAN_DIR Lcd_ScanDir = SCAN_DIR_DFT;
 8000caa:	2300      	movs	r3, #0
 8000cac:	71fb      	strb	r3, [r7, #7]
	LCD_Init( Lcd_ScanDir );
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f002 fddd 	bl	8003870 <LCD_Init>

	// Run LCD test
	LCD_Show();
 8000cb6:	f003 fba5 	bl	8004404 <LCD_Show>
	Driver_Delay_ms(1000);
 8000cba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cbe:	f003 fea1 	bl	8004a04 <Driver_Delay_ms>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd2:	f000 fc05 	bl	80014e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd6:	f000 f897 	bl	8000e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cda:	f000 f963 	bl	8000fa4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cde:	f000 f92b 	bl	8000f38 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000ce2:	f000 f8fb 	bl	8000edc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	Dev->I2cHandle = &hi2c1;
 8000ce6:	4b43      	ldr	r3, [pc, #268]	; (8000df4 <main+0x128>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a43      	ldr	r2, [pc, #268]	; (8000df8 <main+0x12c>)
 8000cec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 8000cf0:	4b40      	ldr	r3, [pc, #256]	; (8000df4 <main+0x128>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2252      	movs	r2, #82	; 0x52
 8000cf6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET); // Disable XSHUT
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d00:	483e      	ldr	r0, [pc, #248]	; (8000dfc <main+0x130>)
 8000d02:	f000 ff5d 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000d06:	2014      	movs	r0, #20
 8000d08:	f000 fc5c 	bl	80015c4 <HAL_Delay>
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET); // Enable XSHUT
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d12:	483a      	ldr	r0, [pc, #232]	; (8000dfc <main+0x130>)
 8000d14:	f000 ff54 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000d18:	2014      	movs	r0, #20
 8000d1a:	f000 fc53 	bl	80015c4 <HAL_Delay>

	//
	// VL53L0X init for Single Measurement
	//
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000d1e:	2007      	movs	r0, #7
 8000d20:	f000 fd99 	bl	8001856 <HAL_NVIC_DisableIRQ>

	VL53L0X_WaitDeviceBooted( Dev );
 8000d24:	4b33      	ldr	r3, [pc, #204]	; (8000df4 <main+0x128>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f004 f96f 	bl	800500c <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 8000d2e:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <main+0x128>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f003 fe84 	bl	8004a40 <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 8000d38:	4b2e      	ldr	r3, [pc, #184]	; (8000df4 <main+0x128>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f003 ffe3 	bl	8004d08 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000d42:	4b2c      	ldr	r3, [pc, #176]	; (8000df4 <main+0x128>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	1d7a      	adds	r2, r7, #5
 8000d48:	1db9      	adds	r1, r7, #6
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f004 fe9a 	bl	8005a84 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000d50:	4b28      	ldr	r3, [pc, #160]	; (8000df4 <main+0x128>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	1dfa      	adds	r2, r7, #7
 8000d56:	f107 0108 	add.w	r1, r7, #8
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f005 fb20 	bl	80063a0 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000d60:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <main+0x128>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f004 f9ee 	bl	8005148 <VL53L0X_SetDeviceMode>

	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d6c:	2007      	movs	r0, #7
 8000d6e:	f000 fd64 	bl	800183a <HAL_NVIC_EnableIRQ>

	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <main+0x128>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2201      	movs	r2, #1
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f004 fc7c 	bl	8005678 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8000d80:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <main+0x128>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2201      	movs	r2, #1
 8000d86:	2101      	movs	r1, #1
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f004 fc75 	bl	8005678 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000d8e:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <main+0x128>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f641 1299 	movw	r2, #6553	; 0x1999
 8000d96:	2101      	movs	r1, #1
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 fd1d 	bl	80057d8 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <main+0x128>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f004 fd15 	bl	80057d8 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <main+0x128>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8000db6:	4618      	mov	r0, r3
 8000db8:	f004 fa40 	bl	800523c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <main+0x128>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2212      	movs	r2, #18
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f004 fa5f 	bl	8005288 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <main+0x128>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	220e      	movs	r2, #14
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f004 fa58 	bl	8005288 <VL53L0X_SetVcselPulsePeriod>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  init();
 8000dd8:	f7ff ff64 	bl	8000ca4 <init>
   while (1)
   {

	if(TofDataRead == 1)
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <main+0x134>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d1fa      	bne.n	8000ddc <main+0x110>
	{
		uint16_t milimeters = RangingData.RangeMilliMeter;
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <main+0x138>)
 8000de8:	891b      	ldrh	r3, [r3, #8]
 8000dea:	81fb      	strh	r3, [r7, #14]
		TofDataRead = 0;
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <main+0x134>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
	if(TofDataRead == 1)
 8000df2:	e7f3      	b.n	8000ddc <main+0x110>
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000384 	.word	0x20000384
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	200003d8 	.word	0x200003d8
 8000e04:	20000368 	.word	0x20000368

08000e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b094      	sub	sp, #80	; 0x50
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 0320 	add.w	r3, r7, #32
 8000e12:	2230      	movs	r2, #48	; 0x30
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f008 fe57 	bl	8009aca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <SystemClock_Config+0xcc>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	4a27      	ldr	r2, [pc, #156]	; (8000ed4 <SystemClock_Config+0xcc>)
 8000e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3c:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <SystemClock_Config+0xcc>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e48:	2300      	movs	r3, #0
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <SystemClock_Config+0xd0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <SystemClock_Config+0xd0>)
 8000e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <SystemClock_Config+0xd0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e64:	2301      	movs	r3, #1
 8000e66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e7c:	23a8      	movs	r3, #168	; 0xa8
 8000e7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e84:	2304      	movs	r3, #4
 8000e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e88:	f107 0320 	add.w	r3, r7, #32
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 fe51 	bl	8002b34 <HAL_RCC_OscConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e98:	f000 f954 	bl	8001144 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ea8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	2105      	movs	r1, #5
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f002 f8aa 	bl	8003014 <HAL_RCC_ClockConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ec6:	f000 f93d 	bl	8001144 <Error_Handler>
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3750      	adds	r7, #80	; 0x50
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40007000 	.word	0x40007000

08000edc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000ee2:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <MX_I2C1_Init+0x54>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000ee8:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <MX_I2C1_Init+0x58>)
 8000eea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000efa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000efe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f1a:	f000 fe83 	bl	8001c24 <HAL_I2C_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f24:	f000 f90e 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000384 	.word	0x20000384
 8000f30:	40005400 	.word	0x40005400
 8000f34:	000186a0 	.word	0x000186a0

08000f38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f3e:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <MX_SPI1_Init+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f84:	220a      	movs	r2, #10
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f8a:	f002 fa21 	bl	80033d0 <HAL_SPI_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f94:	f000 f8d6 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000056c 	.word	0x2000056c
 8000fa0:	40013000 	.word	0x40013000

08000fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b4a      	ldr	r3, [pc, #296]	; (80010e8 <MX_GPIO_Init+0x144>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a49      	ldr	r2, [pc, #292]	; (80010e8 <MX_GPIO_Init+0x144>)
 8000fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b47      	ldr	r3, [pc, #284]	; (80010e8 <MX_GPIO_Init+0x144>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <MX_GPIO_Init+0x144>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a42      	ldr	r2, [pc, #264]	; (80010e8 <MX_GPIO_Init+0x144>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b40      	ldr	r3, [pc, #256]	; (80010e8 <MX_GPIO_Init+0x144>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	4b3c      	ldr	r3, [pc, #240]	; (80010e8 <MX_GPIO_Init+0x144>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a3b      	ldr	r2, [pc, #236]	; (80010e8 <MX_GPIO_Init+0x144>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <MX_GPIO_Init+0x144>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <MX_GPIO_Init+0x144>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a34      	ldr	r2, [pc, #208]	; (80010e8 <MX_GPIO_Init+0x144>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <MX_GPIO_Init+0x144>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	482f      	ldr	r0, [pc, #188]	; (80010ec <MX_GPIO_Init+0x148>)
 8001030:	f000 fdc6 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|TOF_XSHUT_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800103a:	482d      	ldr	r0, [pc, #180]	; (80010f0 <MX_GPIO_Init+0x14c>)
 800103c:	f000 fdc0 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2140      	movs	r1, #64	; 0x40
 8001044:	482b      	ldr	r0, [pc, #172]	; (80010f4 <MX_GPIO_Init+0x150>)
 8001046:	f000 fdbb 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800104a:	2301      	movs	r3, #1
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800104e:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <MX_GPIO_Init+0x154>)
 8001050:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4824      	ldr	r0, [pc, #144]	; (80010f0 <MX_GPIO_Init+0x14c>)
 800105e:	f000 fc15 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_EXTI_Pin */
  GPIO_InitStruct.Pin = TOF_EXTI_Pin;
 8001062:	2302      	movs	r3, #2
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <MX_GPIO_Init+0x158>)
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOF_EXTI_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	481e      	ldr	r0, [pc, #120]	; (80010f0 <MX_GPIO_Init+0x14c>)
 8001076:	f000 fc09 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4816      	ldr	r0, [pc, #88]	; (80010ec <MX_GPIO_Init+0x148>)
 8001092:	f000 fbfb 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 TOF_XSHUT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|TOF_XSHUT_Pin;
 8001096:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	4810      	ldr	r0, [pc, #64]	; (80010f0 <MX_GPIO_Init+0x14c>)
 80010b0:	f000 fbec 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010b4:	2340      	movs	r3, #64	; 0x40
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	480a      	ldr	r0, [pc, #40]	; (80010f4 <MX_GPIO_Init+0x150>)
 80010cc:	f000 fbde 	bl	800188c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2100      	movs	r1, #0
 80010d4:	2006      	movs	r0, #6
 80010d6:	f000 fb94 	bl	8001802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010da:	2006      	movs	r0, #6
 80010dc:	f000 fbad 	bl	800183a <HAL_NVIC_EnableIRQ>

}
 80010e0:	bf00      	nop
 80010e2:	3728      	adds	r7, #40	; 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020000 	.word	0x40020000
 80010f4:	40020400 	.word	0x40020400
 80010f8:	10210000 	.word	0x10210000
 80010fc:	10110000 	.word	0x10110000

08001100 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == TOF_EXTI_Pin)
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d10e      	bne.n	800112e <HAL_GPIO_EXTI_Callback+0x2e>
		{
			VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_GPIO_EXTI_Callback+0x38>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4909      	ldr	r1, [pc, #36]	; (800113c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001116:	4618      	mov	r0, r3
 8001118:	f004 fe30 	bl	8005d7c <VL53L0X_GetRangingMeasurementData>
			VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_GPIO_EXTI_Callback+0x38>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2104      	movs	r1, #4
 8001122:	4618      	mov	r0, r3
 8001124:	f005 f8da 	bl	80062dc <VL53L0X_ClearInterruptMask>
			TofDataRead = 1;
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_GPIO_EXTI_Callback+0x40>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
		}
	}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000000 	.word	0x20000000
 800113c:	20000368 	.word	0x20000368
 8001140:	200003d8 	.word	0x200003d8

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <HAL_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <HAL_MspInit+0x4c>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_MspInit+0x4c>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_MspInit+0x4c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <HAL_MspInit+0x4c>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_MspInit+0x4c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800

080011a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a19      	ldr	r2, [pc, #100]	; (8001228 <HAL_I2C_MspInit+0x84>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d12c      	bne.n	8001220 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_I2C_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_I2C_MspInit+0x88>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_I2C_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e8:	2312      	movs	r3, #18
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011f4:	2304      	movs	r3, #4
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	480c      	ldr	r0, [pc, #48]	; (8001230 <HAL_I2C_MspInit+0x8c>)
 8001200:	f000 fb44 	bl	800188c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_I2C_MspInit+0x88>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	4a07      	ldr	r2, [pc, #28]	; (800122c <HAL_I2C_MspInit+0x88>)
 800120e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001212:	6413      	str	r3, [r2, #64]	; 0x40
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_I2C_MspInit+0x88>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	; 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40005400 	.word	0x40005400
 800122c:	40023800 	.word	0x40023800
 8001230:	40020400 	.word	0x40020400

08001234 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <HAL_SPI_MspInit+0x84>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d12b      	bne.n	80012ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_SPI_MspInit+0x88>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a17      	ldr	r2, [pc, #92]	; (80012bc <HAL_SPI_MspInit+0x88>)
 8001260:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_SPI_MspInit+0x88>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_SPI_MspInit+0x88>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a10      	ldr	r2, [pc, #64]	; (80012bc <HAL_SPI_MspInit+0x88>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_SPI_MspInit+0x88>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800128e:	23a0      	movs	r3, #160	; 0xa0
 8001290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800129e:	2305      	movs	r3, #5
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <HAL_SPI_MspInit+0x8c>)
 80012aa:	f000 faef 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012ae:	bf00      	nop
 80012b0:	3728      	adds	r7, #40	; 0x28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40013000 	.word	0x40013000
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <MemManage_Handler+0x4>

080012de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <BusFault_Handler+0x4>

080012e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <UsageFault_Handler+0x4>

080012ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001318:	f000 f934 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001324:	2001      	movs	r0, #1
 8001326:	f000 fc65 	bl	8001bf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}

0800132e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	e00a      	b.n	8001356 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001340:	f3af 8000 	nop.w
 8001344:	4601      	mov	r1, r0
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	60ba      	str	r2, [r7, #8]
 800134c:	b2ca      	uxtb	r2, r1
 800134e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	429a      	cmp	r2, r3
 800135c:	dbf0      	blt.n	8001340 <_read+0x12>
	}

return len;
 800135e:	687b      	ldr	r3, [r7, #4]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	e009      	b.n	800138e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	60ba      	str	r2, [r7, #8]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3301      	adds	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	dbf1      	blt.n	800137a <_write+0x12>
	}
	return len;
 8001396:	687b      	ldr	r3, [r7, #4]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_close>:

int _close(int file)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	return -1;
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013c8:	605a      	str	r2, [r3, #4]
	return 0;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <_isatty>:

int _isatty(int file)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	return 1;
 80013e0:	2301      	movs	r3, #1
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b085      	sub	sp, #20
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	60f8      	str	r0, [r7, #12]
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
	return 0;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <_sbrk+0x50>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d102      	bne.n	800141e <_sbrk+0x16>
		heap_end = &end;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <_sbrk+0x50>)
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <_sbrk+0x54>)
 800141c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <_sbrk+0x50>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <_sbrk+0x50>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	466a      	mov	r2, sp
 800142e:	4293      	cmp	r3, r2
 8001430:	d907      	bls.n	8001442 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001432:	f008 fb15 	bl	8009a60 <__errno>
 8001436:	4602      	mov	r2, r0
 8001438:	230c      	movs	r3, #12
 800143a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	e006      	b.n	8001450 <_sbrk+0x48>
	}

	heap_end += incr;
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <_sbrk+0x50>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	4a03      	ldr	r2, [pc, #12]	; (8001458 <_sbrk+0x50>)
 800144c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800144e:	68fb      	ldr	r3, [r7, #12]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	2000035c 	.word	0x2000035c
 800145c:	20000618 	.word	0x20000618

08001460 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <SystemInit+0x28>)
 8001466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <SystemInit+0x28>)
 800146c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <SystemInit+0x28>)
 8001476:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800147a:	609a      	str	r2, [r3, #8]
#endif
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800148c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001490:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001492:	e003      	b.n	800149c <LoopCopyDataInit>

08001494 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001496:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001498:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800149a:	3104      	adds	r1, #4

0800149c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800149c:	480b      	ldr	r0, [pc, #44]	; (80014cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014a4:	d3f6      	bcc.n	8001494 <CopyDataInit>
  ldr  r2, =_sbss
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014a8:	e002      	b.n	80014b0 <LoopFillZerobss>

080014aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014ac:	f842 3b04 	str.w	r3, [r2], #4

080014b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014b4:	d3f9      	bcc.n	80014aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014b6:	f7ff ffd3 	bl	8001460 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ba:	f008 fad7 	bl	8009a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014be:	f7ff fc05 	bl	8000ccc <main>
  bx  lr    
 80014c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014c8:	0800ac98 	.word	0x0800ac98
  ldr  r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014d0:	20000340 	.word	0x20000340
  ldr  r2, =_sbss
 80014d4:	20000340 	.word	0x20000340
  ldr  r3, = _ebss
 80014d8:	20000618 	.word	0x20000618

080014dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC_IRQHandler>
	...

080014e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <HAL_Init+0x40>)
 80014ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <HAL_Init+0x40>)
 80014f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_Init+0x40>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_Init+0x40>)
 8001502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 f96f 	bl	80017ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150e:	2000      	movs	r0, #0
 8001510:	f000 f808 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001514:	f7ff fe1e 	bl	8001154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023c00 	.word	0x40023c00

08001524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_InitTick+0x54>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x58>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	fbb3 f3f1 	udiv	r3, r3, r1
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f995 	bl	8001872 <HAL_SYSTICK_Config>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e00e      	b.n	8001570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b0f      	cmp	r3, #15
 8001556:	d80a      	bhi.n	800156e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001558:	2200      	movs	r2, #0
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f000 f94f 	bl	8001802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_InitTick+0x5c>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000004 	.word	0x20000004
 800157c:	2000000c 	.word	0x2000000c
 8001580:	20000008 	.word	0x20000008

08001584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x20>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x24>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_IncTick+0x24>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	2000000c 	.word	0x2000000c
 80015a8:	200005c4 	.word	0x200005c4

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	200005c4 	.word	0x200005c4

080015c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff ffee 	bl	80015ac <HAL_GetTick>
 80015d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015dc:	d005      	beq.n	80015ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_Delay+0x40>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ea:	bf00      	nop
 80015ec:	f7ff ffde 	bl	80015ac <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d8f7      	bhi.n	80015ec <HAL_Delay+0x28>
  {
  }
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2000000c 	.word	0x2000000c

08001608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001624:	4013      	ands	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <__NVIC_GetPriorityGrouping+0x18>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	f003 0307 	and.w	r3, r3, #7
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	2b00      	cmp	r3, #0
 800167c:	db0b      	blt.n	8001696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f003 021f 	and.w	r2, r3, #31
 8001684:	4907      	ldr	r1, [pc, #28]	; (80016a4 <__NVIC_EnableIRQ+0x38>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	095b      	lsrs	r3, r3, #5
 800168c:	2001      	movs	r0, #1
 800168e:	fa00 f202 	lsl.w	r2, r0, r2
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100

080016a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	db10      	blt.n	80016dc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	f003 021f 	and.w	r2, r3, #31
 80016c0:	4909      	ldr	r1, [pc, #36]	; (80016e8 <__NVIC_DisableIRQ+0x40>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	2001      	movs	r0, #1
 80016ca:	fa00 f202 	lsl.w	r2, r0, r2
 80016ce:	3320      	adds	r3, #32
 80016d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80016d8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100

080016ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	db0a      	blt.n	8001716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	b2da      	uxtb	r2, r3
 8001704:	490c      	ldr	r1, [pc, #48]	; (8001738 <__NVIC_SetPriority+0x4c>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	0112      	lsls	r2, r2, #4
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	440b      	add	r3, r1
 8001710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001714:	e00a      	b.n	800172c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4908      	ldr	r1, [pc, #32]	; (800173c <__NVIC_SetPriority+0x50>)
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	3b04      	subs	r3, #4
 8001724:	0112      	lsls	r2, r2, #4
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	440b      	add	r3, r1
 800172a:	761a      	strb	r2, [r3, #24]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000e100 	.word	0xe000e100
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f1c3 0307 	rsb	r3, r3, #7
 800175a:	2b04      	cmp	r3, #4
 800175c:	bf28      	it	cs
 800175e:	2304      	movcs	r3, #4
 8001760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3304      	adds	r3, #4
 8001766:	2b06      	cmp	r3, #6
 8001768:	d902      	bls.n	8001770 <NVIC_EncodePriority+0x30>
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3b03      	subs	r3, #3
 800176e:	e000      	b.n	8001772 <NVIC_EncodePriority+0x32>
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	f04f 32ff 	mov.w	r2, #4294967295
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43da      	mvns	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	401a      	ands	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001788:	f04f 31ff 	mov.w	r1, #4294967295
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	43d9      	mvns	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	4313      	orrs	r3, r2
         );
}
 800179a:	4618      	mov	r0, r3
 800179c:	3724      	adds	r7, #36	; 0x24
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b8:	d301      	bcc.n	80017be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00f      	b.n	80017de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <SysTick_Config+0x40>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c6:	210f      	movs	r1, #15
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f7ff ff8e 	bl	80016ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <SysTick_Config+0x40>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <SysTick_Config+0x40>)
 80017d8:	2207      	movs	r2, #7
 80017da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	e000e010 	.word	0xe000e010

080017ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff07 	bl	8001608 <__NVIC_SetPriorityGrouping>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001814:	f7ff ff1c 	bl	8001650 <__NVIC_GetPriorityGrouping>
 8001818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	6978      	ldr	r0, [r7, #20]
 8001820:	f7ff ff8e 	bl	8001740 <NVIC_EncodePriority>
 8001824:	4602      	mov	r2, r0
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff5d 	bl	80016ec <__NVIC_SetPriority>
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff0f 	bl	800166c <__NVIC_EnableIRQ>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff1f 	bl	80016a8 <__NVIC_DisableIRQ>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ff94 	bl	80017a8 <SysTick_Config>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	e16b      	b.n	8001b80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a8:	2201      	movs	r2, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 815a 	bne.w	8001b7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d00b      	beq.n	80018e6 <HAL_GPIO_Init+0x5a>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d007      	beq.n	80018e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018da:	2b11      	cmp	r3, #17
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b12      	cmp	r3, #18
 80018e4:	d130      	bne.n	8001948 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	f003 0201 	and.w	r2, r3, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0xfc>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b12      	cmp	r3, #18
 8001986:	d123      	bne.n	80019d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	08da      	lsrs	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	08da      	lsrs	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3208      	adds	r2, #8
 80019ca:	69b9      	ldr	r1, [r7, #24]
 80019cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0203 	and.w	r2, r3, #3
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80b4 	beq.w	8001b7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b5f      	ldr	r3, [pc, #380]	; (8001b94 <HAL_GPIO_Init+0x308>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a5e      	ldr	r2, [pc, #376]	; (8001b94 <HAL_GPIO_Init+0x308>)
 8001a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b5c      	ldr	r3, [pc, #368]	; (8001b94 <HAL_GPIO_Init+0x308>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a2e:	4a5a      	ldr	r2, [pc, #360]	; (8001b98 <HAL_GPIO_Init+0x30c>)
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	3302      	adds	r3, #2
 8001a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a51      	ldr	r2, [pc, #324]	; (8001b9c <HAL_GPIO_Init+0x310>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d02b      	beq.n	8001ab2 <HAL_GPIO_Init+0x226>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a50      	ldr	r2, [pc, #320]	; (8001ba0 <HAL_GPIO_Init+0x314>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d025      	beq.n	8001aae <HAL_GPIO_Init+0x222>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4f      	ldr	r2, [pc, #316]	; (8001ba4 <HAL_GPIO_Init+0x318>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01f      	beq.n	8001aaa <HAL_GPIO_Init+0x21e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4e      	ldr	r2, [pc, #312]	; (8001ba8 <HAL_GPIO_Init+0x31c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d019      	beq.n	8001aa6 <HAL_GPIO_Init+0x21a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4d      	ldr	r2, [pc, #308]	; (8001bac <HAL_GPIO_Init+0x320>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0x216>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4c      	ldr	r2, [pc, #304]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00d      	beq.n	8001a9e <HAL_GPIO_Init+0x212>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4b      	ldr	r2, [pc, #300]	; (8001bb4 <HAL_GPIO_Init+0x328>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d007      	beq.n	8001a9a <HAL_GPIO_Init+0x20e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4a      	ldr	r2, [pc, #296]	; (8001bb8 <HAL_GPIO_Init+0x32c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_GPIO_Init+0x20a>
 8001a92:	2307      	movs	r3, #7
 8001a94:	e00e      	b.n	8001ab4 <HAL_GPIO_Init+0x228>
 8001a96:	2308      	movs	r3, #8
 8001a98:	e00c      	b.n	8001ab4 <HAL_GPIO_Init+0x228>
 8001a9a:	2306      	movs	r3, #6
 8001a9c:	e00a      	b.n	8001ab4 <HAL_GPIO_Init+0x228>
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	e008      	b.n	8001ab4 <HAL_GPIO_Init+0x228>
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x228>
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e004      	b.n	8001ab4 <HAL_GPIO_Init+0x228>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e002      	b.n	8001ab4 <HAL_GPIO_Init+0x228>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_GPIO_Init+0x228>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	69fa      	ldr	r2, [r7, #28]
 8001ab6:	f002 0203 	and.w	r2, r2, #3
 8001aba:	0092      	lsls	r2, r2, #2
 8001abc:	4093      	lsls	r3, r2
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ac4:	4934      	ldr	r1, [pc, #208]	; (8001b98 <HAL_GPIO_Init+0x30c>)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3302      	adds	r3, #2
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ad2:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001af6:	4a31      	ldr	r2, [pc, #196]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001afc:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b20:	4a26      	ldr	r2, [pc, #152]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b26:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b4a:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b74:	4a11      	ldr	r2, [pc, #68]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	61fb      	str	r3, [r7, #28]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	2b0f      	cmp	r3, #15
 8001b84:	f67f ae90 	bls.w	80018a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b88:	bf00      	nop
 8001b8a:	3724      	adds	r7, #36	; 0x24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40013800 	.word	0x40013800
 8001b9c:	40020000 	.word	0x40020000
 8001ba0:	40020400 	.word	0x40020400
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	40020c00 	.word	0x40020c00
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40021400 	.word	0x40021400
 8001bb4:	40021800 	.word	0x40021800
 8001bb8:	40021c00 	.word	0x40021c00
 8001bbc:	40013c00 	.word	0x40013c00

08001bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bdc:	e003      	b.n	8001be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	041a      	lsls	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	619a      	str	r2, [r3, #24]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d006      	beq.n	8001c18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fa74 	bl	8001100 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40013c00 	.word	0x40013c00

08001c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e11f      	b.n	8001e76 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff faaa 	bl	80011a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2224      	movs	r2, #36	; 0x24
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c88:	f001 fb8e 	bl	80033a8 <HAL_RCC_GetPCLK1Freq>
 8001c8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	4a7b      	ldr	r2, [pc, #492]	; (8001e80 <HAL_I2C_Init+0x25c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d807      	bhi.n	8001ca8 <HAL_I2C_Init+0x84>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4a7a      	ldr	r2, [pc, #488]	; (8001e84 <HAL_I2C_Init+0x260>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	bf94      	ite	ls
 8001ca0:	2301      	movls	r3, #1
 8001ca2:	2300      	movhi	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	e006      	b.n	8001cb6 <HAL_I2C_Init+0x92>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4a77      	ldr	r2, [pc, #476]	; (8001e88 <HAL_I2C_Init+0x264>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	bf94      	ite	ls
 8001cb0:	2301      	movls	r3, #1
 8001cb2:	2300      	movhi	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e0db      	b.n	8001e76 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4a72      	ldr	r2, [pc, #456]	; (8001e8c <HAL_I2C_Init+0x268>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	0c9b      	lsrs	r3, r3, #18
 8001cc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	4a64      	ldr	r2, [pc, #400]	; (8001e80 <HAL_I2C_Init+0x25c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d802      	bhi.n	8001cf8 <HAL_I2C_Init+0xd4>
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	e009      	b.n	8001d0c <HAL_I2C_Init+0xe8>
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cfe:	fb02 f303 	mul.w	r3, r2, r3
 8001d02:	4a63      	ldr	r2, [pc, #396]	; (8001e90 <HAL_I2C_Init+0x26c>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	099b      	lsrs	r3, r3, #6
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	430b      	orrs	r3, r1
 8001d12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4956      	ldr	r1, [pc, #344]	; (8001e80 <HAL_I2C_Init+0x25c>)
 8001d28:	428b      	cmp	r3, r1
 8001d2a:	d80d      	bhi.n	8001d48 <HAL_I2C_Init+0x124>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1e59      	subs	r1, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	bf38      	it	cc
 8001d44:	2304      	movcc	r3, #4
 8001d46:	e04f      	b.n	8001de8 <HAL_I2C_Init+0x1c4>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d111      	bne.n	8001d74 <HAL_I2C_Init+0x150>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1e58      	subs	r0, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6859      	ldr	r1, [r3, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	440b      	add	r3, r1
 8001d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d62:	3301      	adds	r3, #1
 8001d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf0c      	ite	eq
 8001d6c:	2301      	moveq	r3, #1
 8001d6e:	2300      	movne	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	e012      	b.n	8001d9a <HAL_I2C_Init+0x176>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1e58      	subs	r0, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	0099      	lsls	r1, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bf0c      	ite	eq
 8001d94:	2301      	moveq	r3, #1
 8001d96:	2300      	movne	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_I2C_Init+0x17e>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e022      	b.n	8001de8 <HAL_I2C_Init+0x1c4>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10e      	bne.n	8001dc8 <HAL_I2C_Init+0x1a4>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1e58      	subs	r0, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6859      	ldr	r1, [r3, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	440b      	add	r3, r1
 8001db8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dc6:	e00f      	b.n	8001de8 <HAL_I2C_Init+0x1c4>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1e58      	subs	r0, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	0099      	lsls	r1, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dde:	3301      	adds	r3, #1
 8001de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	6809      	ldr	r1, [r1, #0]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69da      	ldr	r2, [r3, #28]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6911      	ldr	r1, [r2, #16]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68d2      	ldr	r2, [r2, #12]
 8001e22:	4311      	orrs	r1, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2220      	movs	r2, #32
 8001e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	000186a0 	.word	0x000186a0
 8001e84:	001e847f 	.word	0x001e847f
 8001e88:	003d08ff 	.word	0x003d08ff
 8001e8c:	431bde83 	.word	0x431bde83
 8001e90:	10624dd3 	.word	0x10624dd3

08001e94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af02      	add	r7, sp, #8
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	817b      	strh	r3, [r7, #10]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7ff fb80 	bl	80015ac <HAL_GetTick>
 8001eac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b20      	cmp	r3, #32
 8001eb8:	f040 80e0 	bne.w	800207c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2319      	movs	r3, #25
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	4970      	ldr	r1, [pc, #448]	; (8002088 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 fc56 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e0d3      	b.n	800207e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_I2C_Master_Transmit+0x50>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e0cc      	b.n	800207e <HAL_I2C_Master_Transmit+0x1ea>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d007      	beq.n	8001f0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 0201 	orr.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2221      	movs	r2, #33	; 0x21
 8001f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2210      	movs	r2, #16
 8001f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	893a      	ldrh	r2, [r7, #8]
 8001f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4a50      	ldr	r2, [pc, #320]	; (800208c <HAL_I2C_Master_Transmit+0x1f8>)
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f4c:	8979      	ldrh	r1, [r7, #10]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	6a3a      	ldr	r2, [r7, #32]
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 fac2 	bl	80024dc <I2C_MasterRequestWrite>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e08d      	b.n	800207e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f78:	e066      	b.n	8002048 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	6a39      	ldr	r1, [r7, #32]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 fcd0 	bl	8002924 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00d      	beq.n	8001fa6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d107      	bne.n	8001fa2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e06b      	b.n	800207e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	781a      	ldrb	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d11b      	bne.n	800201c <HAL_I2C_Master_Transmit+0x188>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d017      	beq.n	800201c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	781a      	ldrb	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	6a39      	ldr	r1, [r7, #32]
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fcc0 	bl	80029a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00d      	beq.n	8002048 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	2b04      	cmp	r3, #4
 8002032:	d107      	bne.n	8002044 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002042:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e01a      	b.n	800207e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204c:	2b00      	cmp	r3, #0
 800204e:	d194      	bne.n	8001f7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	e000      	b.n	800207e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800207c:	2302      	movs	r3, #2
  }
}
 800207e:	4618      	mov	r0, r3
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	00100002 	.word	0x00100002
 800208c:	ffff0000 	.word	0xffff0000

08002090 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08c      	sub	sp, #48	; 0x30
 8002094:	af02      	add	r7, sp, #8
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	461a      	mov	r2, r3
 800209c:	460b      	mov	r3, r1
 800209e:	817b      	strh	r3, [r7, #10]
 80020a0:	4613      	mov	r3, r2
 80020a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff fa82 	bl	80015ac <HAL_GetTick>
 80020a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	f040 820b 	bne.w	80024ce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2319      	movs	r3, #25
 80020be:	2201      	movs	r2, #1
 80020c0:	497c      	ldr	r1, [pc, #496]	; (80022b4 <HAL_I2C_Master_Receive+0x224>)
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 fb58 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80020ce:	2302      	movs	r3, #2
 80020d0:	e1fe      	b.n	80024d0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_I2C_Master_Receive+0x50>
 80020dc:	2302      	movs	r3, #2
 80020de:	e1f7      	b.n	80024d0 <HAL_I2C_Master_Receive+0x440>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d007      	beq.n	8002106 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0201 	orr.w	r2, r2, #1
 8002104:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002114:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2222      	movs	r2, #34	; 0x22
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2210      	movs	r2, #16
 8002122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	893a      	ldrh	r2, [r7, #8]
 8002136:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4a5c      	ldr	r2, [pc, #368]	; (80022b8 <HAL_I2C_Master_Receive+0x228>)
 8002146:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002148:	8979      	ldrh	r1, [r7, #10]
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 fa46 	bl	80025e0 <I2C_MasterRequestRead>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e1b8      	b.n	80024d0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002162:	2b00      	cmp	r3, #0
 8002164:	d113      	bne.n	800218e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	623b      	str	r3, [r7, #32]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	623b      	str	r3, [r7, #32]
 800217a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e18c      	b.n	80024a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002192:	2b01      	cmp	r3, #1
 8002194:	d11b      	bne.n	80021ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e16c      	b.n	80024a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d11b      	bne.n	800220e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	e14c      	b.n	80024a8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800221c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002234:	e138      	b.n	80024a8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223a:	2b03      	cmp	r3, #3
 800223c:	f200 80f1 	bhi.w	8002422 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002244:	2b01      	cmp	r3, #1
 8002246:	d123      	bne.n	8002290 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 fbeb 	bl	8002a28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e139      	b.n	80024d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800228e:	e10b      	b.n	80024a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002294:	2b02      	cmp	r3, #2
 8002296:	d14e      	bne.n	8002336 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229e:	2200      	movs	r2, #0
 80022a0:	4906      	ldr	r1, [pc, #24]	; (80022bc <HAL_I2C_Master_Receive+0x22c>)
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 fa68 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d008      	beq.n	80022c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e10e      	b.n	80024d0 <HAL_I2C_Master_Receive+0x440>
 80022b2:	bf00      	nop
 80022b4:	00100002 	.word	0x00100002
 80022b8:	ffff0000 	.word	0xffff0000
 80022bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002334:	e0b8      	b.n	80024a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233c:	2200      	movs	r2, #0
 800233e:	4966      	ldr	r1, [pc, #408]	; (80024d8 <HAL_I2C_Master_Receive+0x448>)
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 fa19 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0bf      	b.n	80024d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002398:	2200      	movs	r2, #0
 800239a:	494f      	ldr	r1, [pc, #316]	; (80024d8 <HAL_I2C_Master_Receive+0x448>)
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 f9eb 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e091      	b.n	80024d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002420:	e042      	b.n	80024a8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002424:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 fafe 	bl	8002a28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e04c      	b.n	80024d0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b04      	cmp	r3, #4
 8002474:	d118      	bne.n	80024a8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f47f aec2 	bne.w	8002236 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e000      	b.n	80024d0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80024ce:	2302      	movs	r3, #2
  }
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3728      	adds	r7, #40	; 0x28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	00010004 	.word	0x00010004

080024dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	460b      	mov	r3, r1
 80024ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d006      	beq.n	8002506 <I2C_MasterRequestWrite+0x2a>
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d003      	beq.n	8002506 <I2C_MasterRequestWrite+0x2a>
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002504:	d108      	bne.n	8002518 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	e00b      	b.n	8002530 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	2b12      	cmp	r3, #18
 800251e:	d107      	bne.n	8002530 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800252e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 f91b 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00c      	beq.n	8002562 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e035      	b.n	80025ce <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800256a:	d108      	bne.n	800257e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800256c:	897b      	ldrh	r3, [r7, #10]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800257a:	611a      	str	r2, [r3, #16]
 800257c:	e01b      	b.n	80025b6 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800257e:	897b      	ldrh	r3, [r7, #10]
 8002580:	11db      	asrs	r3, r3, #7
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f003 0306 	and.w	r3, r3, #6
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f063 030f 	orn	r3, r3, #15
 800258e:	b2da      	uxtb	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	490f      	ldr	r1, [pc, #60]	; (80025d8 <I2C_MasterRequestWrite+0xfc>)
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f942 	bl	8002826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e010      	b.n	80025ce <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025ac:	897b      	ldrh	r3, [r7, #10]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	4908      	ldr	r1, [pc, #32]	; (80025dc <I2C_MasterRequestWrite+0x100>)
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f932 	bl	8002826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	00010008 	.word	0x00010008
 80025dc:	00010002 	.word	0x00010002

080025e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	607a      	str	r2, [r7, #4]
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	460b      	mov	r3, r1
 80025ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002604:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2b08      	cmp	r3, #8
 800260a:	d006      	beq.n	800261a <I2C_MasterRequestRead+0x3a>
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d003      	beq.n	800261a <I2C_MasterRequestRead+0x3a>
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002618:	d108      	bne.n	800262c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e00b      	b.n	8002644 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	2b11      	cmp	r3, #17
 8002632:	d107      	bne.n	8002644 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002642:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f891 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00c      	beq.n	8002676 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002670:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e078      	b.n	8002768 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800267e:	d108      	bne.n	8002692 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002680:	897b      	ldrh	r3, [r7, #10]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	b2da      	uxtb	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	611a      	str	r2, [r3, #16]
 8002690:	e05e      	b.n	8002750 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002692:	897b      	ldrh	r3, [r7, #10]
 8002694:	11db      	asrs	r3, r3, #7
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f003 0306 	and.w	r3, r3, #6
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f063 030f 	orn	r3, r3, #15
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	4930      	ldr	r1, [pc, #192]	; (8002770 <I2C_MasterRequestRead+0x190>)
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f8b8 	bl	8002826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e053      	b.n	8002768 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026c0:	897b      	ldrh	r3, [r7, #10]
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	4929      	ldr	r1, [pc, #164]	; (8002774 <I2C_MasterRequestRead+0x194>)
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f8a8 	bl	8002826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e043      	b.n	8002768 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e0:	2300      	movs	r3, #0
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002704:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f830 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00c      	beq.n	8002738 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002732:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e017      	b.n	8002768 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002738:	897b      	ldrh	r3, [r7, #10]
 800273a:	11db      	asrs	r3, r3, #7
 800273c:	b2db      	uxtb	r3, r3
 800273e:	f003 0306 	and.w	r3, r3, #6
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f063 030e 	orn	r3, r3, #14
 8002748:	b2da      	uxtb	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	4907      	ldr	r1, [pc, #28]	; (8002774 <I2C_MasterRequestRead+0x194>)
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f865 	bl	8002826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	00010008 	.word	0x00010008
 8002774:	00010002 	.word	0x00010002

08002778 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	4613      	mov	r3, r2
 8002786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002788:	e025      	b.n	80027d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d021      	beq.n	80027d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002792:	f7fe ff0b 	bl	80015ac <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d302      	bcc.n	80027a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d116      	bne.n	80027d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f043 0220 	orr.w	r2, r3, #32
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e023      	b.n	800281e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	0c1b      	lsrs	r3, r3, #16
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d10d      	bne.n	80027fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	43da      	mvns	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4013      	ands	r3, r2
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	bf0c      	ite	eq
 80027f2:	2301      	moveq	r3, #1
 80027f4:	2300      	movne	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	e00c      	b.n	8002816 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	43da      	mvns	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4013      	ands	r3, r2
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	bf0c      	ite	eq
 800280e:	2301      	moveq	r3, #1
 8002810:	2300      	movne	r3, #0
 8002812:	b2db      	uxtb	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	429a      	cmp	r2, r3
 800281a:	d0b6      	beq.n	800278a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b084      	sub	sp, #16
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
 8002832:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002834:	e051      	b.n	80028da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002844:	d123      	bne.n	800288e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002854:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800285e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f043 0204 	orr.w	r2, r3, #4
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e046      	b.n	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002894:	d021      	beq.n	80028da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002896:	f7fe fe89 	bl	80015ac <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d302      	bcc.n	80028ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d116      	bne.n	80028da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f043 0220 	orr.w	r2, r3, #32
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e020      	b.n	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	0c1b      	lsrs	r3, r3, #16
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d10c      	bne.n	80028fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	43da      	mvns	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4013      	ands	r3, r2
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	bf14      	ite	ne
 80028f6:	2301      	movne	r3, #1
 80028f8:	2300      	moveq	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	e00b      	b.n	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	43da      	mvns	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	4013      	ands	r3, r2
 800290a:	b29b      	uxth	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf14      	ite	ne
 8002910:	2301      	movne	r3, #1
 8002912:	2300      	moveq	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d18d      	bne.n	8002836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002930:	e02d      	b.n	800298e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f8ce 	bl	8002ad4 <I2C_IsAcknowledgeFailed>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e02d      	b.n	800299e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d021      	beq.n	800298e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294a:	f7fe fe2f 	bl	80015ac <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d116      	bne.n	800298e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f043 0220 	orr.w	r2, r3, #32
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e007      	b.n	800299e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002998:	2b80      	cmp	r3, #128	; 0x80
 800299a:	d1ca      	bne.n	8002932 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029b2:	e02d      	b.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f88d 	bl	8002ad4 <I2C_IsAcknowledgeFailed>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e02d      	b.n	8002a20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ca:	d021      	beq.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029cc:	f7fe fdee 	bl	80015ac <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d302      	bcc.n	80029e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d116      	bne.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e007      	b.n	8002a20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d1ca      	bne.n	80029b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a34:	e042      	b.n	8002abc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d119      	bne.n	8002a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0210 	mvn.w	r2, #16
 8002a4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e029      	b.n	8002acc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a78:	f7fe fd98 	bl	80015ac <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d302      	bcc.n	8002a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d116      	bne.n	8002abc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	f043 0220 	orr.w	r2, r3, #32
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e007      	b.n	8002acc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac6:	2b40      	cmp	r3, #64	; 0x40
 8002ac8:	d1b5      	bne.n	8002a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aea:	d11b      	bne.n	8002b24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002af4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	f043 0204 	orr.w	r2, r3, #4
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e25b      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d075      	beq.n	8002c3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b52:	4ba3      	ldr	r3, [pc, #652]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d00c      	beq.n	8002b78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5e:	4ba0      	ldr	r3, [pc, #640]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d112      	bne.n	8002b90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6a:	4b9d      	ldr	r3, [pc, #628]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b76:	d10b      	bne.n	8002b90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b78:	4b99      	ldr	r3, [pc, #612]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d05b      	beq.n	8002c3c <HAL_RCC_OscConfig+0x108>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d157      	bne.n	8002c3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e236      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b98:	d106      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x74>
 8002b9a:	4b91      	ldr	r3, [pc, #580]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a90      	ldr	r2, [pc, #576]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e01d      	b.n	8002be4 <HAL_RCC_OscConfig+0xb0>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x98>
 8002bb2:	4b8b      	ldr	r3, [pc, #556]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a8a      	ldr	r2, [pc, #552]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	4b88      	ldr	r3, [pc, #544]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a87      	ldr	r2, [pc, #540]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	e00b      	b.n	8002be4 <HAL_RCC_OscConfig+0xb0>
 8002bcc:	4b84      	ldr	r3, [pc, #528]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a83      	ldr	r2, [pc, #524]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	4b81      	ldr	r3, [pc, #516]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a80      	ldr	r2, [pc, #512]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d013      	beq.n	8002c14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7fe fcde 	bl	80015ac <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf4:	f7fe fcda 	bl	80015ac <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e1fb      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c06:	4b76      	ldr	r3, [pc, #472]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0xc0>
 8002c12:	e014      	b.n	8002c3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fcca 	bl	80015ac <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fe fcc6 	bl	80015ac <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e1e7      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2e:	4b6c      	ldr	r3, [pc, #432]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0xe8>
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d063      	beq.n	8002d12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c4a:	4b65      	ldr	r3, [pc, #404]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00b      	beq.n	8002c6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c56:	4b62      	ldr	r3, [pc, #392]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d11c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c62:	4b5f      	ldr	r3, [pc, #380]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d116      	bne.n	8002c9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6e:	4b5c      	ldr	r3, [pc, #368]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <HAL_RCC_OscConfig+0x152>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d001      	beq.n	8002c86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e1bb      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c86:	4b56      	ldr	r3, [pc, #344]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4952      	ldr	r1, [pc, #328]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9a:	e03a      	b.n	8002d12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d020      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca4:	4b4f      	ldr	r3, [pc, #316]	; (8002de4 <HAL_RCC_OscConfig+0x2b0>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002caa:	f7fe fc7f 	bl	80015ac <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb2:	f7fe fc7b 	bl	80015ac <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e19c      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc4:	4b46      	ldr	r3, [pc, #280]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd0:	4b43      	ldr	r3, [pc, #268]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4940      	ldr	r1, [pc, #256]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]
 8002ce4:	e015      	b.n	8002d12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce6:	4b3f      	ldr	r3, [pc, #252]	; (8002de4 <HAL_RCC_OscConfig+0x2b0>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe fc5e 	bl	80015ac <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf4:	f7fe fc5a 	bl	80015ac <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e17b      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d06:	4b36      	ldr	r3, [pc, #216]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d030      	beq.n	8002d80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d016      	beq.n	8002d54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d26:	4b30      	ldr	r3, [pc, #192]	; (8002de8 <HAL_RCC_OscConfig+0x2b4>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fc3e 	bl	80015ac <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d34:	f7fe fc3a 	bl	80015ac <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e15b      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d46:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x200>
 8002d52:	e015      	b.n	8002d80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d54:	4b24      	ldr	r3, [pc, #144]	; (8002de8 <HAL_RCC_OscConfig+0x2b4>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5a:	f7fe fc27 	bl	80015ac <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d62:	f7fe fc23 	bl	80015ac <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e144      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d74:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f0      	bne.n	8002d62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 80a0 	beq.w	8002ece <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d92:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10f      	bne.n	8002dbe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a0e      	ldr	r2, [pc, #56]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40
 8002dae:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_RCC_OscConfig+0x2b8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d121      	bne.n	8002e0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_RCC_OscConfig+0x2b8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a07      	ldr	r2, [pc, #28]	; (8002dec <HAL_RCC_OscConfig+0x2b8>)
 8002dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd6:	f7fe fbe9 	bl	80015ac <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ddc:	e011      	b.n	8002e02 <HAL_RCC_OscConfig+0x2ce>
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	42470000 	.word	0x42470000
 8002de8:	42470e80 	.word	0x42470e80
 8002dec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df0:	f7fe fbdc 	bl	80015ac <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e0fd      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e02:	4b81      	ldr	r3, [pc, #516]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d106      	bne.n	8002e24 <HAL_RCC_OscConfig+0x2f0>
 8002e16:	4b7d      	ldr	r3, [pc, #500]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	4a7c      	ldr	r2, [pc, #496]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6713      	str	r3, [r2, #112]	; 0x70
 8002e22:	e01c      	b.n	8002e5e <HAL_RCC_OscConfig+0x32a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2b05      	cmp	r3, #5
 8002e2a:	d10c      	bne.n	8002e46 <HAL_RCC_OscConfig+0x312>
 8002e2c:	4b77      	ldr	r3, [pc, #476]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	4a76      	ldr	r2, [pc, #472]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e32:	f043 0304 	orr.w	r3, r3, #4
 8002e36:	6713      	str	r3, [r2, #112]	; 0x70
 8002e38:	4b74      	ldr	r3, [pc, #464]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	4a73      	ldr	r2, [pc, #460]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6713      	str	r3, [r2, #112]	; 0x70
 8002e44:	e00b      	b.n	8002e5e <HAL_RCC_OscConfig+0x32a>
 8002e46:	4b71      	ldr	r3, [pc, #452]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	4a70      	ldr	r2, [pc, #448]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e4c:	f023 0301 	bic.w	r3, r3, #1
 8002e50:	6713      	str	r3, [r2, #112]	; 0x70
 8002e52:	4b6e      	ldr	r3, [pc, #440]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	4a6d      	ldr	r2, [pc, #436]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e58:	f023 0304 	bic.w	r3, r3, #4
 8002e5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d015      	beq.n	8002e92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e66:	f7fe fba1 	bl	80015ac <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6e:	f7fe fb9d 	bl	80015ac <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e0bc      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e84:	4b61      	ldr	r3, [pc, #388]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0ee      	beq.n	8002e6e <HAL_RCC_OscConfig+0x33a>
 8002e90:	e014      	b.n	8002ebc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e92:	f7fe fb8b 	bl	80015ac <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e9a:	f7fe fb87 	bl	80015ac <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0a6      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb0:	4b56      	ldr	r3, [pc, #344]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1ee      	bne.n	8002e9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d105      	bne.n	8002ece <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec2:	4b52      	ldr	r3, [pc, #328]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	4a51      	ldr	r2, [pc, #324]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 8092 	beq.w	8002ffc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ed8:	4b4c      	ldr	r3, [pc, #304]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d05c      	beq.n	8002f9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d141      	bne.n	8002f70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eec:	4b48      	ldr	r3, [pc, #288]	; (8003010 <HAL_RCC_OscConfig+0x4dc>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef2:	f7fe fb5b 	bl	80015ac <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002efa:	f7fe fb57 	bl	80015ac <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e078      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0c:	4b3f      	ldr	r3, [pc, #252]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f0      	bne.n	8002efa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	019b      	lsls	r3, r3, #6
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	3b01      	subs	r3, #1
 8002f32:	041b      	lsls	r3, r3, #16
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	061b      	lsls	r3, r3, #24
 8002f3c:	4933      	ldr	r1, [pc, #204]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f42:	4b33      	ldr	r3, [pc, #204]	; (8003010 <HAL_RCC_OscConfig+0x4dc>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fe fb30 	bl	80015ac <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe fb2c 	bl	80015ac <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e04d      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f62:	4b2a      	ldr	r3, [pc, #168]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x41c>
 8002f6e:	e045      	b.n	8002ffc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f70:	4b27      	ldr	r3, [pc, #156]	; (8003010 <HAL_RCC_OscConfig+0x4dc>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f76:	f7fe fb19 	bl	80015ac <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7e:	f7fe fb15 	bl	80015ac <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e036      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f90:	4b1e      	ldr	r3, [pc, #120]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f0      	bne.n	8002f7e <HAL_RCC_OscConfig+0x44a>
 8002f9c:	e02e      	b.n	8002ffc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e029      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002faa:	4b18      	ldr	r3, [pc, #96]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d11c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d115      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d10d      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d106      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40007000 	.word	0x40007000
 800300c:	40023800 	.word	0x40023800
 8003010:	42470060 	.word	0x42470060

08003014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0cc      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003028:	4b68      	ldr	r3, [pc, #416]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d90c      	bls.n	8003050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b65      	ldr	r3, [pc, #404]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b63      	ldr	r3, [pc, #396]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0b8      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d020      	beq.n	800309e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003068:	4b59      	ldr	r3, [pc, #356]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4a58      	ldr	r2, [pc, #352]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003080:	4b53      	ldr	r3, [pc, #332]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a52      	ldr	r2, [pc, #328]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800308a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308c:	4b50      	ldr	r3, [pc, #320]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	494d      	ldr	r1, [pc, #308]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d044      	beq.n	8003134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d107      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d119      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e07f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d003      	beq.n	80030d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d2:	4b3f      	ldr	r3, [pc, #252]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e06f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e2:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e067      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f2:	4b37      	ldr	r3, [pc, #220]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f023 0203 	bic.w	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4934      	ldr	r1, [pc, #208]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	4313      	orrs	r3, r2
 8003102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003104:	f7fe fa52 	bl	80015ac <HAL_GetTick>
 8003108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	e00a      	b.n	8003122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310c:	f7fe fa4e 	bl	80015ac <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	; 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e04f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	4b2b      	ldr	r3, [pc, #172]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 020c 	and.w	r2, r3, #12
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	429a      	cmp	r2, r3
 8003132:	d1eb      	bne.n	800310c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d20c      	bcs.n	800315c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e032      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4916      	ldr	r1, [pc, #88]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003186:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	490e      	ldr	r1, [pc, #56]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800319a:	f000 f821 	bl	80031e0 <HAL_RCC_GetSysClockFreq>
 800319e:	4601      	mov	r1, r0
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	5cd3      	ldrb	r3, [r2, r3]
 80031ae:	fa21 f303 	lsr.w	r3, r1, r3
 80031b2:	4a09      	ldr	r2, [pc, #36]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031b6:	4b09      	ldr	r3, [pc, #36]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe f9b2 	bl	8001524 <HAL_InitTick>

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40023c00 	.word	0x40023c00
 80031d0:	40023800 	.word	0x40023800
 80031d4:	0800a4a0 	.word	0x0800a4a0
 80031d8:	20000004 	.word	0x20000004
 80031dc:	20000008 	.word	0x20000008

080031e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	2300      	movs	r3, #0
 80031f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031f6:	4b63      	ldr	r3, [pc, #396]	; (8003384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d007      	beq.n	8003212 <HAL_RCC_GetSysClockFreq+0x32>
 8003202:	2b08      	cmp	r3, #8
 8003204:	d008      	beq.n	8003218 <HAL_RCC_GetSysClockFreq+0x38>
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 80b4 	bne.w	8003374 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800320c:	4b5e      	ldr	r3, [pc, #376]	; (8003388 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800320e:	60bb      	str	r3, [r7, #8]
       break;
 8003210:	e0b3      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003212:	4b5e      	ldr	r3, [pc, #376]	; (800338c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003214:	60bb      	str	r3, [r7, #8]
      break;
 8003216:	e0b0      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003218:	4b5a      	ldr	r3, [pc, #360]	; (8003384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003220:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003222:	4b58      	ldr	r3, [pc, #352]	; (8003384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d04a      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322e:	4b55      	ldr	r3, [pc, #340]	; (8003384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	099b      	lsrs	r3, r3, #6
 8003234:	f04f 0400 	mov.w	r4, #0
 8003238:	f240 11ff 	movw	r1, #511	; 0x1ff
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	ea03 0501 	and.w	r5, r3, r1
 8003244:	ea04 0602 	and.w	r6, r4, r2
 8003248:	4629      	mov	r1, r5
 800324a:	4632      	mov	r2, r6
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	f04f 0400 	mov.w	r4, #0
 8003254:	0154      	lsls	r4, r2, #5
 8003256:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800325a:	014b      	lsls	r3, r1, #5
 800325c:	4619      	mov	r1, r3
 800325e:	4622      	mov	r2, r4
 8003260:	1b49      	subs	r1, r1, r5
 8003262:	eb62 0206 	sbc.w	r2, r2, r6
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	f04f 0400 	mov.w	r4, #0
 800326e:	0194      	lsls	r4, r2, #6
 8003270:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003274:	018b      	lsls	r3, r1, #6
 8003276:	1a5b      	subs	r3, r3, r1
 8003278:	eb64 0402 	sbc.w	r4, r4, r2
 800327c:	f04f 0100 	mov.w	r1, #0
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	00e2      	lsls	r2, r4, #3
 8003286:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800328a:	00d9      	lsls	r1, r3, #3
 800328c:	460b      	mov	r3, r1
 800328e:	4614      	mov	r4, r2
 8003290:	195b      	adds	r3, r3, r5
 8003292:	eb44 0406 	adc.w	r4, r4, r6
 8003296:	f04f 0100 	mov.w	r1, #0
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	0262      	lsls	r2, r4, #9
 80032a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80032a4:	0259      	lsls	r1, r3, #9
 80032a6:	460b      	mov	r3, r1
 80032a8:	4614      	mov	r4, r2
 80032aa:	4618      	mov	r0, r3
 80032ac:	4621      	mov	r1, r4
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f04f 0400 	mov.w	r4, #0
 80032b4:	461a      	mov	r2, r3
 80032b6:	4623      	mov	r3, r4
 80032b8:	f7fd fb74 	bl	80009a4 <__aeabi_uldivmod>
 80032bc:	4603      	mov	r3, r0
 80032be:	460c      	mov	r4, r1
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	e049      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c4:	4b2f      	ldr	r3, [pc, #188]	; (8003384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	099b      	lsrs	r3, r3, #6
 80032ca:	f04f 0400 	mov.w	r4, #0
 80032ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	ea03 0501 	and.w	r5, r3, r1
 80032da:	ea04 0602 	and.w	r6, r4, r2
 80032de:	4629      	mov	r1, r5
 80032e0:	4632      	mov	r2, r6
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	f04f 0400 	mov.w	r4, #0
 80032ea:	0154      	lsls	r4, r2, #5
 80032ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032f0:	014b      	lsls	r3, r1, #5
 80032f2:	4619      	mov	r1, r3
 80032f4:	4622      	mov	r2, r4
 80032f6:	1b49      	subs	r1, r1, r5
 80032f8:	eb62 0206 	sbc.w	r2, r2, r6
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	f04f 0400 	mov.w	r4, #0
 8003304:	0194      	lsls	r4, r2, #6
 8003306:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800330a:	018b      	lsls	r3, r1, #6
 800330c:	1a5b      	subs	r3, r3, r1
 800330e:	eb64 0402 	sbc.w	r4, r4, r2
 8003312:	f04f 0100 	mov.w	r1, #0
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	00e2      	lsls	r2, r4, #3
 800331c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003320:	00d9      	lsls	r1, r3, #3
 8003322:	460b      	mov	r3, r1
 8003324:	4614      	mov	r4, r2
 8003326:	195b      	adds	r3, r3, r5
 8003328:	eb44 0406 	adc.w	r4, r4, r6
 800332c:	f04f 0100 	mov.w	r1, #0
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	02a2      	lsls	r2, r4, #10
 8003336:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800333a:	0299      	lsls	r1, r3, #10
 800333c:	460b      	mov	r3, r1
 800333e:	4614      	mov	r4, r2
 8003340:	4618      	mov	r0, r3
 8003342:	4621      	mov	r1, r4
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f04f 0400 	mov.w	r4, #0
 800334a:	461a      	mov	r2, r3
 800334c:	4623      	mov	r3, r4
 800334e:	f7fd fb29 	bl	80009a4 <__aeabi_uldivmod>
 8003352:	4603      	mov	r3, r0
 8003354:	460c      	mov	r4, r1
 8003356:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003358:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	3301      	adds	r3, #1
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003370:	60bb      	str	r3, [r7, #8]
      break;
 8003372:	e002      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003374:	4b04      	ldr	r3, [pc, #16]	; (8003388 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003376:	60bb      	str	r3, [r7, #8]
      break;
 8003378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800337a:	68bb      	ldr	r3, [r7, #8]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003384:	40023800 	.word	0x40023800
 8003388:	00f42400 	.word	0x00f42400
 800338c:	007a1200 	.word	0x007a1200

08003390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003394:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	20000004 	.word	0x20000004

080033a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033ac:	f7ff fff0 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 80033b0:	4601      	mov	r1, r0
 80033b2:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	0a9b      	lsrs	r3, r3, #10
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	4a03      	ldr	r2, [pc, #12]	; (80033cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033be:	5cd3      	ldrb	r3, [r2, r3]
 80033c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40023800 	.word	0x40023800
 80033cc:	0800a4b0 	.word	0x0800a4b0

080033d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e056      	b.n	8003490 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d106      	bne.n	8003402 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7fd ff19 	bl	8001234 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2202      	movs	r2, #2
 8003406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003418:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	ea42 0103 	orr.w	r1, r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	0c1b      	lsrs	r3, r3, #16
 8003460:	f003 0104 	and.w	r1, r3, #4
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	69da      	ldr	r2, [r3, #28]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800347e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <LCD_Reset>:
***********************************************************************************************************************/
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_Reset(void){
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
	LCD_RST_1;
 800349c:	2201      	movs	r2, #1
 800349e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034a2:	480d      	ldr	r0, [pc, #52]	; (80034d8 <LCD_Reset+0x40>)
 80034a4:	f7fe fb8c 	bl	8001bc0 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 80034a8:	2064      	movs	r0, #100	; 0x64
 80034aa:	f001 faab 	bl	8004a04 <Driver_Delay_ms>
	LCD_RST_0;
 80034ae:	2200      	movs	r2, #0
 80034b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034b4:	4808      	ldr	r0, [pc, #32]	; (80034d8 <LCD_Reset+0x40>)
 80034b6:	f7fe fb83 	bl	8001bc0 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 80034ba:	2064      	movs	r0, #100	; 0x64
 80034bc:	f001 faa2 	bl	8004a04 <Driver_Delay_ms>
	LCD_RST_1;
 80034c0:	2201      	movs	r2, #1
 80034c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034c6:	4804      	ldr	r0, [pc, #16]	; (80034d8 <LCD_Reset+0x40>)
 80034c8:	f7fe fb7a 	bl	8001bc0 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 80034cc:	2064      	movs	r0, #100	; 0x64
 80034ce:	f001 fa99 	bl	8004a04 <Driver_Delay_ms>
}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40020000 	.word	0x40020000

080034dc <LCD_WriteReg>:

/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_WriteReg(uint8_t Reg){
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	71fb      	strb	r3, [r7, #7]
	LCD_DC_0;
 80034e6:	2200      	movs	r2, #0
 80034e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034ec:	480a      	ldr	r0, [pc, #40]	; (8003518 <LCD_WriteReg+0x3c>)
 80034ee:	f7fe fb67 	bl	8001bc0 <HAL_GPIO_WritePin>
	LCD_CS_0;
 80034f2:	2200      	movs	r2, #0
 80034f4:	2140      	movs	r1, #64	; 0x40
 80034f6:	4809      	ldr	r0, [pc, #36]	; (800351c <LCD_WriteReg+0x40>)
 80034f8:	f7fe fb62 	bl	8001bc0 <HAL_GPIO_WritePin>
	SPI_Write_Byte(Reg);
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 fa46 	bl	8004990 <SPI_Write_Byte>
	LCD_CS_1;
 8003504:	2201      	movs	r2, #1
 8003506:	2140      	movs	r1, #64	; 0x40
 8003508:	4804      	ldr	r0, [pc, #16]	; (800351c <LCD_WriteReg+0x40>)
 800350a:	f7fe fb59 	bl	8001bc0 <HAL_GPIO_WritePin>
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40020000 	.word	0x40020000
 800351c:	40020400 	.word	0x40020400

08003520 <LCD_WriteData_8Bit>:

static void LCD_WriteData_8Bit(uint8_t Data){
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
	LCD_DC_1;
 800352a:	2201      	movs	r2, #1
 800352c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003530:	480a      	ldr	r0, [pc, #40]	; (800355c <LCD_WriteData_8Bit+0x3c>)
 8003532:	f7fe fb45 	bl	8001bc0 <HAL_GPIO_WritePin>
	LCD_CS_0;
 8003536:	2200      	movs	r2, #0
 8003538:	2140      	movs	r1, #64	; 0x40
 800353a:	4809      	ldr	r0, [pc, #36]	; (8003560 <LCD_WriteData_8Bit+0x40>)
 800353c:	f7fe fb40 	bl	8001bc0 <HAL_GPIO_WritePin>
	SPI_Write_Byte(Data);
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	4618      	mov	r0, r3
 8003544:	f001 fa24 	bl	8004990 <SPI_Write_Byte>
	LCD_CS_1;
 8003548:	2201      	movs	r2, #1
 800354a:	2140      	movs	r1, #64	; 0x40
 800354c:	4804      	ldr	r0, [pc, #16]	; (8003560 <LCD_WriteData_8Bit+0x40>)
 800354e:	f7fe fb37 	bl	8001bc0 <HAL_GPIO_WritePin>
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40020000 	.word	0x40020000
 8003560:	40020400 	.word	0x40020400

08003564 <LCD_WriteData_NLen16Bit>:
	SPI_Write_Byte(Data >> 8);
	SPI_Write_Byte(Data & 0XFF);
	LCD_CS_1;
}

static void LCD_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen){
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	6039      	str	r1, [r7, #0]
 800356e:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	LCD_DC_1;
 8003570:	2201      	movs	r2, #1
 8003572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003576:	4813      	ldr	r0, [pc, #76]	; (80035c4 <LCD_WriteData_NLen16Bit+0x60>)
 8003578:	f7fe fb22 	bl	8001bc0 <HAL_GPIO_WritePin>
	LCD_CS_0;
 800357c:	2200      	movs	r2, #0
 800357e:	2140      	movs	r1, #64	; 0x40
 8003580:	4811      	ldr	r0, [pc, #68]	; (80035c8 <LCD_WriteData_NLen16Bit+0x64>)
 8003582:	f7fe fb1d 	bl	8001bc0 <HAL_GPIO_WritePin>
	for(i = 0; i < DataLen; i++){
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	e00e      	b.n	80035aa <LCD_WriteData_NLen16Bit+0x46>
		SPI_Write_Byte( (uint8_t)(Data >> 8) );
 800358c:	88fb      	ldrh	r3, [r7, #6]
 800358e:	0a1b      	lsrs	r3, r3, #8
 8003590:	b29b      	uxth	r3, r3
 8003592:	b2db      	uxtb	r3, r3
 8003594:	4618      	mov	r0, r3
 8003596:	f001 f9fb 	bl	8004990 <SPI_Write_Byte>
		SPI_Write_Byte( (uint8_t)(Data & 0XFF) );
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 f9f6 	bl	8004990 <SPI_Write_Byte>
	for(i = 0; i < DataLen; i++){
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	3301      	adds	r3, #1
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d3ec      	bcc.n	800358c <LCD_WriteData_NLen16Bit+0x28>
	}	
	LCD_CS_1;
 80035b2:	2201      	movs	r2, #1
 80035b4:	2140      	movs	r1, #64	; 0x40
 80035b6:	4804      	ldr	r0, [pc, #16]	; (80035c8 <LCD_WriteData_NLen16Bit+0x64>)
 80035b8:	f7fe fb02 	bl	8001bc0 <HAL_GPIO_WritePin>
}
 80035bc:	bf00      	nop
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40020000 	.word	0x40020000
 80035c8:	40020400 	.word	0x40020400

080035cc <LCD_InitReg>:

/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_InitReg(void){	
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
	//ST7735R Frame Rate
	LCD_WriteReg(0xB1); 
 80035d0:	20b1      	movs	r0, #177	; 0xb1
 80035d2:	f7ff ff83 	bl	80034dc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 80035d6:	2001      	movs	r0, #1
 80035d8:	f7ff ffa2 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 80035dc:	202c      	movs	r0, #44	; 0x2c
 80035de:	f7ff ff9f 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 80035e2:	202d      	movs	r0, #45	; 0x2d
 80035e4:	f7ff ff9c 	bl	8003520 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xB2); 
 80035e8:	20b2      	movs	r0, #178	; 0xb2
 80035ea:	f7ff ff77 	bl	80034dc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 80035ee:	2001      	movs	r0, #1
 80035f0:	f7ff ff96 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 80035f4:	202c      	movs	r0, #44	; 0x2c
 80035f6:	f7ff ff93 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 80035fa:	202d      	movs	r0, #45	; 0x2d
 80035fc:	f7ff ff90 	bl	8003520 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xB3); 
 8003600:	20b3      	movs	r0, #179	; 0xb3
 8003602:	f7ff ff6b 	bl	80034dc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 8003606:	2001      	movs	r0, #1
 8003608:	f7ff ff8a 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 800360c:	202c      	movs	r0, #44	; 0x2c
 800360e:	f7ff ff87 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 8003612:	202d      	movs	r0, #45	; 0x2d
 8003614:	f7ff ff84 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x01); 
 8003618:	2001      	movs	r0, #1
 800361a:	f7ff ff81 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 800361e:	202c      	movs	r0, #44	; 0x2c
 8003620:	f7ff ff7e 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 8003624:	202d      	movs	r0, #45	; 0x2d
 8003626:	f7ff ff7b 	bl	8003520 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xB4); //Column inversion 
 800362a:	20b4      	movs	r0, #180	; 0xb4
 800362c:	f7ff ff56 	bl	80034dc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x07); 
 8003630:	2007      	movs	r0, #7
 8003632:	f7ff ff75 	bl	8003520 <LCD_WriteData_8Bit>
	
	//ST7735R Power Sequence
	LCD_WriteReg(0xC0); 
 8003636:	20c0      	movs	r0, #192	; 0xc0
 8003638:	f7ff ff50 	bl	80034dc <LCD_WriteReg>
	LCD_WriteData_8Bit(0xA2); 
 800363c:	20a2      	movs	r0, #162	; 0xa2
 800363e:	f7ff ff6f 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x02); 
 8003642:	2002      	movs	r0, #2
 8003644:	f7ff ff6c 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x84); 
 8003648:	2084      	movs	r0, #132	; 0x84
 800364a:	f7ff ff69 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteReg(0xC1); 
 800364e:	20c1      	movs	r0, #193	; 0xc1
 8003650:	f7ff ff44 	bl	80034dc <LCD_WriteReg>
	LCD_WriteData_8Bit(0xC5); 
 8003654:	20c5      	movs	r0, #197	; 0xc5
 8003656:	f7ff ff63 	bl	8003520 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xC2); 
 800365a:	20c2      	movs	r0, #194	; 0xc2
 800365c:	f7ff ff3e 	bl	80034dc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0A); 
 8003660:	200a      	movs	r0, #10
 8003662:	f7ff ff5d 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 
 8003666:	2000      	movs	r0, #0
 8003668:	f7ff ff5a 	bl	8003520 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xC3); 
 800366c:	20c3      	movs	r0, #195	; 0xc3
 800366e:	f7ff ff35 	bl	80034dc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x8A); 
 8003672:	208a      	movs	r0, #138	; 0x8a
 8003674:	f7ff ff54 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2A); 
 8003678:	202a      	movs	r0, #42	; 0x2a
 800367a:	f7ff ff51 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteReg(0xC4); 
 800367e:	20c4      	movs	r0, #196	; 0xc4
 8003680:	f7ff ff2c 	bl	80034dc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x8A); 
 8003684:	208a      	movs	r0, #138	; 0x8a
 8003686:	f7ff ff4b 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0xEE); 
 800368a:	20ee      	movs	r0, #238	; 0xee
 800368c:	f7ff ff48 	bl	8003520 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xC5); //VCOM 
 8003690:	20c5      	movs	r0, #197	; 0xc5
 8003692:	f7ff ff23 	bl	80034dc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0E); 
 8003696:	200e      	movs	r0, #14
 8003698:	f7ff ff42 	bl	8003520 <LCD_WriteData_8Bit>
	
	//ST7735R Gamma Sequence
	LCD_WriteReg(0xe0); 
 800369c:	20e0      	movs	r0, #224	; 0xe0
 800369e:	f7ff ff1d 	bl	80034dc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0f); 
 80036a2:	200f      	movs	r0, #15
 80036a4:	f7ff ff3c 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1a); 
 80036a8:	201a      	movs	r0, #26
 80036aa:	f7ff ff39 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x0f); 
 80036ae:	200f      	movs	r0, #15
 80036b0:	f7ff ff36 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x18); 
 80036b4:	2018      	movs	r0, #24
 80036b6:	f7ff ff33 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2f); 
 80036ba:	202f      	movs	r0, #47	; 0x2f
 80036bc:	f7ff ff30 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x28); 
 80036c0:	2028      	movs	r0, #40	; 0x28
 80036c2:	f7ff ff2d 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x20); 
 80036c6:	2020      	movs	r0, #32
 80036c8:	f7ff ff2a 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x22); 
 80036cc:	2022      	movs	r0, #34	; 0x22
 80036ce:	f7ff ff27 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1f); 
 80036d2:	201f      	movs	r0, #31
 80036d4:	f7ff ff24 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1b); 
 80036d8:	201b      	movs	r0, #27
 80036da:	f7ff ff21 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x23); 
 80036de:	2023      	movs	r0, #35	; 0x23
 80036e0:	f7ff ff1e 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x37); 
 80036e4:	2037      	movs	r0, #55	; 0x37
 80036e6:	f7ff ff1b 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 	
 80036ea:	2000      	movs	r0, #0
 80036ec:	f7ff ff18 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x07); 
 80036f0:	2007      	movs	r0, #7
 80036f2:	f7ff ff15 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x02); 
 80036f6:	2002      	movs	r0, #2
 80036f8:	f7ff ff12 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x10); 
 80036fc:	2010      	movs	r0, #16
 80036fe:	f7ff ff0f 	bl	8003520 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xe1); 
 8003702:	20e1      	movs	r0, #225	; 0xe1
 8003704:	f7ff feea 	bl	80034dc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0f); 
 8003708:	200f      	movs	r0, #15
 800370a:	f7ff ff09 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1b); 
 800370e:	201b      	movs	r0, #27
 8003710:	f7ff ff06 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x0f); 
 8003714:	200f      	movs	r0, #15
 8003716:	f7ff ff03 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x17); 
 800371a:	2017      	movs	r0, #23
 800371c:	f7ff ff00 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x33); 
 8003720:	2033      	movs	r0, #51	; 0x33
 8003722:	f7ff fefd 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2c); 
 8003726:	202c      	movs	r0, #44	; 0x2c
 8003728:	f7ff fefa 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x29); 
 800372c:	2029      	movs	r0, #41	; 0x29
 800372e:	f7ff fef7 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2e); 
 8003732:	202e      	movs	r0, #46	; 0x2e
 8003734:	f7ff fef4 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x30); 
 8003738:	2030      	movs	r0, #48	; 0x30
 800373a:	f7ff fef1 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x30); 
 800373e:	2030      	movs	r0, #48	; 0x30
 8003740:	f7ff feee 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x39); 
 8003744:	2039      	movs	r0, #57	; 0x39
 8003746:	f7ff feeb 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x3f); 
 800374a:	203f      	movs	r0, #63	; 0x3f
 800374c:	f7ff fee8 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 
 8003750:	2000      	movs	r0, #0
 8003752:	f7ff fee5 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x07); 
 8003756:	2007      	movs	r0, #7
 8003758:	f7ff fee2 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x03); 
 800375c:	2003      	movs	r0, #3
 800375e:	f7ff fedf 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x10);  
 8003762:	2010      	movs	r0, #16
 8003764:	f7ff fedc 	bl	8003520 <LCD_WriteData_8Bit>
		
	LCD_WriteReg(0xF0); //Enable test command  
 8003768:	20f0      	movs	r0, #240	; 0xf0
 800376a:	f7ff feb7 	bl	80034dc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 800376e:	2001      	movs	r0, #1
 8003770:	f7ff fed6 	bl	8003520 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xF6); //Disable ram power save mode 
 8003774:	20f6      	movs	r0, #246	; 0xf6
 8003776:	f7ff feb1 	bl	80034dc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x00); 
 800377a:	2000      	movs	r0, #0
 800377c:	f7ff fed0 	bl	8003520 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0x3A); //65k mode 
 8003780:	203a      	movs	r0, #58	; 0x3a
 8003782:	f7ff feab 	bl	80034dc <LCD_WriteReg>
	LCD_WriteData_8Bit(0x05); 
 8003786:	2005      	movs	r0, #5
 8003788:	f7ff feca 	bl	8003520 <LCD_WriteData_8Bit>
		
}
 800378c:	bf00      	nop
 800378e:	bd80      	pop	{r7, pc}

08003790 <LCD_SetGramScanWay>:
function:	Set the display scan and color transfer modes
parameter: 
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_SetGramScanWay(LCD_SCAN_DIR Scan_dir){		
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	71fb      	strb	r3, [r7, #7]
	//Get the screen scan direction
	sLCD_DIS.LCD_Scan_Dir = Scan_dir;
 800379a:	4a34      	ldr	r2, [pc, #208]	; (800386c <LCD_SetGramScanWay+0xdc>)
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	7113      	strb	r3, [r2, #4]
	
	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U){
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <LCD_SetGramScanWay+0x28>
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d005      	beq.n	80037b8 <LCD_SetGramScanWay+0x28>
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d002      	beq.n	80037b8 <LCD_SetGramScanWay+0x28>
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d10c      	bne.n	80037d2 <LCD_SetGramScanWay+0x42>
		sLCD_DIS.LCD_Dis_Column	= LCD_HEIGHT ;
 80037b8:	4b2c      	ldr	r3, [pc, #176]	; (800386c <LCD_SetGramScanWay+0xdc>)
 80037ba:	2280      	movs	r2, #128	; 0x80
 80037bc:	801a      	strh	r2, [r3, #0]
		sLCD_DIS.LCD_Dis_Page = LCD_WIDTH ;		
 80037be:	4b2b      	ldr	r3, [pc, #172]	; (800386c <LCD_SetGramScanWay+0xdc>)
 80037c0:	22a0      	movs	r2, #160	; 0xa0
 80037c2:	805a      	strh	r2, [r3, #2]
		sLCD_DIS.LCD_X_Adjust = LCD_X;
 80037c4:	4b29      	ldr	r3, [pc, #164]	; (800386c <LCD_SetGramScanWay+0xdc>)
 80037c6:	2202      	movs	r2, #2
 80037c8:	80da      	strh	r2, [r3, #6]
		sLCD_DIS.LCD_Y_Adjust = LCD_Y;
 80037ca:	4b28      	ldr	r3, [pc, #160]	; (800386c <LCD_SetGramScanWay+0xdc>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	811a      	strh	r2, [r3, #8]
 80037d0:	e00b      	b.n	80037ea <LCD_SetGramScanWay+0x5a>
	}else{
		sLCD_DIS.LCD_Dis_Column	= LCD_WIDTH ;
 80037d2:	4b26      	ldr	r3, [pc, #152]	; (800386c <LCD_SetGramScanWay+0xdc>)
 80037d4:	22a0      	movs	r2, #160	; 0xa0
 80037d6:	801a      	strh	r2, [r3, #0]
		sLCD_DIS.LCD_Dis_Page = LCD_HEIGHT ;	
 80037d8:	4b24      	ldr	r3, [pc, #144]	; (800386c <LCD_SetGramScanWay+0xdc>)
 80037da:	2280      	movs	r2, #128	; 0x80
 80037dc:	805a      	strh	r2, [r3, #2]
		sLCD_DIS.LCD_X_Adjust = LCD_Y;
 80037de:	4b23      	ldr	r3, [pc, #140]	; (800386c <LCD_SetGramScanWay+0xdc>)
 80037e0:	2201      	movs	r2, #1
 80037e2:	80da      	strh	r2, [r3, #6]
		sLCD_DIS.LCD_Y_Adjust = LCD_X;
 80037e4:	4b21      	ldr	r3, [pc, #132]	; (800386c <LCD_SetGramScanWay+0xdc>)
 80037e6:	2202      	movs	r2, #2
 80037e8:	811a      	strh	r2, [r3, #8]
	}
	
	// Gets the scan direction of GRAM
	uint16_t MemoryAccessReg_Data=0;  //0x36	
 80037ea:	2300      	movs	r3, #0
 80037ec:	81fb      	strh	r3, [r7, #14]
	switch (Scan_dir){				
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	2b07      	cmp	r3, #7
 80037f2:	d82b      	bhi.n	800384c <LCD_SetGramScanWay+0xbc>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <LCD_SetGramScanWay+0x6c>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	0800381d 	.word	0x0800381d
 8003800:	08003823 	.word	0x08003823
 8003804:	08003829 	.word	0x08003829
 8003808:	0800382f 	.word	0x0800382f
 800380c:	08003835 	.word	0x08003835
 8003810:	0800383b 	.word	0x0800383b
 8003814:	08003841 	.word	0x08003841
 8003818:	08003847 	.word	0x08003847
		case L2R_U2D:
			MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 800381c:	2300      	movs	r3, #0
 800381e:	81fb      	strh	r3, [r7, #14]
			break;
 8003820:	e014      	b.n	800384c <LCD_SetGramScanWay+0xbc>
		case L2R_D2U:
			MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 8003822:	2380      	movs	r3, #128	; 0x80
 8003824:	81fb      	strh	r3, [r7, #14]
			break;
 8003826:	e011      	b.n	800384c <LCD_SetGramScanWay+0xbc>
		case R2L_U2D://	0X4
			MemoryAccessReg_Data = 0x40 | 0x00;
 8003828:	2340      	movs	r3, #64	; 0x40
 800382a:	81fb      	strh	r3, [r7, #14]
			break;
 800382c:	e00e      	b.n	800384c <LCD_SetGramScanWay+0xbc>
		case R2L_D2U://	0XC
			MemoryAccessReg_Data = 0x40 | 0x80;
 800382e:	23c0      	movs	r3, #192	; 0xc0
 8003830:	81fb      	strh	r3, [r7, #14]
			break;
 8003832:	e00b      	b.n	800384c <LCD_SetGramScanWay+0xbc>
		case U2D_L2R://0X2
			MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 8003834:	2320      	movs	r3, #32
 8003836:	81fb      	strh	r3, [r7, #14]
			break;
 8003838:	e008      	b.n	800384c <LCD_SetGramScanWay+0xbc>
		case U2D_R2L://0X6
			MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 800383a:	2360      	movs	r3, #96	; 0x60
 800383c:	81fb      	strh	r3, [r7, #14]
			break;
 800383e:	e005      	b.n	800384c <LCD_SetGramScanWay+0xbc>
		case D2U_L2R://0XA
			MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 8003840:	23a0      	movs	r3, #160	; 0xa0
 8003842:	81fb      	strh	r3, [r7, #14]
			break;
 8003844:	e002      	b.n	800384c <LCD_SetGramScanWay+0xbc>
		case D2U_R2L://0XE
			MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 8003846:	23e0      	movs	r3, #224	; 0xe0
 8003848:	81fb      	strh	r3, [r7, #14]
			break;
 800384a:	bf00      	nop
	}
	

	// Set the read / write scan direction of the frame memory
	LCD_WriteReg(0x36); //MX, MY, RGB mode 	
 800384c:	2036      	movs	r0, #54	; 0x36
 800384e:	f7ff fe45 	bl	80034dc <LCD_WriteReg>
#if defined(LCD_1IN44)
	LCD_WriteData_8Bit( MemoryAccessReg_Data | 0x08);	//0x08 set RGB
#elif defined(LCD_1IN8)
	LCD_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 8003852:	89fb      	ldrh	r3, [r7, #14]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f023 0308 	bic.w	r3, r3, #8
 800385a:	b2db      	uxtb	r3, r3
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff fe5f 	bl	8003520 <LCD_WriteData_8Bit>
#endif
	
}
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	200005c8 	.word	0x200005c8

08003870 <LCD_Init>:

/********************************************************************************
function:	
			initialization
********************************************************************************/
void LCD_Init( LCD_SCAN_DIR Lcd_ScanDir ){	
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	71fb      	strb	r3, [r7, #7]
	//Turn on the backlight
	LCD_BL_1;
 800387a:	2201      	movs	r2, #1
 800387c:	2180      	movs	r1, #128	; 0x80
 800387e:	480f      	ldr	r0, [pc, #60]	; (80038bc <LCD_Init+0x4c>)
 8003880:	f7fe f99e 	bl	8001bc0 <HAL_GPIO_WritePin>
	
	//Hardware reset
	LCD_Reset(); 
 8003884:	f7ff fe08 	bl	8003498 <LCD_Reset>
	
	//Set the initialization register
	LCD_InitReg();
 8003888:	f7ff fea0 	bl	80035cc <LCD_InitReg>
	
	//Set the display scan and color transfer modes	
	LCD_SetGramScanWay( Lcd_ScanDir );
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff ff7e 	bl	8003790 <LCD_SetGramScanWay>
	Driver_Delay_ms(200); 
 8003894:	20c8      	movs	r0, #200	; 0xc8
 8003896:	f001 f8b5 	bl	8004a04 <Driver_Delay_ms>
	
	//sleep out
	LCD_WriteReg(0x11);
 800389a:	2011      	movs	r0, #17
 800389c:	f7ff fe1e 	bl	80034dc <LCD_WriteReg>
	Driver_Delay_ms(120);
 80038a0:	2078      	movs	r0, #120	; 0x78
 80038a2:	f001 f8af 	bl	8004a04 <Driver_Delay_ms>
	
	//Turn on the LCD display
	LCD_WriteReg(0x29);	
 80038a6:	2029      	movs	r0, #41	; 0x29
 80038a8:	f7ff fe18 	bl	80034dc <LCD_WriteReg>

	//clear
	LCD_Clear(WHITE);	
 80038ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80038b0:	f000 f8d8 	bl	8003a64 <LCD_Clear>
}
 80038b4:	bf00      	nop
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40020800 	.word	0x40020800

080038c0 <LCD_SetWindows>:
		Xstart 	:   X direction Start coordinates
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend ){
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4604      	mov	r4, r0
 80038c8:	4608      	mov	r0, r1
 80038ca:	4611      	mov	r1, r2
 80038cc:	461a      	mov	r2, r3
 80038ce:	4623      	mov	r3, r4
 80038d0:	80fb      	strh	r3, [r7, #6]
 80038d2:	4603      	mov	r3, r0
 80038d4:	80bb      	strh	r3, [r7, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	807b      	strh	r3, [r7, #2]
 80038da:	4613      	mov	r3, r2
 80038dc:	803b      	strh	r3, [r7, #0]

	//set the X coordinates
	LCD_WriteReg ( 0x2A ); 				
 80038de:	202a      	movs	r0, #42	; 0x2a
 80038e0:	f7ff fdfc 	bl	80034dc <LCD_WriteReg>
	LCD_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 80038e4:	2000      	movs	r0, #0
 80038e6:	f7ff fe1b 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (Xstart & 0xff) + sLCD_DIS.LCD_X_Adjust);			//Set the horizontal starting point to the low octet
 80038ea:	88fb      	ldrh	r3, [r7, #6]
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <LCD_SetWindows+0xa8>)
 80038f0:	88db      	ldrh	r3, [r3, #6]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	4413      	add	r3, r2
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff fe11 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 80038fe:	2000      	movs	r0, #0
 8003900:	f7ff fe0e 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_DIS.LCD_X_Adjust);	//Set the horizontal end to the low octet
 8003904:	887b      	ldrh	r3, [r7, #2]
 8003906:	b2da      	uxtb	r2, r3
 8003908:	4b17      	ldr	r3, [pc, #92]	; (8003968 <LCD_SetWindows+0xa8>)
 800390a:	88db      	ldrh	r3, [r3, #6]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	4413      	add	r3, r2
 8003910:	b2db      	uxtb	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b2db      	uxtb	r3, r3
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff fe02 	bl	8003520 <LCD_WriteData_8Bit>

	//set the Y coordinates
	LCD_WriteReg ( 0x2B );
 800391c:	202b      	movs	r0, #43	; 0x2b
 800391e:	f7ff fddd 	bl	80034dc <LCD_WriteReg>
	LCD_WriteData_8Bit ( 0x00 );
 8003922:	2000      	movs	r0, #0
 8003924:	f7ff fdfc 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (Ystart & 0xff) + sLCD_DIS.LCD_Y_Adjust);
 8003928:	88bb      	ldrh	r3, [r7, #4]
 800392a:	b2da      	uxtb	r2, r3
 800392c:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <LCD_SetWindows+0xa8>)
 800392e:	891b      	ldrh	r3, [r3, #8]
 8003930:	b2db      	uxtb	r3, r3
 8003932:	4413      	add	r3, r2
 8003934:	b2db      	uxtb	r3, r3
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff fdf2 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( 0x00 );
 800393c:	2000      	movs	r0, #0
 800393e:	f7ff fdef 	bl	8003520 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_DIS.LCD_Y_Adjust);
 8003942:	883b      	ldrh	r3, [r7, #0]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	4b08      	ldr	r3, [pc, #32]	; (8003968 <LCD_SetWindows+0xa8>)
 8003948:	891b      	ldrh	r3, [r3, #8]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	4413      	add	r3, r2
 800394e:	b2db      	uxtb	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b2db      	uxtb	r3, r3
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fde3 	bl	8003520 <LCD_WriteData_8Bit>
		
	LCD_WriteReg(0x2C);	
 800395a:	202c      	movs	r0, #44	; 0x2c
 800395c:	f7ff fdbe 	bl	80034dc <LCD_WriteReg>
	
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bd90      	pop	{r4, r7, pc}
 8003968:	200005c8 	.word	0x200005c8

0800396c <LCD_SetCursor>:
function:	Set the display point (Xpoint, Ypoint)
parameter: 
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_SetCursor ( POINT Xpoint, POINT Ypoint ){
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	460a      	mov	r2, r1
 8003976:	80fb      	strh	r3, [r7, #6]
 8003978:	4613      	mov	r3, r2
 800397a:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 800397c:	88bb      	ldrh	r3, [r7, #4]
 800397e:	88fa      	ldrh	r2, [r7, #6]
 8003980:	88b9      	ldrh	r1, [r7, #4]
 8003982:	88f8      	ldrh	r0, [r7, #6]
 8003984:	f7ff ff9c 	bl	80038c0 <LCD_SetWindows>
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <LCD_SetColor>:
function:	Set show color
parameter: 
		Color  :   Set show color
********************************************************************************/
//static void LCD_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint){		
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	80fb      	strh	r3, [r7, #6]
 800399a:	460b      	mov	r3, r1
 800399c:	80bb      	strh	r3, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	807b      	strh	r3, [r7, #2]
	LCD_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint); 
 80039a2:	88bb      	ldrh	r3, [r7, #4]
 80039a4:	887a      	ldrh	r2, [r7, #2]
 80039a6:	fb02 f203 	mul.w	r2, r2, r3
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff fdd8 	bl	8003564 <LCD_WriteData_NLen16Bit>
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <LCD_SetPointlColor>:
parameter: 
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_SetPointlColor ( POINT Xpoint, POINT Ypoint, COLOR Color ){	
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	80fb      	strh	r3, [r7, #6]
 80039c6:	460b      	mov	r3, r1
 80039c8:	80bb      	strh	r3, [r7, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	807b      	strh	r3, [r7, #2]
	if ( ( Xpoint <= sLCD_DIS.LCD_Dis_Column ) && ( Ypoint <= sLCD_DIS.LCD_Dis_Page ) ){		
 80039ce:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <LCD_SetPointlColor+0x48>)
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d810      	bhi.n	80039fa <LCD_SetPointlColor+0x3e>
 80039d8:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <LCD_SetPointlColor+0x48>)
 80039da:	885b      	ldrh	r3, [r3, #2]
 80039dc:	88ba      	ldrh	r2, [r7, #4]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d80b      	bhi.n	80039fa <LCD_SetPointlColor+0x3e>
		LCD_SetCursor (Xpoint, Ypoint);		
 80039e2:	88ba      	ldrh	r2, [r7, #4]
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	4611      	mov	r1, r2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff ffbf 	bl	800396c <LCD_SetCursor>
		LCD_SetColor ( Color , 1 , 1);
 80039ee:	887b      	ldrh	r3, [r7, #2]
 80039f0:	2201      	movs	r2, #1
 80039f2:	2101      	movs	r1, #1
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ffcb 	bl	8003990 <LCD_SetColor>
	}
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200005c8 	.word	0x200005c8

08003a08 <LCD_SetArealColor>:
		Ystart :   Start point y coordinate
		Xend   :   End point coordinates
		Yend   :   End point coordinates
		Color  :   Set the color
********************************************************************************/
void LCD_SetArealColor (POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,	COLOR  Color){	
 8003a08:	b590      	push	{r4, r7, lr}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4604      	mov	r4, r0
 8003a10:	4608      	mov	r0, r1
 8003a12:	4611      	mov	r1, r2
 8003a14:	461a      	mov	r2, r3
 8003a16:	4623      	mov	r3, r4
 8003a18:	80fb      	strh	r3, [r7, #6]
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	80bb      	strh	r3, [r7, #4]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	807b      	strh	r3, [r7, #2]
 8003a22:	4613      	mov	r3, r2
 8003a24:	803b      	strh	r3, [r7, #0]
	if((Xend > Xstart) && (Yend > Ystart)){			
 8003a26:	887a      	ldrh	r2, [r7, #2]
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d915      	bls.n	8003a5a <LCD_SetArealColor+0x52>
 8003a2e:	883a      	ldrh	r2, [r7, #0]
 8003a30:	88bb      	ldrh	r3, [r7, #4]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d911      	bls.n	8003a5a <LCD_SetArealColor+0x52>
		LCD_SetWindows( Xstart , Ystart , Xend , Yend  );
 8003a36:	883b      	ldrh	r3, [r7, #0]
 8003a38:	887a      	ldrh	r2, [r7, #2]
 8003a3a:	88b9      	ldrh	r1, [r7, #4]
 8003a3c:	88f8      	ldrh	r0, [r7, #6]
 8003a3e:	f7ff ff3f 	bl	80038c0 <LCD_SetWindows>
		LCD_SetColor ( Color ,Xend - Xstart , Yend - Ystart );
 8003a42:	887a      	ldrh	r2, [r7, #2]
 8003a44:	88fb      	ldrh	r3, [r7, #6]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	b299      	uxth	r1, r3
 8003a4a:	883a      	ldrh	r2, [r7, #0]
 8003a4c:	88bb      	ldrh	r3, [r7, #4]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	8b3b      	ldrh	r3, [r7, #24]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff ff9b 	bl	8003990 <LCD_SetColor>
	}
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd90      	pop	{r4, r7, pc}
	...

08003a64 <LCD_Clear>:

/********************************************************************************
function:	
			Clear screen 
********************************************************************************/
void LCD_Clear(COLOR  Color){
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	80fb      	strh	r3, [r7, #6]

	LCD_SetArealColor(0,0, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page  , Color);	
 8003a6e:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <LCD_Clear+0x28>)
 8003a70:	881a      	ldrh	r2, [r3, #0]
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <LCD_Clear+0x28>)
 8003a74:	8859      	ldrh	r1, [r3, #2]
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	2000      	movs	r0, #0
 8003a80:	f7ff ffc2 	bl	8003a08 <LCD_SetArealColor>

}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	200005c8 	.word	0x200005c8

08003a90 <LCD_DrawPoint>:
			Dot_Pixel	:	point size
********************************************************************************/
void LCD_DrawPoint(	POINT Xpoint, POINT Ypoint, 
					COLOR Color, 
					DOT_PIXEL Dot_Pixel,
					DOT_STYLE DOT_STYLE){		
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4604      	mov	r4, r0
 8003a98:	4608      	mov	r0, r1
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	80fb      	strh	r3, [r7, #6]
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	80bb      	strh	r3, [r7, #4]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	807b      	strh	r3, [r7, #2]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	707b      	strb	r3, [r7, #1]
						
	if ( Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page ) {
 8003aae:	4b33      	ldr	r3, [pc, #204]	; (8003b7c <LCD_DrawPoint+0xec>)
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	88fa      	ldrh	r2, [r7, #6]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d85c      	bhi.n	8003b72 <LCD_DrawPoint+0xe2>
 8003ab8:	4b30      	ldr	r3, [pc, #192]	; (8003b7c <LCD_DrawPoint+0xec>)
 8003aba:	885b      	ldrh	r3, [r3, #2]
 8003abc:	88ba      	ldrh	r2, [r7, #4]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d857      	bhi.n	8003b72 <LCD_DrawPoint+0xe2>
		return;
	}
	
	uint16_t XDir_Num ,YDir_Num;
	if(DOT_STYLE == DOT_FILL_AROUND){
 8003ac2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d12c      	bne.n	8003b24 <LCD_DrawPoint+0x94>
		for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1 ; XDir_Num++){
 8003aca:	2300      	movs	r3, #0
 8003acc:	81fb      	strh	r3, [r7, #14]
 8003ace:	e022      	b.n	8003b16 <LCD_DrawPoint+0x86>
			for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1 ; YDir_Num++){
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	81bb      	strh	r3, [r7, #12]
 8003ad4:	e016      	b.n	8003b04 <LCD_DrawPoint+0x74>
				LCD_SetPointlColor( Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	89fb      	ldrh	r3, [r7, #14]
 8003ada:	4413      	add	r3, r2
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	787b      	ldrb	r3, [r7, #1]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	b298      	uxth	r0, r3
 8003ae6:	88ba      	ldrh	r2, [r7, #4]
 8003ae8:	89bb      	ldrh	r3, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	787b      	ldrb	r3, [r7, #1]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	887a      	ldrh	r2, [r7, #2]
 8003af8:	4619      	mov	r1, r3
 8003afa:	f7ff ff5f 	bl	80039bc <LCD_SetPointlColor>
			for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1 ; YDir_Num++){
 8003afe:	89bb      	ldrh	r3, [r7, #12]
 8003b00:	3301      	adds	r3, #1
 8003b02:	81bb      	strh	r3, [r7, #12]
 8003b04:	89ba      	ldrh	r2, [r7, #12]
 8003b06:	787b      	ldrb	r3, [r7, #1]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	dbe2      	blt.n	8003ad6 <LCD_DrawPoint+0x46>
		for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1 ; XDir_Num++){
 8003b10:	89fb      	ldrh	r3, [r7, #14]
 8003b12:	3301      	adds	r3, #1
 8003b14:	81fb      	strh	r3, [r7, #14]
 8003b16:	89fa      	ldrh	r2, [r7, #14]
 8003b18:	787b      	ldrb	r3, [r7, #1]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	dbd6      	blt.n	8003ad0 <LCD_DrawPoint+0x40>
 8003b22:	e027      	b.n	8003b74 <LCD_DrawPoint+0xe4>
			}
		}
	}else{
		for(XDir_Num = 0; XDir_Num <  Dot_Pixel ; XDir_Num++){
 8003b24:	2300      	movs	r3, #0
 8003b26:	81fb      	strh	r3, [r7, #14]
 8003b28:	e01d      	b.n	8003b66 <LCD_DrawPoint+0xd6>
			for(YDir_Num = 0; YDir_Num <  Dot_Pixel ; YDir_Num++){
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	81bb      	strh	r3, [r7, #12]
 8003b2e:	e012      	b.n	8003b56 <LCD_DrawPoint+0xc6>
				LCD_SetPointlColor( Xpoint + XDir_Num - 1 , Ypoint + YDir_Num -1 , Color);
 8003b30:	88fa      	ldrh	r2, [r7, #6]
 8003b32:	89fb      	ldrh	r3, [r7, #14]
 8003b34:	4413      	add	r3, r2
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b298      	uxth	r0, r3
 8003b3c:	88ba      	ldrh	r2, [r7, #4]
 8003b3e:	89bb      	ldrh	r3, [r7, #12]
 8003b40:	4413      	add	r3, r2
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	887a      	ldrh	r2, [r7, #2]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	f7ff ff36 	bl	80039bc <LCD_SetPointlColor>
			for(YDir_Num = 0; YDir_Num <  Dot_Pixel ; YDir_Num++){
 8003b50:	89bb      	ldrh	r3, [r7, #12]
 8003b52:	3301      	adds	r3, #1
 8003b54:	81bb      	strh	r3, [r7, #12]
 8003b56:	787b      	ldrb	r3, [r7, #1]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	89ba      	ldrh	r2, [r7, #12]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d3e7      	bcc.n	8003b30 <LCD_DrawPoint+0xa0>
		for(XDir_Num = 0; XDir_Num <  Dot_Pixel ; XDir_Num++){
 8003b60:	89fb      	ldrh	r3, [r7, #14]
 8003b62:	3301      	adds	r3, #1
 8003b64:	81fb      	strh	r3, [r7, #14]
 8003b66:	787b      	ldrb	r3, [r7, #1]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	89fa      	ldrh	r2, [r7, #14]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d3dc      	bcc.n	8003b2a <LCD_DrawPoint+0x9a>
 8003b70:	e000      	b.n	8003b74 <LCD_DrawPoint+0xe4>
		return;
 8003b72:	bf00      	nop
			}
		}
	}	
}
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd90      	pop	{r4, r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	200005c8 	.word	0x200005c8

08003b80 <LCD_DrawLine>:
********************************************************************************/
void LCD_DrawLine ( POINT Xstart, POINT Ystart, 
					POINT Xend, POINT Yend, 
					COLOR Color,
					LINE_STYLE Line_Style,
					DOT_PIXEL Dot_Pixel){
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b08d      	sub	sp, #52	; 0x34
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	4604      	mov	r4, r0
 8003b88:	4608      	mov	r0, r1
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4623      	mov	r3, r4
 8003b90:	80fb      	strh	r3, [r7, #6]
 8003b92:	4603      	mov	r3, r0
 8003b94:	80bb      	strh	r3, [r7, #4]
 8003b96:	460b      	mov	r3, r1
 8003b98:	807b      	strh	r3, [r7, #2]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	803b      	strh	r3, [r7, #0]
						
	if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page || Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8003b9e:	4b4f      	ldr	r3, [pc, #316]	; (8003cdc <LCD_DrawLine+0x15c>)
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	88fa      	ldrh	r2, [r7, #6]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	f200 8091 	bhi.w	8003ccc <LCD_DrawLine+0x14c>
 8003baa:	4b4c      	ldr	r3, [pc, #304]	; (8003cdc <LCD_DrawLine+0x15c>)
 8003bac:	885b      	ldrh	r3, [r3, #2]
 8003bae:	88ba      	ldrh	r2, [r7, #4]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	f200 808b 	bhi.w	8003ccc <LCD_DrawLine+0x14c>
 8003bb6:	4b49      	ldr	r3, [pc, #292]	; (8003cdc <LCD_DrawLine+0x15c>)
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	887a      	ldrh	r2, [r7, #2]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	f200 8085 	bhi.w	8003ccc <LCD_DrawLine+0x14c>
 8003bc2:	4b46      	ldr	r3, [pc, #280]	; (8003cdc <LCD_DrawLine+0x15c>)
 8003bc4:	885b      	ldrh	r3, [r3, #2]
 8003bc6:	883a      	ldrh	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d87f      	bhi.n	8003ccc <LCD_DrawLine+0x14c>
		return;
	}	
	
	POINT Xpoint = Xstart; 
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	84fb      	strh	r3, [r7, #38]	; 0x26
	POINT Ypoint = Ystart; 
 8003bd0:	88bb      	ldrh	r3, [r7, #4]
 8003bd2:	84bb      	strh	r3, [r7, #36]	; 0x24
	int32_t dx = (int32_t)Xend - (int32_t)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8003bd4:	887a      	ldrh	r2, [r7, #2]
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	bfb8      	it	lt
 8003bde:	425b      	neglt	r3, r3
 8003be0:	61bb      	str	r3, [r7, #24]
	int32_t dy = (int32_t)Yend - (int32_t)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8003be2:	883a      	ldrh	r2, [r7, #0]
 8003be4:	88bb      	ldrh	r3, [r7, #4]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	bfb8      	it	lt
 8003bec:	425b      	neglt	r3, r3
 8003bee:	425b      	negs	r3, r3
 8003bf0:	617b      	str	r3, [r7, #20]
	
	// Increment direction, 1 is positive, -1 is counter;
	int32_t XAddway = Xstart < Xend ? 1 : -1;
 8003bf2:	88fa      	ldrh	r2, [r7, #6]
 8003bf4:	887b      	ldrh	r3, [r7, #2]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d201      	bcs.n	8003bfe <LCD_DrawLine+0x7e>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e001      	b.n	8003c02 <LCD_DrawLine+0x82>
 8003bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003c02:	613b      	str	r3, [r7, #16]
	int32_t YAddway = Ystart < Yend ? 1 : -1;
 8003c04:	88ba      	ldrh	r2, [r7, #4]
 8003c06:	883b      	ldrh	r3, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d201      	bcs.n	8003c10 <LCD_DrawLine+0x90>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e001      	b.n	8003c14 <LCD_DrawLine+0x94>
 8003c10:	f04f 33ff 	mov.w	r3, #4294967295
 8003c14:	60fb      	str	r3, [r7, #12]
	
	//Cumulative error
	int32_t Esp = dx + dy;
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	623b      	str	r3, [r7, #32]
	int8_t Line_Style_Temp = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	77fb      	strb	r3, [r7, #31]

	for (;;){
		Line_Style_Temp++;
 8003c22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	3301      	adds	r3, #1
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	77fb      	strb	r3, [r7, #31]
		//Painted dotted line, 2 point is really virtual
		if(Line_Style == LINE_DOTTED && Line_Style_Temp %3 == 0){
 8003c2e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d11b      	bne.n	8003c6e <LCD_DrawLine+0xee>
 8003c36:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8003c3a:	4b29      	ldr	r3, [pc, #164]	; (8003ce0 <LCD_DrawLine+0x160>)
 8003c3c:	fb83 3102 	smull	r3, r1, r3, r2
 8003c40:	17d3      	asrs	r3, r2, #31
 8003c42:	1ac9      	subs	r1, r1, r3
 8003c44:	460b      	mov	r3, r1
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	440b      	add	r3, r1
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	b25b      	sxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10d      	bne.n	8003c6e <LCD_DrawLine+0xee>
			LCD_DrawPoint( Xpoint, Ypoint, LCD_BACKGROUND, Dot_Pixel, DOT_STYLE_DFT);
 8003c52:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8003c56:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003c58:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c64:	f7ff ff14 	bl	8003a90 <LCD_DrawPoint>
			Line_Style_Temp = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e009      	b.n	8003c82 <LCD_DrawLine+0x102>
		}else{
			LCD_DrawPoint( Xpoint, Ypoint, Color, Dot_Pixel, DOT_STYLE_DFT);
 8003c6e:	f897 4040 	ldrb.w	r4, [r7, #64]	; 0x40
 8003c72:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003c74:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003c76:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003c78:	2301      	movs	r3, #1
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	4623      	mov	r3, r4
 8003c7e:	f7ff ff07 	bl	8003a90 <LCD_DrawPoint>
		}	
        if (2 * Esp >= dy) {
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	dc0c      	bgt.n	8003ca6 <LCD_DrawLine+0x126>
			if (Xpoint == Xend) break;			
 8003c8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003c8e:	887b      	ldrh	r3, [r7, #2]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d01d      	beq.n	8003cd0 <LCD_DrawLine+0x150>
            Esp += dy; 
 8003c94:	6a3a      	ldr	r2, [r7, #32]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	4413      	add	r3, r2
 8003c9a:	623b      	str	r3, [r7, #32]
			Xpoint += XAddway;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ca2:	4413      	add	r3, r2
 8003ca4:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	dbb8      	blt.n	8003c22 <LCD_DrawLine+0xa2>
			if (Ypoint == Yend) break;	
 8003cb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cb2:	883b      	ldrh	r3, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d00d      	beq.n	8003cd4 <LCD_DrawLine+0x154>
            Esp += dx; 
 8003cb8:	6a3a      	ldr	r2, [r7, #32]
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	623b      	str	r3, [r7, #32]
			Ypoint += YAddway;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cc6:	4413      	add	r3, r2
 8003cc8:	84bb      	strh	r3, [r7, #36]	; 0x24
		Line_Style_Temp++;
 8003cca:	e7aa      	b.n	8003c22 <LCD_DrawLine+0xa2>
		return;
 8003ccc:	bf00      	nop
 8003cce:	e002      	b.n	8003cd6 <LCD_DrawLine+0x156>
			if (Xpoint == Xend) break;			
 8003cd0:	bf00      	nop
 8003cd2:	e000      	b.n	8003cd6 <LCD_DrawLine+0x156>
			if (Ypoint == Yend) break;	
 8003cd4:	bf00      	nop
        }
	}
}   
 8003cd6:	372c      	adds	r7, #44	; 0x2c
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd90      	pop	{r4, r7, pc}
 8003cdc:	200005c8 	.word	0x200005c8
 8003ce0:	55555556 	.word	0x55555556

08003ce4 <LCD_DrawRectangle>:
********************************************************************************/
void LCD_DrawRectangle ( 	POINT Xstart, POINT Ystart, 
							POINT Xend, POINT Yend, 
							COLOR Color, 
							DRAW_FILL Filled,
							DOT_PIXEL Dot_Pixel ){
 8003ce4:	b590      	push	{r4, r7, lr}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af04      	add	r7, sp, #16
 8003cea:	4604      	mov	r4, r0
 8003cec:	4608      	mov	r0, r1
 8003cee:	4611      	mov	r1, r2
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4623      	mov	r3, r4
 8003cf4:	80fb      	strh	r3, [r7, #6]
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	80bb      	strh	r3, [r7, #4]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	807b      	strh	r3, [r7, #2]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	803b      	strh	r3, [r7, #0]
					
	if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page || Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8003d02:	4b2f      	ldr	r3, [pc, #188]	; (8003dc0 <LCD_DrawRectangle+0xdc>)
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	88fa      	ldrh	r2, [r7, #6]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d854      	bhi.n	8003db6 <LCD_DrawRectangle+0xd2>
 8003d0c:	4b2c      	ldr	r3, [pc, #176]	; (8003dc0 <LCD_DrawRectangle+0xdc>)
 8003d0e:	885b      	ldrh	r3, [r3, #2]
 8003d10:	88ba      	ldrh	r2, [r7, #4]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d84f      	bhi.n	8003db6 <LCD_DrawRectangle+0xd2>
 8003d16:	4b2a      	ldr	r3, [pc, #168]	; (8003dc0 <LCD_DrawRectangle+0xdc>)
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	887a      	ldrh	r2, [r7, #2]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d84a      	bhi.n	8003db6 <LCD_DrawRectangle+0xd2>
 8003d20:	4b27      	ldr	r3, [pc, #156]	; (8003dc0 <LCD_DrawRectangle+0xdc>)
 8003d22:	885b      	ldrh	r3, [r3, #2]
 8003d24:	883a      	ldrh	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d845      	bhi.n	8003db6 <LCD_DrawRectangle+0xd2>
		return;
	}	
	
	if ( Filled ){
 8003d2a:	7f3b      	ldrb	r3, [r7, #28]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d009      	beq.n	8003d44 <LCD_DrawRectangle+0x60>
		LCD_SetArealColor( Xstart, Ystart, Xend, Yend, Color);
 8003d30:	883c      	ldrh	r4, [r7, #0]
 8003d32:	887a      	ldrh	r2, [r7, #2]
 8003d34:	88b9      	ldrh	r1, [r7, #4]
 8003d36:	88f8      	ldrh	r0, [r7, #6]
 8003d38:	8b3b      	ldrh	r3, [r7, #24]
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	4623      	mov	r3, r4
 8003d3e:	f7ff fe63 	bl	8003a08 <LCD_SetArealColor>
 8003d42:	e039      	b.n	8003db8 <LCD_DrawRectangle+0xd4>
	}else{
		LCD_DrawLine ( Xstart, Ystart, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 8003d44:	88bc      	ldrh	r4, [r7, #4]
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	88b9      	ldrh	r1, [r7, #4]
 8003d4a:	88f8      	ldrh	r0, [r7, #6]
 8003d4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d50:	9302      	str	r3, [sp, #8]
 8003d52:	2300      	movs	r3, #0
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	8b3b      	ldrh	r3, [r7, #24]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	4623      	mov	r3, r4
 8003d5c:	f7ff ff10 	bl	8003b80 <LCD_DrawLine>
		LCD_DrawLine ( Xstart, Ystart, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 8003d60:	883c      	ldrh	r4, [r7, #0]
 8003d62:	88fa      	ldrh	r2, [r7, #6]
 8003d64:	88b9      	ldrh	r1, [r7, #4]
 8003d66:	88f8      	ldrh	r0, [r7, #6]
 8003d68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d6c:	9302      	str	r3, [sp, #8]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	9301      	str	r3, [sp, #4]
 8003d72:	8b3b      	ldrh	r3, [r7, #24]
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	4623      	mov	r3, r4
 8003d78:	f7ff ff02 	bl	8003b80 <LCD_DrawLine>
		LCD_DrawLine ( Xend, Yend, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 8003d7c:	88bc      	ldrh	r4, [r7, #4]
 8003d7e:	887a      	ldrh	r2, [r7, #2]
 8003d80:	8839      	ldrh	r1, [r7, #0]
 8003d82:	8878      	ldrh	r0, [r7, #2]
 8003d84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d88:	9302      	str	r3, [sp, #8]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	8b3b      	ldrh	r3, [r7, #24]
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	4623      	mov	r3, r4
 8003d94:	f7ff fef4 	bl	8003b80 <LCD_DrawLine>
		LCD_DrawLine ( Xend, Yend, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);		
 8003d98:	883c      	ldrh	r4, [r7, #0]
 8003d9a:	88fa      	ldrh	r2, [r7, #6]
 8003d9c:	8839      	ldrh	r1, [r7, #0]
 8003d9e:	8878      	ldrh	r0, [r7, #2]
 8003da0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003da4:	9302      	str	r3, [sp, #8]
 8003da6:	2300      	movs	r3, #0
 8003da8:	9301      	str	r3, [sp, #4]
 8003daa:	8b3b      	ldrh	r3, [r7, #24]
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	4623      	mov	r3, r4
 8003db0:	f7ff fee6 	bl	8003b80 <LCD_DrawLine>
 8003db4:	e000      	b.n	8003db8 <LCD_DrawRectangle+0xd4>
		return;
 8003db6:	bf00      	nop
	}
}
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd90      	pop	{r4, r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	200005c8 	.word	0x200005c8

08003dc4 <LCD_DrawCircle>:
			Filled : Whether it is filled: 1 filling 0��Do not
********************************************************************************/
void LCD_DrawCircle ( 	POINT X_Center, POINT Y_Center, LENGTH Radius, 
						COLOR Color, 
						DRAW_FILL  Draw_Fill ,
						DOT_PIXEL Dot_Pixel ){
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	4604      	mov	r4, r0
 8003dcc:	4608      	mov	r0, r1
 8003dce:	4611      	mov	r1, r2
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4623      	mov	r3, r4
 8003dd4:	80fb      	strh	r3, [r7, #6]
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	80bb      	strh	r3, [r7, #4]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	807b      	strh	r3, [r7, #2]
 8003dde:	4613      	mov	r3, r2
 8003de0:	803b      	strh	r3, [r7, #0]
							
	if (X_Center > sLCD_DIS.LCD_Dis_Column || Y_Center >= sLCD_DIS.LCD_Dis_Page) {
 8003de2:	4ba5      	ldr	r3, [pc, #660]	; (8004078 <LCD_DrawCircle+0x2b4>)
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	88fa      	ldrh	r2, [r7, #6]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	f200 8169 	bhi.w	80040c0 <LCD_DrawCircle+0x2fc>
 8003dee:	4ba2      	ldr	r3, [pc, #648]	; (8004078 <LCD_DrawCircle+0x2b4>)
 8003df0:	885b      	ldrh	r3, [r3, #2]
 8003df2:	88ba      	ldrh	r2, [r7, #4]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	f080 8163 	bcs.w	80040c0 <LCD_DrawCircle+0x2fc>
		return;
	}						
	
	//Draw a circle from (0, R) as a starting point
	int16_t XCurrent, YCurrent;
	XCurrent = 0; 
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	81fb      	strh	r3, [r7, #14]
	YCurrent = Radius;	
 8003dfe:	887b      	ldrh	r3, [r7, #2]
 8003e00:	81bb      	strh	r3, [r7, #12]
	
	//Cumulative error,judge the next point of the logo
	int16_t Esp = 3 - ( Radius << 1 );
 8003e02:	887b      	ldrh	r3, [r7, #2]
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	f1c3 0303 	rsb	r3, r3, #3
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	817b      	strh	r3, [r7, #10]
	
	int16_t sCountY;
	if ( Draw_Fill ){
 8003e10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 814b 	beq.w	80040b0 <LCD_DrawCircle+0x2ec>
		while ( XCurrent <= YCurrent ){ //Realistic circles			
 8003e1a:	e096      	b.n	8003f4a <LCD_DrawCircle+0x186>
			for ( sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {                      
 8003e1c:	89fb      	ldrh	r3, [r7, #14]
 8003e1e:	813b      	strh	r3, [r7, #8]
 8003e20:	e065      	b.n	8003eee <LCD_DrawCircle+0x12a>
				LCD_SetPointlColor ( X_Center + XCurrent, Y_Center + sCountY,   Color );           //1
 8003e22:	89fa      	ldrh	r2, [r7, #14]
 8003e24:	88fb      	ldrh	r3, [r7, #6]
 8003e26:	4413      	add	r3, r2
 8003e28:	b298      	uxth	r0, r3
 8003e2a:	893a      	ldrh	r2, [r7, #8]
 8003e2c:	88bb      	ldrh	r3, [r7, #4]
 8003e2e:	4413      	add	r3, r2
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	883a      	ldrh	r2, [r7, #0]
 8003e34:	4619      	mov	r1, r3
 8003e36:	f7ff fdc1 	bl	80039bc <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - XCurrent, Y_Center + sCountY,   Color );           //2       
 8003e3a:	89fb      	ldrh	r3, [r7, #14]
 8003e3c:	88fa      	ldrh	r2, [r7, #6]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	b298      	uxth	r0, r3
 8003e42:	893a      	ldrh	r2, [r7, #8]
 8003e44:	88bb      	ldrh	r3, [r7, #4]
 8003e46:	4413      	add	r3, r2
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	883a      	ldrh	r2, [r7, #0]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f7ff fdb5 	bl	80039bc <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - sCountY,   Y_Center + XCurrent, Color );           //3
 8003e52:	893b      	ldrh	r3, [r7, #8]
 8003e54:	88fa      	ldrh	r2, [r7, #6]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	b298      	uxth	r0, r3
 8003e5a:	89fa      	ldrh	r2, [r7, #14]
 8003e5c:	88bb      	ldrh	r3, [r7, #4]
 8003e5e:	4413      	add	r3, r2
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	883a      	ldrh	r2, [r7, #0]
 8003e64:	4619      	mov	r1, r3
 8003e66:	f7ff fda9 	bl	80039bc <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - sCountY,   Y_Center - XCurrent, Color );           //4
 8003e6a:	893b      	ldrh	r3, [r7, #8]
 8003e6c:	88fa      	ldrh	r2, [r7, #6]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	b298      	uxth	r0, r3
 8003e72:	89fb      	ldrh	r3, [r7, #14]
 8003e74:	88ba      	ldrh	r2, [r7, #4]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	883a      	ldrh	r2, [r7, #0]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	f7ff fd9d 	bl	80039bc <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - XCurrent, Y_Center - sCountY,   Color );           //5    
 8003e82:	89fb      	ldrh	r3, [r7, #14]
 8003e84:	88fa      	ldrh	r2, [r7, #6]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	b298      	uxth	r0, r3
 8003e8a:	893b      	ldrh	r3, [r7, #8]
 8003e8c:	88ba      	ldrh	r2, [r7, #4]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	883a      	ldrh	r2, [r7, #0]
 8003e94:	4619      	mov	r1, r3
 8003e96:	f7ff fd91 	bl	80039bc <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center + XCurrent, Y_Center - sCountY,   Color );           //6
 8003e9a:	89fa      	ldrh	r2, [r7, #14]
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	b298      	uxth	r0, r3
 8003ea2:	893b      	ldrh	r3, [r7, #8]
 8003ea4:	88ba      	ldrh	r2, [r7, #4]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	883a      	ldrh	r2, [r7, #0]
 8003eac:	4619      	mov	r1, r3
 8003eae:	f7ff fd85 	bl	80039bc <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center + sCountY,   Y_Center - XCurrent, Color );           //7 	
 8003eb2:	893a      	ldrh	r2, [r7, #8]
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	b298      	uxth	r0, r3
 8003eba:	89fb      	ldrh	r3, [r7, #14]
 8003ebc:	88ba      	ldrh	r2, [r7, #4]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	883a      	ldrh	r2, [r7, #0]
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	f7ff fd79 	bl	80039bc <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center + sCountY,   Y_Center + XCurrent, Color );           //0				
 8003eca:	893a      	ldrh	r2, [r7, #8]
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	4413      	add	r3, r2
 8003ed0:	b298      	uxth	r0, r3
 8003ed2:	89fa      	ldrh	r2, [r7, #14]
 8003ed4:	88bb      	ldrh	r3, [r7, #4]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	883a      	ldrh	r2, [r7, #0]
 8003edc:	4619      	mov	r1, r3
 8003ede:	f7ff fd6d 	bl	80039bc <LCD_SetPointlColor>
			for ( sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {                      
 8003ee2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3301      	adds	r3, #1
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	813b      	strh	r3, [r7, #8]
 8003eee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003ef2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	dd93      	ble.n	8003e22 <LCD_DrawCircle+0x5e>
			}
			if ( Esp < 0 ) 
 8003efa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	da09      	bge.n	8003f16 <LCD_DrawCircle+0x152>
				Esp += 4 * XCurrent + 6;	  
 8003f02:	89fb      	ldrh	r3, [r7, #14]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	897b      	ldrh	r3, [r7, #10]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3306      	adds	r3, #6
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	817b      	strh	r3, [r7, #10]
 8003f14:	e013      	b.n	8003f3e <LCD_DrawCircle+0x17a>
			else{
				Esp += 10 + 4 * ( XCurrent - YCurrent );   
 8003f16:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003f1a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	897b      	ldrh	r3, [r7, #10]
 8003f28:	4413      	add	r3, r2
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	330a      	adds	r3, #10
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	817b      	strh	r3, [r7, #10]
				YCurrent --;
 8003f32:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	81bb      	strh	r3, [r7, #12]
			}
			XCurrent ++;
 8003f3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3301      	adds	r3, #1
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	81fb      	strh	r3, [r7, #14]
		while ( XCurrent <= YCurrent ){ //Realistic circles			
 8003f4a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003f4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	f77f af62 	ble.w	8003e1c <LCD_DrawCircle+0x58>
 8003f58:	e0b3      	b.n	80040c2 <LCD_DrawCircle+0x2fe>
		}
	}else{ //Draw a hollow circle  
		while ( XCurrent <= YCurrent ){ 	
			LCD_DrawPoint ( X_Center + XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //1
 8003f5a:	89fa      	ldrh	r2, [r7, #14]
 8003f5c:	88fb      	ldrh	r3, [r7, #6]
 8003f5e:	4413      	add	r3, r2
 8003f60:	b298      	uxth	r0, r3
 8003f62:	89ba      	ldrh	r2, [r7, #12]
 8003f64:	88bb      	ldrh	r3, [r7, #4]
 8003f66:	4413      	add	r3, r2
 8003f68:	b299      	uxth	r1, r3
 8003f6a:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8003f6e:	883a      	ldrh	r2, [r7, #0]
 8003f70:	2301      	movs	r3, #1
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	4623      	mov	r3, r4
 8003f76:	f7ff fd8b 	bl	8003a90 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //2      
 8003f7a:	89fb      	ldrh	r3, [r7, #14]
 8003f7c:	88fa      	ldrh	r2, [r7, #6]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	b298      	uxth	r0, r3
 8003f82:	89ba      	ldrh	r2, [r7, #12]
 8003f84:	88bb      	ldrh	r3, [r7, #4]
 8003f86:	4413      	add	r3, r2
 8003f88:	b299      	uxth	r1, r3
 8003f8a:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8003f8e:	883a      	ldrh	r2, [r7, #0]
 8003f90:	2301      	movs	r3, #1
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	4623      	mov	r3, r4
 8003f96:	f7ff fd7b 	bl	8003a90 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //3
 8003f9a:	89bb      	ldrh	r3, [r7, #12]
 8003f9c:	88fa      	ldrh	r2, [r7, #6]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	b298      	uxth	r0, r3
 8003fa2:	89fa      	ldrh	r2, [r7, #14]
 8003fa4:	88bb      	ldrh	r3, [r7, #4]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	b299      	uxth	r1, r3
 8003faa:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8003fae:	883a      	ldrh	r2, [r7, #0]
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	4623      	mov	r3, r4
 8003fb6:	f7ff fd6b 	bl	8003a90 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //4
 8003fba:	89bb      	ldrh	r3, [r7, #12]
 8003fbc:	88fa      	ldrh	r2, [r7, #6]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	b298      	uxth	r0, r3
 8003fc2:	89fb      	ldrh	r3, [r7, #14]
 8003fc4:	88ba      	ldrh	r2, [r7, #4]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	b299      	uxth	r1, r3
 8003fca:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8003fce:	883a      	ldrh	r2, [r7, #0]
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	4623      	mov	r3, r4
 8003fd6:	f7ff fd5b 	bl	8003a90 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //5       
 8003fda:	89fb      	ldrh	r3, [r7, #14]
 8003fdc:	88fa      	ldrh	r2, [r7, #6]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	b298      	uxth	r0, r3
 8003fe2:	89bb      	ldrh	r3, [r7, #12]
 8003fe4:	88ba      	ldrh	r2, [r7, #4]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	b299      	uxth	r1, r3
 8003fea:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8003fee:	883a      	ldrh	r2, [r7, #0]
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	4623      	mov	r3, r4
 8003ff6:	f7ff fd4b 	bl	8003a90 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center + XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //6
 8003ffa:	89fa      	ldrh	r2, [r7, #14]
 8003ffc:	88fb      	ldrh	r3, [r7, #6]
 8003ffe:	4413      	add	r3, r2
 8004000:	b298      	uxth	r0, r3
 8004002:	89bb      	ldrh	r3, [r7, #12]
 8004004:	88ba      	ldrh	r2, [r7, #4]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	b299      	uxth	r1, r3
 800400a:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 800400e:	883a      	ldrh	r2, [r7, #0]
 8004010:	2301      	movs	r3, #1
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	4623      	mov	r3, r4
 8004016:	f7ff fd3b 	bl	8003a90 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center + YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //7 
 800401a:	89ba      	ldrh	r2, [r7, #12]
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	4413      	add	r3, r2
 8004020:	b298      	uxth	r0, r3
 8004022:	89fb      	ldrh	r3, [r7, #14]
 8004024:	88ba      	ldrh	r2, [r7, #4]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	b299      	uxth	r1, r3
 800402a:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 800402e:	883a      	ldrh	r2, [r7, #0]
 8004030:	2301      	movs	r3, #1
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	4623      	mov	r3, r4
 8004036:	f7ff fd2b 	bl	8003a90 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center + YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //0
 800403a:	89ba      	ldrh	r2, [r7, #12]
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	4413      	add	r3, r2
 8004040:	b298      	uxth	r0, r3
 8004042:	89fa      	ldrh	r2, [r7, #14]
 8004044:	88bb      	ldrh	r3, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	b299      	uxth	r1, r3
 800404a:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 800404e:	883a      	ldrh	r2, [r7, #0]
 8004050:	2301      	movs	r3, #1
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	4623      	mov	r3, r4
 8004056:	f7ff fd1b 	bl	8003a90 <LCD_DrawPoint>
			
			if ( Esp < 0 ) 
 800405a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800405e:	2b00      	cmp	r3, #0
 8004060:	da0c      	bge.n	800407c <LCD_DrawCircle+0x2b8>
				Esp += 4 * XCurrent + 6;	  
 8004062:	89fb      	ldrh	r3, [r7, #14]
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	b29a      	uxth	r2, r3
 8004068:	897b      	ldrh	r3, [r7, #10]
 800406a:	4413      	add	r3, r2
 800406c:	b29b      	uxth	r3, r3
 800406e:	3306      	adds	r3, #6
 8004070:	b29b      	uxth	r3, r3
 8004072:	817b      	strh	r3, [r7, #10]
 8004074:	e016      	b.n	80040a4 <LCD_DrawCircle+0x2e0>
 8004076:	bf00      	nop
 8004078:	200005c8 	.word	0x200005c8
			else{
				Esp += 10 + 4 * ( XCurrent - YCurrent );   
 800407c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004080:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	b29b      	uxth	r3, r3
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	b29a      	uxth	r2, r3
 800408c:	897b      	ldrh	r3, [r7, #10]
 800408e:	4413      	add	r3, r2
 8004090:	b29b      	uxth	r3, r3
 8004092:	330a      	adds	r3, #10
 8004094:	b29b      	uxth	r3, r3
 8004096:	817b      	strh	r3, [r7, #10]
				YCurrent --;
 8004098:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	81bb      	strh	r3, [r7, #12]
			}
			XCurrent ++;
 80040a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3301      	adds	r3, #1
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	81fb      	strh	r3, [r7, #14]
		while ( XCurrent <= YCurrent ){ 	
 80040b0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80040b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	f77f af4e 	ble.w	8003f5a <LCD_DrawCircle+0x196>
 80040be:	e000      	b.n	80040c2 <LCD_DrawCircle+0x2fe>
		return;
 80040c0:	bf00      	nop
		}
	}
}
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd90      	pop	{r4, r7, pc}

080040c8 <LCD_DisplayChar>:
			Font  ��A structure pointer that displays a character size
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
void LCD_DisplayChar( 	POINT Xpoint, POINT Ypoint, const char Acsii_Char,
						sFONT* Font, COLOR Color_Background,	COLOR Color_Foreground ){
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	607b      	str	r3, [r7, #4]
 80040d0:	4603      	mov	r3, r0
 80040d2:	81fb      	strh	r3, [r7, #14]
 80040d4:	460b      	mov	r3, r1
 80040d6:	81bb      	strh	r3, [r7, #12]
 80040d8:	4613      	mov	r3, r2
 80040da:	72fb      	strb	r3, [r7, #11]
	POINT Page, Column;
	
	if (Xpoint >= sLCD_DIS.LCD_Dis_Column || Ypoint >= sLCD_DIS.LCD_Dis_Page) {
 80040dc:	4b4d      	ldr	r3, [pc, #308]	; (8004214 <LCD_DisplayChar+0x14c>)
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	89fa      	ldrh	r2, [r7, #14]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	f080 8091 	bcs.w	800420a <LCD_DisplayChar+0x142>
 80040e8:	4b4a      	ldr	r3, [pc, #296]	; (8004214 <LCD_DisplayChar+0x14c>)
 80040ea:	885b      	ldrh	r3, [r3, #2]
 80040ec:	89ba      	ldrh	r2, [r7, #12]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	f080 808b 	bcs.w	800420a <LCD_DisplayChar+0x142>
		return;
	}
	
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80040f4:	7afb      	ldrb	r3, [r7, #11]
 80040f6:	3b20      	subs	r3, #32
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	88d2      	ldrh	r2, [r2, #6]
 80040fc:	fb02 f303 	mul.w	r3, r2, r3
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	8892      	ldrh	r2, [r2, #4]
 8004104:	08d2      	lsrs	r2, r2, #3
 8004106:	b292      	uxth	r2, r2
 8004108:	4611      	mov	r1, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	8892      	ldrh	r2, [r2, #4]
 800410e:	f002 0207 	and.w	r2, r2, #7
 8004112:	b292      	uxth	r2, r2
 8004114:	2a00      	cmp	r2, #0
 8004116:	bf14      	ite	ne
 8004118:	2201      	movne	r2, #1
 800411a:	2200      	moveq	r2, #0
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	440a      	add	r2, r1
 8004120:	fb02 f303 	mul.w	r3, r2, r3
 8004124:	617b      	str	r3, [r7, #20]
	const unsigned char* ptr = &Font->table[Char_Offset];
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	4413      	add	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]

	for ( Page = 0; Page < Font->Height; Page ++ ){
 8004130:	2300      	movs	r3, #0
 8004132:	83fb      	strh	r3, [r7, #30]
 8004134:	e063      	b.n	80041fe <LCD_DisplayChar+0x136>
		for ( Column = 0; Column < Font->Width; Column ++ ){
 8004136:	2300      	movs	r3, #0
 8004138:	83bb      	strh	r3, [r7, #28]
 800413a:	e04e      	b.n	80041da <LCD_DisplayChar+0x112>
			
			//To determine whether the font background color and screen background color is consistent
			if (FONT_BACKGROUND == Color_Background){//this process is to speed up the scan
 800413c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800413e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004142:	4293      	cmp	r3, r2
 8004144:	d118      	bne.n	8004178 <LCD_DisplayChar+0xb0>
				if (*ptr & (0x80 >> (Column % 8)))
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	4619      	mov	r1, r3
 800414c:	8bbb      	ldrh	r3, [r7, #28]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	2280      	movs	r2, #128	; 0x80
 8004154:	fa42 f303 	asr.w	r3, r2, r3
 8004158:	400b      	ands	r3, r1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d031      	beq.n	80041c2 <LCD_DisplayChar+0xfa>
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Foreground );
 800415e:	89fa      	ldrh	r2, [r7, #14]
 8004160:	8bbb      	ldrh	r3, [r7, #28]
 8004162:	4413      	add	r3, r2
 8004164:	b298      	uxth	r0, r3
 8004166:	89ba      	ldrh	r2, [r7, #12]
 8004168:	8bfb      	ldrh	r3, [r7, #30]
 800416a:	4413      	add	r3, r2
 800416c:	b29b      	uxth	r3, r3
 800416e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004170:	4619      	mov	r1, r3
 8004172:	f7ff fc23 	bl	80039bc <LCD_SetPointlColor>
 8004176:	e024      	b.n	80041c2 <LCD_DisplayChar+0xfa>
			}else{
				if (*ptr & (0x80 >> (Column % 8))){
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	4619      	mov	r1, r3
 800417e:	8bbb      	ldrh	r3, [r7, #28]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	2280      	movs	r2, #128	; 0x80
 8004186:	fa42 f303 	asr.w	r3, r2, r3
 800418a:	400b      	ands	r3, r1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00c      	beq.n	80041aa <LCD_DisplayChar+0xe2>
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Foreground );
 8004190:	89fa      	ldrh	r2, [r7, #14]
 8004192:	8bbb      	ldrh	r3, [r7, #28]
 8004194:	4413      	add	r3, r2
 8004196:	b298      	uxth	r0, r3
 8004198:	89ba      	ldrh	r2, [r7, #12]
 800419a:	8bfb      	ldrh	r3, [r7, #30]
 800419c:	4413      	add	r3, r2
 800419e:	b29b      	uxth	r3, r3
 80041a0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80041a2:	4619      	mov	r1, r3
 80041a4:	f7ff fc0a 	bl	80039bc <LCD_SetPointlColor>
 80041a8:	e00b      	b.n	80041c2 <LCD_DisplayChar+0xfa>
				}else{
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Background );
 80041aa:	89fa      	ldrh	r2, [r7, #14]
 80041ac:	8bbb      	ldrh	r3, [r7, #28]
 80041ae:	4413      	add	r3, r2
 80041b0:	b298      	uxth	r0, r3
 80041b2:	89ba      	ldrh	r2, [r7, #12]
 80041b4:	8bfb      	ldrh	r3, [r7, #30]
 80041b6:	4413      	add	r3, r2
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80041bc:	4619      	mov	r1, r3
 80041be:	f7ff fbfd 	bl	80039bc <LCD_SetPointlColor>
				}
			}
			//One pixel is 8 bits
            if (Column % 8 == 7) {
 80041c2:	8bbb      	ldrh	r3, [r7, #28]
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b07      	cmp	r3, #7
 80041cc:	d102      	bne.n	80041d4 <LCD_DisplayChar+0x10c>
                ptr++;
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	3301      	adds	r3, #1
 80041d2:	61bb      	str	r3, [r7, #24]
		for ( Column = 0; Column < Font->Width; Column ++ ){
 80041d4:	8bbb      	ldrh	r3, [r7, #28]
 80041d6:	3301      	adds	r3, #1
 80041d8:	83bb      	strh	r3, [r7, #28]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	889b      	ldrh	r3, [r3, #4]
 80041de:	8bba      	ldrh	r2, [r7, #28]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d3ab      	bcc.n	800413c <LCD_DisplayChar+0x74>
            }	
		}/* Write a line */
		if (Font->Width % 8 != 0) {
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	889b      	ldrh	r3, [r3, #4]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <LCD_DisplayChar+0x130>
				ptr++;
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	3301      	adds	r3, #1
 80041f6:	61bb      	str	r3, [r7, #24]
	for ( Page = 0; Page < Font->Height; Page ++ ){
 80041f8:	8bfb      	ldrh	r3, [r7, #30]
 80041fa:	3301      	adds	r3, #1
 80041fc:	83fb      	strh	r3, [r7, #30]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	88db      	ldrh	r3, [r3, #6]
 8004202:	8bfa      	ldrh	r2, [r7, #30]
 8004204:	429a      	cmp	r2, r3
 8004206:	d396      	bcc.n	8004136 <LCD_DisplayChar+0x6e>
 8004208:	e000      	b.n	800420c <LCD_DisplayChar+0x144>
		return;
 800420a:	bf00      	nop
		}
	}/* Write all */
}
 800420c:	3720      	adds	r7, #32
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	200005c8 	.word	0x200005c8

08004218 <LCD_DisplayString>:
			Font  ��A structure pointer that displays a character size
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
void LCD_DisplayString (	POINT Xstart, POINT Ystart, const char * pString, 
							sFONT* Font,COLOR Color_Background, COLOR Color_Foreground ){
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af02      	add	r7, sp, #8
 800421e:	60ba      	str	r2, [r7, #8]
 8004220:	607b      	str	r3, [r7, #4]
 8004222:	4603      	mov	r3, r0
 8004224:	81fb      	strh	r3, [r7, #14]
 8004226:	460b      	mov	r3, r1
 8004228:	81bb      	strh	r3, [r7, #12]
	POINT Xpoint = Xstart;
 800422a:	89fb      	ldrh	r3, [r7, #14]
 800422c:	82fb      	strh	r3, [r7, #22]
	POINT Ypoint = Ystart;
 800422e:	89bb      	ldrh	r3, [r7, #12]
 8004230:	82bb      	strh	r3, [r7, #20]

	if (Xstart >= sLCD_DIS.LCD_Dis_Column || Ystart >= sLCD_DIS.LCD_Dis_Page) {
 8004232:	4b21      	ldr	r3, [pc, #132]	; (80042b8 <LCD_DisplayString+0xa0>)
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	89fa      	ldrh	r2, [r7, #14]
 8004238:	429a      	cmp	r2, r3
 800423a:	d238      	bcs.n	80042ae <LCD_DisplayString+0x96>
 800423c:	4b1e      	ldr	r3, [pc, #120]	; (80042b8 <LCD_DisplayString+0xa0>)
 800423e:	885b      	ldrh	r3, [r3, #2]
 8004240:	89ba      	ldrh	r2, [r7, #12]
 8004242:	429a      	cmp	r2, r3
 8004244:	d233      	bcs.n	80042ae <LCD_DisplayString+0x96>
		return;
	}
		
	while ( * pString != '\0')
 8004246:	e02d      	b.n	80042a4 <LCD_DisplayString+0x8c>
	{
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the height of the character
		if ( ( Xpoint + Font->Width ) > sLCD_DIS.LCD_Dis_Column ){
 8004248:	8afb      	ldrh	r3, [r7, #22]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	8892      	ldrh	r2, [r2, #4]
 800424e:	4413      	add	r3, r2
 8004250:	4a19      	ldr	r2, [pc, #100]	; (80042b8 <LCD_DisplayString+0xa0>)
 8004252:	8812      	ldrh	r2, [r2, #0]
 8004254:	4293      	cmp	r3, r2
 8004256:	dd06      	ble.n	8004266 <LCD_DisplayString+0x4e>
			Xpoint = Xstart;
 8004258:	89fb      	ldrh	r3, [r7, #14]
 800425a:	82fb      	strh	r3, [r7, #22]
			Ypoint += Font->Height;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	88da      	ldrh	r2, [r3, #6]
 8004260:	8abb      	ldrh	r3, [r7, #20]
 8004262:	4413      	add	r3, r2
 8004264:	82bb      	strh	r3, [r7, #20]
		}
		
		// If the Y direction is full, reposition to (Xstart, Ystart)
		if ( ( Ypoint  + Font->Height ) > sLCD_DIS.LCD_Dis_Page ){
 8004266:	8abb      	ldrh	r3, [r7, #20]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	88d2      	ldrh	r2, [r2, #6]
 800426c:	4413      	add	r3, r2
 800426e:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <LCD_DisplayString+0xa0>)
 8004270:	8852      	ldrh	r2, [r2, #2]
 8004272:	4293      	cmp	r3, r2
 8004274:	dd03      	ble.n	800427e <LCD_DisplayString+0x66>
			Xpoint = Xstart;
 8004276:	89fb      	ldrh	r3, [r7, #14]
 8004278:	82fb      	strh	r3, [r7, #22]
			Ypoint = Ystart;
 800427a:	89bb      	ldrh	r3, [r7, #12]
 800427c:	82bb      	strh	r3, [r7, #20]
		}		
		LCD_DisplayChar ( Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground );
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	781a      	ldrb	r2, [r3, #0]
 8004282:	8ab9      	ldrh	r1, [r7, #20]
 8004284:	8af8      	ldrh	r0, [r7, #22]
 8004286:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	8c3b      	ldrh	r3, [r7, #32]
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f7ff ff1a 	bl	80040c8 <LCD_DisplayChar>
		
		//The next character of the address
		pString ++;
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	3301      	adds	r3, #1
 8004298:	60bb      	str	r3, [r7, #8]
		
		//The next word of the abscissa increases the font of the broadband
		Xpoint += Font->Width;	
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	889a      	ldrh	r2, [r3, #4]
 800429e:	8afb      	ldrh	r3, [r7, #22]
 80042a0:	4413      	add	r3, r2
 80042a2:	82fb      	strh	r3, [r7, #22]
	while ( * pString != '\0')
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1cd      	bne.n	8004248 <LCD_DisplayString+0x30>
 80042ac:	e000      	b.n	80042b0 <LCD_DisplayString+0x98>
		return;
 80042ae:	bf00      	nop
	}
}
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	200005c8 	.word	0x200005c8

080042bc <LCD_DisplayNum>:
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
#define  ARRAY_LEN 255
void LCD_DisplayNum(	POINT Xpoint, POINT Ypoint, int32_t Nummber, 
						sFONT* Font,COLOR Color_Background, COLOR Color_Foreground ){
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80042c2:	af02      	add	r7, sp, #8
 80042c4:	4604      	mov	r4, r0
 80042c6:	4608      	mov	r0, r1
 80042c8:	f107 0108 	add.w	r1, r7, #8
 80042cc:	600a      	str	r2, [r1, #0]
 80042ce:	1d3a      	adds	r2, r7, #4
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	f107 030e 	add.w	r3, r7, #14
 80042d6:	4622      	mov	r2, r4
 80042d8:	801a      	strh	r2, [r3, #0]
 80042da:	f107 030c 	add.w	r3, r7, #12
 80042de:	4602      	mov	r2, r0
 80042e0:	801a      	strh	r2, [r3, #0]
		
	int16_t Num_Bit = 0, Str_Bit = 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80042e8:	2300      	movs	r3, #0
 80042ea:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
	uint8_t Str_Array[ARRAY_LEN] = {0},Num_Array[ARRAY_LEN] = {0};
 80042ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80042f2:	4618      	mov	r0, r3
 80042f4:	23ff      	movs	r3, #255	; 0xff
 80042f6:	461a      	mov	r2, r3
 80042f8:	2100      	movs	r1, #0
 80042fa:	f005 fbe6 	bl	8009aca <memset>
 80042fe:	f107 0310 	add.w	r3, r7, #16
 8004302:	4618      	mov	r0, r3
 8004304:	23ff      	movs	r3, #255	; 0xff
 8004306:	461a      	mov	r2, r3
 8004308:	2100      	movs	r1, #0
 800430a:	f005 fbde 	bl	8009aca <memset>
	uint8_t *pStr = Str_Array;
 800430e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004312:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	
	if (Xpoint >= sLCD_DIS.LCD_Dis_Column || Ypoint >= sLCD_DIS.LCD_Dis_Page) {
 8004316:	4b39      	ldr	r3, [pc, #228]	; (80043fc <LCD_DisplayNum+0x140>)
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	f107 020e 	add.w	r2, r7, #14
 800431e:	8812      	ldrh	r2, [r2, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d266      	bcs.n	80043f2 <LCD_DisplayNum+0x136>
 8004324:	4b35      	ldr	r3, [pc, #212]	; (80043fc <LCD_DisplayNum+0x140>)
 8004326:	885b      	ldrh	r3, [r3, #2]
 8004328:	f107 020c 	add.w	r2, r7, #12
 800432c:	8812      	ldrh	r2, [r2, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d25f      	bcs.n	80043f2 <LCD_DisplayNum+0x136>
		return;
	}
	
	//Converts a number to a string
	while(Nummber){
 8004332:	e028      	b.n	8004386 <LCD_DisplayNum+0xca>
		Num_Array[Num_Bit] = Nummber % 10 + '0';
 8004334:	f107 0308 	add.w	r3, r7, #8
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b31      	ldr	r3, [pc, #196]	; (8004400 <LCD_DisplayNum+0x144>)
 800433c:	fb83 1302 	smull	r1, r3, r3, r2
 8004340:	1099      	asrs	r1, r3, #2
 8004342:	17d3      	asrs	r3, r2, #31
 8004344:	1ac9      	subs	r1, r1, r3
 8004346:	460b      	mov	r3, r1
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	1ad1      	subs	r1, r2, r3
 8004350:	b2ca      	uxtb	r2, r1
 8004352:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8004356:	3230      	adds	r2, #48	; 0x30
 8004358:	b2d1      	uxtb	r1, r2
 800435a:	f107 0210 	add.w	r2, r7, #16
 800435e:	54d1      	strb	r1, [r2, r3]
		Num_Bit++;
 8004360:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8004364:	b29b      	uxth	r3, r3
 8004366:	3301      	adds	r3, #1
 8004368:	b29b      	uxth	r3, r3
 800436a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
		Nummber /= 10;
 800436e:	f107 0208 	add.w	r2, r7, #8
 8004372:	f107 0308 	add.w	r3, r7, #8
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4921      	ldr	r1, [pc, #132]	; (8004400 <LCD_DisplayNum+0x144>)
 800437a:	fb81 0103 	smull	r0, r1, r1, r3
 800437e:	1089      	asrs	r1, r1, #2
 8004380:	17db      	asrs	r3, r3, #31
 8004382:	1acb      	subs	r3, r1, r3
 8004384:	6013      	str	r3, [r2, #0]
	while(Nummber){
 8004386:	f107 0308 	add.w	r3, r7, #8
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1d1      	bne.n	8004334 <LCD_DisplayNum+0x78>
    }
	
	//The string is inverted
	while( Num_Bit > 0){
 8004390:	e018      	b.n	80043c4 <LCD_DisplayNum+0x108>
		Str_Array[Str_Bit] = Num_Array[Num_Bit -1];
 8004392:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8004396:	1e5a      	subs	r2, r3, #1
 8004398:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 800439c:	f107 0110 	add.w	r1, r7, #16
 80043a0:	5c89      	ldrb	r1, [r1, r2]
 80043a2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80043a6:	54d1      	strb	r1, [r2, r3]
		Str_Bit ++;
 80043a8:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3301      	adds	r3, #1
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
		Num_Bit --;
 80043b6:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29b      	uxth	r3, r3
 80043c0:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
	while( Num_Bit > 0){
 80043c4:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	dce2      	bgt.n	8004392 <LCD_DisplayNum+0xd6>
	}
	
	//show
	LCD_DisplayString( Xpoint, Ypoint,  (const char*)pStr, Font, Color_Background, Color_Foreground );
 80043cc:	1d3b      	adds	r3, r7, #4
 80043ce:	f107 020c 	add.w	r2, r7, #12
 80043d2:	8811      	ldrh	r1, [r2, #0]
 80043d4:	f107 020e 	add.w	r2, r7, #14
 80043d8:	8810      	ldrh	r0, [r2, #0]
 80043da:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 80043de:	9201      	str	r2, [sp, #4]
 80043e0:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 80043e4:	9200      	str	r2, [sp, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80043ec:	f7ff ff14 	bl	8004218 <LCD_DisplayString>
 80043f0:	e000      	b.n	80043f4 <LCD_DisplayNum+0x138>
		return;
 80043f2:	bf00      	nop
}
 80043f4:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd90      	pop	{r4, r7, pc}
 80043fc:	200005c8 	.word	0x200005c8
 8004400:	66666667 	.word	0x66666667

08004404 <LCD_Show>:


void LCD_Show(void)
{
 8004404:	b5b0      	push	{r4, r5, r7, lr}
 8004406:	b090      	sub	sp, #64	; 0x40
 8004408:	af04      	add	r7, sp, #16
	if(sLCD_DIS.LCD_Dis_Column <= sLCD_DIS.LCD_Dis_Page){//Horizontal screen display
 800440a:	4ba7      	ldr	r3, [pc, #668]	; (80046a8 <LCD_Show+0x2a4>)
 800440c:	881a      	ldrh	r2, [r3, #0]
 800440e:	4ba6      	ldr	r3, [pc, #664]	; (80046a8 <LCD_Show+0x2a4>)
 8004410:	885b      	ldrh	r3, [r3, #2]
 8004412:	429a      	cmp	r2, r3
 8004414:	f200 8164 	bhi.w	80046e0 <LCD_Show+0x2dc>

		printf("LCD Draw Line \r\n");
 8004418:	48a4      	ldr	r0, [pc, #656]	; (80046ac <LCD_Show+0x2a8>)
 800441a:	f005 fbbb 	bl	8009b94 <puts>
		LCD_DrawLine(0, 10, sLCD_DIS.LCD_Dis_Column, 10, RED,LINE_SOLID, DOT_PIXEL_2X2);
 800441e:	4ba2      	ldr	r3, [pc, #648]	; (80046a8 <LCD_Show+0x2a4>)
 8004420:	881a      	ldrh	r2, [r3, #0]
 8004422:	2302      	movs	r3, #2
 8004424:	9302      	str	r3, [sp, #8]
 8004426:	2300      	movs	r3, #0
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	230a      	movs	r3, #10
 8004432:	210a      	movs	r1, #10
 8004434:	2000      	movs	r0, #0
 8004436:	f7ff fba3 	bl	8003b80 <LCD_DrawLine>
		LCD_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 10, sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page - 10, RED,LINE_SOLID, DOT_PIXEL_2X2);	
 800443a:	4b9b      	ldr	r3, [pc, #620]	; (80046a8 <LCD_Show+0x2a4>)
 800443c:	885b      	ldrh	r3, [r3, #2]
 800443e:	3b0a      	subs	r3, #10
 8004440:	b299      	uxth	r1, r3
 8004442:	4b99      	ldr	r3, [pc, #612]	; (80046a8 <LCD_Show+0x2a4>)
 8004444:	881a      	ldrh	r2, [r3, #0]
 8004446:	4b98      	ldr	r3, [pc, #608]	; (80046a8 <LCD_Show+0x2a4>)
 8004448:	885b      	ldrh	r3, [r3, #2]
 800444a:	3b0a      	subs	r3, #10
 800444c:	b298      	uxth	r0, r3
 800444e:	2302      	movs	r3, #2
 8004450:	9302      	str	r3, [sp, #8]
 8004452:	2300      	movs	r3, #0
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	4603      	mov	r3, r0
 800445e:	2000      	movs	r0, #0
 8004460:	f7ff fb8e 	bl	8003b80 <LCD_DrawLine>
		LCD_DrawLine(0, 20, sLCD_DIS.LCD_Dis_Column, 20, RED,LINE_DOTTED, DOT_PIXEL_DFT);
 8004464:	4b90      	ldr	r3, [pc, #576]	; (80046a8 <LCD_Show+0x2a4>)
 8004466:	881a      	ldrh	r2, [r3, #0]
 8004468:	2301      	movs	r3, #1
 800446a:	9302      	str	r3, [sp, #8]
 800446c:	2301      	movs	r3, #1
 800446e:	9301      	str	r3, [sp, #4]
 8004470:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	2314      	movs	r3, #20
 8004478:	2114      	movs	r1, #20
 800447a:	2000      	movs	r0, #0
 800447c:	f7ff fb80 	bl	8003b80 <LCD_DrawLine>
		LCD_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 20, sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page - 20, RED,LINE_DOTTED, DOT_PIXEL_DFT);
 8004480:	4b89      	ldr	r3, [pc, #548]	; (80046a8 <LCD_Show+0x2a4>)
 8004482:	885b      	ldrh	r3, [r3, #2]
 8004484:	3b14      	subs	r3, #20
 8004486:	b299      	uxth	r1, r3
 8004488:	4b87      	ldr	r3, [pc, #540]	; (80046a8 <LCD_Show+0x2a4>)
 800448a:	881a      	ldrh	r2, [r3, #0]
 800448c:	4b86      	ldr	r3, [pc, #536]	; (80046a8 <LCD_Show+0x2a4>)
 800448e:	885b      	ldrh	r3, [r3, #2]
 8004490:	3b14      	subs	r3, #20
 8004492:	b298      	uxth	r0, r3
 8004494:	2301      	movs	r3, #1
 8004496:	9302      	str	r3, [sp, #8]
 8004498:	2301      	movs	r3, #1
 800449a:	9301      	str	r3, [sp, #4]
 800449c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	4603      	mov	r3, r0
 80044a4:	2000      	movs	r0, #0
 80044a6:	f7ff fb6b 	bl	8003b80 <LCD_DrawLine>

		printf("LCD Draw Rectangle \r\n");
 80044aa:	4881      	ldr	r0, [pc, #516]	; (80046b0 <LCD_Show+0x2ac>)
 80044ac:	f005 fb72 	bl	8009b94 <puts>
		LCD_DrawRectangle(0,0,sLCD_DIS.LCD_Dis_Column,8,BLUE, DRAW_FULL, DOT_PIXEL_1X1);
 80044b0:	4b7d      	ldr	r3, [pc, #500]	; (80046a8 <LCD_Show+0x2a4>)
 80044b2:	881a      	ldrh	r2, [r3, #0]
 80044b4:	2301      	movs	r3, #1
 80044b6:	9302      	str	r3, [sp, #8]
 80044b8:	2301      	movs	r3, #1
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	231f      	movs	r3, #31
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	2308      	movs	r3, #8
 80044c2:	2100      	movs	r1, #0
 80044c4:	2000      	movs	r0, #0
 80044c6:	f7ff fc0d 	bl	8003ce4 <LCD_DrawRectangle>
		LCD_DrawRectangle(0,sLCD_DIS.LCD_Dis_Page - 10,sLCD_DIS.LCD_Dis_Column,sLCD_DIS.LCD_Dis_Page,BLUE, DRAW_FULL, DOT_PIXEL_1X1);
 80044ca:	4b77      	ldr	r3, [pc, #476]	; (80046a8 <LCD_Show+0x2a4>)
 80044cc:	885b      	ldrh	r3, [r3, #2]
 80044ce:	3b0a      	subs	r3, #10
 80044d0:	b299      	uxth	r1, r3
 80044d2:	4b75      	ldr	r3, [pc, #468]	; (80046a8 <LCD_Show+0x2a4>)
 80044d4:	881a      	ldrh	r2, [r3, #0]
 80044d6:	4b74      	ldr	r3, [pc, #464]	; (80046a8 <LCD_Show+0x2a4>)
 80044d8:	8858      	ldrh	r0, [r3, #2]
 80044da:	2301      	movs	r3, #1
 80044dc:	9302      	str	r3, [sp, #8]
 80044de:	2301      	movs	r3, #1
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	231f      	movs	r3, #31
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	4603      	mov	r3, r0
 80044e8:	2000      	movs	r0, #0
 80044ea:	f7ff fbfb 	bl	8003ce4 <LCD_DrawRectangle>
		LCD_DrawRectangle(1,1,sLCD_DIS.LCD_Dis_Column,sLCD_DIS.LCD_Dis_Page,RED,DRAW_EMPTY,DOT_PIXEL_2X2);
 80044ee:	4b6e      	ldr	r3, [pc, #440]	; (80046a8 <LCD_Show+0x2a4>)
 80044f0:	881a      	ldrh	r2, [r3, #0]
 80044f2:	4b6d      	ldr	r3, [pc, #436]	; (80046a8 <LCD_Show+0x2a4>)
 80044f4:	8859      	ldrh	r1, [r3, #2]
 80044f6:	2302      	movs	r3, #2
 80044f8:	9302      	str	r3, [sp, #8]
 80044fa:	2300      	movs	r3, #0
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	460b      	mov	r3, r1
 8004506:	2101      	movs	r1, #1
 8004508:	2001      	movs	r0, #1
 800450a:	f7ff fbeb 	bl	8003ce4 <LCD_DrawRectangle>
		
		printf("LCD Draw Olympic Rings\r\n");
 800450e:	4869      	ldr	r0, [pc, #420]	; (80046b4 <LCD_Show+0x2b0>)
 8004510:	f005 fb40 	bl	8009b94 <puts>
		uint16_t Cx1 = 40, Cy1 = 85, Cr = 12;
 8004514:	2328      	movs	r3, #40	; 0x28
 8004516:	833b      	strh	r3, [r7, #24]
 8004518:	2355      	movs	r3, #85	; 0x55
 800451a:	82fb      	strh	r3, [r7, #22]
 800451c:	230c      	movs	r3, #12
 800451e:	82bb      	strh	r3, [r7, #20]
		uint16_t Cx2 = Cx1 + (2.5 * Cr), Cy2 = Cy1;
 8004520:	8b3b      	ldrh	r3, [r7, #24]
 8004522:	4618      	mov	r0, r3
 8004524:	f7fb ffa2 	bl	800046c <__aeabi_i2d>
 8004528:	4604      	mov	r4, r0
 800452a:	460d      	mov	r5, r1
 800452c:	8abb      	ldrh	r3, [r7, #20]
 800452e:	4618      	mov	r0, r3
 8004530:	f7fb ff9c 	bl	800046c <__aeabi_i2d>
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	4b5f      	ldr	r3, [pc, #380]	; (80046b8 <LCD_Show+0x2b4>)
 800453a:	f7fc f801 	bl	8000540 <__aeabi_dmul>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4620      	mov	r0, r4
 8004544:	4629      	mov	r1, r5
 8004546:	f7fb fe45 	bl	80001d4 <__adddf3>
 800454a:	4603      	mov	r3, r0
 800454c:	460c      	mov	r4, r1
 800454e:	4618      	mov	r0, r3
 8004550:	4621      	mov	r1, r4
 8004552:	f7fc fa07 	bl	8000964 <__aeabi_d2uiz>
 8004556:	4603      	mov	r3, r0
 8004558:	827b      	strh	r3, [r7, #18]
 800455a:	8afb      	ldrh	r3, [r7, #22]
 800455c:	823b      	strh	r3, [r7, #16]
		uint16_t Cx3 = Cx1 + (5 * Cr), Cy3 = Cy1;
 800455e:	8abb      	ldrh	r3, [r7, #20]
 8004560:	461a      	mov	r2, r3
 8004562:	0092      	lsls	r2, r2, #2
 8004564:	4413      	add	r3, r2
 8004566:	b29a      	uxth	r2, r3
 8004568:	8b3b      	ldrh	r3, [r7, #24]
 800456a:	4413      	add	r3, r2
 800456c:	81fb      	strh	r3, [r7, #14]
 800456e:	8afb      	ldrh	r3, [r7, #22]
 8004570:	81bb      	strh	r3, [r7, #12]
		uint16_t Cx4 = ( Cx1 + Cx2 )/2, Cy4 = Cy1 + Cr;
 8004572:	8b3a      	ldrh	r2, [r7, #24]
 8004574:	8a7b      	ldrh	r3, [r7, #18]
 8004576:	4413      	add	r3, r2
 8004578:	0fda      	lsrs	r2, r3, #31
 800457a:	4413      	add	r3, r2
 800457c:	105b      	asrs	r3, r3, #1
 800457e:	817b      	strh	r3, [r7, #10]
 8004580:	8afa      	ldrh	r2, [r7, #22]
 8004582:	8abb      	ldrh	r3, [r7, #20]
 8004584:	4413      	add	r3, r2
 8004586:	813b      	strh	r3, [r7, #8]
		uint16_t Cx5 = ( Cx2 + Cx3 )/2, Cy5 = Cy1 + Cr;
 8004588:	8a7a      	ldrh	r2, [r7, #18]
 800458a:	89fb      	ldrh	r3, [r7, #14]
 800458c:	4413      	add	r3, r2
 800458e:	0fda      	lsrs	r2, r3, #31
 8004590:	4413      	add	r3, r2
 8004592:	105b      	asrs	r3, r3, #1
 8004594:	80fb      	strh	r3, [r7, #6]
 8004596:	8afa      	ldrh	r2, [r7, #22]
 8004598:	8abb      	ldrh	r3, [r7, #20]
 800459a:	4413      	add	r3, r2
 800459c:	80bb      	strh	r3, [r7, #4]

		LCD_DrawCircle( Cx1, Cy1, Cr, BLUE, DRAW_EMPTY, DOT_PIXEL_DFT);
 800459e:	8aba      	ldrh	r2, [r7, #20]
 80045a0:	8af9      	ldrh	r1, [r7, #22]
 80045a2:	8b38      	ldrh	r0, [r7, #24]
 80045a4:	2301      	movs	r3, #1
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	2300      	movs	r3, #0
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	231f      	movs	r3, #31
 80045ae:	f7ff fc09 	bl	8003dc4 <LCD_DrawCircle>
		LCD_DrawCircle( Cx2, Cy2, Cr, BLACK, DRAW_EMPTY, DOT_PIXEL_DFT);
 80045b2:	8aba      	ldrh	r2, [r7, #20]
 80045b4:	8a39      	ldrh	r1, [r7, #16]
 80045b6:	8a78      	ldrh	r0, [r7, #18]
 80045b8:	2301      	movs	r3, #1
 80045ba:	9301      	str	r3, [sp, #4]
 80045bc:	2300      	movs	r3, #0
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	2300      	movs	r3, #0
 80045c2:	f7ff fbff 	bl	8003dc4 <LCD_DrawCircle>
		LCD_DrawCircle( Cx3, Cy3, Cr, RED, DRAW_EMPTY, DOT_PIXEL_DFT);
 80045c6:	8aba      	ldrh	r2, [r7, #20]
 80045c8:	89b9      	ldrh	r1, [r7, #12]
 80045ca:	89f8      	ldrh	r0, [r7, #14]
 80045cc:	2301      	movs	r3, #1
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	2300      	movs	r3, #0
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045d8:	f7ff fbf4 	bl	8003dc4 <LCD_DrawCircle>
		LCD_DrawCircle( Cx4, Cy4, Cr, YELLOW, DRAW_EMPTY, DOT_PIXEL_DFT);
 80045dc:	8aba      	ldrh	r2, [r7, #20]
 80045de:	8939      	ldrh	r1, [r7, #8]
 80045e0:	8978      	ldrh	r0, [r7, #10]
 80045e2:	2301      	movs	r3, #1
 80045e4:	9301      	str	r3, [sp, #4]
 80045e6:	2300      	movs	r3, #0
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045ee:	f7ff fbe9 	bl	8003dc4 <LCD_DrawCircle>
		LCD_DrawCircle( Cx5, Cy5, Cr, GREEN, DRAW_EMPTY, DOT_PIXEL_DFT);
 80045f2:	8aba      	ldrh	r2, [r7, #20]
 80045f4:	88b9      	ldrh	r1, [r7, #4]
 80045f6:	88f8      	ldrh	r0, [r7, #6]
 80045f8:	2301      	movs	r3, #1
 80045fa:	9301      	str	r3, [sp, #4]
 80045fc:	2300      	movs	r3, #0
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004604:	f7ff fbde 	bl	8003dc4 <LCD_DrawCircle>

		printf("LCD Draw Realistic circles\r\n");
 8004608:	482c      	ldr	r0, [pc, #176]	; (80046bc <LCD_Show+0x2b8>)
 800460a:	f005 fac3 	bl	8009b94 <puts>
		LCD_DrawCircle(15, 110, 10, BRRED, DRAW_FULL, DOT_PIXEL_DFT);
 800460e:	2301      	movs	r3, #1
 8004610:	9301      	str	r3, [sp, #4]
 8004612:	2301      	movs	r3, #1
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	f64f 4307 	movw	r3, #64519	; 0xfc07
 800461a:	220a      	movs	r2, #10
 800461c:	216e      	movs	r1, #110	; 0x6e
 800461e:	200f      	movs	r0, #15
 8004620:	f7ff fbd0 	bl	8003dc4 <LCD_DrawCircle>
		LCD_DrawCircle(sLCD_DIS.LCD_Dis_Column - 15, 110, 10, BRRED, DRAW_FULL, DOT_PIXEL_DFT);
 8004624:	4b20      	ldr	r3, [pc, #128]	; (80046a8 <LCD_Show+0x2a4>)
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	3b0f      	subs	r3, #15
 800462a:	b298      	uxth	r0, r3
 800462c:	2301      	movs	r3, #1
 800462e:	9301      	str	r3, [sp, #4]
 8004630:	2301      	movs	r3, #1
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8004638:	220a      	movs	r2, #10
 800463a:	216e      	movs	r1, #110	; 0x6e
 800463c:	f7ff fbc2 	bl	8003dc4 <LCD_DrawCircle>

		printf("LCD Display String \r\n");
 8004640:	481f      	ldr	r0, [pc, #124]	; (80046c0 <LCD_Show+0x2bc>)
 8004642:	f005 faa7 	bl	8009b94 <puts>
		LCD_DisplayString(35,20,"WaveShare",&Font12,LCD_BACKGROUND,BLUE);
 8004646:	231f      	movs	r3, #31
 8004648:	9301      	str	r3, [sp, #4]
 800464a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	4b1c      	ldr	r3, [pc, #112]	; (80046c4 <LCD_Show+0x2c0>)
 8004652:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <LCD_Show+0x2c4>)
 8004654:	2114      	movs	r1, #20
 8004656:	2023      	movs	r0, #35	; 0x23
 8004658:	f7ff fdde 	bl	8004218 <LCD_DisplayString>
		LCD_DisplayString(32,33,"Electronic",&Font12,LCD_BACKGROUND,BLUE);
 800465c:	231f      	movs	r3, #31
 800465e:	9301      	str	r3, [sp, #4]
 8004660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	4b17      	ldr	r3, [pc, #92]	; (80046c4 <LCD_Show+0x2c0>)
 8004668:	4a18      	ldr	r2, [pc, #96]	; (80046cc <LCD_Show+0x2c8>)
 800466a:	2121      	movs	r1, #33	; 0x21
 800466c:	2020      	movs	r0, #32
 800466e:	f7ff fdd3 	bl	8004218 <LCD_DisplayString>
		LCD_DisplayString(28,45,"1.8inch TFTLCD",&Font8,RED,GRED);
 8004672:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004676:	9301      	str	r3, [sp, #4]
 8004678:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	4b14      	ldr	r3, [pc, #80]	; (80046d0 <LCD_Show+0x2cc>)
 8004680:	4a14      	ldr	r2, [pc, #80]	; (80046d4 <LCD_Show+0x2d0>)
 8004682:	212d      	movs	r1, #45	; 0x2d
 8004684:	201c      	movs	r0, #28
 8004686:	f7ff fdc7 	bl	8004218 <LCD_DisplayString>

		printf("LCD Display Nummber \r\n");
 800468a:	4813      	ldr	r0, [pc, #76]	; (80046d8 <LCD_Show+0x2d4>)
 800468c:	f005 fa82 	bl	8009b94 <puts>
		LCD_DisplayNum(28,55,1234567890,&Font12,LCD_BACKGROUND,BLUE);
 8004690:	231f      	movs	r3, #31
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <LCD_Show+0x2c0>)
 800469c:	4a0f      	ldr	r2, [pc, #60]	; (80046dc <LCD_Show+0x2d8>)
 800469e:	2137      	movs	r1, #55	; 0x37
 80046a0:	201c      	movs	r0, #28
 80046a2:	f7ff fe0b 	bl	80042bc <LCD_DisplayNum>

		printf("LCD Display Nummber \r\n");
		LCD_DisplayNum(35,50,1234567890,&Font12,LCD_BACKGROUND,BLUE);

	}
}
 80046a6:	e157      	b.n	8004958 <LCD_Show+0x554>
 80046a8:	200005c8 	.word	0x200005c8
 80046ac:	0800a3d4 	.word	0x0800a3d4
 80046b0:	0800a3e4 	.word	0x0800a3e4
 80046b4:	0800a3fc 	.word	0x0800a3fc
 80046b8:	40040000 	.word	0x40040000
 80046bc:	0800a414 	.word	0x0800a414
 80046c0:	0800a430 	.word	0x0800a430
 80046c4:	20000010 	.word	0x20000010
 80046c8:	0800a448 	.word	0x0800a448
 80046cc:	0800a454 	.word	0x0800a454
 80046d0:	20000018 	.word	0x20000018
 80046d4:	0800a460 	.word	0x0800a460
 80046d8:	0800a470 	.word	0x0800a470
 80046dc:	499602d2 	.word	0x499602d2
		printf("LCD Draw Line \r\n");
 80046e0:	489f      	ldr	r0, [pc, #636]	; (8004960 <LCD_Show+0x55c>)
 80046e2:	f005 fa57 	bl	8009b94 <puts>
		LCD_DrawLine(0, 10, sLCD_DIS.LCD_Dis_Column, 10, RED,LINE_SOLID, DOT_PIXEL_2X2);
 80046e6:	4b9f      	ldr	r3, [pc, #636]	; (8004964 <LCD_Show+0x560>)
 80046e8:	881a      	ldrh	r2, [r3, #0]
 80046ea:	2302      	movs	r3, #2
 80046ec:	9302      	str	r3, [sp, #8]
 80046ee:	2300      	movs	r3, #0
 80046f0:	9301      	str	r3, [sp, #4]
 80046f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	230a      	movs	r3, #10
 80046fa:	210a      	movs	r1, #10
 80046fc:	2000      	movs	r0, #0
 80046fe:	f7ff fa3f 	bl	8003b80 <LCD_DrawLine>
		LCD_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 10, sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page - 10, RED,LINE_SOLID, DOT_PIXEL_2X2);	
 8004702:	4b98      	ldr	r3, [pc, #608]	; (8004964 <LCD_Show+0x560>)
 8004704:	885b      	ldrh	r3, [r3, #2]
 8004706:	3b0a      	subs	r3, #10
 8004708:	b299      	uxth	r1, r3
 800470a:	4b96      	ldr	r3, [pc, #600]	; (8004964 <LCD_Show+0x560>)
 800470c:	881a      	ldrh	r2, [r3, #0]
 800470e:	4b95      	ldr	r3, [pc, #596]	; (8004964 <LCD_Show+0x560>)
 8004710:	885b      	ldrh	r3, [r3, #2]
 8004712:	3b0a      	subs	r3, #10
 8004714:	b298      	uxth	r0, r3
 8004716:	2302      	movs	r3, #2
 8004718:	9302      	str	r3, [sp, #8]
 800471a:	2300      	movs	r3, #0
 800471c:	9301      	str	r3, [sp, #4]
 800471e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	4603      	mov	r3, r0
 8004726:	2000      	movs	r0, #0
 8004728:	f7ff fa2a 	bl	8003b80 <LCD_DrawLine>
		LCD_DrawLine(0, 20, sLCD_DIS.LCD_Dis_Column, 20, RED,LINE_DOTTED, DOT_PIXEL_DFT);
 800472c:	4b8d      	ldr	r3, [pc, #564]	; (8004964 <LCD_Show+0x560>)
 800472e:	881a      	ldrh	r2, [r3, #0]
 8004730:	2301      	movs	r3, #1
 8004732:	9302      	str	r3, [sp, #8]
 8004734:	2301      	movs	r3, #1
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	2314      	movs	r3, #20
 8004740:	2114      	movs	r1, #20
 8004742:	2000      	movs	r0, #0
 8004744:	f7ff fa1c 	bl	8003b80 <LCD_DrawLine>
		LCD_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 20, sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page - 20, RED,LINE_DOTTED, DOT_PIXEL_DFT);
 8004748:	4b86      	ldr	r3, [pc, #536]	; (8004964 <LCD_Show+0x560>)
 800474a:	885b      	ldrh	r3, [r3, #2]
 800474c:	3b14      	subs	r3, #20
 800474e:	b299      	uxth	r1, r3
 8004750:	4b84      	ldr	r3, [pc, #528]	; (8004964 <LCD_Show+0x560>)
 8004752:	881a      	ldrh	r2, [r3, #0]
 8004754:	4b83      	ldr	r3, [pc, #524]	; (8004964 <LCD_Show+0x560>)
 8004756:	885b      	ldrh	r3, [r3, #2]
 8004758:	3b14      	subs	r3, #20
 800475a:	b298      	uxth	r0, r3
 800475c:	2301      	movs	r3, #1
 800475e:	9302      	str	r3, [sp, #8]
 8004760:	2301      	movs	r3, #1
 8004762:	9301      	str	r3, [sp, #4]
 8004764:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	4603      	mov	r3, r0
 800476c:	2000      	movs	r0, #0
 800476e:	f7ff fa07 	bl	8003b80 <LCD_DrawLine>
		printf("LCD Draw Rectangle \r\n");
 8004772:	487d      	ldr	r0, [pc, #500]	; (8004968 <LCD_Show+0x564>)
 8004774:	f005 fa0e 	bl	8009b94 <puts>
		LCD_DrawRectangle(0,0,sLCD_DIS.LCD_Dis_Column,8,BLUE, DRAW_FULL, DOT_PIXEL_1X1);
 8004778:	4b7a      	ldr	r3, [pc, #488]	; (8004964 <LCD_Show+0x560>)
 800477a:	881a      	ldrh	r2, [r3, #0]
 800477c:	2301      	movs	r3, #1
 800477e:	9302      	str	r3, [sp, #8]
 8004780:	2301      	movs	r3, #1
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	231f      	movs	r3, #31
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	2308      	movs	r3, #8
 800478a:	2100      	movs	r1, #0
 800478c:	2000      	movs	r0, #0
 800478e:	f7ff faa9 	bl	8003ce4 <LCD_DrawRectangle>
		LCD_DrawRectangle(0,sLCD_DIS.LCD_Dis_Page - 10,sLCD_DIS.LCD_Dis_Column,sLCD_DIS.LCD_Dis_Page,BLUE, DRAW_FULL, DOT_PIXEL_1X1);
 8004792:	4b74      	ldr	r3, [pc, #464]	; (8004964 <LCD_Show+0x560>)
 8004794:	885b      	ldrh	r3, [r3, #2]
 8004796:	3b0a      	subs	r3, #10
 8004798:	b299      	uxth	r1, r3
 800479a:	4b72      	ldr	r3, [pc, #456]	; (8004964 <LCD_Show+0x560>)
 800479c:	881a      	ldrh	r2, [r3, #0]
 800479e:	4b71      	ldr	r3, [pc, #452]	; (8004964 <LCD_Show+0x560>)
 80047a0:	8858      	ldrh	r0, [r3, #2]
 80047a2:	2301      	movs	r3, #1
 80047a4:	9302      	str	r3, [sp, #8]
 80047a6:	2301      	movs	r3, #1
 80047a8:	9301      	str	r3, [sp, #4]
 80047aa:	231f      	movs	r3, #31
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	4603      	mov	r3, r0
 80047b0:	2000      	movs	r0, #0
 80047b2:	f7ff fa97 	bl	8003ce4 <LCD_DrawRectangle>
		LCD_DrawRectangle(1,1,sLCD_DIS.LCD_Dis_Column,sLCD_DIS.LCD_Dis_Page,RED,DRAW_EMPTY,DOT_PIXEL_2X2);
 80047b6:	4b6b      	ldr	r3, [pc, #428]	; (8004964 <LCD_Show+0x560>)
 80047b8:	881a      	ldrh	r2, [r3, #0]
 80047ba:	4b6a      	ldr	r3, [pc, #424]	; (8004964 <LCD_Show+0x560>)
 80047bc:	8859      	ldrh	r1, [r3, #2]
 80047be:	2302      	movs	r3, #2
 80047c0:	9302      	str	r3, [sp, #8]
 80047c2:	2300      	movs	r3, #0
 80047c4:	9301      	str	r3, [sp, #4]
 80047c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	460b      	mov	r3, r1
 80047ce:	2101      	movs	r1, #1
 80047d0:	2001      	movs	r0, #1
 80047d2:	f7ff fa87 	bl	8003ce4 <LCD_DrawRectangle>
		printf("LCD Draw Olympic Rings\r\n");
 80047d6:	4865      	ldr	r0, [pc, #404]	; (800496c <LCD_Show+0x568>)
 80047d8:	f005 f9dc 	bl	8009b94 <puts>
		uint16_t Cx1 = 45, Cy1 = 80, Cr = 12;
 80047dc:	232d      	movs	r3, #45	; 0x2d
 80047de:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047e0:	2350      	movs	r3, #80	; 0x50
 80047e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80047e4:	230c      	movs	r3, #12
 80047e6:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t Cx2 = Cx1 + (2.5 * Cr), Cy2 = Cy1;
 80047e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fb fe3e 	bl	800046c <__aeabi_i2d>
 80047f0:	4604      	mov	r4, r0
 80047f2:	460d      	mov	r5, r1
 80047f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fb fe38 	bl	800046c <__aeabi_i2d>
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	4b5b      	ldr	r3, [pc, #364]	; (8004970 <LCD_Show+0x56c>)
 8004802:	f7fb fe9d 	bl	8000540 <__aeabi_dmul>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4620      	mov	r0, r4
 800480c:	4629      	mov	r1, r5
 800480e:	f7fb fce1 	bl	80001d4 <__adddf3>
 8004812:	4603      	mov	r3, r0
 8004814:	460c      	mov	r4, r1
 8004816:	4618      	mov	r0, r3
 8004818:	4621      	mov	r1, r4
 800481a:	f7fc f8a3 	bl	8000964 <__aeabi_d2uiz>
 800481e:	4603      	mov	r3, r0
 8004820:	853b      	strh	r3, [r7, #40]	; 0x28
 8004822:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004824:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t Cx3 = Cx1 + (5 * Cr), Cy3 = Cy1;
 8004826:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004828:	461a      	mov	r2, r3
 800482a:	0092      	lsls	r2, r2, #2
 800482c:	4413      	add	r3, r2
 800482e:	b29a      	uxth	r2, r3
 8004830:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004832:	4413      	add	r3, r2
 8004834:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004836:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004838:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t Cx4 = ( Cx1 + Cx2 )/2, Cy4 = Cy1 + Cr;
 800483a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800483c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800483e:	4413      	add	r3, r2
 8004840:	0fda      	lsrs	r2, r3, #31
 8004842:	4413      	add	r3, r2
 8004844:	105b      	asrs	r3, r3, #1
 8004846:	843b      	strh	r3, [r7, #32]
 8004848:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800484a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800484c:	4413      	add	r3, r2
 800484e:	83fb      	strh	r3, [r7, #30]
		uint16_t Cx5 = ( Cx2 + Cx3 )/2, Cy5 = Cy1 + Cr;
 8004850:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004854:	4413      	add	r3, r2
 8004856:	0fda      	lsrs	r2, r3, #31
 8004858:	4413      	add	r3, r2
 800485a:	105b      	asrs	r3, r3, #1
 800485c:	83bb      	strh	r3, [r7, #28]
 800485e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004860:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004862:	4413      	add	r3, r2
 8004864:	837b      	strh	r3, [r7, #26]
		LCD_DrawCircle( Cx1, Cy1, Cr, BLUE, DRAW_EMPTY, DOT_PIXEL_DFT);
 8004866:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004868:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800486a:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800486c:	2301      	movs	r3, #1
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	2300      	movs	r3, #0
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	231f      	movs	r3, #31
 8004876:	f7ff faa5 	bl	8003dc4 <LCD_DrawCircle>
		LCD_DrawCircle( Cx2, Cy2, Cr, BLACK, DRAW_EMPTY, DOT_PIXEL_DFT);
 800487a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800487c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800487e:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 8004880:	2301      	movs	r3, #1
 8004882:	9301      	str	r3, [sp, #4]
 8004884:	2300      	movs	r3, #0
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	2300      	movs	r3, #0
 800488a:	f7ff fa9b 	bl	8003dc4 <LCD_DrawCircle>
		LCD_DrawCircle( Cx3, Cy3, Cr, RED, DRAW_EMPTY, DOT_PIXEL_DFT);
 800488e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004890:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8004892:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8004894:	2301      	movs	r3, #1
 8004896:	9301      	str	r3, [sp, #4]
 8004898:	2300      	movs	r3, #0
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048a0:	f7ff fa90 	bl	8003dc4 <LCD_DrawCircle>
		LCD_DrawCircle( Cx4, Cy4, Cr, YELLOW, DRAW_EMPTY, DOT_PIXEL_DFT);
 80048a4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80048a6:	8bf9      	ldrh	r1, [r7, #30]
 80048a8:	8c38      	ldrh	r0, [r7, #32]
 80048aa:	2301      	movs	r3, #1
 80048ac:	9301      	str	r3, [sp, #4]
 80048ae:	2300      	movs	r3, #0
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80048b6:	f7ff fa85 	bl	8003dc4 <LCD_DrawCircle>
		LCD_DrawCircle( Cx5, Cy5, Cr, GREEN, DRAW_EMPTY, DOT_PIXEL_DFT);
 80048ba:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80048bc:	8b79      	ldrh	r1, [r7, #26]
 80048be:	8bb8      	ldrh	r0, [r7, #28]
 80048c0:	2301      	movs	r3, #1
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	2300      	movs	r3, #0
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80048cc:	f7ff fa7a 	bl	8003dc4 <LCD_DrawCircle>
		printf("LCD Draw Realistic circles\r\n");
 80048d0:	4828      	ldr	r0, [pc, #160]	; (8004974 <LCD_Show+0x570>)
 80048d2:	f005 f95f 	bl	8009b94 <puts>
		LCD_DrawCircle(15, 90, 10, BRRED, DRAW_FULL, DOT_PIXEL_DFT);
 80048d6:	2301      	movs	r3, #1
 80048d8:	9301      	str	r3, [sp, #4]
 80048da:	2301      	movs	r3, #1
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	f64f 4307 	movw	r3, #64519	; 0xfc07
 80048e2:	220a      	movs	r2, #10
 80048e4:	215a      	movs	r1, #90	; 0x5a
 80048e6:	200f      	movs	r0, #15
 80048e8:	f7ff fa6c 	bl	8003dc4 <LCD_DrawCircle>
		LCD_DrawCircle(sLCD_DIS.LCD_Dis_Column - 15, 90, 10, BRRED, DRAW_FULL, DOT_PIXEL_DFT);
 80048ec:	4b1d      	ldr	r3, [pc, #116]	; (8004964 <LCD_Show+0x560>)
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	3b0f      	subs	r3, #15
 80048f2:	b298      	uxth	r0, r3
 80048f4:	2301      	movs	r3, #1
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	2301      	movs	r3, #1
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8004900:	220a      	movs	r2, #10
 8004902:	215a      	movs	r1, #90	; 0x5a
 8004904:	f7ff fa5e 	bl	8003dc4 <LCD_DrawCircle>
		printf("LCD Display String \r\n");
 8004908:	481b      	ldr	r0, [pc, #108]	; (8004978 <LCD_Show+0x574>)
 800490a:	f005 f943 	bl	8009b94 <puts>
		LCD_DisplayString(10,20,"WaveShare Electronic",&Font12,LCD_BACKGROUND,BLUE);
 800490e:	231f      	movs	r3, #31
 8004910:	9301      	str	r3, [sp, #4]
 8004912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	4b18      	ldr	r3, [pc, #96]	; (800497c <LCD_Show+0x578>)
 800491a:	4a19      	ldr	r2, [pc, #100]	; (8004980 <LCD_Show+0x57c>)
 800491c:	2114      	movs	r1, #20
 800491e:	200a      	movs	r0, #10
 8004920:	f7ff fc7a 	bl	8004218 <LCD_DisplayString>
		LCD_DisplayString(35,35,"1.8inch TFTLCD",&Font12,RED,GRED);
 8004924:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	4b12      	ldr	r3, [pc, #72]	; (800497c <LCD_Show+0x578>)
 8004932:	4a14      	ldr	r2, [pc, #80]	; (8004984 <LCD_Show+0x580>)
 8004934:	2123      	movs	r1, #35	; 0x23
 8004936:	2023      	movs	r0, #35	; 0x23
 8004938:	f7ff fc6e 	bl	8004218 <LCD_DisplayString>
		printf("LCD Display Nummber \r\n");
 800493c:	4812      	ldr	r0, [pc, #72]	; (8004988 <LCD_Show+0x584>)
 800493e:	f005 f929 	bl	8009b94 <puts>
		LCD_DisplayNum(35,50,1234567890,&Font12,LCD_BACKGROUND,BLUE);
 8004942:	231f      	movs	r3, #31
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	4b0b      	ldr	r3, [pc, #44]	; (800497c <LCD_Show+0x578>)
 800494e:	4a0f      	ldr	r2, [pc, #60]	; (800498c <LCD_Show+0x588>)
 8004950:	2132      	movs	r1, #50	; 0x32
 8004952:	2023      	movs	r0, #35	; 0x23
 8004954:	f7ff fcb2 	bl	80042bc <LCD_DisplayNum>
}
 8004958:	bf00      	nop
 800495a:	3730      	adds	r7, #48	; 0x30
 800495c:	46bd      	mov	sp, r7
 800495e:	bdb0      	pop	{r4, r5, r7, pc}
 8004960:	0800a3d4 	.word	0x0800a3d4
 8004964:	200005c8 	.word	0x200005c8
 8004968:	0800a3e4 	.word	0x0800a3e4
 800496c:	0800a3fc 	.word	0x0800a3fc
 8004970:	40040000 	.word	0x40040000
 8004974:	0800a414 	.word	0x0800a414
 8004978:	0800a430 	.word	0x0800a430
 800497c:	20000010 	.word	0x20000010
 8004980:	0800a488 	.word	0x0800a488
 8004984:	0800a460 	.word	0x0800a460
 8004988:	0800a470 	.word	0x0800a470
 800498c:	499602d2 	.word	0x499602d2

08004990 <SPI_Write_Byte>:
/*********************************************


*********************************************/	
 uint8_t SPI_Write_Byte(uint8_t value)                                    
{    
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	71fb      	strb	r3, [r7, #7]
		Driver_Delay_us(10);
		value = (value << 1); 	
	}
#else
	
    __HAL_SPI_ENABLE(&hspi1);
 800499a:	4b17      	ldr	r3, [pc, #92]	; (80049f8 <SPI_Write_Byte+0x68>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <SPI_Write_Byte+0x68>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049a8:	601a      	str	r2, [r3, #0]
	SPI1->CR2 |= (1)<<12;
 80049aa:	4b14      	ldr	r3, [pc, #80]	; (80049fc <SPI_Write_Byte+0x6c>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	4a13      	ldr	r2, [pc, #76]	; (80049fc <SPI_Write_Byte+0x6c>)
 80049b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049b4:	6053      	str	r3, [r2, #4]
	
	while((SPI1->SR & (1<<1)) == 0)
 80049b6:	bf00      	nop
 80049b8:	4b10      	ldr	r3, [pc, #64]	; (80049fc <SPI_Write_Byte+0x6c>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f9      	beq.n	80049b8 <SPI_Write_Byte+0x28>
		;
        
        *((__IO uint8_t *)(&SPI1->DR)) = value;
 80049c4:	4a0e      	ldr	r2, [pc, #56]	; (8004a00 <SPI_Write_Byte+0x70>)
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	7013      	strb	r3, [r2, #0]
        
        while(SPI1->SR & (1<<7)) ; //Wait for not busy
 80049ca:	bf00      	nop
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <SPI_Write_Byte+0x6c>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f9      	bne.n	80049cc <SPI_Write_Byte+0x3c>

        while((SPI1->SR & (1<<0)) == 0) ; // Wait for the receiving area to be empty
 80049d8:	bf00      	nop
 80049da:	4b08      	ldr	r3, [pc, #32]	; (80049fc <SPI_Write_Byte+0x6c>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f9      	beq.n	80049da <SPI_Write_Byte+0x4a>
        
        return *((__IO uint8_t *)(&SPI1->DR));
 80049e6:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <SPI_Write_Byte+0x70>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	b2db      	uxtb	r3, r3

#endif
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	2000056c 	.word	0x2000056c
 80049fc:	40013000 	.word	0x40013000
 8004a00:	4001300c 	.word	0x4001300c

08004a04 <Driver_Delay_ms>:
/*********************************************


*********************************************/	
void Driver_Delay_ms(uint32_t xms)	
{	
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7fc fdd9 	bl	80015c4 <HAL_Delay>
}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a24:	2300      	movs	r3, #0
 8004a26:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004a28:	6839      	ldr	r1, [r7, #0]
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f001 fccd 	bl	80063ca <VL53L0X_get_offset_calibration_data_micro_meter>
 8004a30:	4603      	mov	r3, r0
 8004a32:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8004a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004a40:	b5b0      	push	{r4, r5, r7, lr}
 8004a42:	b096      	sub	sp, #88	; 0x58
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8004a4e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d107      	bne.n	8004a66 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004a56:	2200      	movs	r2, #0
 8004a58:	2188      	movs	r1, #136	; 0x88
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f004 fed0 	bl	8009800 <VL53L0X_WrByte>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a74:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004a7e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a9e      	ldr	r2, [pc, #632]	; (8004d00 <VL53L0X_DataInit+0x2c0>)
 8004a86:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a9d      	ldr	r2, [pc, #628]	; (8004d04 <VL53L0X_DataInit+0x2c4>)
 8004a8e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004a98:	f107 0310 	add.w	r3, r7, #16
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fac2 	bl	8005028 <VL53L0X_GetDeviceParameters>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8004aaa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d112      	bne.n	8004ad8 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f103 0410 	add.w	r4, r3, #16
 8004ac0:	f107 0510 	add.w	r5, r7, #16
 8004ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ad0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004ad4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2264      	movs	r2, #100	; 0x64
 8004adc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004ae6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004af0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004afa:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004b06:	2201      	movs	r2, #1
 8004b08:	2180      	movs	r1, #128	; 0x80
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f004 fe78 	bl	8009800 <VL53L0X_WrByte>
 8004b10:	4603      	mov	r3, r0
 8004b12:	461a      	mov	r2, r3
 8004b14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004b1e:	2201      	movs	r2, #1
 8004b20:	21ff      	movs	r1, #255	; 0xff
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f004 fe6c 	bl	8009800 <VL53L0X_WrByte>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004b36:	2200      	movs	r2, #0
 8004b38:	2100      	movs	r1, #0
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f004 fe60 	bl	8009800 <VL53L0X_WrByte>
 8004b40:	4603      	mov	r3, r0
 8004b42:	461a      	mov	r2, r3
 8004b44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004b4e:	f107 030f 	add.w	r3, r7, #15
 8004b52:	461a      	mov	r2, r3
 8004b54:	2191      	movs	r1, #145	; 0x91
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f004 fed4 	bl	8009904 <VL53L0X_RdByte>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004b6a:	7bfa      	ldrb	r2, [r7, #15]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004b72:	2201      	movs	r2, #1
 8004b74:	2100      	movs	r1, #0
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f004 fe42 	bl	8009800 <VL53L0X_WrByte>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	21ff      	movs	r1, #255	; 0xff
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f004 fe36 	bl	8009800 <VL53L0X_WrByte>
 8004b94:	4603      	mov	r3, r0
 8004b96:	461a      	mov	r2, r3
 8004b98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2180      	movs	r1, #128	; 0x80
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f004 fe2a 	bl	8009800 <VL53L0X_WrByte>
 8004bac:	4603      	mov	r3, r0
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004bba:	2300      	movs	r3, #0
 8004bbc:	653b      	str	r3, [r7, #80]	; 0x50
 8004bbe:	e014      	b.n	8004bea <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8004bc0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d114      	bne.n	8004bf2 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2201      	movs	r2, #1
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fd51 	bl	8005678 <VL53L0X_SetLimitCheckEnable>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be6:	3301      	adds	r3, #1
 8004be8:	653b      	str	r3, [r7, #80]	; 0x50
 8004bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bec:	2b05      	cmp	r3, #5
 8004bee:	dde7      	ble.n	8004bc0 <VL53L0X_DataInit+0x180>
 8004bf0:	e000      	b.n	8004bf4 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8004bf2:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8004bf4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d107      	bne.n	8004c0c <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2102      	movs	r1, #2
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fd39 	bl	8005678 <VL53L0X_SetLimitCheckEnable>
 8004c06:	4603      	mov	r3, r0
 8004c08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004c0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d107      	bne.n	8004c24 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c14:	2200      	movs	r2, #0
 8004c16:	2103      	movs	r1, #3
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fd2d 	bl	8005678 <VL53L0X_SetLimitCheckEnable>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004c24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d107      	bne.n	8004c3c <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2104      	movs	r1, #4
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fd21 	bl	8005678 <VL53L0X_SetLimitCheckEnable>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004c3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d107      	bne.n	8004c54 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c44:	2200      	movs	r2, #0
 8004c46:	2105      	movs	r1, #5
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fd15 	bl	8005678 <VL53L0X_SetLimitCheckEnable>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004c54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d108      	bne.n	8004c6e <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004c5c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8004c60:	2100      	movs	r1, #0
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fdb8 	bl	80057d8 <VL53L0X_SetLimitCheckValue>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004c6e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d108      	bne.n	8004c88 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004c76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fdab 	bl	80057d8 <VL53L0X_SetLimitCheckValue>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004c88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d108      	bne.n	8004ca2 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004c90:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8004c94:	2102      	movs	r1, #2
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fd9e 	bl	80057d8 <VL53L0X_SetLimitCheckValue>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004ca2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d107      	bne.n	8004cba <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004caa:	2200      	movs	r2, #0
 8004cac:	2103      	movs	r1, #3
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fd92 	bl	80057d8 <VL53L0X_SetLimitCheckValue>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004cba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10f      	bne.n	8004ce2 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	22ff      	movs	r2, #255	; 0xff
 8004cc6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004cca:	22ff      	movs	r2, #255	; 0xff
 8004ccc:	2101      	movs	r1, #1
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f004 fd96 	bl	8009800 <VL53L0X_WrByte>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004ce2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d103      	bne.n	8004cf2 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8004cf2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3758      	adds	r7, #88	; 0x58
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	00016b85 	.word	0x00016b85
 8004d04:	000970a4 	.word	0x000970a4

08004d08 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8004d08:	b5b0      	push	{r4, r5, r7, lr}
 8004d0a:	b09e      	sub	sp, #120	; 0x78
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d10:	2300      	movs	r3, #0
 8004d12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8004d16:	f107 031c 	add.w	r3, r7, #28
 8004d1a:	2240      	movs	r2, #64	; 0x40
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f004 fed3 	bl	8009aca <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8004d44:	2101      	movs	r1, #1
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f002 fa95 	bl	8007276 <VL53L0X_get_info_from_device>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8004d58:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8004d60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8004d64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d80d      	bhi.n	8004d88 <VL53L0X_StaticInit+0x80>
 8004d6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d102      	bne.n	8004d7a <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8004d74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d806      	bhi.n	8004d88 <VL53L0X_StaticInit+0x80>
 8004d7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10e      	bne.n	8004da0 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8004d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d84:	2b0c      	cmp	r3, #12
 8004d86:	d90b      	bls.n	8004da0 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8004d88:	f107 0218 	add.w	r2, r7, #24
 8004d8c:	f107 0314 	add.w	r3, r7, #20
 8004d90:	4619      	mov	r1, r3
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f001 fd14 	bl	80067c0 <VL53L0X_perform_ref_spad_management>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004d9e:	e009      	b.n	8004db4 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8004da0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004da4:	461a      	mov	r2, r3
 8004da6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f001 ff15 	bl	8006bd8 <VL53L0X_set_reference_spads>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8004db4:	4b94      	ldr	r3, [pc, #592]	; (8005008 <VL53L0X_StaticInit+0x300>)
 8004db6:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8004db8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10f      	bne.n	8004de0 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8004dc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8004dca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d104      	bne.n	8004ddc <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004dd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dda:	e001      	b.n	8004de0 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8004ddc:	4b8a      	ldr	r3, [pc, #552]	; (8005008 <VL53L0X_StaticInit+0x300>)
 8004dde:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004de0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d106      	bne.n	8004df6 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8004de8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f003 fde8 	bl	80089c0 <VL53L0X_load_tuning_settings>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8004df6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8004dfe:	2300      	movs	r3, #0
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	2304      	movs	r3, #4
 8004e04:	2200      	movs	r2, #0
 8004e06:	2100      	movs	r1, #0
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f001 f90d 	bl	8006028 <VL53L0X_SetGpioConfig>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e14:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d121      	bne.n	8004e60 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	21ff      	movs	r1, #255	; 0xff
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f004 fced 	bl	8009800 <VL53L0X_WrByte>
 8004e26:	4603      	mov	r3, r0
 8004e28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8004e2c:	f107 031a 	add.w	r3, r7, #26
 8004e30:	461a      	mov	r2, r3
 8004e32:	2184      	movs	r1, #132	; 0x84
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f004 fd8f 	bl	8009958 <VL53L0X_RdWord>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004e48:	2200      	movs	r2, #0
 8004e4a:	21ff      	movs	r1, #255	; 0xff
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f004 fcd7 	bl	8009800 <VL53L0X_WrByte>
 8004e52:	4603      	mov	r3, r0
 8004e54:	461a      	mov	r2, r3
 8004e56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e60:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d105      	bne.n	8004e74 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8004e68:	8b7b      	ldrh	r3, [r7, #26]
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8004e74:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d108      	bne.n	8004e8e <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004e7c:	f107 031c 	add.w	r3, r7, #28
 8004e80:	4619      	mov	r1, r3
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f8d0 	bl	8005028 <VL53L0X_GetDeviceParameters>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8004e8e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d110      	bne.n	8004eb8 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8004e96:	f107 0319 	add.w	r3, r7, #25
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f9ae 	bl	80051fe <VL53L0X_GetFractionEnable>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8004ea8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d103      	bne.n	8004eb8 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8004eb0:	7e7a      	ldrb	r2, [r7, #25]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004eb8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10e      	bne.n	8004ede <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f103 0410 	add.w	r4, r3, #16
 8004ec6:	f107 051c 	add.w	r5, r7, #28
 8004eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ed6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004eda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8004ede:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d111      	bne.n	8004f0a <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8004ee6:	f107 0319 	add.w	r3, r7, #25
 8004eea:	461a      	mov	r2, r3
 8004eec:	2101      	movs	r1, #1
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f004 fd08 	bl	8009904 <VL53L0X_RdByte>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8004efa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d103      	bne.n	8004f0a <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8004f02:	7e7a      	ldrb	r2, [r7, #25]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8004f0a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d107      	bne.n	8004f22 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004f12:	2200      	movs	r2, #0
 8004f14:	2100      	movs	r1, #0
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f9e6 	bl	80052e8 <VL53L0X_SetSequenceStepEnable>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004f22:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d107      	bne.n	8004f3a <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2102      	movs	r1, #2
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f9da 	bl	80052e8 <VL53L0X_SetSequenceStepEnable>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8004f3a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d103      	bne.n	8004f4a <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2203      	movs	r2, #3
 8004f46:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004f4a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d109      	bne.n	8004f66 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004f52:	f107 0313 	add.w	r3, r7, #19
 8004f56:	461a      	mov	r2, r3
 8004f58:	2100      	movs	r1, #0
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f9ac 	bl	80052b8 <VL53L0X_GetVcselPulsePeriod>
 8004f60:	4603      	mov	r3, r0
 8004f62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004f66:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d103      	bne.n	8004f76 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004f6e:	7cfa      	ldrb	r2, [r7, #19]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004f76:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d109      	bne.n	8004f92 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004f7e:	f107 0313 	add.w	r3, r7, #19
 8004f82:	461a      	mov	r2, r3
 8004f84:	2101      	movs	r1, #1
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f996 	bl	80052b8 <VL53L0X_GetVcselPulsePeriod>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004f92:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d103      	bne.n	8004fa2 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004f9a:	7cfa      	ldrb	r2, [r7, #19]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8004fa2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d109      	bne.n	8004fbe <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8004faa:	f107 030c 	add.w	r3, r7, #12
 8004fae:	461a      	mov	r2, r3
 8004fb0:	2103      	movs	r1, #3
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f002 fee0 	bl	8007d78 <get_sequence_step_timeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004fbe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d103      	bne.n	8004fce <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8004fce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8004fd6:	f107 030c 	add.w	r3, r7, #12
 8004fda:	461a      	mov	r2, r3
 8004fdc:	2104      	movs	r1, #4
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f002 feca 	bl	8007d78 <get_sequence_step_timeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004fea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d103      	bne.n	8004ffa <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ffa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3770      	adds	r7, #112	; 0x70
 8005002:	46bd      	mov	sp, r7
 8005004:	bdb0      	pop	{r4, r5, r7, pc}
 8005006:	bf00      	nop
 8005008:	20000020 	.word	0x20000020

0800500c <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8005014:	239d      	movs	r3, #157	; 0x9d
 8005016:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8005018:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005032:	2300      	movs	r3, #0
 8005034:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	4619      	mov	r1, r3
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f8cc 	bl	80051d8 <VL53L0X_GetDeviceMode>
 8005040:	4603      	mov	r3, r0
 8005042:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d107      	bne.n	800505c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	3308      	adds	r3, #8
 8005050:	4619      	mov	r1, r3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fa94 	bl	8005580 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8005058:	4603      	mov	r3, r0
 800505a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800505c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2200      	movs	r2, #0
 8005068:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800506a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d107      	bne.n	8005082 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	3310      	adds	r3, #16
 8005076:	4619      	mov	r1, r3
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 faca 	bl	8005612 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800507e:	4603      	mov	r3, r0
 8005080:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8005082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d107      	bne.n	800509a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	3314      	adds	r3, #20
 800508e:	4619      	mov	r1, r3
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff fcc2 	bl	8004a1a <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8005096:	4603      	mov	r3, r0
 8005098:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800509a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d134      	bne.n	800510c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80050a2:	2300      	movs	r3, #0
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	e02a      	b.n	80050fe <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80050a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d12a      	bne.n	8005106 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	b299      	uxth	r1, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	3308      	adds	r3, #8
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	4413      	add	r3, r2
 80050be:	3304      	adds	r3, #4
 80050c0:	461a      	mov	r2, r3
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fbea 	bl	800589c <VL53L0X_GetLimitCheckValue>
 80050c8:	4603      	mov	r3, r0
 80050ca:	461a      	mov	r2, r3
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80050d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d117      	bne.n	800510a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	b299      	uxth	r1, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	3318      	adds	r3, #24
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	4413      	add	r3, r2
 80050e6:	461a      	mov	r2, r3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fb51 	bl	8005790 <VL53L0X_GetLimitCheckEnable>
 80050ee:	4603      	mov	r3, r0
 80050f0:	461a      	mov	r2, r3
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	3301      	adds	r3, #1
 80050fc:	60bb      	str	r3, [r7, #8]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b05      	cmp	r3, #5
 8005102:	ddd1      	ble.n	80050a8 <VL53L0X_GetDeviceParameters+0x80>
 8005104:	e002      	b.n	800510c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8005106:	bf00      	nop
 8005108:	e000      	b.n	800510c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800510a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800510c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d107      	bne.n	8005124 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	333c      	adds	r3, #60	; 0x3c
 8005118:	4619      	mov	r1, r3
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fc4c 	bl	80059b8 <VL53L0X_GetWrapAroundCheckEnable>
 8005120:	4603      	mov	r3, r0
 8005122:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8005124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d107      	bne.n	800513c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	3304      	adds	r3, #4
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f895 	bl	8005262 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8005138:	4603      	mov	r3, r0
 800513a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800513c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005154:	2300      	movs	r3, #0
 8005156:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8005158:	78fb      	ldrb	r3, [r7, #3]
 800515a:	2b15      	cmp	r3, #21
 800515c:	d832      	bhi.n	80051c4 <VL53L0X_SetDeviceMode+0x7c>
 800515e:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <VL53L0X_SetDeviceMode+0x1c>)
 8005160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005164:	080051bd 	.word	0x080051bd
 8005168:	080051bd 	.word	0x080051bd
 800516c:	080051c5 	.word	0x080051c5
 8005170:	080051bd 	.word	0x080051bd
 8005174:	080051c5 	.word	0x080051c5
 8005178:	080051c5 	.word	0x080051c5
 800517c:	080051c5 	.word	0x080051c5
 8005180:	080051c5 	.word	0x080051c5
 8005184:	080051c5 	.word	0x080051c5
 8005188:	080051c5 	.word	0x080051c5
 800518c:	080051c5 	.word	0x080051c5
 8005190:	080051c5 	.word	0x080051c5
 8005194:	080051c5 	.word	0x080051c5
 8005198:	080051c5 	.word	0x080051c5
 800519c:	080051c5 	.word	0x080051c5
 80051a0:	080051c5 	.word	0x080051c5
 80051a4:	080051c5 	.word	0x080051c5
 80051a8:	080051c5 	.word	0x080051c5
 80051ac:	080051c5 	.word	0x080051c5
 80051b0:	080051c5 	.word	0x080051c5
 80051b4:	080051bd 	.word	0x080051bd
 80051b8:	080051bd 	.word	0x080051bd
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	78fa      	ldrb	r2, [r7, #3]
 80051c0:	741a      	strb	r2, [r3, #16]
		break;
 80051c2:	e001      	b.n	80051c8 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80051c4:	23f8      	movs	r3, #248	; 0xf8
 80051c6:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80051c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051e2:	2300      	movs	r3, #0
 80051e4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	7c1a      	ldrb	r2, [r3, #16]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80051ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005208:	2300      	movs	r3, #0
 800520a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	2109      	movs	r1, #9
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f004 fb77 	bl	8009904 <VL53L0X_RdByte>
 8005216:	4603      	mov	r3, r0
 8005218:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800521a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	b2da      	uxtb	r2, r3
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005230:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800524a:	6839      	ldr	r1, [r7, #0]
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f003 fa26 	bl	800869e <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8005252:	4603      	mov	r3, r0
 8005254:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8005256:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800526c:	2300      	movs	r3, #0
 800526e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005270:	6839      	ldr	r1, [r7, #0]
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f003 faf3 	bl	800885e <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8005278:	4603      	mov	r3, r0
 800527a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800527c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	70fb      	strb	r3, [r7, #3]
 8005294:	4613      	mov	r3, r2
 8005296:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005298:	2300      	movs	r3, #0
 800529a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800529c:	78ba      	ldrb	r2, [r7, #2]
 800529e:	78fb      	ldrb	r3, [r7, #3]
 80052a0:	4619      	mov	r1, r3
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f002 ff3b 	bl	800811e <VL53L0X_set_vcsel_pulse_period>
 80052a8:	4603      	mov	r3, r0
 80052aa:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80052ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	460b      	mov	r3, r1
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052c6:	2300      	movs	r3, #0
 80052c8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80052ca:	7afb      	ldrb	r3, [r7, #11]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	4619      	mov	r1, r3
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f003 f9ad 	bl	8008630 <VL53L0X_get_vcsel_pulse_period>
 80052d6:	4603      	mov	r3, r0
 80052d8:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80052da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	70fb      	strb	r3, [r7, #3]
 80052f4:	4613      	mov	r3, r2
 80052f6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052f8:	2300      	movs	r3, #0
 80052fa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8005300:	2300      	movs	r3, #0
 8005302:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005304:	f107 030f 	add.w	r3, r7, #15
 8005308:	461a      	mov	r2, r3
 800530a:	2101      	movs	r1, #1
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f004 faf9 	bl	8009904 <VL53L0X_RdByte>
 8005312:	4603      	mov	r3, r0
 8005314:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800531a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d15a      	bne.n	80053d8 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8005322:	78bb      	ldrb	r3, [r7, #2]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d12b      	bne.n	8005380 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	2b04      	cmp	r3, #4
 800532c:	d825      	bhi.n	800537a <VL53L0X_SetSequenceStepEnable+0x92>
 800532e:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	08005349 	.word	0x08005349
 8005338:	08005353 	.word	0x08005353
 800533c:	0800535d 	.word	0x0800535d
 8005340:	08005367 	.word	0x08005367
 8005344:	08005371 	.word	0x08005371
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005348:	7dbb      	ldrb	r3, [r7, #22]
 800534a:	f043 0310 	orr.w	r3, r3, #16
 800534e:	75bb      	strb	r3, [r7, #22]
				break;
 8005350:	e043      	b.n	80053da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8005352:	7dbb      	ldrb	r3, [r7, #22]
 8005354:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005358:	75bb      	strb	r3, [r7, #22]
				break;
 800535a:	e03e      	b.n	80053da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800535c:	7dbb      	ldrb	r3, [r7, #22]
 800535e:	f043 0304 	orr.w	r3, r3, #4
 8005362:	75bb      	strb	r3, [r7, #22]
				break;
 8005364:	e039      	b.n	80053da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8005366:	7dbb      	ldrb	r3, [r7, #22]
 8005368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800536c:	75bb      	strb	r3, [r7, #22]
				break;
 800536e:	e034      	b.n	80053da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8005370:	7dbb      	ldrb	r3, [r7, #22]
 8005372:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005376:	75bb      	strb	r3, [r7, #22]
				break;
 8005378:	e02f      	b.n	80053da <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800537a:	23fc      	movs	r3, #252	; 0xfc
 800537c:	75fb      	strb	r3, [r7, #23]
 800537e:	e02c      	b.n	80053da <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	2b04      	cmp	r3, #4
 8005384:	d825      	bhi.n	80053d2 <VL53L0X_SetSequenceStepEnable+0xea>
 8005386:	a201      	add	r2, pc, #4	; (adr r2, 800538c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	080053a1 	.word	0x080053a1
 8005390:	080053ab 	.word	0x080053ab
 8005394:	080053b5 	.word	0x080053b5
 8005398:	080053bf 	.word	0x080053bf
 800539c:	080053c9 	.word	0x080053c9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80053a0:	7dbb      	ldrb	r3, [r7, #22]
 80053a2:	f023 0310 	bic.w	r3, r3, #16
 80053a6:	75bb      	strb	r3, [r7, #22]
				break;
 80053a8:	e017      	b.n	80053da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80053aa:	7dbb      	ldrb	r3, [r7, #22]
 80053ac:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80053b0:	75bb      	strb	r3, [r7, #22]
				break;
 80053b2:	e012      	b.n	80053da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80053b4:	7dbb      	ldrb	r3, [r7, #22]
 80053b6:	f023 0304 	bic.w	r3, r3, #4
 80053ba:	75bb      	strb	r3, [r7, #22]
				break;
 80053bc:	e00d      	b.n	80053da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80053be:	7dbb      	ldrb	r3, [r7, #22]
 80053c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053c4:	75bb      	strb	r3, [r7, #22]
				break;
 80053c6:	e008      	b.n	80053da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80053c8:	7dbb      	ldrb	r3, [r7, #22]
 80053ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ce:	75bb      	strb	r3, [r7, #22]
				break;
 80053d0:	e003      	b.n	80053da <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80053d2:	23fc      	movs	r3, #252	; 0xfc
 80053d4:	75fb      	strb	r3, [r7, #23]
 80053d6:	e000      	b.n	80053da <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80053d8:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80053da:	7bfb      	ldrb	r3, [r7, #15]
 80053dc:	7dba      	ldrb	r2, [r7, #22]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d01e      	beq.n	8005420 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80053e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d107      	bne.n	80053fa <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80053ea:	7dbb      	ldrb	r3, [r7, #22]
 80053ec:	461a      	mov	r2, r3
 80053ee:	2101      	movs	r1, #1
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f004 fa05 	bl	8009800 <VL53L0X_WrByte>
 80053f6:	4603      	mov	r3, r0
 80053f8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80053fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d103      	bne.n	800540a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	7dba      	ldrb	r2, [r7, #22]
 8005406:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800540a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d106      	bne.n	8005420 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005418:	6939      	ldr	r1, [r7, #16]
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff ff0e 	bl	800523c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8005420:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	607b      	str	r3, [r7, #4]
 8005436:	460b      	mov	r3, r1
 8005438:	72fb      	strb	r3, [r7, #11]
 800543a:	4613      	mov	r3, r2
 800543c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800543e:	2300      	movs	r3, #0
 8005440:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8005448:	7afb      	ldrb	r3, [r7, #11]
 800544a:	2b04      	cmp	r3, #4
 800544c:	d836      	bhi.n	80054bc <sequence_step_enabled+0x90>
 800544e:	a201      	add	r2, pc, #4	; (adr r2, 8005454 <sequence_step_enabled+0x28>)
 8005450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005454:	08005469 	.word	0x08005469
 8005458:	0800547b 	.word	0x0800547b
 800545c:	0800548d 	.word	0x0800548d
 8005460:	0800549f 	.word	0x0800549f
 8005464:	080054b1 	.word	0x080054b1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8005468:	7abb      	ldrb	r3, [r7, #10]
 800546a:	111b      	asrs	r3, r3, #4
 800546c:	b2db      	uxtb	r3, r3
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	b2da      	uxtb	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	701a      	strb	r2, [r3, #0]
		break;
 8005478:	e022      	b.n	80054c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800547a:	7abb      	ldrb	r3, [r7, #10]
 800547c:	10db      	asrs	r3, r3, #3
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	b2da      	uxtb	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	701a      	strb	r2, [r3, #0]
		break;
 800548a:	e019      	b.n	80054c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800548c:	7abb      	ldrb	r3, [r7, #10]
 800548e:	109b      	asrs	r3, r3, #2
 8005490:	b2db      	uxtb	r3, r3
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	b2da      	uxtb	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	701a      	strb	r2, [r3, #0]
		break;
 800549c:	e010      	b.n	80054c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800549e:	7abb      	ldrb	r3, [r7, #10]
 80054a0:	119b      	asrs	r3, r3, #6
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	701a      	strb	r2, [r3, #0]
		break;
 80054ae:	e007      	b.n	80054c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80054b0:	7abb      	ldrb	r3, [r7, #10]
 80054b2:	09db      	lsrs	r3, r3, #7
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	701a      	strb	r2, [r3, #0]
		break;
 80054ba:	e001      	b.n	80054c0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80054bc:	23fc      	movs	r3, #252	; 0xfc
 80054be:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80054c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054da:	2300      	movs	r3, #0
 80054dc:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80054de:	2300      	movs	r3, #0
 80054e0:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80054e2:	f107 030e 	add.w	r3, r7, #14
 80054e6:	461a      	mov	r2, r3
 80054e8:	2101      	movs	r1, #1
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f004 fa0a 	bl	8009904 <VL53L0X_RdByte>
 80054f0:	4603      	mov	r3, r0
 80054f2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80054f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d107      	bne.n	800550c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80054fc:	7bba      	ldrb	r2, [r7, #14]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2100      	movs	r1, #0
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7ff ff92 	bl	800542c <sequence_step_enabled>
 8005508:	4603      	mov	r3, r0
 800550a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800550c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d108      	bne.n	8005526 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8005514:	7bba      	ldrb	r2, [r7, #14]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	3302      	adds	r3, #2
 800551a:	2101      	movs	r1, #1
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff ff85 	bl	800542c <sequence_step_enabled>
 8005522:	4603      	mov	r3, r0
 8005524:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d108      	bne.n	8005540 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800552e:	7bba      	ldrb	r2, [r7, #14]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	3301      	adds	r3, #1
 8005534:	2102      	movs	r1, #2
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff ff78 	bl	800542c <sequence_step_enabled>
 800553c:	4603      	mov	r3, r0
 800553e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d108      	bne.n	800555a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8005548:	7bba      	ldrb	r2, [r7, #14]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	3303      	adds	r3, #3
 800554e:	2103      	movs	r1, #3
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff ff6b 	bl	800542c <sequence_step_enabled>
 8005556:	4603      	mov	r3, r0
 8005558:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800555a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d108      	bne.n	8005574 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8005562:	7bba      	ldrb	r2, [r7, #14]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	3304      	adds	r3, #4
 8005568:	2104      	movs	r1, #4
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7ff ff5e 	bl	800542c <sequence_step_enabled>
 8005570:	4603      	mov	r3, r0
 8005572:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005574:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800558a:	2300      	movs	r3, #0
 800558c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800558e:	f107 030c 	add.w	r3, r7, #12
 8005592:	461a      	mov	r2, r3
 8005594:	21f8      	movs	r1, #248	; 0xf8
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f004 f9de 	bl	8009958 <VL53L0X_RdWord>
 800559c:	4603      	mov	r3, r0
 800559e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80055a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d108      	bne.n	80055ba <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80055a8:	f107 0308 	add.w	r3, r7, #8
 80055ac:	461a      	mov	r2, r3
 80055ae:	2104      	movs	r1, #4
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f004 fa09 	bl	80099c8 <VL53L0X_RdDWord>
 80055b6:	4603      	mov	r3, r0
 80055b8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80055ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10c      	bne.n	80055dc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80055c2:	89bb      	ldrh	r3, [r7, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	89ba      	ldrh	r2, [r7, #12]
 80055cc:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80055dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	7f1b      	ldrb	r3, [r3, #28]
 80055fa:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	7bba      	ldrb	r2, [r7, #14]
 8005600:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005602:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b086      	sub	sp, #24
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800561c:	2300      	movs	r3, #0
 800561e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8005620:	f107 030e 	add.w	r3, r7, #14
 8005624:	461a      	mov	r2, r3
 8005626:	2120      	movs	r1, #32
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f004 f995 	bl	8009958 <VL53L0X_RdWord>
 800562e:	4603      	mov	r3, r0
 8005630:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8005632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d118      	bne.n	800566c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800563a:	89fb      	ldrh	r3, [r7, #14]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d109      	bne.n	8005654 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	771a      	strb	r2, [r3, #28]
 8005652:	e00b      	b.n	800566c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8005654:	89fb      	ldrh	r3, [r7, #14]
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800566c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	807b      	strh	r3, [r7, #2]
 8005684:	4613      	mov	r3, r2
 8005686:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005688:	2300      	movs	r3, #0
 800568a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005698:	887b      	ldrh	r3, [r7, #2]
 800569a:	2b05      	cmp	r3, #5
 800569c:	d902      	bls.n	80056a4 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800569e:	23fc      	movs	r3, #252	; 0xfc
 80056a0:	75fb      	strb	r3, [r7, #23]
 80056a2:	e05b      	b.n	800575c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80056a4:	787b      	ldrb	r3, [r7, #1]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80056b2:	2301      	movs	r3, #1
 80056b4:	73bb      	strb	r3, [r7, #14]
 80056b6:	e00a      	b.n	80056ce <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80056b8:	887b      	ldrh	r3, [r7, #2]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	330c      	adds	r3, #12
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80056ca:	2301      	movs	r3, #1
 80056cc:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80056ce:	887b      	ldrh	r3, [r7, #2]
 80056d0:	2b05      	cmp	r3, #5
 80056d2:	d841      	bhi.n	8005758 <VL53L0X_SetLimitCheckEnable+0xe0>
 80056d4:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <VL53L0X_SetLimitCheckEnable+0x64>)
 80056d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056da:	bf00      	nop
 80056dc:	080056f5 	.word	0x080056f5
 80056e0:	080056ff 	.word	0x080056ff
 80056e4:	08005715 	.word	0x08005715
 80056e8:	0800571f 	.word	0x0800571f
 80056ec:	08005729 	.word	0x08005729
 80056f0:	08005741 	.word	0x08005741

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	7bfa      	ldrb	r2, [r7, #15]
 80056f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80056fc:	e02e      	b.n	800575c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005702:	b29b      	uxth	r3, r3
 8005704:	461a      	mov	r2, r3
 8005706:	2144      	movs	r1, #68	; 0x44
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f004 f89d 	bl	8009848 <VL53L0X_WrWord>
 800570e:	4603      	mov	r3, r0
 8005710:	75fb      	strb	r3, [r7, #23]

			break;
 8005712:	e023      	b.n	800575c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	7bfa      	ldrb	r2, [r7, #15]
 8005718:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800571c:	e01e      	b.n	800575c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	7bfa      	ldrb	r2, [r7, #15]
 8005722:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8005726:	e019      	b.n	800575c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005728:	7bbb      	ldrb	r3, [r7, #14]
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800572e:	7b7b      	ldrb	r3, [r7, #13]
 8005730:	22fe      	movs	r2, #254	; 0xfe
 8005732:	2160      	movs	r1, #96	; 0x60
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f004 f8b1 	bl	800989c <VL53L0X_UpdateByte>
 800573a:	4603      	mov	r3, r0
 800573c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800573e:	e00d      	b.n	800575c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8005740:	7bbb      	ldrb	r3, [r7, #14]
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005746:	7b7b      	ldrb	r3, [r7, #13]
 8005748:	22ef      	movs	r2, #239	; 0xef
 800574a:	2160      	movs	r1, #96	; 0x60
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f004 f8a5 	bl	800989c <VL53L0X_UpdateByte>
 8005752:	4603      	mov	r3, r0
 8005754:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8005756:	e001      	b.n	800575c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005758:	23fc      	movs	r3, #252	; 0xfc
 800575a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800575c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10f      	bne.n	8005784 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8005764:	787b      	ldrb	r3, [r7, #1]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d106      	bne.n	8005778 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800576a:	887b      	ldrh	r3, [r7, #2]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	4413      	add	r3, r2
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005776:	e005      	b.n	8005784 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005778:	887b      	ldrh	r3, [r7, #2]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	4413      	add	r3, r2
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005784:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	460b      	mov	r3, r1
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800579e:	2300      	movs	r3, #0
 80057a0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80057a2:	897b      	ldrh	r3, [r7, #10]
 80057a4:	2b05      	cmp	r3, #5
 80057a6:	d905      	bls.n	80057b4 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80057a8:	23fc      	movs	r3, #252	; 0xfc
 80057aa:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	701a      	strb	r2, [r3, #0]
 80057b2:	e008      	b.n	80057c6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80057b4:	897b      	ldrh	r3, [r7, #10]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4413      	add	r3, r2
 80057ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057be:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	7dba      	ldrb	r2, [r7, #22]
 80057c4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80057c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	460b      	mov	r3, r1
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80057ea:	897b      	ldrh	r3, [r7, #10]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4413      	add	r3, r2
 80057f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057f4:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80057f6:	7dbb      	ldrb	r3, [r7, #22]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d107      	bne.n	800580c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80057fc:	897b      	ldrh	r3, [r7, #10]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	330c      	adds	r3, #12
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	605a      	str	r2, [r3, #4]
 800580a:	e040      	b.n	800588e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800580c:	897b      	ldrh	r3, [r7, #10]
 800580e:	2b05      	cmp	r3, #5
 8005810:	d830      	bhi.n	8005874 <VL53L0X_SetLimitCheckValue+0x9c>
 8005812:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <VL53L0X_SetLimitCheckValue+0x40>)
 8005814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005818:	08005831 	.word	0x08005831
 800581c:	08005839 	.word	0x08005839
 8005820:	0800584f 	.word	0x0800584f
 8005824:	08005857 	.word	0x08005857
 8005828:	0800585f 	.word	0x0800585f
 800582c:	0800585f 	.word	0x0800585f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8005836:	e01f      	b.n	8005878 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800583c:	b29b      	uxth	r3, r3
 800583e:	461a      	mov	r2, r3
 8005840:	2144      	movs	r1, #68	; 0x44
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f004 f800 	bl	8009848 <VL53L0X_WrWord>
 8005848:	4603      	mov	r3, r0
 800584a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800584c:	e014      	b.n	8005878 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8005854:	e010      	b.n	8005878 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800585c:	e00c      	b.n	8005878 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005862:	b29b      	uxth	r3, r3
 8005864:	461a      	mov	r2, r3
 8005866:	2164      	movs	r1, #100	; 0x64
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f003 ffed 	bl	8009848 <VL53L0X_WrWord>
 800586e:	4603      	mov	r3, r0
 8005870:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005872:	e001      	b.n	8005878 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005874:	23fc      	movs	r3, #252	; 0xfc
 8005876:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005878:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d106      	bne.n	800588e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005880:	897b      	ldrh	r3, [r7, #10]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	330c      	adds	r3, #12
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800588e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop

0800589c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	460b      	mov	r3, r1
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058aa:	2300      	movs	r3, #0
 80058ac:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80058b2:	897b      	ldrh	r3, [r7, #10]
 80058b4:	2b05      	cmp	r3, #5
 80058b6:	d847      	bhi.n	8005948 <VL53L0X_GetLimitCheckValue+0xac>
 80058b8:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <VL53L0X_GetLimitCheckValue+0x24>)
 80058ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058be:	bf00      	nop
 80058c0:	080058d9 	.word	0x080058d9
 80058c4:	080058e5 	.word	0x080058e5
 80058c8:	0800590b 	.word	0x0800590b
 80058cc:	08005917 	.word	0x08005917
 80058d0:	08005923 	.word	0x08005923
 80058d4:	08005923 	.word	0x08005923

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058dc:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	77bb      	strb	r3, [r7, #30]
		break;
 80058e2:	e033      	b.n	800594c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80058e4:	f107 0316 	add.w	r3, r7, #22
 80058e8:	461a      	mov	r2, r3
 80058ea:	2144      	movs	r1, #68	; 0x44
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f004 f833 	bl	8009958 <VL53L0X_RdWord>
 80058f2:	4603      	mov	r3, r0
 80058f4:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80058f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d102      	bne.n	8005904 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80058fe:	8afb      	ldrh	r3, [r7, #22]
 8005900:	025b      	lsls	r3, r3, #9
 8005902:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8005904:	2301      	movs	r3, #1
 8005906:	77bb      	strb	r3, [r7, #30]
		break;
 8005908:	e020      	b.n	800594c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	77bb      	strb	r3, [r7, #30]
		break;
 8005914:	e01a      	b.n	800594c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	77bb      	strb	r3, [r7, #30]
		break;
 8005920:	e014      	b.n	800594c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005922:	f107 0316 	add.w	r3, r7, #22
 8005926:	461a      	mov	r2, r3
 8005928:	2164      	movs	r1, #100	; 0x64
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f004 f814 	bl	8009958 <VL53L0X_RdWord>
 8005930:	4603      	mov	r3, r0
 8005932:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005934:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800593c:	8afb      	ldrh	r3, [r7, #22]
 800593e:	025b      	lsls	r3, r3, #9
 8005940:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8005942:	2300      	movs	r3, #0
 8005944:	77bb      	strb	r3, [r7, #30]
		break;
 8005946:	e001      	b.n	800594c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005948:	23fc      	movs	r3, #252	; 0xfc
 800594a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800594c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d12a      	bne.n	80059aa <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8005954:	7fbb      	ldrb	r3, [r7, #30]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d124      	bne.n	80059a4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d110      	bne.n	8005982 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005960:	897b      	ldrh	r3, [r7, #10]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	330c      	adds	r3, #12
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005974:	897b      	ldrh	r3, [r7, #10]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4413      	add	r3, r2
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005980:	e013      	b.n	80059aa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005988:	897b      	ldrh	r3, [r7, #10]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	330c      	adds	r3, #12
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005996:	897b      	ldrh	r3, [r7, #10]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80059a2:	e002      	b.n	80059aa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80059aa:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3720      	adds	r7, #32
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop

080059b8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059c2:	2300      	movs	r3, #0
 80059c4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80059c6:	f107 030e 	add.w	r3, r7, #14
 80059ca:	461a      	mov	r2, r3
 80059cc:	2101      	movs	r1, #1
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f003 ff98 	bl	8009904 <VL53L0X_RdByte>
 80059d4:	4603      	mov	r3, r0
 80059d6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80059d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10e      	bne.n	80059fe <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80059e0:	7bba      	ldrb	r2, [r7, #14]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80059e8:	7bbb      	ldrb	r3, [r7, #14]
 80059ea:	b25b      	sxtb	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	da03      	bge.n	80059f8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2201      	movs	r2, #1
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	e002      	b.n	80059fe <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80059fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d104      	bne.n	8005a10 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781a      	ldrb	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a24:	2300      	movs	r3, #0
 8005a26:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005a28:	f107 030e 	add.w	r3, r7, #14
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7ff fbd2 	bl	80051d8 <VL53L0X_GetDeviceMode>
 8005a34:	4603      	mov	r3, r0
 8005a36:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d107      	bne.n	8005a50 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005a40:	7bbb      	ldrb	r3, [r7, #14]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d104      	bne.n	8005a50 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f898 	bl	8005b7c <VL53L0X_StartMeasurement>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d104      	bne.n	8005a62 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f001 fb3f 	bl	80070dc <VL53L0X_measurement_poll_for_completion>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005a6a:	7bbb      	ldrb	r3, [r7, #14]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d103      	bne.n	8005a78 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2203      	movs	r2, #3
 8005a74:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8005a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a90:	2300      	movs	r3, #0
 8005a92:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005a94:	2301      	movs	r3, #1
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	68b9      	ldr	r1, [r7, #8]
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f001 fae1 	bl	8007062 <VL53L0X_perform_ref_calibration>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8005aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005abc:	2300      	movs	r3, #0
 8005abe:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005ac6:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8005ac8:	7dbb      	ldrb	r3, [r7, #22]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d005      	beq.n	8005ada <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8005ace:	7dbb      	ldrb	r3, [r7, #22]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d002      	beq.n	8005ada <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8005ad4:	7dbb      	ldrb	r3, [r7, #22]
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d147      	bne.n	8005b6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005ada:	f107 030c 	add.w	r3, r7, #12
 8005ade:	f107 0210 	add.w	r2, r7, #16
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fbc3 	bl	8006270 <VL53L0X_GetInterruptThresholds>
 8005aea:	4603      	mov	r3, r0
 8005aec:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005af4:	d803      	bhi.n	8005afe <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8005af6:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8005af8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005afc:	d935      	bls.n	8005b6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8005afe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d131      	bne.n	8005b6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005b06:	78fb      	ldrb	r3, [r7, #3]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d006      	beq.n	8005b1a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005b0c:	491a      	ldr	r1, [pc, #104]	; (8005b78 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f002 ff56 	bl	80089c0 <VL53L0X_load_tuning_settings>
 8005b14:	4603      	mov	r3, r0
 8005b16:	75fb      	strb	r3, [r7, #23]
 8005b18:	e027      	b.n	8005b6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005b1a:	2204      	movs	r2, #4
 8005b1c:	21ff      	movs	r1, #255	; 0xff
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f003 fe6e 	bl	8009800 <VL53L0X_WrByte>
 8005b24:	4603      	mov	r3, r0
 8005b26:	461a      	mov	r2, r3
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2170      	movs	r1, #112	; 0x70
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f003 fe64 	bl	8009800 <VL53L0X_WrByte>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005b42:	2200      	movs	r2, #0
 8005b44:	21ff      	movs	r1, #255	; 0xff
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f003 fe5a 	bl	8009800 <VL53L0X_WrByte>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	461a      	mov	r2, r3
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005b56:	2200      	movs	r2, #0
 8005b58:	2180      	movs	r1, #128	; 0x80
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f003 fe50 	bl	8009800 <VL53L0X_WrByte>
 8005b60:	4603      	mov	r3, r0
 8005b62:	461a      	mov	r2, r3
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8005b6a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000114 	.word	0x20000114

08005b7c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b84:	2300      	movs	r3, #0
 8005b86:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005b8c:	f107 030e 	add.w	r3, r7, #14
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff fb20 	bl	80051d8 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005b98:	2201      	movs	r2, #1
 8005b9a:	2180      	movs	r1, #128	; 0x80
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f003 fe2f 	bl	8009800 <VL53L0X_WrByte>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	21ff      	movs	r1, #255	; 0xff
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f003 fe28 	bl	8009800 <VL53L0X_WrByte>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f003 fe21 	bl	8009800 <VL53L0X_WrByte>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005bc8:	461a      	mov	r2, r3
 8005bca:	2191      	movs	r1, #145	; 0x91
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f003 fe17 	bl	8009800 <VL53L0X_WrByte>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	2100      	movs	r1, #0
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f003 fe10 	bl	8009800 <VL53L0X_WrByte>
 8005be0:	4603      	mov	r3, r0
 8005be2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005be4:	2200      	movs	r2, #0
 8005be6:	21ff      	movs	r1, #255	; 0xff
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f003 fe09 	bl	8009800 <VL53L0X_WrByte>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	2180      	movs	r1, #128	; 0x80
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f003 fe02 	bl	8009800 <VL53L0X_WrByte>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005c00:	7bbb      	ldrb	r3, [r7, #14]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d037      	beq.n	8005c76 <VL53L0X_StartMeasurement+0xfa>
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d04f      	beq.n	8005caa <VL53L0X_StartMeasurement+0x12e>
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d167      	bne.n	8005cde <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005c0e:	2201      	movs	r2, #1
 8005c10:	2100      	movs	r1, #0
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f003 fdf4 	bl	8009800 <VL53L0X_WrByte>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
 8005c1e:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8005c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d15d      	bne.n	8005ce4 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d008      	beq.n	8005c44 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8005c32:	f107 030d 	add.w	r3, r7, #13
 8005c36:	461a      	mov	r2, r3
 8005c38:	2100      	movs	r1, #0
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f003 fe62 	bl	8009904 <VL53L0X_RdByte>
 8005c40:	4603      	mov	r3, r0
 8005c42:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	3301      	adds	r3, #1
 8005c48:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005c4a:	7b7a      	ldrb	r2, [r7, #13]
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005c52:	7bfa      	ldrb	r2, [r7, #15]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d107      	bne.n	8005c68 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8005c58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d103      	bne.n	8005c68 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005c66:	d3e1      	bcc.n	8005c2c <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005c6e:	d339      	bcc.n	8005ce4 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005c70:	23f9      	movs	r3, #249	; 0xf9
 8005c72:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8005c74:	e036      	b.n	8005ce4 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d105      	bne.n	8005c8a <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005c7e:	2101      	movs	r1, #1
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff ff15 	bl	8005ab0 <VL53L0X_CheckAndLoadInterruptSettings>
 8005c86:	4603      	mov	r3, r0
 8005c88:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f003 fdb6 	bl	8009800 <VL53L0X_WrByte>
 8005c94:	4603      	mov	r3, r0
 8005c96:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8005c98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d123      	bne.n	8005ce8 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2204      	movs	r2, #4
 8005ca4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005ca8:	e01e      	b.n	8005ce8 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d105      	bne.n	8005cbe <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff fefb 	bl	8005ab0 <VL53L0X_CheckAndLoadInterruptSettings>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005cbe:	2204      	movs	r2, #4
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f003 fd9c 	bl	8009800 <VL53L0X_WrByte>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8005ccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10b      	bne.n	8005cec <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005cdc:	e006      	b.n	8005cec <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005cde:	23f8      	movs	r3, #248	; 0xf8
 8005ce0:	75fb      	strb	r3, [r7, #23]
 8005ce2:	e004      	b.n	8005cee <VL53L0X_StartMeasurement+0x172>
		break;
 8005ce4:	bf00      	nop
 8005ce6:	e002      	b.n	8005cee <VL53L0X_StartMeasurement+0x172>
		break;
 8005ce8:	bf00      	nop
 8005cea:	e000      	b.n	8005cee <VL53L0X_StartMeasurement+0x172>
		break;
 8005cec:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3718      	adds	r7, #24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b084      	sub	sp, #16
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d04:	2300      	movs	r3, #0
 8005d06:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005d0e:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8005d10:	7bbb      	ldrb	r3, [r7, #14]
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d112      	bne.n	8005d3c <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005d16:	f107 0308 	add.w	r3, r7, #8
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fb1d 	bl	800635c <VL53L0X_GetInterruptMaskStatus>
 8005d22:	4603      	mov	r3, r0
 8005d24:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d103      	bne.n	8005d34 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	e01c      	b.n	8005d6e <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	e018      	b.n	8005d6e <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8005d3c:	f107 030d 	add.w	r3, r7, #13
 8005d40:	461a      	mov	r2, r3
 8005d42:	2114      	movs	r1, #20
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f003 fddd 	bl	8009904 <VL53L0X_RdByte>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8005d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10b      	bne.n	8005d6e <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8005d56:	7b7b      	ldrb	r3, [r7, #13]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2201      	movs	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	e002      	b.n	8005d6e <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005d7c:	b5b0      	push	{r4, r5, r7, lr}
 8005d7e:	b096      	sub	sp, #88	; 0x58
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d86:	2300      	movs	r3, #0
 8005d88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005d8c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d90:	230c      	movs	r3, #12
 8005d92:	2114      	movs	r1, #20
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f003 fd07 	bl	80097a8 <VL53L0X_ReadMulti>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005da0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f040 80d2 	bne.w	8005f4e <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2200      	movs	r2, #0
 8005dae:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005db6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	021b      	lsls	r3, r3, #8
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005dd2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	021b      	lsls	r3, r3, #8
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	4413      	add	r3, r2
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	025b      	lsls	r3, r3, #9
 8005de8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dee:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005df0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	021b      	lsls	r3, r3, #8
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	4413      	add	r3, r2
 8005e02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005e06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005e0a:	025b      	lsls	r3, r3, #9
 8005e0c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005e12:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	4413      	add	r3, r2
 8005e24:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005e2e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8005e30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8005e3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8005e46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005e4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e50:	d047      	beq.n	8005ee2 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005e52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e54:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005e58:	fb02 f303 	mul.w	r3, r2, r3
 8005e5c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005e60:	4a58      	ldr	r2, [pc, #352]	; (8005fc4 <VL53L0X_GetRangingMeasurementData+0x248>)
 8005e62:	fb82 1203 	smull	r1, r2, r2, r3
 8005e66:	1192      	asrs	r2, r2, #6
 8005e68:	17db      	asrs	r3, r3, #31
 8005e6a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8005e6c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	7f1b      	ldrb	r3, [r3, #28]
 8005e7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005e7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d02d      	beq.n	8005ee2 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8005e86:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e88:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005e8c:	fb02 f303 	mul.w	r3, r2, r3
 8005e90:	121b      	asrs	r3, r3, #8
 8005e92:	461a      	mov	r2, r3
				if ((SignalRate
 8005e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d10d      	bne.n	8005eb6 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8005e9a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d004      	beq.n	8005eac <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8005ea2:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8005ea6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005eaa:	e016      	b.n	8005eda <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8005eac:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8005eb0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005eb4:	e011      	b.n	8005eda <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8005eb6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ebc:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8005ec0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ec2:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005ec6:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8005eca:	121b      	asrs	r3, r3, #8
 8005ecc:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ed0:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8005ed2:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8005ed6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8005eda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005ede:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8005ee2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00d      	beq.n	8005f06 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005eea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005eee:	089b      	lsrs	r3, r3, #2
 8005ef0:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005ef6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	019b      	lsls	r3, r3, #6
 8005efe:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	75da      	strb	r2, [r3, #23]
 8005f04:	e006      	b.n	8005f14 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005f0c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2200      	movs	r2, #0
 8005f12:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005f14:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005f18:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005f1c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8005f20:	9301      	str	r3, [sp, #4]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	4613      	mov	r3, r2
 8005f28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f003 f9f0 	bl	8009310 <VL53L0X_get_pal_range_status>
 8005f30:	4603      	mov	r3, r0
 8005f32:	461a      	mov	r2, r3
 8005f34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005f3e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d103      	bne.n	8005f4e <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8005f46:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f4e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d12f      	bne.n	8005fb6 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f107 040c 	add.w	r4, r7, #12
 8005f5c:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8005f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005f68:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8005f70:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8005f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8005f7e:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8005f84:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8005f8a:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8005f90:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8005f96:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8005f9c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8005fa6:	f107 050c 	add.w	r5, r7, #12
 8005faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005fb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005fb6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3750      	adds	r7, #80	; 0x50
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	10624dd3 	.word	0x10624dd3

08005fc8 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7ff f8b5 	bl	8005148 <VL53L0X_SetDeviceMode>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d104      	bne.n	8005ff4 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff fd16 	bl	8005a1c <VL53L0X_PerformSingleMeasurement>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d105      	bne.n	8006008 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7ff febc 	bl	8005d7c <VL53L0X_GetRangingMeasurementData>
 8006004:	4603      	mov	r3, r0
 8006006:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8006008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d105      	bne.n	800601c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006010:	2100      	movs	r1, #0
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f962 	bl	80062dc <VL53L0X_ClearInterruptMask>
 8006018:	4603      	mov	r3, r0
 800601a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800601c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	4608      	mov	r0, r1
 8006032:	4611      	mov	r1, r2
 8006034:	461a      	mov	r2, r3
 8006036:	4603      	mov	r3, r0
 8006038:	70fb      	strb	r3, [r7, #3]
 800603a:	460b      	mov	r3, r1
 800603c:	70bb      	strb	r3, [r7, #2]
 800603e:	4613      	mov	r3, r2
 8006040:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006042:	2300      	movs	r3, #0
 8006044:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8006046:	78fb      	ldrb	r3, [r7, #3]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800604c:	23f6      	movs	r3, #246	; 0xf6
 800604e:	73fb      	strb	r3, [r7, #15]
 8006050:	e107      	b.n	8006262 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8006052:	78bb      	ldrb	r3, [r7, #2]
 8006054:	2b14      	cmp	r3, #20
 8006056:	d110      	bne.n	800607a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006058:	7e3b      	ldrb	r3, [r7, #24]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d102      	bne.n	8006064 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800605e:	2310      	movs	r3, #16
 8006060:	73bb      	strb	r3, [r7, #14]
 8006062:	e001      	b.n	8006068 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8006064:	2301      	movs	r3, #1
 8006066:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8006068:	7bbb      	ldrb	r3, [r7, #14]
 800606a:	461a      	mov	r2, r3
 800606c:	2184      	movs	r1, #132	; 0x84
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f003 fbc6 	bl	8009800 <VL53L0X_WrByte>
 8006074:	4603      	mov	r3, r0
 8006076:	73fb      	strb	r3, [r7, #15]
 8006078:	e0f3      	b.n	8006262 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800607a:	78bb      	ldrb	r3, [r7, #2]
 800607c:	2b15      	cmp	r3, #21
 800607e:	f040 8097 	bne.w	80061b0 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006082:	2201      	movs	r2, #1
 8006084:	21ff      	movs	r1, #255	; 0xff
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f003 fbba 	bl	8009800 <VL53L0X_WrByte>
 800608c:	4603      	mov	r3, r0
 800608e:	461a      	mov	r2, r3
 8006090:	7bfb      	ldrb	r3, [r7, #15]
 8006092:	4313      	orrs	r3, r2
 8006094:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006096:	2200      	movs	r2, #0
 8006098:	2100      	movs	r1, #0
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f003 fbb0 	bl	8009800 <VL53L0X_WrByte>
 80060a0:	4603      	mov	r3, r0
 80060a2:	461a      	mov	r2, r3
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80060aa:	2200      	movs	r2, #0
 80060ac:	21ff      	movs	r1, #255	; 0xff
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f003 fba6 	bl	8009800 <VL53L0X_WrByte>
 80060b4:	4603      	mov	r3, r0
 80060b6:	461a      	mov	r2, r3
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80060be:	2201      	movs	r2, #1
 80060c0:	2180      	movs	r1, #128	; 0x80
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f003 fb9c 	bl	8009800 <VL53L0X_WrByte>
 80060c8:	4603      	mov	r3, r0
 80060ca:	461a      	mov	r2, r3
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80060d2:	2202      	movs	r2, #2
 80060d4:	2185      	movs	r1, #133	; 0x85
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f003 fb92 	bl	8009800 <VL53L0X_WrByte>
 80060dc:	4603      	mov	r3, r0
 80060de:	461a      	mov	r2, r3
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80060e6:	2204      	movs	r2, #4
 80060e8:	21ff      	movs	r1, #255	; 0xff
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f003 fb88 	bl	8009800 <VL53L0X_WrByte>
 80060f0:	4603      	mov	r3, r0
 80060f2:	461a      	mov	r2, r3
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80060fa:	2200      	movs	r2, #0
 80060fc:	21cd      	movs	r1, #205	; 0xcd
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f003 fb7e 	bl	8009800 <VL53L0X_WrByte>
 8006104:	4603      	mov	r3, r0
 8006106:	461a      	mov	r2, r3
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	4313      	orrs	r3, r2
 800610c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800610e:	2211      	movs	r2, #17
 8006110:	21cc      	movs	r1, #204	; 0xcc
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f003 fb74 	bl	8009800 <VL53L0X_WrByte>
 8006118:	4603      	mov	r3, r0
 800611a:	461a      	mov	r2, r3
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	4313      	orrs	r3, r2
 8006120:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8006122:	2207      	movs	r2, #7
 8006124:	21ff      	movs	r1, #255	; 0xff
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f003 fb6a 	bl	8009800 <VL53L0X_WrByte>
 800612c:	4603      	mov	r3, r0
 800612e:	461a      	mov	r2, r3
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	4313      	orrs	r3, r2
 8006134:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8006136:	2200      	movs	r2, #0
 8006138:	21be      	movs	r1, #190	; 0xbe
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f003 fb60 	bl	8009800 <VL53L0X_WrByte>
 8006140:	4603      	mov	r3, r0
 8006142:	461a      	mov	r2, r3
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	4313      	orrs	r3, r2
 8006148:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800614a:	2206      	movs	r2, #6
 800614c:	21ff      	movs	r1, #255	; 0xff
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f003 fb56 	bl	8009800 <VL53L0X_WrByte>
 8006154:	4603      	mov	r3, r0
 8006156:	461a      	mov	r2, r3
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	4313      	orrs	r3, r2
 800615c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800615e:	2209      	movs	r2, #9
 8006160:	21cc      	movs	r1, #204	; 0xcc
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f003 fb4c 	bl	8009800 <VL53L0X_WrByte>
 8006168:	4603      	mov	r3, r0
 800616a:	461a      	mov	r2, r3
 800616c:	7bfb      	ldrb	r3, [r7, #15]
 800616e:	4313      	orrs	r3, r2
 8006170:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006172:	2200      	movs	r2, #0
 8006174:	21ff      	movs	r1, #255	; 0xff
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f003 fb42 	bl	8009800 <VL53L0X_WrByte>
 800617c:	4603      	mov	r3, r0
 800617e:	461a      	mov	r2, r3
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	4313      	orrs	r3, r2
 8006184:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006186:	2201      	movs	r2, #1
 8006188:	21ff      	movs	r1, #255	; 0xff
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f003 fb38 	bl	8009800 <VL53L0X_WrByte>
 8006190:	4603      	mov	r3, r0
 8006192:	461a      	mov	r2, r3
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	4313      	orrs	r3, r2
 8006198:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800619a:	2200      	movs	r2, #0
 800619c:	2100      	movs	r1, #0
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f003 fb2e 	bl	8009800 <VL53L0X_WrByte>
 80061a4:	4603      	mov	r3, r0
 80061a6:	461a      	mov	r2, r3
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	73fb      	strb	r3, [r7, #15]
 80061ae:	e058      	b.n	8006262 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80061b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d121      	bne.n	80061fc <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80061b8:	787b      	ldrb	r3, [r7, #1]
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d81b      	bhi.n	80061f6 <VL53L0X_SetGpioConfig+0x1ce>
 80061be:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <VL53L0X_SetGpioConfig+0x19c>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	080061d9 	.word	0x080061d9
 80061c8:	080061df 	.word	0x080061df
 80061cc:	080061e5 	.word	0x080061e5
 80061d0:	080061eb 	.word	0x080061eb
 80061d4:	080061f1 	.word	0x080061f1
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80061d8:	2300      	movs	r3, #0
 80061da:	73bb      	strb	r3, [r7, #14]
				break;
 80061dc:	e00f      	b.n	80061fe <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80061de:	2301      	movs	r3, #1
 80061e0:	73bb      	strb	r3, [r7, #14]
				break;
 80061e2:	e00c      	b.n	80061fe <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80061e4:	2302      	movs	r3, #2
 80061e6:	73bb      	strb	r3, [r7, #14]
				break;
 80061e8:	e009      	b.n	80061fe <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80061ea:	2303      	movs	r3, #3
 80061ec:	73bb      	strb	r3, [r7, #14]
				break;
 80061ee:	e006      	b.n	80061fe <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80061f0:	2304      	movs	r3, #4
 80061f2:	73bb      	strb	r3, [r7, #14]
				break;
 80061f4:	e003      	b.n	80061fe <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80061f6:	23f5      	movs	r3, #245	; 0xf5
 80061f8:	73fb      	strb	r3, [r7, #15]
 80061fa:	e000      	b.n	80061fe <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80061fc:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80061fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d107      	bne.n	8006216 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8006206:	7bbb      	ldrb	r3, [r7, #14]
 8006208:	461a      	mov	r2, r3
 800620a:	210a      	movs	r1, #10
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f003 faf7 	bl	8009800 <VL53L0X_WrByte>
 8006212:	4603      	mov	r3, r0
 8006214:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8006216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10f      	bne.n	800623e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800621e:	7e3b      	ldrb	r3, [r7, #24]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d102      	bne.n	800622a <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8006224:	2300      	movs	r3, #0
 8006226:	73bb      	strb	r3, [r7, #14]
 8006228:	e001      	b.n	800622e <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800622a:	2310      	movs	r3, #16
 800622c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800622e:	7bbb      	ldrb	r3, [r7, #14]
 8006230:	22ef      	movs	r2, #239	; 0xef
 8006232:	2184      	movs	r1, #132	; 0x84
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f003 fb31 	bl	800989c <VL53L0X_UpdateByte>
 800623a:	4603      	mov	r3, r0
 800623c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800623e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d103      	bne.n	800624e <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	787a      	ldrb	r2, [r7, #1]
 800624a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800624e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d105      	bne.n	8006262 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006256:	2100      	movs	r1, #0
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f83f 	bl	80062dc <VL53L0X_ClearInterruptMask>
 800625e:	4603      	mov	r3, r0
 8006260:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006262:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop

08006270 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	607a      	str	r2, [r7, #4]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	460b      	mov	r3, r1
 800627e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006280:	2300      	movs	r3, #0
 8006282:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8006284:	f107 0314 	add.w	r3, r7, #20
 8006288:	461a      	mov	r2, r3
 800628a:	210e      	movs	r1, #14
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f003 fb63 	bl	8009958 <VL53L0X_RdWord>
 8006292:	4603      	mov	r3, r0
 8006294:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006296:	8abb      	ldrh	r3, [r7, #20]
 8006298:	045b      	lsls	r3, r3, #17
 800629a:	461a      	mov	r2, r3
 800629c:	4b0e      	ldr	r3, [pc, #56]	; (80062d8 <VL53L0X_GetInterruptThresholds+0x68>)
 800629e:	4013      	ands	r3, r2
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80062a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10f      	bne.n	80062cc <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80062ac:	f107 0314 	add.w	r3, r7, #20
 80062b0:	461a      	mov	r2, r3
 80062b2:	210c      	movs	r1, #12
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f003 fb4f 	bl	8009958 <VL53L0X_RdWord>
 80062ba:	4603      	mov	r3, r0
 80062bc:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80062be:	8abb      	ldrh	r3, [r7, #20]
 80062c0:	045b      	lsls	r3, r3, #17
 80062c2:	461a      	mov	r2, r3
 80062c4:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <VL53L0X_GetInterruptThresholds+0x68>)
 80062c6:	4013      	ands	r3, r2
		*pThresholdHigh =
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80062cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	1ffe0000 	.word	0x1ffe0000

080062dc <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062e6:	2300      	movs	r3, #0
 80062e8:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80062ea:	2300      	movs	r3, #0
 80062ec:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80062ee:	2201      	movs	r2, #1
 80062f0:	210b      	movs	r1, #11
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f003 fa84 	bl	8009800 <VL53L0X_WrByte>
 80062f8:	4603      	mov	r3, r0
 80062fa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80062fc:	2200      	movs	r2, #0
 80062fe:	210b      	movs	r1, #11
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f003 fa7d 	bl	8009800 <VL53L0X_WrByte>
 8006306:	4603      	mov	r3, r0
 8006308:	461a      	mov	r2, r3
 800630a:	7bfb      	ldrb	r3, [r7, #15]
 800630c:	4313      	orrs	r3, r2
 800630e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8006310:	f107 030d 	add.w	r3, r7, #13
 8006314:	461a      	mov	r2, r3
 8006316:	2113      	movs	r1, #19
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f003 faf3 	bl	8009904 <VL53L0X_RdByte>
 800631e:	4603      	mov	r3, r0
 8006320:	461a      	mov	r2, r3
 8006322:	7bfb      	ldrb	r3, [r7, #15]
 8006324:	4313      	orrs	r3, r2
 8006326:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	3301      	adds	r3, #1
 800632c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800632e:	7b7b      	ldrb	r3, [r7, #13]
 8006330:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8006334:	2b00      	cmp	r3, #0
 8006336:	d006      	beq.n	8006346 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8006338:	7bbb      	ldrb	r3, [r7, #14]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d803      	bhi.n	8006346 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800633e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0d3      	beq.n	80062ee <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8006346:	7bbb      	ldrb	r3, [r7, #14]
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800634c:	23f4      	movs	r3, #244	; 0xf4
 800634e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006350:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006366:	2300      	movs	r3, #0
 8006368:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800636a:	f107 030e 	add.w	r3, r7, #14
 800636e:	461a      	mov	r2, r3
 8006370:	2113      	movs	r1, #19
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f003 fac6 	bl	8009904 <VL53L0X_RdByte>
 8006378:	4603      	mov	r3, r0
 800637a:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	f003 0207 	and.w	r2, r3, #7
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8006386:	7bbb      	ldrb	r3, [r7, #14]
 8006388:	f003 0318 	and.w	r3, r3, #24
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8006390:	23fa      	movs	r3, #250	; 0xfa
 8006392:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006394:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063ac:	2300      	movs	r3, #0
 80063ae:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 fa03 	bl	80067c0 <VL53L0X_perform_ref_spad_management>
 80063ba:	4603      	mov	r3, r0
 80063bc:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80063be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063d4:	2300      	movs	r3, #0
 80063d6:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80063d8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80063dc:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80063de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063e2:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80063e4:	f107 0308 	add.w	r3, r7, #8
 80063e8:	461a      	mov	r2, r3
 80063ea:	2128      	movs	r1, #40	; 0x28
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f003 fab3 	bl	8009958 <VL53L0X_RdWord>
 80063f2:	4603      	mov	r3, r0
 80063f4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80063f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d11e      	bne.n	800643c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80063fe:	893b      	ldrh	r3, [r7, #8]
 8006400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006404:	b29b      	uxth	r3, r3
 8006406:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8006408:	893b      	ldrh	r3, [r7, #8]
 800640a:	461a      	mov	r2, r3
 800640c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006410:	429a      	cmp	r2, r3
 8006412:	dd0b      	ble.n	800642c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8006414:	893a      	ldrh	r2, [r7, #8]
 8006416:	897b      	ldrh	r3, [r7, #10]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	b29b      	uxth	r3, r3
 800641c:	b21b      	sxth	r3, r3
 800641e:	461a      	mov	r2, r3
					* 250;
 8006420:	23fa      	movs	r3, #250	; 0xfa
 8006422:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	e007      	b.n	800643c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800642c:	893b      	ldrh	r3, [r7, #8]
 800642e:	b21b      	sxth	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	23fa      	movs	r3, #250	; 0xfa
 8006434:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800643c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8006448:	b480      	push	{r7}
 800644a:	b08b      	sub	sp, #44	; 0x2c
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8006456:	2308      	movs	r3, #8
 8006458:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	f04f 32ff 	mov.w	r2, #4294967295
 8006464:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	fbb2 f3f3 	udiv	r3, r2, r3
 800646e:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	fbb3 f2f2 	udiv	r2, r3, r2
 8006478:	69b9      	ldr	r1, [r7, #24]
 800647a:	fb01 f202 	mul.w	r2, r1, r2
 800647e:	1a9b      	subs	r3, r3, r2
 8006480:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
 8006486:	e030      	b.n	80064ea <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8006488:	2300      	movs	r3, #0
 800648a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	4413      	add	r3, r2
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8006496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	429a      	cmp	r2, r3
 800649c:	d11e      	bne.n	80064dc <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800649e:	7ffa      	ldrb	r2, [r7, #31]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	fa42 f303 	asr.w	r3, r2, r3
 80064a6:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80064ac:	e016      	b.n	80064dc <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80064ae:	7ffb      	ldrb	r3, [r7, #31]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00b      	beq.n	80064d0 <get_next_good_spad+0x88>
				success = 1;
 80064b8:	2301      	movs	r3, #1
 80064ba:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	fb02 f203 	mul.w	r2, r2, r3
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	4413      	add	r3, r2
 80064c8:	461a      	mov	r2, r3
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	601a      	str	r2, [r3, #0]
				break;
 80064ce:	e009      	b.n	80064e4 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80064d0:	7ffb      	ldrb	r3, [r7, #31]
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	3301      	adds	r3, #1
 80064da:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80064dc:	6a3a      	ldr	r2, [r7, #32]
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d3e4      	bcc.n	80064ae <get_next_good_spad+0x66>
				coarseIndex++) {
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	3301      	adds	r3, #1
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80064ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d202      	bcs.n	80064f8 <get_next_good_spad+0xb0>
 80064f2:	7fbb      	ldrb	r3, [r7, #30]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0c7      	beq.n	8006488 <get_next_good_spad+0x40>
		}
	}
}
 80064f8:	bf00      	nop
 80064fa:	372c      	adds	r7, #44	; 0x2c
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800650c:	2301      	movs	r3, #1
 800650e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	099b      	lsrs	r3, r3, #6
 8006514:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8006516:	4a07      	ldr	r2, [pc, #28]	; (8006534 <is_aperture+0x30>)
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <is_aperture+0x22>
		isAperture = 0;
 8006522:	2300      	movs	r3, #0
 8006524:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8006526:	7bfb      	ldrb	r3, [r7, #15]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	200002cc 	.word	0x200002cc

08006538 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8006538:	b480      	push	{r7}
 800653a:	b089      	sub	sp, #36	; 0x24
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006544:	2300      	movs	r3, #0
 8006546:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8006548:	2308      	movs	r3, #8
 800654a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	fbb2 f3f3 	udiv	r3, r2, r3
 8006554:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	fbb3 f2f2 	udiv	r2, r3, r2
 800655e:	69b9      	ldr	r1, [r7, #24]
 8006560:	fb01 f202 	mul.w	r2, r1, r2
 8006564:	1a9b      	subs	r3, r3, r2
 8006566:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	429a      	cmp	r2, r3
 800656e:	d302      	bcc.n	8006576 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006570:	23ce      	movs	r3, #206	; 0xce
 8006572:	77fb      	strb	r3, [r7, #31]
 8006574:	e010      	b.n	8006598 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	4413      	add	r3, r2
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	b25a      	sxtb	r2, r3
 8006580:	2101      	movs	r1, #1
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	fa01 f303 	lsl.w	r3, r1, r3
 8006588:	b25b      	sxtb	r3, r3
 800658a:	4313      	orrs	r3, r2
 800658c:	b259      	sxtb	r1, r3
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	4413      	add	r3, r2
 8006594:	b2ca      	uxtb	r2, r1
 8006596:	701a      	strb	r2, [r3, #0]

	return status;
 8006598:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3724      	adds	r7, #36	; 0x24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80065b2:	2306      	movs	r3, #6
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	21b0      	movs	r1, #176	; 0xb0
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f003 f8c5 	bl	8009748 <VL53L0X_WriteMulti>
 80065be:	4603      	mov	r3, r0
 80065c0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80065c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80065d8:	2306      	movs	r3, #6
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	21b0      	movs	r1, #176	; 0xb0
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f003 f8e2 	bl	80097a8 <VL53L0X_ReadMulti>
 80065e4:	4603      	mov	r3, r0
 80065e6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80065e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08c      	sub	sp, #48	; 0x30
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	607a      	str	r2, [r7, #4]
 80065fe:	603b      	str	r3, [r7, #0]
 8006600:	460b      	mov	r3, r1
 8006602:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006604:	2300      	movs	r3, #0
 8006606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800660a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800660c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800660e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006610:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006612:	2300      	movs	r3, #0
 8006614:	62bb      	str	r3, [r7, #40]	; 0x28
 8006616:	e02b      	b.n	8006670 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8006618:	f107 031c 	add.w	r3, r7, #28
 800661c:	6a3a      	ldr	r2, [r7, #32]
 800661e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff ff11 	bl	8006448 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662c:	d103      	bne.n	8006636 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800662e:	23ce      	movs	r3, #206	; 0xce
 8006630:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006634:	e020      	b.n	8006678 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	461a      	mov	r2, r3
 800663a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800663c:	4413      	add	r3, r2
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff ff60 	bl	8006504 <is_aperture>
 8006644:	4603      	mov	r3, r0
 8006646:	461a      	mov	r2, r3
 8006648:	7afb      	ldrb	r3, [r7, #11]
 800664a:	4293      	cmp	r3, r2
 800664c:	d003      	beq.n	8006656 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800664e:	23ce      	movs	r3, #206	; 0xce
 8006650:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006654:	e010      	b.n	8006678 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800665a:	6a3a      	ldr	r2, [r7, #32]
 800665c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800665e:	6838      	ldr	r0, [r7, #0]
 8006660:	f7ff ff6a 	bl	8006538 <enable_spad_bit>
		currentSpad++;
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	3301      	adds	r3, #1
 8006668:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	3301      	adds	r3, #1
 800666e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006674:	429a      	cmp	r2, r3
 8006676:	d3cf      	bcc.n	8006618 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8006678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800667a:	6a3a      	ldr	r2, [r7, #32]
 800667c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800667e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006682:	2b00      	cmp	r3, #0
 8006684:	d106      	bne.n	8006694 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f7ff ff8d 	bl	80065a8 <set_ref_spad_map>
 800668e:	4603      	mov	r3, r0
 8006690:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8006694:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006698:	2b00      	cmp	r3, #0
 800669a:	d121      	bne.n	80066e0 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800669c:	f107 0314 	add.w	r3, r7, #20
 80066a0:	4619      	mov	r1, r3
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f7ff ff93 	bl	80065ce <get_ref_spad_map>
 80066a8:	4603      	mov	r3, r0
 80066aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80066ae:	2300      	movs	r3, #0
 80066b0:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80066b2:	e011      	b.n	80066d8 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	4413      	add	r3, r2
 80066ba:	781a      	ldrb	r2, [r3, #0]
 80066bc:	f107 0114 	add.w	r1, r7, #20
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	440b      	add	r3, r1
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d003      	beq.n	80066d2 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80066ca:	23ce      	movs	r3, #206	; 0xce
 80066cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80066d0:	e006      	b.n	80066e0 <enable_ref_spads+0xec>
			}
			i++;
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	3301      	adds	r3, #1
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80066d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066dc:	429a      	cmp	r2, r3
 80066de:	d3e9      	bcc.n	80066b4 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80066e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3730      	adds	r7, #48	; 0x30
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08a      	sub	sp, #40	; 0x28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80066f6:	2300      	movs	r3, #0
 80066f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80066fc:	2300      	movs	r3, #0
 80066fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006708:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800670c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006710:	2b00      	cmp	r3, #0
 8006712:	d107      	bne.n	8006724 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8006714:	22c0      	movs	r2, #192	; 0xc0
 8006716:	2101      	movs	r1, #1
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f003 f871 	bl	8009800 <VL53L0X_WrByte>
 800671e:	4603      	mov	r3, r0
 8006720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8006724:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006728:	2b00      	cmp	r3, #0
 800672a:	d108      	bne.n	800673e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800672c:	f107 0308 	add.w	r3, r7, #8
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff fc48 	bl	8005fc8 <VL53L0X_PerformSingleRangingMeasurement>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800673e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006742:	2b00      	cmp	r3, #0
 8006744:	d107      	bne.n	8006756 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006746:	2201      	movs	r2, #1
 8006748:	21ff      	movs	r1, #255	; 0xff
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f003 f858 	bl	8009800 <VL53L0X_WrByte>
 8006750:	4603      	mov	r3, r0
 8006752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8006756:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800675a:	2b00      	cmp	r3, #0
 800675c:	d107      	bne.n	800676e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	21b6      	movs	r1, #182	; 0xb6
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f003 f8f8 	bl	8009958 <VL53L0X_RdWord>
 8006768:	4603      	mov	r3, r0
 800676a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800676e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006772:	2b00      	cmp	r3, #0
 8006774:	d107      	bne.n	8006786 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006776:	2200      	movs	r2, #0
 8006778:	21ff      	movs	r1, #255	; 0xff
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f003 f840 	bl	8009800 <VL53L0X_WrByte>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8006786:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800678a:	2b00      	cmp	r3, #0
 800678c:	d112      	bne.n	80067b4 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800678e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006792:	461a      	mov	r2, r3
 8006794:	2101      	movs	r1, #1
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f003 f832 	bl	8009800 <VL53L0X_WrByte>
 800679c:	4603      	mov	r3, r0
 800679e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80067a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d104      	bne.n	80067b4 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80067b0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80067b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3728      	adds	r7, #40	; 0x28
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80067c0:	b590      	push	{r4, r7, lr}
 80067c2:	b09d      	sub	sp, #116	; 0x74
 80067c4:	af06      	add	r7, sp, #24
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067cc:	2300      	movs	r3, #0
 80067ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80067d2:	23b4      	movs	r3, #180	; 0xb4
 80067d4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80067d8:	2303      	movs	r3, #3
 80067da:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80067dc:	232c      	movs	r3, #44	; 0x2c
 80067de:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80067ec:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80067f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80067fa:	2306      	movs	r3, #6
 80067fc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8006802:	2300      	movs	r3, #0
 8006804:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8006806:	2300      	movs	r3, #0
 8006808:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800680c:	2300      	movs	r3, #0
 800680e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8006810:	2300      	movs	r3, #0
 8006812:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8006814:	2300      	movs	r3, #0
 8006816:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8006818:	2300      	movs	r3, #0
 800681a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8006824:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8006826:	2300      	movs	r3, #0
 8006828:	64bb      	str	r3, [r7, #72]	; 0x48
 800682a:	e009      	b.n	8006840 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006830:	4413      	add	r3, r2
 8006832:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006836:	2200      	movs	r2, #0
 8006838:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800683a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800683c:	3301      	adds	r3, #1
 800683e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	429a      	cmp	r2, r3
 8006846:	d3f1      	bcc.n	800682c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006848:	2201      	movs	r2, #1
 800684a:	21ff      	movs	r1, #255	; 0xff
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f002 ffd7 	bl	8009800 <VL53L0X_WrByte>
 8006852:	4603      	mov	r3, r0
 8006854:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006858:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800685c:	2b00      	cmp	r3, #0
 800685e:	d107      	bne.n	8006870 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8006860:	2200      	movs	r2, #0
 8006862:	214f      	movs	r1, #79	; 0x4f
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f002 ffcb 	bl	8009800 <VL53L0X_WrByte>
 800686a:	4603      	mov	r3, r0
 800686c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006870:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006874:	2b00      	cmp	r3, #0
 8006876:	d107      	bne.n	8006888 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8006878:	222c      	movs	r2, #44	; 0x2c
 800687a:	214e      	movs	r1, #78	; 0x4e
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f002 ffbf 	bl	8009800 <VL53L0X_WrByte>
 8006882:	4603      	mov	r3, r0
 8006884:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006888:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800688c:	2b00      	cmp	r3, #0
 800688e:	d107      	bne.n	80068a0 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006890:	2200      	movs	r2, #0
 8006892:	21ff      	movs	r1, #255	; 0xff
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f002 ffb3 	bl	8009800 <VL53L0X_WrByte>
 800689a:	4603      	mov	r3, r0
 800689c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80068a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d109      	bne.n	80068bc <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80068a8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80068ac:	461a      	mov	r2, r3
 80068ae:	21b6      	movs	r1, #182	; 0xb6
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f002 ffa5 	bl	8009800 <VL53L0X_WrByte>
 80068b6:	4603      	mov	r3, r0
 80068b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80068bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d107      	bne.n	80068d4 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80068c4:	2200      	movs	r2, #0
 80068c6:	2180      	movs	r1, #128	; 0x80
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f002 ff99 	bl	8009800 <VL53L0X_WrByte>
 80068ce:	4603      	mov	r3, r0
 80068d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80068d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10a      	bne.n	80068f2 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80068dc:	f107 0210 	add.w	r2, r7, #16
 80068e0:	f107 0111 	add.w	r1, r7, #17
 80068e4:	2300      	movs	r3, #0
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 fbbb 	bl	8007062 <VL53L0X_perform_ref_calibration>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80068f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d121      	bne.n	800693e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80068fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006900:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8006902:	2300      	movs	r3, #0
 8006904:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8006906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006908:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8006916:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800691a:	f107 0218 	add.w	r2, r7, #24
 800691e:	9204      	str	r2, [sp, #16]
 8006920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006922:	9203      	str	r2, [sp, #12]
 8006924:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006926:	9202      	str	r2, [sp, #8]
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	4623      	mov	r3, r4
 8006930:	4602      	mov	r2, r0
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f7ff fe5e 	bl	80065f4 <enable_ref_spads>
 8006938:	4603      	mov	r3, r0
 800693a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800693e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006942:	2b00      	cmp	r3, #0
 8006944:	d174      	bne.n	8006a30 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800694a:	f107 0312 	add.w	r3, r7, #18
 800694e:	4619      	mov	r1, r3
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f7ff fecb 	bl	80066ec <perform_ref_signal_measurement>
 8006956:	4603      	mov	r3, r0
 8006958:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800695c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006960:	2b00      	cmp	r3, #0
 8006962:	d161      	bne.n	8006a28 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8006964:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006966:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006968:	429a      	cmp	r2, r3
 800696a:	d25d      	bcs.n	8006a28 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800696c:	2300      	movs	r3, #0
 800696e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006970:	e009      	b.n	8006986 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006976:	4413      	add	r3, r2
 8006978:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800697c:	2200      	movs	r2, #0
 800697e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8006980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006982:	3301      	adds	r3, #1
 8006984:	64bb      	str	r3, [r7, #72]	; 0x48
 8006986:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698a:	429a      	cmp	r2, r3
 800698c:	d3f1      	bcc.n	8006972 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800698e:	e002      	b.n	8006996 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8006990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006992:	3301      	adds	r3, #1
 8006994:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8006996:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800699a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800699c:	4413      	add	r3, r2
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff fdb0 	bl	8006504 <is_aperture>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d103      	bne.n	80069b2 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80069aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d3ee      	bcc.n	8006990 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80069b2:	2301      	movs	r3, #1
 80069b4:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80069b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80069c6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80069ca:	f107 0218 	add.w	r2, r7, #24
 80069ce:	9204      	str	r2, [sp, #16]
 80069d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069d2:	9203      	str	r2, [sp, #12]
 80069d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069d6:	9202      	str	r2, [sp, #8]
 80069d8:	9301      	str	r3, [sp, #4]
 80069da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	4623      	mov	r3, r4
 80069e0:	4602      	mov	r2, r0
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f7ff fe06 	bl	80065f4 <enable_ref_spads>
 80069e8:	4603      	mov	r3, r0
 80069ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80069ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d11b      	bne.n	8006a2e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80069fa:	f107 0312 	add.w	r3, r7, #18
 80069fe:	4619      	mov	r1, r3
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f7ff fe73 	bl	80066ec <perform_ref_signal_measurement>
 8006a06:	4603      	mov	r3, r0
 8006a08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8006a0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10c      	bne.n	8006a2e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8006a14:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006a16:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d208      	bcs.n	8006a2e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8006a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a24:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8006a26:	e002      	b.n	8006a2e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a2c:	e000      	b.n	8006a30 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8006a2e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006a30:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f040 80af 	bne.w	8006b98 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8006a3a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006a3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	f240 80aa 	bls.w	8006b98 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8006a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8006a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8006a54:	f107 031c 	add.w	r3, r7, #28
 8006a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f003 f82a 	bl	8009ab4 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006a60:	8a7b      	ldrh	r3, [r7, #18]
 8006a62:	461a      	mov	r2, r3
 8006a64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	bfb8      	it	lt
 8006a6c:	425b      	neglt	r3, r3
 8006a6e:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8006a70:	2300      	movs	r3, #0
 8006a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8006a76:	e086      	b.n	8006b86 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8006a7e:	f107 0314 	add.w	r3, r7, #20
 8006a82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a86:	f7ff fcdf 	bl	8006448 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a90:	d103      	bne.n	8006a9a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006a92:	23ce      	movs	r3, #206	; 0xce
 8006a94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8006a98:	e07e      	b.n	8006b98 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006a9a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff fd2e 	bl	8006504 <is_aperture>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d003      	beq.n	8006aba <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8006ab8:	e06e      	b.n	8006b98 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8006aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006abc:	3301      	adds	r3, #1
 8006abe:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8006aca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff fd32 	bl	8006538 <enable_spad_bit>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006ada:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10c      	bne.n	8006afc <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8006ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8006aee:	4619      	mov	r1, r3
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f7ff fd59 	bl	80065a8 <set_ref_spad_map>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8006afc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d146      	bne.n	8006b92 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8006b04:	f107 0312 	add.w	r3, r7, #18
 8006b08:	4619      	mov	r1, r3
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7ff fdee 	bl	80066ec <perform_ref_signal_measurement>
 8006b10:	4603      	mov	r3, r0
 8006b12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8006b16:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d13b      	bne.n	8006b96 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006b1e:	8a7b      	ldrh	r3, [r7, #18]
 8006b20:	461a      	mov	r2, r3
 8006b22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bfb8      	it	lt
 8006b2a:	425b      	neglt	r3, r3
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8006b2e:	8a7b      	ldrh	r3, [r7, #18]
 8006b30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d21c      	bcs.n	8006b70 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8006b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d914      	bls.n	8006b68 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8006b3e:	f107 031c 	add.w	r3, r7, #28
 8006b42:	4619      	mov	r1, r3
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f7ff fd2f 	bl	80065a8 <set_ref_spad_map>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8006b56:	f107 011c 	add.w	r1, r7, #28
 8006b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f002 ffa9 	bl	8009ab4 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8006b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b64:	3b01      	subs	r3, #1
 8006b66:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6e:	e00a      	b.n	8006b86 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8006b7a:	f107 031c 	add.w	r3, r7, #28
 8006b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b80:	4618      	mov	r0, r3
 8006b82:	f002 ff97 	bl	8009ab4 <memcpy>
		while (!complete) {
 8006b86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f43f af74 	beq.w	8006a78 <VL53L0X_perform_ref_spad_management+0x2b8>
 8006b90:	e002      	b.n	8006b98 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006b92:	bf00      	nop
 8006b94:	e000      	b.n	8006b98 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006b96:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b98:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d115      	bne.n	8006bcc <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ba4:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006bac:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	781a      	ldrb	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006bcc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	375c      	adds	r7, #92	; 0x5c
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd90      	pop	{r4, r7, pc}

08006bd8 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8006bd8:	b590      	push	{r4, r7, lr}
 8006bda:	b093      	sub	sp, #76	; 0x4c
 8006bdc:	af06      	add	r7, sp, #24
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	4613      	mov	r3, r2
 8006be4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006be6:	2300      	movs	r3, #0
 8006be8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006bf0:	23b4      	movs	r3, #180	; 0xb4
 8006bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8006bf6:	2306      	movs	r3, #6
 8006bf8:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8006bfa:	232c      	movs	r3, #44	; 0x2c
 8006bfc:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006bfe:	2201      	movs	r2, #1
 8006c00:	21ff      	movs	r1, #255	; 0xff
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f002 fdfc 	bl	8009800 <VL53L0X_WrByte>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006c0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d107      	bne.n	8006c26 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8006c16:	2200      	movs	r2, #0
 8006c18:	214f      	movs	r1, #79	; 0x4f
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f002 fdf0 	bl	8009800 <VL53L0X_WrByte>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006c26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d107      	bne.n	8006c3e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8006c2e:	222c      	movs	r2, #44	; 0x2c
 8006c30:	214e      	movs	r1, #78	; 0x4e
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f002 fde4 	bl	8009800 <VL53L0X_WrByte>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006c3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d107      	bne.n	8006c56 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006c46:	2200      	movs	r2, #0
 8006c48:	21ff      	movs	r1, #255	; 0xff
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f002 fdd8 	bl	8009800 <VL53L0X_WrByte>
 8006c50:	4603      	mov	r3, r0
 8006c52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006c56:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d109      	bne.n	8006c72 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8006c5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c62:	461a      	mov	r2, r3
 8006c64:	21b6      	movs	r1, #182	; 0xb6
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f002 fdca 	bl	8009800 <VL53L0X_WrByte>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8006c72:	2300      	movs	r3, #0
 8006c74:	627b      	str	r3, [r7, #36]	; 0x24
 8006c76:	e009      	b.n	8006c8c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006c82:	2200      	movs	r2, #0
 8006c84:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	3301      	adds	r3, #1
 8006c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d3f1      	bcc.n	8006c78 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8006c94:	79fb      	ldrb	r3, [r7, #7]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d011      	beq.n	8006cbe <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006c9a:	e002      	b.n	8006ca2 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006ca2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	4413      	add	r3, r2
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7ff fc2a 	bl	8006504 <is_aperture>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d103      	bne.n	8006cbe <VL53L0X_set_reference_spads+0xe6>
 8006cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d3ee      	bcc.n	8006c9c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8006cca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cce:	79f9      	ldrb	r1, [r7, #7]
 8006cd0:	f107 0214 	add.w	r2, r7, #20
 8006cd4:	9204      	str	r2, [sp, #16]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	9203      	str	r2, [sp, #12]
 8006cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cdc:	9202      	str	r2, [sp, #8]
 8006cde:	9301      	str	r3, [sp, #4]
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	4623      	mov	r3, r4
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f7ff fc83 	bl	80065f4 <enable_ref_spads>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006cf4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10c      	bne.n	8006d16 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	79fa      	ldrb	r2, [r7, #7]
 8006d12:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8006d16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3734      	adds	r7, #52	; 0x34
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd90      	pop	{r4, r7, pc}

08006d22 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b084      	sub	sp, #16
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10a      	bne.n	8006d50 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	f043 0301 	orr.w	r3, r3, #1
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	461a      	mov	r2, r3
 8006d44:	2100      	movs	r1, #0
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f002 fd5a 	bl	8009800 <VL53L0X_WrByte>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d104      	bne.n	8006d62 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f9bf 	bl	80070dc <VL53L0X_measurement_poll_for_completion>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d105      	bne.n	8006d76 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff fab5 	bl	80062dc <VL53L0X_ClearInterruptMask>
 8006d72:	4603      	mov	r3, r0
 8006d74:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d106      	bne.n	8006d8c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2100      	movs	r1, #0
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f002 fd3c 	bl	8009800 <VL53L0X_WrByte>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73fb      	strb	r3, [r7, #15]

	return Status;
 8006d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	4608      	mov	r0, r1
 8006da2:	4611      	mov	r1, r2
 8006da4:	461a      	mov	r2, r3
 8006da6:	4603      	mov	r3, r0
 8006da8:	70fb      	strb	r3, [r7, #3]
 8006daa:	460b      	mov	r3, r1
 8006dac:	70bb      	strb	r3, [r7, #2]
 8006dae:	4613      	mov	r3, r2
 8006db0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006db2:	2300      	movs	r3, #0
 8006db4:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006dba:	2201      	movs	r2, #1
 8006dbc:	21ff      	movs	r1, #255	; 0xff
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f002 fd1e 	bl	8009800 <VL53L0X_WrByte>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f002 fd14 	bl	8009800 <VL53L0X_WrByte>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	461a      	mov	r2, r3
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006de2:	2200      	movs	r2, #0
 8006de4:	21ff      	movs	r1, #255	; 0xff
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f002 fd0a 	bl	8009800 <VL53L0X_WrByte>
 8006dec:	4603      	mov	r3, r0
 8006dee:	461a      	mov	r2, r3
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8006df6:	78fb      	ldrb	r3, [r7, #3]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01e      	beq.n	8006e3a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8006dfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d009      	beq.n	8006e18 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	21cb      	movs	r1, #203	; 0xcb
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f002 fd7b 	bl	8009904 <VL53L0X_RdByte>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	461a      	mov	r2, r3
 8006e12:	7bfb      	ldrb	r3, [r7, #15]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006e18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d02a      	beq.n	8006e76 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8006e20:	f107 030e 	add.w	r3, r7, #14
 8006e24:	461a      	mov	r2, r3
 8006e26:	21ee      	movs	r1, #238	; 0xee
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f002 fd6b 	bl	8009904 <VL53L0X_RdByte>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	461a      	mov	r2, r3
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	73fb      	strb	r3, [r7, #15]
 8006e38:	e01d      	b.n	8006e76 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8006e3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00a      	beq.n	8006e58 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006e42:	78bb      	ldrb	r3, [r7, #2]
 8006e44:	461a      	mov	r2, r3
 8006e46:	21cb      	movs	r1, #203	; 0xcb
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f002 fcd9 	bl	8009800 <VL53L0X_WrByte>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	461a      	mov	r2, r3
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006e58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00a      	beq.n	8006e76 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006e60:	787b      	ldrb	r3, [r7, #1]
 8006e62:	2280      	movs	r2, #128	; 0x80
 8006e64:	21ee      	movs	r1, #238	; 0xee
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f002 fd18 	bl	800989c <VL53L0X_UpdateByte>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	461a      	mov	r2, r3
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006e76:	2201      	movs	r2, #1
 8006e78:	21ff      	movs	r1, #255	; 0xff
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f002 fcc0 	bl	8009800 <VL53L0X_WrByte>
 8006e80:	4603      	mov	r3, r0
 8006e82:	461a      	mov	r2, r3
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f002 fcb6 	bl	8009800 <VL53L0X_WrByte>
 8006e94:	4603      	mov	r3, r0
 8006e96:	461a      	mov	r2, r3
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	21ff      	movs	r1, #255	; 0xff
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f002 fcac 	bl	8009800 <VL53L0X_WrByte>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	461a      	mov	r2, r3
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	f023 0310 	bic.w	r3, r3, #16
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	701a      	strb	r2, [r3, #0]

	return Status;
 8006ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b08a      	sub	sp, #40	; 0x28
 8006ece:	af04      	add	r7, sp, #16
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	460b      	mov	r3, r1
 8006eda:	71fb      	strb	r3, [r7, #7]
 8006edc:	4613      	mov	r3, r2
 8006ede:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006ef4:	79bb      	ldrb	r3, [r7, #6]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006f00:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006f02:	2201      	movs	r2, #1
 8006f04:	2101      	movs	r1, #1
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f002 fc7a 	bl	8009800 <VL53L0X_WrByte>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006f10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d105      	bne.n	8006f24 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8006f18:	2140      	movs	r1, #64	; 0x40
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f7ff ff01 	bl	8006d22 <VL53L0X_perform_single_ref_calibration>
 8006f20:	4603      	mov	r3, r0
 8006f22:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006f24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d115      	bne.n	8006f58 <VL53L0X_perform_vhv_calibration+0x8e>
 8006f2c:	79fb      	ldrb	r3, [r7, #7]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d112      	bne.n	8006f58 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006f32:	7d39      	ldrb	r1, [r7, #20]
 8006f34:	7d7a      	ldrb	r2, [r7, #21]
 8006f36:	2300      	movs	r3, #0
 8006f38:	9303      	str	r3, [sp, #12]
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	9302      	str	r3, [sp, #8]
 8006f3e:	f107 0313 	add.w	r3, r7, #19
 8006f42:	9301      	str	r3, [sp, #4]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f7ff ff23 	bl	8006d98 <VL53L0X_ref_calibration_io>
 8006f52:	4603      	mov	r3, r0
 8006f54:	75fb      	strb	r3, [r7, #23]
 8006f56:	e002      	b.n	8006f5e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006f5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d112      	bne.n	8006f8c <VL53L0X_perform_vhv_calibration+0xc2>
 8006f66:	79bb      	ldrb	r3, [r7, #6]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00f      	beq.n	8006f8c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006f6c:	7dbb      	ldrb	r3, [r7, #22]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	2101      	movs	r1, #1
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f002 fc44 	bl	8009800 <VL53L0X_WrByte>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006f7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d103      	bne.n	8006f8c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	7dba      	ldrb	r2, [r7, #22]
 8006f88:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006f8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3718      	adds	r7, #24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08a      	sub	sp, #40	; 0x28
 8006f9c:	af04      	add	r7, sp, #16
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	71fb      	strb	r3, [r7, #7]
 8006faa:	4613      	mov	r3, r2
 8006fac:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006fbe:	79bb      	ldrb	r3, [r7, #6]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d003      	beq.n	8006fcc <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006fca:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006fcc:	2202      	movs	r2, #2
 8006fce:	2101      	movs	r1, #1
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f002 fc15 	bl	8009800 <VL53L0X_WrByte>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d105      	bne.n	8006fee <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f7ff fe9c 	bl	8006d22 <VL53L0X_perform_single_ref_calibration>
 8006fea:	4603      	mov	r3, r0
 8006fec:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d115      	bne.n	8007022 <VL53L0X_perform_phase_calibration+0x8a>
 8006ff6:	79fb      	ldrb	r3, [r7, #7]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d112      	bne.n	8007022 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006ffc:	7d39      	ldrb	r1, [r7, #20]
 8006ffe:	7d7a      	ldrb	r2, [r7, #21]
 8007000:	2301      	movs	r3, #1
 8007002:	9303      	str	r3, [sp, #12]
 8007004:	2300      	movs	r3, #0
 8007006:	9302      	str	r3, [sp, #8]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	9301      	str	r3, [sp, #4]
 800700c:	f107 0313 	add.w	r3, r7, #19
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	460b      	mov	r3, r1
 8007014:	2101      	movs	r1, #1
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f7ff febe 	bl	8006d98 <VL53L0X_ref_calibration_io>
 800701c:	4603      	mov	r3, r0
 800701e:	75fb      	strb	r3, [r7, #23]
 8007020:	e002      	b.n	8007028 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2200      	movs	r2, #0
 8007026:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007028:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d112      	bne.n	8007056 <VL53L0X_perform_phase_calibration+0xbe>
 8007030:	79bb      	ldrb	r3, [r7, #6]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00f      	beq.n	8007056 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007036:	7dbb      	ldrb	r3, [r7, #22]
 8007038:	461a      	mov	r2, r3
 800703a:	2101      	movs	r1, #1
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f002 fbdf 	bl	8009800 <VL53L0X_WrByte>
 8007042:	4603      	mov	r3, r0
 8007044:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007046:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d103      	bne.n	8007056 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	7dba      	ldrb	r2, [r7, #22]
 8007052:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007056:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b086      	sub	sp, #24
 8007066:	af00      	add	r7, sp, #0
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	607a      	str	r2, [r7, #4]
 800706e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007070:	2300      	movs	r3, #0
 8007072:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007074:	2300      	movs	r3, #0
 8007076:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800707e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	2300      	movs	r3, #0
 8007084:	68b9      	ldr	r1, [r7, #8]
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f7ff ff1f 	bl	8006eca <VL53L0X_perform_vhv_calibration>
 800708c:	4603      	mov	r3, r0
 800708e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007090:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d107      	bne.n	80070a8 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8007098:	78fa      	ldrb	r2, [r7, #3]
 800709a:	2300      	movs	r3, #0
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7ff ff7a 	bl	8006f98 <VL53L0X_perform_phase_calibration>
 80070a4:	4603      	mov	r3, r0
 80070a6:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80070a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10f      	bne.n	80070d0 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80070b0:	7dbb      	ldrb	r3, [r7, #22]
 80070b2:	461a      	mov	r2, r3
 80070b4:	2101      	movs	r1, #1
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f002 fba2 	bl	8009800 <VL53L0X_WrByte>
 80070bc:	4603      	mov	r3, r0
 80070be:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80070c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d103      	bne.n	80070d0 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	7dba      	ldrb	r2, [r7, #22]
 80070cc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80070d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070e4:	2300      	movs	r3, #0
 80070e6:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80070f0:	f107 030f 	add.w	r3, r7, #15
 80070f4:	4619      	mov	r1, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7fe fdff 	bl	8005cfa <VL53L0X_GetMeasurementDataReady>
 80070fc:	4603      	mov	r3, r0
 80070fe:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8007100:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d110      	bne.n	800712a <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8007108:	7bfb      	ldrb	r3, [r7, #15]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d00f      	beq.n	800712e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	3301      	adds	r3, #1
 8007112:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800711a:	d302      	bcc.n	8007122 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800711c:	23f9      	movs	r3, #249	; 0xf9
 800711e:	75fb      	strb	r3, [r7, #23]
			break;
 8007120:	e006      	b.n	8007130 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f002 fc8c 	bl	8009a40 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007128:	e7e2      	b.n	80070f0 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800712a:	bf00      	nop
 800712c:	e000      	b.n	8007130 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800712e:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8007130:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3718      	adds	r7, #24
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800714a:	79fb      	ldrb	r3, [r7, #7]
 800714c:	3301      	adds	r3, #1
 800714e:	b2db      	uxtb	r3, r3
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8007154:	7bfb      	ldrb	r3, [r7, #15]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8007162:	b480      	push	{r7}
 8007164:	b085      	sub	sp, #20
 8007166:	af00      	add	r7, sp, #0
 8007168:	4603      	mov	r3, r0
 800716a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8007170:	79fb      	ldrb	r3, [r7, #7]
 8007172:	085b      	lsrs	r3, r3, #1
 8007174:	b2db      	uxtb	r3, r3
 8007176:	3b01      	subs	r3, #1
 8007178:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8007194:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007198:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800719a:	e002      	b.n	80071a2 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	089b      	lsrs	r3, r3, #2
 80071a0:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d8f8      	bhi.n	800719c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80071aa:	e017      	b.n	80071dc <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	4413      	add	r3, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d30b      	bcc.n	80071d0 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	4413      	add	r3, r2
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	085b      	lsrs	r3, r3, #1
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	4413      	add	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	e002      	b.n	80071d6 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	085b      	lsrs	r3, r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	089b      	lsrs	r3, r3, #2
 80071da:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e4      	bne.n	80071ac <VL53L0X_isqrt+0x24>
	}

	return res;
 80071e2:	68fb      	ldr	r3, [r7, #12]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071f8:	2300      	movs	r3, #0
 80071fa:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80071fc:	2200      	movs	r2, #0
 80071fe:	2183      	movs	r1, #131	; 0x83
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f002 fafd 	bl	8009800 <VL53L0X_WrByte>
 8007206:	4603      	mov	r3, r0
 8007208:	461a      	mov	r2, r3
 800720a:	7dfb      	ldrb	r3, [r7, #23]
 800720c:	4313      	orrs	r3, r2
 800720e:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8007210:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d11e      	bne.n	8007256 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8007218:	2300      	movs	r3, #0
 800721a:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800721c:	f107 030f 	add.w	r3, r7, #15
 8007220:	461a      	mov	r2, r3
 8007222:	2183      	movs	r1, #131	; 0x83
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f002 fb6d 	bl	8009904 <VL53L0X_RdByte>
 800722a:	4603      	mov	r3, r0
 800722c:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10a      	bne.n	800724a <VL53L0X_device_read_strobe+0x5a>
 8007234:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d106      	bne.n	800724a <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	3301      	adds	r3, #1
 8007240:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007248:	d3e8      	bcc.n	800721c <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007250:	d301      	bcc.n	8007256 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007252:	23f9      	movs	r3, #249	; 0xf9
 8007254:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8007256:	2201      	movs	r2, #1
 8007258:	2183      	movs	r1, #131	; 0x83
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f002 fad0 	bl	8009800 <VL53L0X_WrByte>
 8007260:	4603      	mov	r3, r0
 8007262:	461a      	mov	r2, r3
 8007264:	7dfb      	ldrb	r3, [r7, #23]
 8007266:	4313      	orrs	r3, r2
 8007268:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800726a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b098      	sub	sp, #96	; 0x60
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	460b      	mov	r3, r1
 8007280:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007282:	2300      	movs	r3, #0
 8007284:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8007288:	2300      	movs	r3, #0
 800728a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800728e:	2300      	movs	r3, #0
 8007290:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800729c:	2300      	movs	r3, #0
 800729e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80072a6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80072aa:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80072be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80072c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80072c6:	2b07      	cmp	r3, #7
 80072c8:	f000 8408 	beq.w	8007adc <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80072cc:	2201      	movs	r2, #1
 80072ce:	2180      	movs	r1, #128	; 0x80
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f002 fa95 	bl	8009800 <VL53L0X_WrByte>
 80072d6:	4603      	mov	r3, r0
 80072d8:	461a      	mov	r2, r3
 80072da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072de:	4313      	orrs	r3, r2
 80072e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80072e4:	2201      	movs	r2, #1
 80072e6:	21ff      	movs	r1, #255	; 0xff
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f002 fa89 	bl	8009800 <VL53L0X_WrByte>
 80072ee:	4603      	mov	r3, r0
 80072f0:	461a      	mov	r2, r3
 80072f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072f6:	4313      	orrs	r3, r2
 80072f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80072fc:	2200      	movs	r2, #0
 80072fe:	2100      	movs	r1, #0
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f002 fa7d 	bl	8009800 <VL53L0X_WrByte>
 8007306:	4603      	mov	r3, r0
 8007308:	461a      	mov	r2, r3
 800730a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800730e:	4313      	orrs	r3, r2
 8007310:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007314:	2206      	movs	r2, #6
 8007316:	21ff      	movs	r1, #255	; 0xff
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f002 fa71 	bl	8009800 <VL53L0X_WrByte>
 800731e:	4603      	mov	r3, r0
 8007320:	461a      	mov	r2, r3
 8007322:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007326:	4313      	orrs	r3, r2
 8007328:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800732c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007330:	461a      	mov	r2, r3
 8007332:	2183      	movs	r1, #131	; 0x83
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f002 fae5 	bl	8009904 <VL53L0X_RdByte>
 800733a:	4603      	mov	r3, r0
 800733c:	461a      	mov	r2, r3
 800733e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007342:	4313      	orrs	r3, r2
 8007344:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8007348:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800734c:	f043 0304 	orr.w	r3, r3, #4
 8007350:	b2db      	uxtb	r3, r3
 8007352:	461a      	mov	r2, r3
 8007354:	2183      	movs	r1, #131	; 0x83
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f002 fa52 	bl	8009800 <VL53L0X_WrByte>
 800735c:	4603      	mov	r3, r0
 800735e:	461a      	mov	r2, r3
 8007360:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007364:	4313      	orrs	r3, r2
 8007366:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800736a:	2207      	movs	r2, #7
 800736c:	21ff      	movs	r1, #255	; 0xff
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f002 fa46 	bl	8009800 <VL53L0X_WrByte>
 8007374:	4603      	mov	r3, r0
 8007376:	461a      	mov	r2, r3
 8007378:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800737c:	4313      	orrs	r3, r2
 800737e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8007382:	2201      	movs	r2, #1
 8007384:	2181      	movs	r1, #129	; 0x81
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f002 fa3a 	bl	8009800 <VL53L0X_WrByte>
 800738c:	4603      	mov	r3, r0
 800738e:	461a      	mov	r2, r3
 8007390:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007394:	4313      	orrs	r3, r2
 8007396:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f002 fb50 	bl	8009a40 <VL53L0X_PollingDelay>
 80073a0:	4603      	mov	r3, r0
 80073a2:	461a      	mov	r2, r3
 80073a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073a8:	4313      	orrs	r3, r2
 80073aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80073ae:	2201      	movs	r2, #1
 80073b0:	2180      	movs	r1, #128	; 0x80
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f002 fa24 	bl	8009800 <VL53L0X_WrByte>
 80073b8:	4603      	mov	r3, r0
 80073ba:	461a      	mov	r2, r3
 80073bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073c0:	4313      	orrs	r3, r2
 80073c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80073c6:	78fb      	ldrb	r3, [r7, #3]
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 8098 	beq.w	8007502 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80073d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80073d6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f040 8091 	bne.w	8007502 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80073e0:	226b      	movs	r2, #107	; 0x6b
 80073e2:	2194      	movs	r1, #148	; 0x94
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f002 fa0b 	bl	8009800 <VL53L0X_WrByte>
 80073ea:	4603      	mov	r3, r0
 80073ec:	461a      	mov	r2, r3
 80073ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff fef9 	bl	80071f0 <VL53L0X_device_read_strobe>
 80073fe:	4603      	mov	r3, r0
 8007400:	461a      	mov	r2, r3
 8007402:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007406:	4313      	orrs	r3, r2
 8007408:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800740c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007410:	461a      	mov	r2, r3
 8007412:	2190      	movs	r1, #144	; 0x90
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f002 fad7 	bl	80099c8 <VL53L0X_RdDWord>
 800741a:	4603      	mov	r3, r0
 800741c:	461a      	mov	r2, r3
 800741e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007422:	4313      	orrs	r3, r2
 8007424:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8007428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742a:	0a1b      	lsrs	r3, r3, #8
 800742c:	b2db      	uxtb	r3, r3
 800742e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007432:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	0bdb      	lsrs	r3, r3, #15
 800743a:	b2db      	uxtb	r3, r3
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8007444:	2224      	movs	r2, #36	; 0x24
 8007446:	2194      	movs	r1, #148	; 0x94
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f002 f9d9 	bl	8009800 <VL53L0X_WrByte>
 800744e:	4603      	mov	r3, r0
 8007450:	461a      	mov	r2, r3
 8007452:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007456:	4313      	orrs	r3, r2
 8007458:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7ff fec7 	bl	80071f0 <VL53L0X_device_read_strobe>
 8007462:	4603      	mov	r3, r0
 8007464:	461a      	mov	r2, r3
 8007466:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800746a:	4313      	orrs	r3, r2
 800746c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007470:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007474:	461a      	mov	r2, r3
 8007476:	2190      	movs	r1, #144	; 0x90
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f002 faa5 	bl	80099c8 <VL53L0X_RdDWord>
 800747e:	4603      	mov	r3, r0
 8007480:	461a      	mov	r2, r3
 8007482:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007486:	4313      	orrs	r3, r2
 8007488:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	0e1b      	lsrs	r3, r3, #24
 8007490:	b2db      	uxtb	r3, r3
 8007492:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8007494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007496:	0c1b      	lsrs	r3, r3, #16
 8007498:	b2db      	uxtb	r3, r3
 800749a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749e:	0a1b      	lsrs	r3, r3, #8
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80074aa:	2225      	movs	r2, #37	; 0x25
 80074ac:	2194      	movs	r1, #148	; 0x94
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f002 f9a6 	bl	8009800 <VL53L0X_WrByte>
 80074b4:	4603      	mov	r3, r0
 80074b6:	461a      	mov	r2, r3
 80074b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074bc:	4313      	orrs	r3, r2
 80074be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7ff fe94 	bl	80071f0 <VL53L0X_device_read_strobe>
 80074c8:	4603      	mov	r3, r0
 80074ca:	461a      	mov	r2, r3
 80074cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074d0:	4313      	orrs	r3, r2
 80074d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80074d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074da:	461a      	mov	r2, r3
 80074dc:	2190      	movs	r1, #144	; 0x90
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f002 fa72 	bl	80099c8 <VL53L0X_RdDWord>
 80074e4:	4603      	mov	r3, r0
 80074e6:	461a      	mov	r2, r3
 80074e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074ec:	4313      	orrs	r3, r2
 80074ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	0e1b      	lsrs	r3, r3, #24
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	0c1b      	lsrs	r3, r3, #16
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8007502:	78fb      	ldrb	r3, [r7, #3]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 8189 	beq.w	8007820 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800750e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007512:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007516:	2b00      	cmp	r3, #0
 8007518:	f040 8182 	bne.w	8007820 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800751c:	2202      	movs	r2, #2
 800751e:	2194      	movs	r1, #148	; 0x94
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f002 f96d 	bl	8009800 <VL53L0X_WrByte>
 8007526:	4603      	mov	r3, r0
 8007528:	461a      	mov	r2, r3
 800752a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800752e:	4313      	orrs	r3, r2
 8007530:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff fe5b 	bl	80071f0 <VL53L0X_device_read_strobe>
 800753a:	4603      	mov	r3, r0
 800753c:	461a      	mov	r2, r3
 800753e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007542:	4313      	orrs	r3, r2
 8007544:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8007548:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800754c:	461a      	mov	r2, r3
 800754e:	2190      	movs	r1, #144	; 0x90
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f002 f9d7 	bl	8009904 <VL53L0X_RdByte>
 8007556:	4603      	mov	r3, r0
 8007558:	461a      	mov	r2, r3
 800755a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800755e:	4313      	orrs	r3, r2
 8007560:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007564:	227b      	movs	r2, #123	; 0x7b
 8007566:	2194      	movs	r1, #148	; 0x94
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f002 f949 	bl	8009800 <VL53L0X_WrByte>
 800756e:	4603      	mov	r3, r0
 8007570:	461a      	mov	r2, r3
 8007572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007576:	4313      	orrs	r3, r2
 8007578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7ff fe37 	bl	80071f0 <VL53L0X_device_read_strobe>
 8007582:	4603      	mov	r3, r0
 8007584:	461a      	mov	r2, r3
 8007586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800758a:	4313      	orrs	r3, r2
 800758c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8007590:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8007594:	461a      	mov	r2, r3
 8007596:	2190      	movs	r1, #144	; 0x90
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f002 f9b3 	bl	8009904 <VL53L0X_RdByte>
 800759e:	4603      	mov	r3, r0
 80075a0:	461a      	mov	r2, r3
 80075a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075a6:	4313      	orrs	r3, r2
 80075a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80075ac:	2277      	movs	r2, #119	; 0x77
 80075ae:	2194      	movs	r1, #148	; 0x94
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f002 f925 	bl	8009800 <VL53L0X_WrByte>
 80075b6:	4603      	mov	r3, r0
 80075b8:	461a      	mov	r2, r3
 80075ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075be:	4313      	orrs	r3, r2
 80075c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff fe13 	bl	80071f0 <VL53L0X_device_read_strobe>
 80075ca:	4603      	mov	r3, r0
 80075cc:	461a      	mov	r2, r3
 80075ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075d2:	4313      	orrs	r3, r2
 80075d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80075d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075dc:	461a      	mov	r2, r3
 80075de:	2190      	movs	r1, #144	; 0x90
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f002 f9f1 	bl	80099c8 <VL53L0X_RdDWord>
 80075e6:	4603      	mov	r3, r0
 80075e8:	461a      	mov	r2, r3
 80075ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075ee:	4313      	orrs	r3, r2
 80075f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80075f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f6:	0e5b      	lsrs	r3, r3, #25
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	0c9b      	lsrs	r3, r3, #18
 8007606:	b2db      	uxtb	r3, r3
 8007608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800760c:	b2db      	uxtb	r3, r3
 800760e:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8007610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007612:	0adb      	lsrs	r3, r3, #11
 8007614:	b2db      	uxtb	r3, r3
 8007616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800761a:	b2db      	uxtb	r3, r3
 800761c:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	091b      	lsrs	r3, r3, #4
 8007622:	b2db      	uxtb	r3, r3
 8007624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007628:	b2db      	uxtb	r3, r3
 800762a:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	b2db      	uxtb	r3, r3
 8007630:	00db      	lsls	r3, r3, #3
 8007632:	b2db      	uxtb	r3, r3
 8007634:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007638:	b2db      	uxtb	r3, r3
 800763a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800763e:	2278      	movs	r2, #120	; 0x78
 8007640:	2194      	movs	r1, #148	; 0x94
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f002 f8dc 	bl	8009800 <VL53L0X_WrByte>
 8007648:	4603      	mov	r3, r0
 800764a:	461a      	mov	r2, r3
 800764c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007650:	4313      	orrs	r3, r2
 8007652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7ff fdca 	bl	80071f0 <VL53L0X_device_read_strobe>
 800765c:	4603      	mov	r3, r0
 800765e:	461a      	mov	r2, r3
 8007660:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007664:	4313      	orrs	r3, r2
 8007666:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800766a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800766e:	461a      	mov	r2, r3
 8007670:	2190      	movs	r1, #144	; 0x90
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f002 f9a8 	bl	80099c8 <VL53L0X_RdDWord>
 8007678:	4603      	mov	r3, r0
 800767a:	461a      	mov	r2, r3
 800767c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007680:	4313      	orrs	r3, r2
 8007682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	0f5b      	lsrs	r3, r3, #29
 800768a:	b2db      	uxtb	r3, r3
 800768c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007690:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8007692:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007696:	4413      	add	r3, r2
 8007698:	b2db      	uxtb	r3, r3
 800769a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769e:	0d9b      	lsrs	r3, r3, #22
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	0bdb      	lsrs	r3, r3, #15
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	0a1b      	lsrs	r3, r3, #8
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	085b      	lsrs	r3, r3, #1
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	019b      	lsls	r3, r3, #6
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80076e6:	2279      	movs	r2, #121	; 0x79
 80076e8:	2194      	movs	r1, #148	; 0x94
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f002 f888 	bl	8009800 <VL53L0X_WrByte>
 80076f0:	4603      	mov	r3, r0
 80076f2:	461a      	mov	r2, r3
 80076f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076f8:	4313      	orrs	r3, r2
 80076fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7ff fd76 	bl	80071f0 <VL53L0X_device_read_strobe>
 8007704:	4603      	mov	r3, r0
 8007706:	461a      	mov	r2, r3
 8007708:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800770c:	4313      	orrs	r3, r2
 800770e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007716:	461a      	mov	r2, r3
 8007718:	2190      	movs	r1, #144	; 0x90
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f002 f954 	bl	80099c8 <VL53L0X_RdDWord>
 8007720:	4603      	mov	r3, r0
 8007722:	461a      	mov	r2, r3
 8007724:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007728:	4313      	orrs	r3, r2
 800772a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	0e9b      	lsrs	r3, r3, #26
 8007732:	b2db      	uxtb	r3, r3
 8007734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007738:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800773a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800773e:	4413      	add	r3, r2
 8007740:	b2db      	uxtb	r3, r3
 8007742:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	0cdb      	lsrs	r3, r3, #19
 8007748:	b2db      	uxtb	r3, r3
 800774a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800774e:	b2db      	uxtb	r3, r3
 8007750:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8007752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007754:	0b1b      	lsrs	r3, r3, #12
 8007756:	b2db      	uxtb	r3, r3
 8007758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800775c:	b2db      	uxtb	r3, r3
 800775e:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8007760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007762:	095b      	lsrs	r3, r3, #5
 8007764:	b2db      	uxtb	r3, r3
 8007766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800776a:	b2db      	uxtb	r3, r3
 800776c:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007770:	b2db      	uxtb	r3, r3
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	b2db      	uxtb	r3, r3
 8007776:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800777a:	b2db      	uxtb	r3, r3
 800777c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8007780:	227a      	movs	r2, #122	; 0x7a
 8007782:	2194      	movs	r1, #148	; 0x94
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f002 f83b 	bl	8009800 <VL53L0X_WrByte>
 800778a:	4603      	mov	r3, r0
 800778c:	461a      	mov	r2, r3
 800778e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007792:	4313      	orrs	r3, r2
 8007794:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7ff fd29 	bl	80071f0 <VL53L0X_device_read_strobe>
 800779e:	4603      	mov	r3, r0
 80077a0:	461a      	mov	r2, r3
 80077a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077a6:	4313      	orrs	r3, r2
 80077a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80077ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077b0:	461a      	mov	r2, r3
 80077b2:	2190      	movs	r1, #144	; 0x90
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f002 f907 	bl	80099c8 <VL53L0X_RdDWord>
 80077ba:	4603      	mov	r3, r0
 80077bc:	461a      	mov	r2, r3
 80077be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077c2:	4313      	orrs	r3, r2
 80077c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80077c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ca:	0f9b      	lsrs	r3, r3, #30
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d2:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80077d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077d8:	4413      	add	r3, r2
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	0ddb      	lsrs	r3, r3, #23
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80077ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ee:	0c1b      	lsrs	r3, r3, #16
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	0a5b      	lsrs	r3, r3, #9
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007804:	b2db      	uxtb	r3, r3
 8007806:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	089b      	lsrs	r3, r3, #2
 800780e:	b2db      	uxtb	r3, r3
 8007810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007814:	b2db      	uxtb	r3, r3
 8007816:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800781a:	2300      	movs	r3, #0
 800781c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	f003 0304 	and.w	r3, r3, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 80f1 	beq.w	8007a0e <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800782c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007830:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007834:	2b00      	cmp	r3, #0
 8007836:	f040 80ea 	bne.w	8007a0e <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800783a:	227b      	movs	r2, #123	; 0x7b
 800783c:	2194      	movs	r1, #148	; 0x94
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 ffde 	bl	8009800 <VL53L0X_WrByte>
 8007844:	4603      	mov	r3, r0
 8007846:	461a      	mov	r2, r3
 8007848:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800784c:	4313      	orrs	r3, r2
 800784e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7ff fccc 	bl	80071f0 <VL53L0X_device_read_strobe>
 8007858:	4603      	mov	r3, r0
 800785a:	461a      	mov	r2, r3
 800785c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007860:	4313      	orrs	r3, r2
 8007862:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8007866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800786a:	461a      	mov	r2, r3
 800786c:	2190      	movs	r1, #144	; 0x90
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f002 f8aa 	bl	80099c8 <VL53L0X_RdDWord>
 8007874:	4603      	mov	r3, r0
 8007876:	461a      	mov	r2, r3
 8007878:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800787c:	4313      	orrs	r3, r2
 800787e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8007882:	227c      	movs	r2, #124	; 0x7c
 8007884:	2194      	movs	r1, #148	; 0x94
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f001 ffba 	bl	8009800 <VL53L0X_WrByte>
 800788c:	4603      	mov	r3, r0
 800788e:	461a      	mov	r2, r3
 8007890:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007894:	4313      	orrs	r3, r2
 8007896:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff fca8 	bl	80071f0 <VL53L0X_device_read_strobe>
 80078a0:	4603      	mov	r3, r0
 80078a2:	461a      	mov	r2, r3
 80078a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078a8:	4313      	orrs	r3, r2
 80078aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80078ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078b2:	461a      	mov	r2, r3
 80078b4:	2190      	movs	r1, #144	; 0x90
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f002 f886 	bl	80099c8 <VL53L0X_RdDWord>
 80078bc:	4603      	mov	r3, r0
 80078be:	461a      	mov	r2, r3
 80078c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078c4:	4313      	orrs	r3, r2
 80078c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80078ca:	2273      	movs	r2, #115	; 0x73
 80078cc:	2194      	movs	r1, #148	; 0x94
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f001 ff96 	bl	8009800 <VL53L0X_WrByte>
 80078d4:	4603      	mov	r3, r0
 80078d6:	461a      	mov	r2, r3
 80078d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078dc:	4313      	orrs	r3, r2
 80078de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7ff fc84 	bl	80071f0 <VL53L0X_device_read_strobe>
 80078e8:	4603      	mov	r3, r0
 80078ea:	461a      	mov	r2, r3
 80078ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078f0:	4313      	orrs	r3, r2
 80078f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80078f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078fa:	461a      	mov	r2, r3
 80078fc:	2190      	movs	r1, #144	; 0x90
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f002 f862 	bl	80099c8 <VL53L0X_RdDWord>
 8007904:	4603      	mov	r3, r0
 8007906:	461a      	mov	r2, r3
 8007908:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800790c:	4313      	orrs	r3, r2
 800790e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8007916:	b29b      	uxth	r3, r3
 8007918:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800791a:	2274      	movs	r2, #116	; 0x74
 800791c:	2194      	movs	r1, #148	; 0x94
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 ff6e 	bl	8009800 <VL53L0X_WrByte>
 8007924:	4603      	mov	r3, r0
 8007926:	461a      	mov	r2, r3
 8007928:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800792c:	4313      	orrs	r3, r2
 800792e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7ff fc5c 	bl	80071f0 <VL53L0X_device_read_strobe>
 8007938:	4603      	mov	r3, r0
 800793a:	461a      	mov	r2, r3
 800793c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007940:	4313      	orrs	r3, r2
 8007942:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007946:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800794a:	461a      	mov	r2, r3
 800794c:	2190      	movs	r1, #144	; 0x90
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f002 f83a 	bl	80099c8 <VL53L0X_RdDWord>
 8007954:	4603      	mov	r3, r0
 8007956:	461a      	mov	r2, r3
 8007958:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800795c:	4313      	orrs	r3, r2
 800795e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8007966:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007968:	4313      	orrs	r3, r2
 800796a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800796c:	2275      	movs	r2, #117	; 0x75
 800796e:	2194      	movs	r1, #148	; 0x94
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 ff45 	bl	8009800 <VL53L0X_WrByte>
 8007976:	4603      	mov	r3, r0
 8007978:	461a      	mov	r2, r3
 800797a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800797e:	4313      	orrs	r3, r2
 8007980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7ff fc33 	bl	80071f0 <VL53L0X_device_read_strobe>
 800798a:	4603      	mov	r3, r0
 800798c:	461a      	mov	r2, r3
 800798e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007992:	4313      	orrs	r3, r2
 8007994:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007998:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800799c:	461a      	mov	r2, r3
 800799e:	2190      	movs	r1, #144	; 0x90
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f002 f811 	bl	80099c8 <VL53L0X_RdDWord>
 80079a6:	4603      	mov	r3, r0
 80079a8:	461a      	mov	r2, r3
 80079aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079ae:	4313      	orrs	r3, r2
 80079b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80079b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b6:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80079bc:	2276      	movs	r2, #118	; 0x76
 80079be:	2194      	movs	r1, #148	; 0x94
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 ff1d 	bl	8009800 <VL53L0X_WrByte>
 80079c6:	4603      	mov	r3, r0
 80079c8:	461a      	mov	r2, r3
 80079ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079ce:	4313      	orrs	r3, r2
 80079d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff fc0b 	bl	80071f0 <VL53L0X_device_read_strobe>
 80079da:	4603      	mov	r3, r0
 80079dc:	461a      	mov	r2, r3
 80079de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079e2:	4313      	orrs	r3, r2
 80079e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80079e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079ec:	461a      	mov	r2, r3
 80079ee:	2190      	movs	r1, #144	; 0x90
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 ffe9 	bl	80099c8 <VL53L0X_RdDWord>
 80079f6:	4603      	mov	r3, r0
 80079f8:	461a      	mov	r2, r3
 80079fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079fe:	4313      	orrs	r3, r2
 8007a00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8007a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a06:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8007a08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8007a0e:	2200      	movs	r2, #0
 8007a10:	2181      	movs	r1, #129	; 0x81
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 fef4 	bl	8009800 <VL53L0X_WrByte>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a20:	4313      	orrs	r3, r2
 8007a22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007a26:	2206      	movs	r2, #6
 8007a28:	21ff      	movs	r1, #255	; 0xff
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 fee8 	bl	8009800 <VL53L0X_WrByte>
 8007a30:	4603      	mov	r3, r0
 8007a32:	461a      	mov	r2, r3
 8007a34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007a3e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007a42:	461a      	mov	r2, r3
 8007a44:	2183      	movs	r1, #131	; 0x83
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f001 ff5c 	bl	8009904 <VL53L0X_RdByte>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	461a      	mov	r2, r3
 8007a50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a54:	4313      	orrs	r3, r2
 8007a56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007a5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a5e:	f023 0304 	bic.w	r3, r3, #4
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	461a      	mov	r2, r3
 8007a66:	2183      	movs	r1, #131	; 0x83
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 fec9 	bl	8009800 <VL53L0X_WrByte>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	461a      	mov	r2, r3
 8007a72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a76:	4313      	orrs	r3, r2
 8007a78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	21ff      	movs	r1, #255	; 0xff
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 febd 	bl	8009800 <VL53L0X_WrByte>
 8007a86:	4603      	mov	r3, r0
 8007a88:	461a      	mov	r2, r3
 8007a8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007a94:	2201      	movs	r2, #1
 8007a96:	2100      	movs	r1, #0
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 feb1 	bl	8009800 <VL53L0X_WrByte>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007aac:	2200      	movs	r2, #0
 8007aae:	21ff      	movs	r1, #255	; 0xff
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f001 fea5 	bl	8009800 <VL53L0X_WrByte>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	2180      	movs	r1, #128	; 0x80
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 fe99 	bl	8009800 <VL53L0X_WrByte>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007adc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f040 808f 	bne.w	8007c04 <VL53L0X_get_info_from_device+0x98e>
 8007ae6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007aea:	2b07      	cmp	r3, #7
 8007aec:	f000 808a 	beq.w	8007c04 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d024      	beq.n	8007b44 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007afa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007afe:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d11e      	bne.n	8007b44 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8007b0c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8007b16:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b1e:	e00e      	b.n	8007b3e <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8007b20:	f107 0208 	add.w	r2, r7, #8
 8007b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b26:	4413      	add	r3, r2
 8007b28:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007b34:	460a      	mov	r2, r1
 8007b36:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b40:	2b05      	cmp	r3, #5
 8007b42:	dded      	ble.n	8007b20 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8007b44:	78fb      	ldrb	r3, [r7, #3]
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d018      	beq.n	8007b80 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007b4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b52:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d112      	bne.n	8007b80 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b5a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b64:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	33f3      	adds	r3, #243	; 0xf3
 8007b72:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8007b74:	f107 0310 	add.w	r3, r7, #16
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b7c:	f002 f812 	bl	8009ba4 <strcpy>

		}

		if (((option & 4) == 4) &&
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	f003 0304 	and.w	r3, r3, #4
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d030      	beq.n	8007bec <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007b8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b8e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d12a      	bne.n	8007bec <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8007ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ba8:	025b      	lsls	r3, r3, #9
 8007baa:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bb0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8007bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d011      	beq.n	8007be4 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8007bc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8007bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007bce:	fb02 f303 	mul.w	r3, r2, r3
 8007bd2:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8007bd4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8007bd8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007bdc:	425b      	negs	r3, r3
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8007be4:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8007bec:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007bf0:	78fb      	ldrb	r3, [r7, #3]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8007bfa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c04:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3760      	adds	r7, #96	; 0x60
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8007c10:	b490      	push	{r4, r7}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8007c1c:	f240 6377 	movw	r3, #1655	; 0x677
 8007c20:	f04f 0400 	mov.w	r4, #0
 8007c24:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8007c28:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8007c2c:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8007c2e:	78fb      	ldrb	r3, [r7, #3]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	fb02 f303 	mul.w	r3, r2, r3
 8007c3c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8007c3e:	68bb      	ldr	r3, [r7, #8]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc90      	pop	{r4, r7}
 8007c48:	4770      	bx	lr

08007c4a <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b087      	sub	sp, #28
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8007c52:	2300      	movs	r3, #0
 8007c54:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007c56:	2300      	movs	r3, #0
 8007c58:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d017      	beq.n	8007c94 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007c6a:	e005      	b.n	8007c78 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	085b      	lsrs	r3, r3, #1
 8007c70:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007c72:	89fb      	ldrh	r3, [r7, #14]
 8007c74:	3301      	adds	r3, #1
 8007c76:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1f4      	bne.n	8007c6c <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007c82:	89fb      	ldrh	r3, [r7, #14]
 8007c84:	021b      	lsls	r3, r3, #8
 8007c86:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007c90:	4413      	add	r3, r2
 8007c92:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007c94:	8afb      	ldrh	r3, [r7, #22]

}
 8007c96:	4618      	mov	r0, r3
 8007c98:	371c      	adds	r7, #28
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b085      	sub	sp, #20
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	4603      	mov	r3, r0
 8007caa:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007cb0:	88fb      	ldrh	r3, [r7, #6]
 8007cb2:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007cb4:	88fa      	ldrh	r2, [r7, #6]
 8007cb6:	0a12      	lsrs	r2, r2, #8
 8007cb8:	b292      	uxth	r2, r2
 8007cba:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
	...

08007cd0 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b088      	sub	sp, #32
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007ce2:	79fb      	ldrb	r3, [r7, #7]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f7ff ff92 	bl	8007c10 <VL53L0X_calc_macro_period_ps>
 8007cec:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007cf4:	4a0a      	ldr	r2, [pc, #40]	; (8007d20 <VL53L0X_calc_timeout_mclks+0x50>)
 8007cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfa:	099b      	lsrs	r3, r3, #6
 8007cfc:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d04:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	085b      	lsrs	r3, r3, #1
 8007d0c:	441a      	add	r2, r3
	timeout_period_mclks =
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d14:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8007d16:	69fb      	ldr	r3, [r7, #28]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3720      	adds	r7, #32
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	10624dd3 	.word	0x10624dd3

08007d24 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	807b      	strh	r3, [r7, #2]
 8007d30:	4613      	mov	r3, r2
 8007d32:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007d38:	787b      	ldrb	r3, [r7, #1]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7ff ff67 	bl	8007c10 <VL53L0X_calc_macro_period_ps>
 8007d42:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007d4a:	4a0a      	ldr	r2, [pc, #40]	; (8007d74 <VL53L0X_calc_timeout_us+0x50>)
 8007d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d50:	099b      	lsrs	r3, r3, #6
 8007d52:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8007d54:	887b      	ldrh	r3, [r7, #2]
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	fb02 f303 	mul.w	r3, r2, r3
 8007d5c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8007d60:	4a04      	ldr	r2, [pc, #16]	; (8007d74 <VL53L0X_calc_timeout_us+0x50>)
 8007d62:	fba2 2303 	umull	r2, r3, r2, r3
 8007d66:	099b      	lsrs	r3, r3, #6
 8007d68:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8007d6a:	697b      	ldr	r3, [r7, #20]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	10624dd3 	.word	0x10624dd3

08007d78 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b08c      	sub	sp, #48	; 0x30
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	460b      	mov	r3, r1
 8007d82:	607a      	str	r2, [r7, #4]
 8007d84:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d86:	2300      	movs	r3, #0
 8007d88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007d9e:	7afb      	ldrb	r3, [r7, #11]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d005      	beq.n	8007db0 <get_sequence_step_timeout+0x38>
 8007da4:	7afb      	ldrb	r3, [r7, #11]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d002      	beq.n	8007db0 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007daa:	7afb      	ldrb	r3, [r7, #11]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d128      	bne.n	8007e02 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007db0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007db4:	461a      	mov	r2, r3
 8007db6:	2100      	movs	r1, #0
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f7fd fa7d 	bl	80052b8 <VL53L0X_GetVcselPulsePeriod>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8007dc4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d109      	bne.n	8007de0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8007dcc:	f107 0320 	add.w	r3, r7, #32
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	2146      	movs	r1, #70	; 0x46
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f001 fd95 	bl	8009904 <VL53L0X_RdByte>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007de0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff ff5b 	bl	8007ca2 <VL53L0X_decode_timeout>
 8007dec:	4603      	mov	r3, r0
 8007dee:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007df0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007df4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007df6:	4619      	mov	r1, r3
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f7ff ff93 	bl	8007d24 <VL53L0X_calc_timeout_us>
 8007dfe:	62b8      	str	r0, [r7, #40]	; 0x28
 8007e00:	e092      	b.n	8007f28 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007e02:	7afb      	ldrb	r3, [r7, #11]
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	d135      	bne.n	8007e74 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007e08:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	2100      	movs	r1, #0
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f7fd fa51 	bl	80052b8 <VL53L0X_GetVcselPulsePeriod>
 8007e16:	4603      	mov	r3, r0
 8007e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007e1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f040 8081 	bne.w	8007f28 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007e26:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f7fd fa42 	bl	80052b8 <VL53L0X_GetVcselPulsePeriod>
 8007e34:	4603      	mov	r3, r0
 8007e36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8007e3a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d109      	bne.n	8007e56 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8007e42:	f107 031e 	add.w	r3, r7, #30
 8007e46:	461a      	mov	r2, r3
 8007e48:	2151      	movs	r1, #81	; 0x51
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f001 fd84 	bl	8009958 <VL53L0X_RdWord>
 8007e50:	4603      	mov	r3, r0
 8007e52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007e56:	8bfb      	ldrh	r3, [r7, #30]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7ff ff22 	bl	8007ca2 <VL53L0X_decode_timeout>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007e62:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007e66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e68:	4619      	mov	r1, r3
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f7ff ff5a 	bl	8007d24 <VL53L0X_calc_timeout_us>
 8007e70:	62b8      	str	r0, [r7, #40]	; 0x28
 8007e72:	e059      	b.n	8007f28 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007e74:	7afb      	ldrb	r3, [r7, #11]
 8007e76:	2b04      	cmp	r3, #4
 8007e78:	d156      	bne.n	8007f28 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007e7a:	f107 0314 	add.w	r3, r7, #20
 8007e7e:	4619      	mov	r1, r3
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f7fd fb25 	bl	80054d0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8007e8a:	7dfb      	ldrb	r3, [r7, #23]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d01d      	beq.n	8007ecc <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007e90:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007e94:	461a      	mov	r2, r3
 8007e96:	2100      	movs	r1, #0
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7fd fa0d 	bl	80052b8 <VL53L0X_GetVcselPulsePeriod>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8007ea4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10f      	bne.n	8007ecc <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8007eac:	f107 031e 	add.w	r3, r7, #30
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	2151      	movs	r1, #81	; 0x51
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f001 fd4f 	bl	8009958 <VL53L0X_RdWord>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007ec0:	8bfb      	ldrh	r3, [r7, #30]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff feed 	bl	8007ca2 <VL53L0X_decode_timeout>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007ecc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d109      	bne.n	8007ee8 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007ed4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007ed8:	461a      	mov	r2, r3
 8007eda:	2101      	movs	r1, #1
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f7fd f9eb 	bl	80052b8 <VL53L0X_GetVcselPulsePeriod>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007ee8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10f      	bne.n	8007f10 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8007ef0:	f107 031c 	add.w	r3, r7, #28
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	2171      	movs	r1, #113	; 0x71
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f001 fd2d 	bl	8009958 <VL53L0X_RdWord>
 8007efe:	4603      	mov	r3, r0
 8007f00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007f04:	8bbb      	ldrh	r3, [r7, #28]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7ff fecb 	bl	8007ca2 <VL53L0X_decode_timeout>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007f10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007f12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007f18:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007f1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f1e:	4619      	mov	r1, r3
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f7ff feff 	bl	8007d24 <VL53L0X_calc_timeout_us>
 8007f26:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f2c:	601a      	str	r2, [r3, #0]

	return Status;
 8007f2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3730      	adds	r7, #48	; 0x30
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b08a      	sub	sp, #40	; 0x28
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	460b      	mov	r3, r1
 8007f44:	607a      	str	r2, [r7, #4]
 8007f46:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007f4e:	7afb      	ldrb	r3, [r7, #11]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d005      	beq.n	8007f60 <set_sequence_step_timeout+0x26>
 8007f54:	7afb      	ldrb	r3, [r7, #11]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d002      	beq.n	8007f60 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007f5a:	7afb      	ldrb	r3, [r7, #11]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d138      	bne.n	8007fd2 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007f60:	f107 031b 	add.w	r3, r7, #27
 8007f64:	461a      	mov	r2, r3
 8007f66:	2100      	movs	r1, #0
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f7fd f9a5 	bl	80052b8 <VL53L0X_GetVcselPulsePeriod>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8007f74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d11a      	bne.n	8007fb2 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8007f7c:	7efb      	ldrb	r3, [r7, #27]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f7ff fea4 	bl	8007cd0 <VL53L0X_calc_timeout_mclks>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8007f8c:	8bbb      	ldrh	r3, [r7, #28]
 8007f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f92:	d903      	bls.n	8007f9c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8007f94:	23ff      	movs	r3, #255	; 0xff
 8007f96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007f9a:	e004      	b.n	8007fa6 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8007f9c:	8bbb      	ldrh	r3, [r7, #28]
 8007f9e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007fa6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007fb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f040 80ab 	bne.w	8008112 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8007fbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	2146      	movs	r1, #70	; 0x46
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f001 fc1b 	bl	8009800 <VL53L0X_WrByte>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8007fd0:	e09f      	b.n	8008112 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007fd2:	7afb      	ldrb	r3, [r7, #11]
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	d135      	bne.n	8008044 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8007fd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d11b      	bne.n	8008018 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007fe0:	f107 031b 	add.w	r3, r7, #27
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f7fd f965 	bl	80052b8 <VL53L0X_GetVcselPulsePeriod>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007ff4:	7efb      	ldrb	r3, [r7, #27]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	6879      	ldr	r1, [r7, #4]
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f7ff fe68 	bl	8007cd0 <VL53L0X_calc_timeout_mclks>
 8008000:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8008002:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8008004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008006:	4618      	mov	r0, r3
 8008008:	f7ff fe1f 	bl	8007c4a <VL53L0X_encode_timeout>
 800800c:	4603      	mov	r3, r0
 800800e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008010:	8b3a      	ldrh	r2, [r7, #24]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008018:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800801c:	2b00      	cmp	r3, #0
 800801e:	d108      	bne.n	8008032 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8008020:	8b3b      	ldrh	r3, [r7, #24]
 8008022:	461a      	mov	r2, r3
 8008024:	2151      	movs	r1, #81	; 0x51
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f001 fc0e 	bl	8009848 <VL53L0X_WrWord>
 800802c:	4603      	mov	r3, r0
 800802e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008032:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008036:	2b00      	cmp	r3, #0
 8008038:	d16b      	bne.n	8008112 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8008042:	e066      	b.n	8008112 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008044:	7afb      	ldrb	r3, [r7, #11]
 8008046:	2b04      	cmp	r3, #4
 8008048:	d160      	bne.n	800810c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800804a:	f107 0310 	add.w	r3, r7, #16
 800804e:	4619      	mov	r1, r3
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7fd fa3d 	bl	80054d0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8008056:	2300      	movs	r3, #0
 8008058:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800805a:	7cfb      	ldrb	r3, [r7, #19]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d01d      	beq.n	800809c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008060:	f107 031b 	add.w	r3, r7, #27
 8008064:	461a      	mov	r2, r3
 8008066:	2100      	movs	r1, #0
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f7fd f925 	bl	80052b8 <VL53L0X_GetVcselPulsePeriod>
 800806e:	4603      	mov	r3, r0
 8008070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8008074:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10f      	bne.n	800809c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800807c:	f107 0318 	add.w	r3, r7, #24
 8008080:	461a      	mov	r2, r3
 8008082:	2151      	movs	r1, #81	; 0x51
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f001 fc67 	bl	8009958 <VL53L0X_RdWord>
 800808a:	4603      	mov	r3, r0
 800808c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8008090:	8b3b      	ldrh	r3, [r7, #24]
 8008092:	4618      	mov	r0, r3
 8008094:	f7ff fe05 	bl	8007ca2 <VL53L0X_decode_timeout>
 8008098:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800809a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800809c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d109      	bne.n	80080b8 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80080a4:	f107 031b 	add.w	r3, r7, #27
 80080a8:	461a      	mov	r2, r3
 80080aa:	2101      	movs	r1, #1
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f7fd f903 	bl	80052b8 <VL53L0X_GetVcselPulsePeriod>
 80080b2:	4603      	mov	r3, r0
 80080b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80080b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d128      	bne.n	8008112 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80080c0:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 80080c2:	461a      	mov	r2, r3
 80080c4:	6879      	ldr	r1, [r7, #4]
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f7ff fe02 	bl	8007cd0 <VL53L0X_calc_timeout_mclks>
 80080cc:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80080ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080d0:	6a3a      	ldr	r2, [r7, #32]
 80080d2:	4413      	add	r3, r2
 80080d4:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 80080d6:	6a38      	ldr	r0, [r7, #32]
 80080d8:	f7ff fdb7 	bl	8007c4a <VL53L0X_encode_timeout>
 80080dc:	4603      	mov	r3, r0
 80080de:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 80080e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d108      	bne.n	80080fa <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80080e8:	8bfb      	ldrh	r3, [r7, #30]
 80080ea:	461a      	mov	r2, r3
 80080ec:	2171      	movs	r1, #113	; 0x71
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f001 fbaa 	bl	8009848 <VL53L0X_WrWord>
 80080f4:	4603      	mov	r3, r0
 80080f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80080fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d107      	bne.n	8008112 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800810a:	e002      	b.n	8008112 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800810c:	23fc      	movs	r3, #252	; 0xfc
 800810e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8008112:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008116:	4618      	mov	r0, r3
 8008118:	3728      	adds	r7, #40	; 0x28
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b08a      	sub	sp, #40	; 0x28
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	460b      	mov	r3, r1
 8008128:	70fb      	strb	r3, [r7, #3]
 800812a:	4613      	mov	r3, r2
 800812c:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800812e:	2300      	movs	r3, #0
 8008130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8008134:	230c      	movs	r3, #12
 8008136:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800813a:	2312      	movs	r3, #18
 800813c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8008140:	2308      	movs	r3, #8
 8008142:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8008146:	230e      	movs	r3, #14
 8008148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800814c:	2300      	movs	r3, #0
 800814e:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8008150:	78bb      	ldrb	r3, [r7, #2]
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800815c:	23fc      	movs	r3, #252	; 0xfc
 800815e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008162:	e020      	b.n	80081a6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8008164:	78fb      	ldrb	r3, [r7, #3]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10d      	bne.n	8008186 <VL53L0X_set_vcsel_pulse_period+0x68>
 800816a:	78ba      	ldrb	r2, [r7, #2]
 800816c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008170:	429a      	cmp	r2, r3
 8008172:	d304      	bcc.n	800817e <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8008174:	78ba      	ldrb	r2, [r7, #2]
 8008176:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800817a:	429a      	cmp	r2, r3
 800817c:	d903      	bls.n	8008186 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800817e:	23fc      	movs	r3, #252	; 0xfc
 8008180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008184:	e00f      	b.n	80081a6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8008186:	78fb      	ldrb	r3, [r7, #3]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d10c      	bne.n	80081a6 <VL53L0X_set_vcsel_pulse_period+0x88>
 800818c:	78ba      	ldrb	r2, [r7, #2]
 800818e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008192:	429a      	cmp	r2, r3
 8008194:	d304      	bcc.n	80081a0 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8008196:	78ba      	ldrb	r2, [r7, #2]
 8008198:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800819c:	429a      	cmp	r2, r3
 800819e:	d902      	bls.n	80081a6 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80081a0:	23fc      	movs	r3, #252	; 0xfc
 80081a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80081a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d002      	beq.n	80081b4 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80081ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081b2:	e239      	b.n	8008628 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d150      	bne.n	800825c <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80081ba:	78bb      	ldrb	r3, [r7, #2]
 80081bc:	2b0c      	cmp	r3, #12
 80081be:	d110      	bne.n	80081e2 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80081c0:	2218      	movs	r2, #24
 80081c2:	2157      	movs	r1, #87	; 0x57
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f001 fb1b 	bl	8009800 <VL53L0X_WrByte>
 80081ca:	4603      	mov	r3, r0
 80081cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80081d0:	2208      	movs	r2, #8
 80081d2:	2156      	movs	r1, #86	; 0x56
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f001 fb13 	bl	8009800 <VL53L0X_WrByte>
 80081da:	4603      	mov	r3, r0
 80081dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80081e0:	e17f      	b.n	80084e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80081e2:	78bb      	ldrb	r3, [r7, #2]
 80081e4:	2b0e      	cmp	r3, #14
 80081e6:	d110      	bne.n	800820a <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80081e8:	2230      	movs	r2, #48	; 0x30
 80081ea:	2157      	movs	r1, #87	; 0x57
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 fb07 	bl	8009800 <VL53L0X_WrByte>
 80081f2:	4603      	mov	r3, r0
 80081f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80081f8:	2208      	movs	r2, #8
 80081fa:	2156      	movs	r1, #86	; 0x56
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f001 faff 	bl	8009800 <VL53L0X_WrByte>
 8008202:	4603      	mov	r3, r0
 8008204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008208:	e16b      	b.n	80084e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800820a:	78bb      	ldrb	r3, [r7, #2]
 800820c:	2b10      	cmp	r3, #16
 800820e:	d110      	bne.n	8008232 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8008210:	2240      	movs	r2, #64	; 0x40
 8008212:	2157      	movs	r1, #87	; 0x57
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 faf3 	bl	8009800 <VL53L0X_WrByte>
 800821a:	4603      	mov	r3, r0
 800821c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8008220:	2208      	movs	r2, #8
 8008222:	2156      	movs	r1, #86	; 0x56
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f001 faeb 	bl	8009800 <VL53L0X_WrByte>
 800822a:	4603      	mov	r3, r0
 800822c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008230:	e157      	b.n	80084e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8008232:	78bb      	ldrb	r3, [r7, #2]
 8008234:	2b12      	cmp	r3, #18
 8008236:	f040 8154 	bne.w	80084e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800823a:	2250      	movs	r2, #80	; 0x50
 800823c:	2157      	movs	r1, #87	; 0x57
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f001 fade 	bl	8009800 <VL53L0X_WrByte>
 8008244:	4603      	mov	r3, r0
 8008246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800824a:	2208      	movs	r2, #8
 800824c:	2156      	movs	r1, #86	; 0x56
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f001 fad6 	bl	8009800 <VL53L0X_WrByte>
 8008254:	4603      	mov	r3, r0
 8008256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800825a:	e142      	b.n	80084e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800825c:	78fb      	ldrb	r3, [r7, #3]
 800825e:	2b01      	cmp	r3, #1
 8008260:	f040 813f 	bne.w	80084e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8008264:	78bb      	ldrb	r3, [r7, #2]
 8008266:	2b08      	cmp	r3, #8
 8008268:	d14c      	bne.n	8008304 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800826a:	2210      	movs	r2, #16
 800826c:	2148      	movs	r1, #72	; 0x48
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f001 fac6 	bl	8009800 <VL53L0X_WrByte>
 8008274:	4603      	mov	r3, r0
 8008276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800827a:	2208      	movs	r2, #8
 800827c:	2147      	movs	r1, #71	; 0x47
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f001 fabe 	bl	8009800 <VL53L0X_WrByte>
 8008284:	4603      	mov	r3, r0
 8008286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800828a:	2202      	movs	r2, #2
 800828c:	2132      	movs	r1, #50	; 0x32
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f001 fab6 	bl	8009800 <VL53L0X_WrByte>
 8008294:	4603      	mov	r3, r0
 8008296:	461a      	mov	r2, r3
 8008298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800829c:	4313      	orrs	r3, r2
 800829e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80082a2:	220c      	movs	r2, #12
 80082a4:	2130      	movs	r1, #48	; 0x30
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f001 faaa 	bl	8009800 <VL53L0X_WrByte>
 80082ac:	4603      	mov	r3, r0
 80082ae:	461a      	mov	r2, r3
 80082b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082b4:	4313      	orrs	r3, r2
 80082b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80082ba:	2201      	movs	r2, #1
 80082bc:	21ff      	movs	r1, #255	; 0xff
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 fa9e 	bl	8009800 <VL53L0X_WrByte>
 80082c4:	4603      	mov	r3, r0
 80082c6:	461a      	mov	r2, r3
 80082c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082cc:	4313      	orrs	r3, r2
 80082ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80082d2:	2230      	movs	r2, #48	; 0x30
 80082d4:	2130      	movs	r1, #48	; 0x30
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f001 fa92 	bl	8009800 <VL53L0X_WrByte>
 80082dc:	4603      	mov	r3, r0
 80082de:	461a      	mov	r2, r3
 80082e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082e4:	4313      	orrs	r3, r2
 80082e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80082ea:	2200      	movs	r2, #0
 80082ec:	21ff      	movs	r1, #255	; 0xff
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 fa86 	bl	8009800 <VL53L0X_WrByte>
 80082f4:	4603      	mov	r3, r0
 80082f6:	461a      	mov	r2, r3
 80082f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082fc:	4313      	orrs	r3, r2
 80082fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008302:	e0ee      	b.n	80084e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8008304:	78bb      	ldrb	r3, [r7, #2]
 8008306:	2b0a      	cmp	r3, #10
 8008308:	d14c      	bne.n	80083a4 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800830a:	2228      	movs	r2, #40	; 0x28
 800830c:	2148      	movs	r1, #72	; 0x48
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f001 fa76 	bl	8009800 <VL53L0X_WrByte>
 8008314:	4603      	mov	r3, r0
 8008316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800831a:	2208      	movs	r2, #8
 800831c:	2147      	movs	r1, #71	; 0x47
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f001 fa6e 	bl	8009800 <VL53L0X_WrByte>
 8008324:	4603      	mov	r3, r0
 8008326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800832a:	2203      	movs	r2, #3
 800832c:	2132      	movs	r1, #50	; 0x32
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f001 fa66 	bl	8009800 <VL53L0X_WrByte>
 8008334:	4603      	mov	r3, r0
 8008336:	461a      	mov	r2, r3
 8008338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800833c:	4313      	orrs	r3, r2
 800833e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8008342:	2209      	movs	r2, #9
 8008344:	2130      	movs	r1, #48	; 0x30
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 fa5a 	bl	8009800 <VL53L0X_WrByte>
 800834c:	4603      	mov	r3, r0
 800834e:	461a      	mov	r2, r3
 8008350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008354:	4313      	orrs	r3, r2
 8008356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800835a:	2201      	movs	r2, #1
 800835c:	21ff      	movs	r1, #255	; 0xff
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f001 fa4e 	bl	8009800 <VL53L0X_WrByte>
 8008364:	4603      	mov	r3, r0
 8008366:	461a      	mov	r2, r3
 8008368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800836c:	4313      	orrs	r3, r2
 800836e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008372:	2220      	movs	r2, #32
 8008374:	2130      	movs	r1, #48	; 0x30
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f001 fa42 	bl	8009800 <VL53L0X_WrByte>
 800837c:	4603      	mov	r3, r0
 800837e:	461a      	mov	r2, r3
 8008380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008384:	4313      	orrs	r3, r2
 8008386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800838a:	2200      	movs	r2, #0
 800838c:	21ff      	movs	r1, #255	; 0xff
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f001 fa36 	bl	8009800 <VL53L0X_WrByte>
 8008394:	4603      	mov	r3, r0
 8008396:	461a      	mov	r2, r3
 8008398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800839c:	4313      	orrs	r3, r2
 800839e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80083a2:	e09e      	b.n	80084e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80083a4:	78bb      	ldrb	r3, [r7, #2]
 80083a6:	2b0c      	cmp	r3, #12
 80083a8:	d14c      	bne.n	8008444 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80083aa:	2238      	movs	r2, #56	; 0x38
 80083ac:	2148      	movs	r1, #72	; 0x48
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f001 fa26 	bl	8009800 <VL53L0X_WrByte>
 80083b4:	4603      	mov	r3, r0
 80083b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80083ba:	2208      	movs	r2, #8
 80083bc:	2147      	movs	r1, #71	; 0x47
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f001 fa1e 	bl	8009800 <VL53L0X_WrByte>
 80083c4:	4603      	mov	r3, r0
 80083c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80083ca:	2203      	movs	r2, #3
 80083cc:	2132      	movs	r1, #50	; 0x32
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f001 fa16 	bl	8009800 <VL53L0X_WrByte>
 80083d4:	4603      	mov	r3, r0
 80083d6:	461a      	mov	r2, r3
 80083d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083dc:	4313      	orrs	r3, r2
 80083de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80083e2:	2208      	movs	r2, #8
 80083e4:	2130      	movs	r1, #48	; 0x30
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f001 fa0a 	bl	8009800 <VL53L0X_WrByte>
 80083ec:	4603      	mov	r3, r0
 80083ee:	461a      	mov	r2, r3
 80083f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083f4:	4313      	orrs	r3, r2
 80083f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80083fa:	2201      	movs	r2, #1
 80083fc:	21ff      	movs	r1, #255	; 0xff
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f001 f9fe 	bl	8009800 <VL53L0X_WrByte>
 8008404:	4603      	mov	r3, r0
 8008406:	461a      	mov	r2, r3
 8008408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800840c:	4313      	orrs	r3, r2
 800840e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008412:	2220      	movs	r2, #32
 8008414:	2130      	movs	r1, #48	; 0x30
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f001 f9f2 	bl	8009800 <VL53L0X_WrByte>
 800841c:	4603      	mov	r3, r0
 800841e:	461a      	mov	r2, r3
 8008420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008424:	4313      	orrs	r3, r2
 8008426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800842a:	2200      	movs	r2, #0
 800842c:	21ff      	movs	r1, #255	; 0xff
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f001 f9e6 	bl	8009800 <VL53L0X_WrByte>
 8008434:	4603      	mov	r3, r0
 8008436:	461a      	mov	r2, r3
 8008438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800843c:	4313      	orrs	r3, r2
 800843e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008442:	e04e      	b.n	80084e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8008444:	78bb      	ldrb	r3, [r7, #2]
 8008446:	2b0e      	cmp	r3, #14
 8008448:	d14b      	bne.n	80084e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800844a:	2248      	movs	r2, #72	; 0x48
 800844c:	2148      	movs	r1, #72	; 0x48
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f001 f9d6 	bl	8009800 <VL53L0X_WrByte>
 8008454:	4603      	mov	r3, r0
 8008456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800845a:	2208      	movs	r2, #8
 800845c:	2147      	movs	r1, #71	; 0x47
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 f9ce 	bl	8009800 <VL53L0X_WrByte>
 8008464:	4603      	mov	r3, r0
 8008466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800846a:	2203      	movs	r2, #3
 800846c:	2132      	movs	r1, #50	; 0x32
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f001 f9c6 	bl	8009800 <VL53L0X_WrByte>
 8008474:	4603      	mov	r3, r0
 8008476:	461a      	mov	r2, r3
 8008478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800847c:	4313      	orrs	r3, r2
 800847e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8008482:	2207      	movs	r2, #7
 8008484:	2130      	movs	r1, #48	; 0x30
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f001 f9ba 	bl	8009800 <VL53L0X_WrByte>
 800848c:	4603      	mov	r3, r0
 800848e:	461a      	mov	r2, r3
 8008490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008494:	4313      	orrs	r3, r2
 8008496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800849a:	2201      	movs	r2, #1
 800849c:	21ff      	movs	r1, #255	; 0xff
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f001 f9ae 	bl	8009800 <VL53L0X_WrByte>
 80084a4:	4603      	mov	r3, r0
 80084a6:	461a      	mov	r2, r3
 80084a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084ac:	4313      	orrs	r3, r2
 80084ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80084b2:	2220      	movs	r2, #32
 80084b4:	2130      	movs	r1, #48	; 0x30
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f001 f9a2 	bl	8009800 <VL53L0X_WrByte>
 80084bc:	4603      	mov	r3, r0
 80084be:	461a      	mov	r2, r3
 80084c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084c4:	4313      	orrs	r3, r2
 80084c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80084ca:	2200      	movs	r2, #0
 80084cc:	21ff      	movs	r1, #255	; 0xff
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f001 f996 	bl	8009800 <VL53L0X_WrByte>
 80084d4:	4603      	mov	r3, r0
 80084d6:	461a      	mov	r2, r3
 80084d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084dc:	4313      	orrs	r3, r2
 80084de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80084e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d17f      	bne.n	80085ea <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80084ea:	78bb      	ldrb	r3, [r7, #2]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fe fe38 	bl	8007162 <VL53L0X_encode_vcsel_period>
 80084f2:	4603      	mov	r3, r0
 80084f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80084f8:	78fb      	ldrb	r3, [r7, #3]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d002      	beq.n	8008504 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d045      	beq.n	800858e <VL53L0X_set_vcsel_pulse_period+0x470>
 8008502:	e06e      	b.n	80085e2 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8008504:	f107 0314 	add.w	r3, r7, #20
 8008508:	461a      	mov	r2, r3
 800850a:	2103      	movs	r1, #3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7ff fc33 	bl	8007d78 <get_sequence_step_timeout>
 8008512:	4603      	mov	r3, r0
 8008514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008518:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800851c:	2b00      	cmp	r3, #0
 800851e:	d109      	bne.n	8008534 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8008520:	f107 0310 	add.w	r3, r7, #16
 8008524:	461a      	mov	r2, r3
 8008526:	2102      	movs	r1, #2
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7ff fc25 	bl	8007d78 <get_sequence_step_timeout>
 800852e:	4603      	mov	r3, r0
 8008530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008534:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008538:	2b00      	cmp	r3, #0
 800853a:	d109      	bne.n	8008550 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800853c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008540:	461a      	mov	r2, r3
 8008542:	2150      	movs	r1, #80	; 0x50
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 f95b 	bl	8009800 <VL53L0X_WrByte>
 800854a:	4603      	mov	r3, r0
 800854c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8008550:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008554:	2b00      	cmp	r3, #0
 8008556:	d108      	bne.n	800856a <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	461a      	mov	r2, r3
 800855c:	2103      	movs	r1, #3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7ff fceb 	bl	8007f3a <set_sequence_step_timeout>
 8008564:	4603      	mov	r3, r0
 8008566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800856a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800856e:	2b00      	cmp	r3, #0
 8008570:	d108      	bne.n	8008584 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	461a      	mov	r2, r3
 8008576:	2102      	movs	r1, #2
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7ff fcde 	bl	8007f3a <set_sequence_step_timeout>
 800857e:	4603      	mov	r3, r0
 8008580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	78ba      	ldrb	r2, [r7, #2]
 8008588:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800858c:	e02e      	b.n	80085ec <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800858e:	f107 0318 	add.w	r3, r7, #24
 8008592:	461a      	mov	r2, r3
 8008594:	2104      	movs	r1, #4
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7ff fbee 	bl	8007d78 <get_sequence_step_timeout>
 800859c:	4603      	mov	r3, r0
 800859e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80085a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d109      	bne.n	80085be <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80085aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80085ae:	461a      	mov	r2, r3
 80085b0:	2170      	movs	r1, #112	; 0x70
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f001 f924 	bl	8009800 <VL53L0X_WrByte>
 80085b8:	4603      	mov	r3, r0
 80085ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80085be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d108      	bne.n	80085d8 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	461a      	mov	r2, r3
 80085ca:	2104      	movs	r1, #4
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f7ff fcb4 	bl	8007f3a <set_sequence_step_timeout>
 80085d2:	4603      	mov	r3, r0
 80085d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	78ba      	ldrb	r2, [r7, #2]
 80085dc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80085e0:	e004      	b.n	80085ec <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80085e2:	23fc      	movs	r3, #252	; 0xfc
 80085e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80085e8:	e000      	b.n	80085ec <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80085ea:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80085ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d109      	bne.n	8008608 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80085fa:	69f9      	ldr	r1, [r7, #28]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7fc fe1d 	bl	800523c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8008602:	4603      	mov	r3, r0
 8008604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8008608:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800860c:	2b00      	cmp	r3, #0
 800860e:	d109      	bne.n	8008624 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8008610:	f107 010f 	add.w	r1, r7, #15
 8008614:	2301      	movs	r3, #1
 8008616:	2200      	movs	r2, #0
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f7fe fcbd 	bl	8006f98 <VL53L0X_perform_phase_calibration>
 800861e:	4603      	mov	r3, r0
 8008620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8008624:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008628:	4618      	mov	r0, r3
 800862a:	3728      	adds	r7, #40	; 0x28
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	460b      	mov	r3, r1
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800863e:	2300      	movs	r3, #0
 8008640:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8008642:	7afb      	ldrb	r3, [r7, #11]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <VL53L0X_get_vcsel_pulse_period+0x1e>
 8008648:	2b01      	cmp	r3, #1
 800864a:	d00a      	beq.n	8008662 <VL53L0X_get_vcsel_pulse_period+0x32>
 800864c:	e013      	b.n	8008676 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800864e:	f107 0316 	add.w	r3, r7, #22
 8008652:	461a      	mov	r2, r3
 8008654:	2150      	movs	r1, #80	; 0x50
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f001 f954 	bl	8009904 <VL53L0X_RdByte>
 800865c:	4603      	mov	r3, r0
 800865e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008660:	e00b      	b.n	800867a <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008662:	f107 0316 	add.w	r3, r7, #22
 8008666:	461a      	mov	r2, r3
 8008668:	2170      	movs	r1, #112	; 0x70
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f001 f94a 	bl	8009904 <VL53L0X_RdByte>
 8008670:	4603      	mov	r3, r0
 8008672:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008674:	e001      	b.n	800867a <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008676:	23fc      	movs	r3, #252	; 0xfc
 8008678:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800867a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d107      	bne.n	8008692 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8008682:	7dbb      	ldrb	r3, [r7, #22]
 8008684:	4618      	mov	r0, r3
 8008686:	f7fe fd59 	bl	800713c <VL53L0X_decode_vcsel_period>
 800868a:	4603      	mov	r3, r0
 800868c:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	701a      	strb	r2, [r3, #0]

	return Status;
 8008692:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3718      	adds	r7, #24
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b092      	sub	sp, #72	; 0x48
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086a8:	2300      	movs	r3, #0
 80086aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80086ae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80086b2:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80086b4:	f240 7376 	movw	r3, #1910	; 0x776
 80086b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80086ba:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80086be:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80086c0:	f44f 7325 	mov.w	r3, #660	; 0x294
 80086c4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80086c6:	f240 234e 	movw	r3, #590	; 0x24e
 80086ca:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80086cc:	f240 23b2 	movw	r3, #690	; 0x2b2
 80086d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80086d2:	f44f 7325 	mov.w	r3, #660	; 0x294
 80086d6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80086d8:	f240 2326 	movw	r3, #550	; 0x226
 80086dc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80086e2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80086e6:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d205      	bcs.n	8008700 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80086f4:	23fc      	movs	r3, #252	; 0xfc
 80086f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80086fa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80086fe:	e0aa      	b.n	8008856 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8008700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008704:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800870c:	f107 0314 	add.w	r3, r7, #20
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7fc fedc 	bl	80054d0 <VL53L0X_GetSequenceStepEnables>
 8008718:	4603      	mov	r3, r0
 800871a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800871e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008722:	2b00      	cmp	r3, #0
 8008724:	d15b      	bne.n	80087de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8008726:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8008728:	2b00      	cmp	r3, #0
 800872a:	d105      	bne.n	8008738 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800872c:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800872e:	2b00      	cmp	r3, #0
 8008730:	d102      	bne.n	8008738 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8008732:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8008734:	2b00      	cmp	r3, #0
 8008736:	d052      	beq.n	80087de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8008738:	f107 0310 	add.w	r3, r7, #16
 800873c:	461a      	mov	r2, r3
 800873e:	2102      	movs	r1, #2
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff fb19 	bl	8007d78 <get_sequence_step_timeout>
 8008746:	4603      	mov	r3, r0
 8008748:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800874c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8008754:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008758:	e07d      	b.n	8008856 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800875a:	7d3b      	ldrb	r3, [r7, #20]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00f      	beq.n	8008780 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8008760:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8008762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008764:	4413      	add	r3, r2
 8008766:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8008768:	69fa      	ldr	r2, [r7, #28]
 800876a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800876c:	429a      	cmp	r2, r3
 800876e:	d204      	bcs.n	800877a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8008770:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	643b      	str	r3, [r7, #64]	; 0x40
 8008778:	e002      	b.n	8008780 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800877a:	23fc      	movs	r3, #252	; 0xfc
 800877c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8008780:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8008788:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800878c:	e063      	b.n	8008856 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800878e:	7dbb      	ldrb	r3, [r7, #22]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d011      	beq.n	80087b8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008798:	4413      	add	r3, r2
 800879a:	005b      	lsls	r3, r3, #1
 800879c:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800879e:	69fa      	ldr	r2, [r7, #28]
 80087a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d204      	bcs.n	80087b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80087a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	643b      	str	r3, [r7, #64]	; 0x40
 80087ae:	e016      	b.n	80087de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80087b0:	23fc      	movs	r3, #252	; 0xfc
 80087b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80087b6:	e012      	b.n	80087de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80087b8:	7d7b      	ldrb	r3, [r7, #21]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00f      	beq.n	80087de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087c2:	4413      	add	r3, r2
 80087c4:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80087c6:	69fa      	ldr	r2, [r7, #28]
 80087c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d204      	bcs.n	80087d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80087ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	643b      	str	r3, [r7, #64]	; 0x40
 80087d6:	e002      	b.n	80087de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80087d8:	23fc      	movs	r3, #252	; 0xfc
 80087da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80087de:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80087e6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80087ea:	e034      	b.n	8008856 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d019      	beq.n	8008826 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80087f2:	f107 030c 	add.w	r3, r7, #12
 80087f6:	461a      	mov	r2, r3
 80087f8:	2103      	movs	r1, #3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7ff fabc 	bl	8007d78 <get_sequence_step_timeout>
 8008800:	4603      	mov	r3, r0
 8008802:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800880a:	4413      	add	r3, r2
 800880c:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008812:	429a      	cmp	r2, r3
 8008814:	d204      	bcs.n	8008820 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8008816:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	643b      	str	r3, [r7, #64]	; 0x40
 800881e:	e002      	b.n	8008826 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008820:	23fc      	movs	r3, #252	; 0xfc
 8008822:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8008826:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800882a:	2b00      	cmp	r3, #0
 800882c:	d111      	bne.n	8008852 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800882e:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00e      	beq.n	8008852 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8008834:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800883c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800883e:	2104      	movs	r1, #4
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff fb7a 	bl	8007f3a <set_sequence_step_timeout>
 8008846:	4603      	mov	r3, r0
 8008848:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008852:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8008856:	4618      	mov	r0, r3
 8008858:	3748      	adds	r7, #72	; 0x48
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b090      	sub	sp, #64	; 0x40
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008868:	2300      	movs	r3, #0
 800886a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800886e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008872:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008874:	f240 7376 	movw	r3, #1910	; 0x776
 8008878:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800887a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800887e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008880:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008884:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8008886:	f240 234e 	movw	r3, #590	; 0x24e
 800888a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800888c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008890:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008892:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008896:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008898:	f240 2326 	movw	r3, #550	; 0x226
 800889c:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80088a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a6:	441a      	add	r2, r3
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80088ac:	f107 0318 	add.w	r3, r7, #24
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7fc fe0c 	bl	80054d0 <VL53L0X_GetSequenceStepEnables>
 80088b8:	4603      	mov	r3, r0
 80088ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80088be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d002      	beq.n	80088cc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80088c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80088ca:	e075      	b.n	80089b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80088cc:	7e3b      	ldrb	r3, [r7, #24]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d105      	bne.n	80088de <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80088d2:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d102      	bne.n	80088de <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80088d8:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d030      	beq.n	8008940 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80088de:	f107 0310 	add.w	r3, r7, #16
 80088e2:	461a      	mov	r2, r3
 80088e4:	2102      	movs	r1, #2
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff fa46 	bl	8007d78 <get_sequence_step_timeout>
 80088ec:	4603      	mov	r3, r0
 80088ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80088f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d122      	bne.n	8008940 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80088fa:	7e3b      	ldrb	r3, [r7, #24]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d007      	beq.n	8008910 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008904:	6939      	ldr	r1, [r7, #16]
 8008906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008908:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800890a:	441a      	add	r2, r3
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8008910:	7ebb      	ldrb	r3, [r7, #26]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d009      	beq.n	800892a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800891a:	6939      	ldr	r1, [r7, #16]
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	440b      	add	r3, r1
 8008920:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008922:	441a      	add	r2, r3
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	601a      	str	r2, [r3, #0]
 8008928:	e00a      	b.n	8008940 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800892a:	7e7b      	ldrb	r3, [r7, #25]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d007      	beq.n	8008940 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008934:	6939      	ldr	r1, [r7, #16]
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800893a:	441a      	add	r2, r3
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008940:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008944:	2b00      	cmp	r3, #0
 8008946:	d114      	bne.n	8008972 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8008948:	7efb      	ldrb	r3, [r7, #27]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d011      	beq.n	8008972 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800894e:	f107 030c 	add.w	r3, r7, #12
 8008952:	461a      	mov	r2, r3
 8008954:	2103      	movs	r1, #3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7ff fa0e 	bl	8007d78 <get_sequence_step_timeout>
 800895c:	4603      	mov	r3, r0
 800895e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8008966:	68f9      	ldr	r1, [r7, #12]
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800896c:	441a      	add	r2, r3
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008972:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008976:	2b00      	cmp	r3, #0
 8008978:	d114      	bne.n	80089a4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800897a:	7f3b      	ldrb	r3, [r7, #28]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d011      	beq.n	80089a4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8008980:	f107 0314 	add.w	r3, r7, #20
 8008984:	461a      	mov	r2, r3
 8008986:	2104      	movs	r1, #4
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7ff f9f5 	bl	8007d78 <get_sequence_step_timeout>
 800898e:	4603      	mov	r3, r0
 8008990:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8008998:	6979      	ldr	r1, [r7, #20]
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800899e:	441a      	add	r2, r3
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80089a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d103      	bne.n	80089b4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80089b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3740      	adds	r7, #64	; 0x40
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b088      	sub	sp, #32
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089ca:	2300      	movs	r3, #0
 80089cc:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80089ce:	2300      	movs	r3, #0
 80089d0:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80089d2:	e0c6      	b.n	8008b62 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	4413      	add	r3, r2
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	74fb      	strb	r3, [r7, #19]
		Index++;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	3301      	adds	r3, #1
 80089e2:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80089e4:	7cfb      	ldrb	r3, [r7, #19]
 80089e6:	2bff      	cmp	r3, #255	; 0xff
 80089e8:	f040 808d 	bne.w	8008b06 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	4413      	add	r3, r2
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	747b      	strb	r3, [r7, #17]
			Index++;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	3301      	adds	r3, #1
 80089fa:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80089fc:	7c7b      	ldrb	r3, [r7, #17]
 80089fe:	2b03      	cmp	r3, #3
 8008a00:	d87e      	bhi.n	8008b00 <VL53L0X_load_tuning_settings+0x140>
 8008a02:	a201      	add	r2, pc, #4	; (adr r2, 8008a08 <VL53L0X_load_tuning_settings+0x48>)
 8008a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a08:	08008a19 	.word	0x08008a19
 8008a0c:	08008a53 	.word	0x08008a53
 8008a10:	08008a8d 	.word	0x08008a8d
 8008a14:	08008ac7 	.word	0x08008ac7
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	743b      	strb	r3, [r7, #16]
				Index++;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	3301      	adds	r3, #1
 8008a26:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	3301      	adds	r3, #1
 8008a36:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008a38:	7c3b      	ldrb	r3, [r7, #16]
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	021b      	lsls	r3, r3, #8
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	4413      	add	r3, r2
 8008a46:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	89ba      	ldrh	r2, [r7, #12]
 8008a4c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8008a50:	e087      	b.n	8008b62 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	4413      	add	r3, r2
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	743b      	strb	r3, [r7, #16]
				Index++;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	4413      	add	r3, r2
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008a72:	7c3b      	ldrb	r3, [r7, #16]
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	021b      	lsls	r3, r3, #8
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	4413      	add	r3, r2
 8008a80:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	89ba      	ldrh	r2, [r7, #12]
 8008a86:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8008a8a:	e06a      	b.n	8008b62 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	4413      	add	r3, r2
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	743b      	strb	r3, [r7, #16]
				Index++;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008aac:	7c3b      	ldrb	r3, [r7, #16]
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	021b      	lsls	r3, r3, #8
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	4413      	add	r3, r2
 8008aba:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	89ba      	ldrh	r2, [r7, #12]
 8008ac0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8008ac4:	e04d      	b.n	8008b62 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	4413      	add	r3, r2
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	743b      	strb	r3, [r7, #16]
				Index++;
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	4413      	add	r3, r2
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008ae6:	7c3b      	ldrb	r3, [r7, #16]
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	021b      	lsls	r3, r3, #8
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	4413      	add	r3, r2
 8008af4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	89ba      	ldrh	r2, [r7, #12]
 8008afa:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8008afe:	e030      	b.n	8008b62 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b00:	23fc      	movs	r3, #252	; 0xfc
 8008b02:	77fb      	strb	r3, [r7, #31]
 8008b04:	e02d      	b.n	8008b62 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8008b06:	7cfb      	ldrb	r3, [r7, #19]
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	d828      	bhi.n	8008b5e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	4413      	add	r3, r2
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	74bb      	strb	r3, [r7, #18]
			Index++;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	61bb      	str	r3, [r7, #24]
 8008b20:	e00f      	b.n	8008b42 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	4413      	add	r3, r2
 8008b28:	7819      	ldrb	r1, [r3, #0]
 8008b2a:	f107 0208 	add.w	r2, r7, #8
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	4413      	add	r3, r2
 8008b32:	460a      	mov	r2, r1
 8008b34:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	61bb      	str	r3, [r7, #24]
 8008b42:	7cfb      	ldrb	r3, [r7, #19]
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	dbeb      	blt.n	8008b22 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8008b4a:	7cfb      	ldrb	r3, [r7, #19]
 8008b4c:	f107 0208 	add.w	r2, r7, #8
 8008b50:	7cb9      	ldrb	r1, [r7, #18]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fdf8 	bl	8009748 <VL53L0X_WriteMulti>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	77fb      	strb	r3, [r7, #31]
 8008b5c:	e001      	b.n	8008b62 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b5e:	23fc      	movs	r3, #252	; 0xfc
 8008b60:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	4413      	add	r3, r2
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d004      	beq.n	8008b78 <VL53L0X_load_tuning_settings+0x1b8>
 8008b6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f43f af2e 	beq.w	80089d4 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008b78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3720      	adds	r7, #32
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b90:	2300      	movs	r3, #0
 8008b92:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8008b9a:	f107 0313 	add.w	r3, r7, #19
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f7fc fd21 	bl	80055e8 <VL53L0X_GetXTalkCompensationEnable>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8008baa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d111      	bne.n	8008bd6 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8008bb2:	7cfb      	ldrb	r3, [r7, #19]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00e      	beq.n	8008bd6 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6a1b      	ldr	r3, [r3, #32]
 8008bbc:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	8a9b      	ldrh	r3, [r3, #20]
 8008bc2:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	fb02 f303 	mul.w	r3, r2, r3
 8008bca:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	3380      	adds	r3, #128	; 0x80
 8008bd0:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8008bd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3720      	adds	r7, #32
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b086      	sub	sp, #24
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	60f8      	str	r0, [r7, #12]
 8008bea:	60b9      	str	r1, [r7, #8]
 8008bec:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8008bfa:	f107 0310 	add.w	r3, r7, #16
 8008bfe:	461a      	mov	r2, r3
 8008c00:	68b9      	ldr	r1, [r7, #8]
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f7ff ffbe 	bl	8008b84 <VL53L0X_get_total_xtalk_rate>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8008c0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d105      	bne.n	8008c20 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	441a      	add	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	601a      	str	r2, [r3, #0]

	return Status;
 8008c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3718      	adds	r7, #24
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b09a      	sub	sp, #104	; 0x68
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
 8008c38:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8008c3a:	2312      	movs	r3, #18
 8008c3c:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8008c3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c42:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8008c44:	2342      	movs	r3, #66	; 0x42
 8008c46:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8008c48:	2306      	movs	r3, #6
 8008c4a:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8008c4c:	2307      	movs	r3, #7
 8008c4e:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c50:	2300      	movs	r3, #0
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8008c5c:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8008c64:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8008c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c6a:	fb02 f303 	mul.w	r3, r2, r3
 8008c6e:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8008c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c72:	3380      	adds	r3, #128	; 0x80
 8008c74:	0a1b      	lsrs	r3, r3, #8
 8008c76:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8008c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c7c:	fb02 f303 	mul.w	r3, r2, r3
 8008c80:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8008c82:	2300      	movs	r3, #0
 8008c84:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d01b      	beq.n	8008cc4 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	029b      	lsls	r3, r3, #10
 8008c90:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8008c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c98:	4413      	add	r3, r2
 8008c9a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8008c9c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca4:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8008ca6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ca8:	4613      	mov	r3, r2
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	4413      	add	r3, r2
 8008cae:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8008cb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008cb4:	fb02 f303 	mul.w	r3, r2, r3
 8008cb8:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8008cba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cbc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008cc0:	0c1b      	lsrs	r3, r3, #16
 8008cc2:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008cc8:	fb02 f303 	mul.w	r3, r2, r3
 8008ccc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8008cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008cd4:	0c1b      	lsrs	r3, r3, #16
 8008cd6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8008cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cdc:	fb02 f303 	mul.w	r3, r2, r3
 8008ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8008ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ce4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008ce8:	0c1b      	lsrs	r3, r3, #16
 8008cea:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8008cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cee:	085a      	lsrs	r2, r3, #1
 8008cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf2:	441a      	add	r2, r3
 8008cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cfa:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8008cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d00:	fb02 f303 	mul.w	r3, r2, r3
 8008d04:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8008d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d0c:	d302      	bcc.n	8008d14 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8008d0e:	4b55      	ldr	r3, [pc, #340]	; (8008e64 <VL53L0X_calc_dmax+0x238>)
 8008d10:	663b      	str	r3, [r7, #96]	; 0x60
 8008d12:	e016      	b.n	8008d42 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8008d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d16:	085a      	lsrs	r2, r3, #1
 8008d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d1a:	441a      	add	r2, r3
 8008d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d22:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8008d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d28:	fb02 f303 	mul.w	r3, r2, r3
 8008d2c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8008d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d30:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008d34:	0c1b      	lsrs	r3, r3, #16
 8008d36:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8008d38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d3c:	fb02 f303 	mul.w	r3, r2, r3
 8008d40:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8008d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d44:	039b      	lsls	r3, r3, #14
 8008d46:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008d4a:	4a47      	ldr	r2, [pc, #284]	; (8008e68 <VL53L0X_calc_dmax+0x23c>)
 8008d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d50:	099b      	lsrs	r3, r3, #6
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d58:	fb02 f303 	mul.w	r3, r2, r3
 8008d5c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8008d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d62:	fb02 f303 	mul.w	r3, r2, r3
 8008d66:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	3308      	adds	r3, #8
 8008d6c:	091b      	lsrs	r3, r3, #4
 8008d6e:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8008d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8008d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	005b      	lsls	r3, r3, #1
 8008d7e:	4413      	add	r3, r2
 8008d80:	011b      	lsls	r3, r3, #4
 8008d82:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008d8a:	0b9b      	lsrs	r3, r3, #14
 8008d8c:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8008d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d92:	4413      	add	r3, r2
 8008d94:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8008d96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d98:	085b      	lsrs	r3, r3, #1
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8008da0:	69ba      	ldr	r2, [r7, #24]
 8008da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008da8:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	039b      	lsls	r3, r3, #14
 8008dae:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	085b      	lsrs	r3, r3, #1
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	4413      	add	r3, r2
 8008db8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc2:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008dc8:	fb02 f303 	mul.w	r3, r2, r3
 8008dcc:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008dd4:	4a24      	ldr	r2, [pc, #144]	; (8008e68 <VL53L0X_calc_dmax+0x23c>)
 8008dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dda:	099b      	lsrs	r3, r3, #6
 8008ddc:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	011b      	lsls	r3, r3, #4
 8008de2:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008dea:	4a1f      	ldr	r2, [pc, #124]	; (8008e68 <VL53L0X_calc_dmax+0x23c>)
 8008dec:	fba2 2303 	umull	r2, r3, r2, r3
 8008df0:	099b      	lsrs	r3, r3, #6
 8008df2:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8008df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008df6:	3380      	adds	r3, #128	; 0x80
 8008df8:	0a1b      	lsrs	r3, r3, #8
 8008dfa:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d008      	beq.n	8008e14 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	085a      	lsrs	r2, r3, #1
 8008e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e08:	441a      	add	r2, r3
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e10:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e12:	e001      	b.n	8008e18 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8008e18:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008e1a:	f7fe f9b5 	bl	8007188 <VL53L0X_isqrt>
 8008e1e:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d008      	beq.n	8008e38 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	085a      	lsrs	r2, r3, #1
 8008e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2c:	441a      	add	r2, r3
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e36:	e001      	b.n	8008e3c <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8008e3c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008e3e:	f7fe f9a3 	bl	8007188 <VL53L0X_isqrt>
 8008e42:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8008e44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d902      	bls.n	8008e58 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 8008e52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e56:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8008e58:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3768      	adds	r7, #104	; 0x68
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	fff00000 	.word	0xfff00000
 8008e68:	10624dd3 	.word	0x10624dd3

08008e6c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b0b4      	sub	sp, #208	; 0xd0
 8008e70:	af04      	add	r7, sp, #16
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
 8008e78:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8008e7a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008e7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8008e82:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008e86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8008e8a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8008e8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8008e92:	f241 235c 	movw	r3, #4700	; 0x125c
 8008e96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8008e9a:	4b9e      	ldr	r3, [pc, #632]	; (8009114 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8008e9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8008ea0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008ea4:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8008ea6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8008eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eb2:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8008eb4:	4b98      	ldr	r3, [pc, #608]	; (8009118 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8008eb6:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8008eb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ebc:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8008ebe:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8008ec2:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8008ec4:	f240 6377 	movw	r3, #1655	; 0x677
 8008ec8:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6a1b      	ldr	r3, [r3, #32]
 8008ed4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ede:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8008ee2:	0c1b      	lsrs	r3, r3, #16
 8008ee4:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8008eec:	f107 0310 	add.w	r3, r7, #16
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	68b9      	ldr	r1, [r7, #8]
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f7ff fe74 	bl	8008be2 <VL53L0X_get_total_signal_rate>
 8008efa:	4603      	mov	r3, r0
 8008efc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8008f00:	f107 0314 	add.w	r3, r7, #20
 8008f04:	461a      	mov	r2, r3
 8008f06:	68b9      	ldr	r1, [r7, #8]
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f7ff fe3b 	bl	8008b84 <VL53L0X_get_total_xtalk_rate>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f1a:	fb02 f303 	mul.w	r3, r2, r3
 8008f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8008f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f22:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008f26:	0c1b      	lsrs	r3, r3, #16
 8008f28:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f30:	fb02 f303 	mul.w	r3, r2, r3
 8008f34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8008f38:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d902      	bls.n	8008f48 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8008f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8008f48:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d168      	bne.n	8009022 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008f56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8008f60:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008f64:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008f68:	461a      	mov	r2, r3
 8008f6a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f7fe feae 	bl	8007cd0 <VL53L0X_calc_timeout_mclks>
 8008f74:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8008f86:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008f8a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008f8e:	461a      	mov	r2, r3
 8008f90:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f7fe fe9b 	bl	8007cd0 <VL53L0X_calc_timeout_mclks>
 8008f9a:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8008fa2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008fa6:	2b08      	cmp	r3, #8
 8008fa8:	d102      	bne.n	8008fb0 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8008faa:	2302      	movs	r3, #2
 8008fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8008fb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fb4:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8008fb6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008fba:	fb02 f303 	mul.w	r3, r2, r3
 8008fbe:	02db      	lsls	r3, r3, #11
 8008fc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008fc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fc8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008fcc:	4a53      	ldr	r2, [pc, #332]	; (800911c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008fce:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd2:	099b      	lsrs	r3, r3, #6
 8008fd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8008fd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fde:	fb02 f303 	mul.w	r3, r2, r3
 8008fe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008fe6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008fee:	4a4b      	ldr	r2, [pc, #300]	; (800911c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff4:	099b      	lsrs	r3, r3, #6
 8008ff6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	3380      	adds	r3, #128	; 0x80
 8008ffe:	0a1b      	lsrs	r3, r3, #8
 8009000:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009008:	fb02 f303 	mul.w	r3, r2, r3
 800900c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8009010:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009014:	3380      	adds	r3, #128	; 0x80
 8009016:	0a1b      	lsrs	r3, r3, #8
 8009018:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	021b      	lsls	r3, r3, #8
 8009020:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009022:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009026:	2b00      	cmp	r3, #0
 8009028:	d002      	beq.n	8009030 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800902a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800902e:	e165      	b.n	80092fc <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 8009030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10c      	bne.n	8009050 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800903c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009044:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	2200      	movs	r2, #0
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	e153      	b.n	80092f8 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 8009050:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009054:	2b00      	cmp	r3, #0
 8009056:	d102      	bne.n	800905e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8009058:	2301      	movs	r3, #1
 800905a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800905e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009062:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8009064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009066:	041a      	lsls	r2, r3, #16
 8009068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800906a:	fbb2 f3f3 	udiv	r3, r2, r3
 800906e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8009072:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009078:	429a      	cmp	r2, r3
 800907a:	d902      	bls.n	8009082 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800907c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800907e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8009082:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009086:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800908a:	fb02 f303 	mul.w	r3, r2, r3
 800908e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8009092:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009096:	4613      	mov	r3, r2
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	4413      	add	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fe f872 	bl	8007188 <VL53L0X_isqrt>
 80090a4:	4603      	mov	r3, r0
 80090a6:	005b      	lsls	r3, r3, #1
 80090a8:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	891b      	ldrh	r3, [r3, #8]
 80090ae:	461a      	mov	r2, r3
 80090b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090b2:	fb02 f303 	mul.w	r3, r2, r3
 80090b6:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80090b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090ba:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80090bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090c0:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80090c2:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80090c4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80090c8:	4a14      	ldr	r2, [pc, #80]	; (800911c <VL53L0X_calc_sigma_estimate+0x2b0>)
 80090ca:	fba2 2303 	umull	r2, r3, r2, r3
 80090ce:	099b      	lsrs	r3, r3, #6
 80090d0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80090d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090d4:	041b      	lsls	r3, r3, #16
 80090d6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80090da:	4a10      	ldr	r2, [pc, #64]	; (800911c <VL53L0X_calc_sigma_estimate+0x2b0>)
 80090dc:	fba2 2303 	umull	r2, r3, r2, r3
 80090e0:	099b      	lsrs	r3, r3, #6
 80090e2:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80090e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e6:	021b      	lsls	r3, r3, #8
 80090e8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80090ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	bfb8      	it	lt
 80090f6:	425b      	neglt	r3, r3
 80090f8:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80090fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090fc:	021b      	lsls	r3, r3, #8
 80090fe:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	7e1b      	ldrb	r3, [r3, #24]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00b      	beq.n	8009120 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8009108:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800910c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009110:	e035      	b.n	800917e <VL53L0X_calc_sigma_estimate+0x312>
 8009112:	bf00      	nop
 8009114:	028f87ae 	.word	0x028f87ae
 8009118:	0006999a 	.word	0x0006999a
 800911c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8009120:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009122:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009126:	fbb2 f3f3 	udiv	r3, r2, r3
 800912a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800912e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009130:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8009134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009138:	fb02 f303 	mul.w	r3, r2, r3
 800913c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8009140:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009146:	4413      	add	r3, r2
 8009148:	0c1b      	lsrs	r3, r3, #16
 800914a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800914e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009152:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009156:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800915a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800915e:	085b      	lsrs	r3, r3, #1
 8009160:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8009164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009168:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800916c:	fb02 f303 	mul.w	r3, r2, r3
 8009170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8009174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009178:	0b9b      	lsrs	r3, r3, #14
 800917a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800917e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009182:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009184:	fb02 f303 	mul.w	r3, r2, r3
 8009188:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009190:	0c1b      	lsrs	r3, r3, #16
 8009192:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8009194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009198:	fb02 f303 	mul.w	r3, r2, r3
 800919c:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800919e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80091a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80091a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80091aa:	0c1b      	lsrs	r3, r3, #16
 80091ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091b2:	fb02 f303 	mul.w	r3, r2, r3
 80091b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80091b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	4413      	add	r3, r2
 80091be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80091c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091c2:	f7fd ffe1 	bl	8007188 <VL53L0X_isqrt>
 80091c6:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	041b      	lsls	r3, r3, #16
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80091ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d0:	3332      	adds	r3, #50	; 0x32
 80091d2:	4a4c      	ldr	r2, [pc, #304]	; (8009304 <VL53L0X_calc_sigma_estimate+0x498>)
 80091d4:	fba2 2303 	umull	r2, r3, r2, r3
 80091d8:	095a      	lsrs	r2, r3, #5
 80091da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80091e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091e8:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80091ec:	fb02 f303 	mul.w	r3, r2, r3
 80091f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80091f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091f8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80091fc:	3308      	adds	r3, #8
 80091fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8009202:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009206:	4a40      	ldr	r2, [pc, #256]	; (8009308 <VL53L0X_calc_sigma_estimate+0x49c>)
 8009208:	fba2 2303 	umull	r2, r3, r2, r3
 800920c:	0b5b      	lsrs	r3, r3, #13
 800920e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8009212:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009216:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009218:	429a      	cmp	r2, r3
 800921a:	d902      	bls.n	8009222 <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800921c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800921e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8009222:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009226:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800922a:	4413      	add	r3, r2
 800922c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8009230:	4a36      	ldr	r2, [pc, #216]	; (800930c <VL53L0X_calc_sigma_estimate+0x4a0>)
 8009232:	fba2 2303 	umull	r2, r3, r2, r3
 8009236:	099b      	lsrs	r3, r3, #6
 8009238:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800923e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009242:	441a      	add	r2, r3
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800924a:	4618      	mov	r0, r3
 800924c:	f7fd ff9c 	bl	8007188 <VL53L0X_isqrt>
 8009250:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	021b      	lsls	r3, r3, #8
 8009256:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800925e:	4a2b      	ldr	r2, [pc, #172]	; (800930c <VL53L0X_calc_sigma_estimate+0x4a0>)
 8009260:	fba2 2303 	umull	r2, r3, r2, r3
 8009264:	099b      	lsrs	r3, r3, #6
 8009266:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8009268:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800926c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009270:	fb02 f303 	mul.w	r3, r2, r3
 8009274:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	69fa      	ldr	r2, [r7, #28]
 800927a:	fb02 f303 	mul.w	r3, r2, r3
 800927e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8009280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009284:	4413      	add	r3, r2
 8009286:	4618      	mov	r0, r3
 8009288:	f7fd ff7e 	bl	8007188 <VL53L0X_isqrt>
 800928c:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009294:	fb02 f303 	mul.w	r3, r2, r3
 8009298:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800929c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d009      	beq.n	80092b6 <VL53L0X_calc_sigma_estimate+0x44a>
 80092a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d005      	beq.n	80092b6 <VL53L0X_calc_sigma_estimate+0x44a>
 80092aa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80092ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d903      	bls.n	80092be <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80092b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80092c4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80092d0:	6939      	ldr	r1, [r7, #16]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	9303      	str	r3, [sp, #12]
 80092d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80092da:	9302      	str	r3, [sp, #8]
 80092dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f7ff fc9d 	bl	8008c2c <VL53L0X_calc_dmax>
 80092f2:	4603      	mov	r3, r0
 80092f4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80092f8:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	37c0      	adds	r7, #192	; 0xc0
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	51eb851f 	.word	0x51eb851f
 8009308:	d1b71759 	.word	0xd1b71759
 800930c:	10624dd3 	.word	0x10624dd3

08009310 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b090      	sub	sp, #64	; 0x40
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	607a      	str	r2, [r7, #4]
 800931a:	461a      	mov	r2, r3
 800931c:	460b      	mov	r3, r1
 800931e:	72fb      	strb	r3, [r7, #11]
 8009320:	4613      	mov	r3, r2
 8009322:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009324:	2300      	movs	r3, #0
 8009326:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800932a:	2300      	movs	r3, #0
 800932c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8009330:	2300      	movs	r3, #0
 8009332:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800933c:	2300      	movs	r3, #0
 800933e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8009348:	2300      	movs	r3, #0
 800934a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800935e:	2300      	movs	r3, #0
 8009360:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8009362:	7afb      	ldrb	r3, [r7, #11]
 8009364:	10db      	asrs	r3, r3, #3
 8009366:	b2db      	uxtb	r3, r3
 8009368:	f003 030f 	and.w	r3, r3, #15
 800936c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8009370:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009374:	2b00      	cmp	r3, #0
 8009376:	d017      	beq.n	80093a8 <VL53L0X_get_pal_range_status+0x98>
 8009378:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800937c:	2b05      	cmp	r3, #5
 800937e:	d013      	beq.n	80093a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8009380:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009384:	2b07      	cmp	r3, #7
 8009386:	d00f      	beq.n	80093a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8009388:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800938c:	2b0c      	cmp	r3, #12
 800938e:	d00b      	beq.n	80093a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8009390:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009394:	2b0d      	cmp	r3, #13
 8009396:	d007      	beq.n	80093a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8009398:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800939c:	2b0e      	cmp	r3, #14
 800939e:	d003      	beq.n	80093a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80093a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80093a4:	2b0f      	cmp	r3, #15
 80093a6:	d103      	bne.n	80093b0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80093a8:	2301      	movs	r3, #1
 80093aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80093ae:	e002      	b.n	80093b6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80093b0:	2300      	movs	r3, #0
 80093b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80093b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d109      	bne.n	80093d2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80093be:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80093c2:	461a      	mov	r2, r3
 80093c4:	2100      	movs	r1, #0
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f7fc f9e2 	bl	8005790 <VL53L0X_GetLimitCheckEnable>
 80093cc:	4603      	mov	r3, r0
 80093ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80093d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d02e      	beq.n	8009438 <VL53L0X_get_pal_range_status+0x128>
 80093da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d12a      	bne.n	8009438 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80093e2:	f107 0310 	add.w	r3, r7, #16
 80093e6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80093ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f7ff fd3d 	bl	8008e6c <VL53L0X_calc_sigma_estimate>
 80093f2:	4603      	mov	r3, r0
 80093f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80093f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d103      	bne.n	8009408 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	b29a      	uxth	r2, r3
 8009404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009406:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8009408:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800940c:	2b00      	cmp	r3, #0
 800940e:	d113      	bne.n	8009438 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8009410:	f107 0320 	add.w	r3, r7, #32
 8009414:	461a      	mov	r2, r3
 8009416:	2100      	movs	r1, #0
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f7fc fa3f 	bl	800589c <VL53L0X_GetLimitCheckValue>
 800941e:	4603      	mov	r3, r0
 8009420:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8009424:	6a3b      	ldr	r3, [r7, #32]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d006      	beq.n	8009438 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800942a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800942c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800942e:	429a      	cmp	r2, r3
 8009430:	d902      	bls.n	8009438 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8009432:	2301      	movs	r3, #1
 8009434:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009438:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800943c:	2b00      	cmp	r3, #0
 800943e:	d109      	bne.n	8009454 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009440:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8009444:	461a      	mov	r2, r3
 8009446:	2102      	movs	r1, #2
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f7fc f9a1 	bl	8005790 <VL53L0X_GetLimitCheckEnable>
 800944e:	4603      	mov	r3, r0
 8009450:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8009454:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009458:	2b00      	cmp	r3, #0
 800945a:	d044      	beq.n	80094e6 <VL53L0X_get_pal_range_status+0x1d6>
 800945c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009460:	2b00      	cmp	r3, #0
 8009462:	d140      	bne.n	80094e6 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009464:	f107 031c 	add.w	r3, r7, #28
 8009468:	461a      	mov	r2, r3
 800946a:	2102      	movs	r1, #2
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f7fc fa15 	bl	800589c <VL53L0X_GetLimitCheckValue>
 8009472:	4603      	mov	r3, r0
 8009474:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8009478:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800947c:	2b00      	cmp	r3, #0
 800947e:	d107      	bne.n	8009490 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009480:	2201      	movs	r2, #1
 8009482:	21ff      	movs	r1, #255	; 0xff
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 f9bb 	bl	8009800 <VL53L0X_WrByte>
 800948a:	4603      	mov	r3, r0
 800948c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8009490:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009494:	2b00      	cmp	r3, #0
 8009496:	d109      	bne.n	80094ac <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8009498:	f107 0316 	add.w	r3, r7, #22
 800949c:	461a      	mov	r2, r3
 800949e:	21b6      	movs	r1, #182	; 0xb6
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 fa59 	bl	8009958 <VL53L0X_RdWord>
 80094a6:	4603      	mov	r3, r0
 80094a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 80094ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d107      	bne.n	80094c4 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80094b4:	2200      	movs	r2, #0
 80094b6:	21ff      	movs	r1, #255	; 0xff
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 f9a1 	bl	8009800 <VL53L0X_WrByte>
 80094be:	4603      	mov	r3, r0
 80094c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80094c4:	8afb      	ldrh	r3, [r7, #22]
 80094c6:	025b      	lsls	r3, r3, #9
 80094c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094ce:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d006      	beq.n	80094e6 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80094d8:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80094da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094dc:	429a      	cmp	r2, r3
 80094de:	d902      	bls.n	80094e6 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80094e0:	2301      	movs	r3, #1
 80094e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80094e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d109      	bne.n	8009502 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80094ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094f2:	461a      	mov	r2, r3
 80094f4:	2103      	movs	r1, #3
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f7fc f94a 	bl	8005790 <VL53L0X_GetLimitCheckEnable>
 80094fc:	4603      	mov	r3, r0
 80094fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8009502:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009506:	2b00      	cmp	r3, #0
 8009508:	d023      	beq.n	8009552 <VL53L0X_get_pal_range_status+0x242>
 800950a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800950e:	2b00      	cmp	r3, #0
 8009510:	d11f      	bne.n	8009552 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8009512:	893b      	ldrh	r3, [r7, #8]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d102      	bne.n	800951e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8009518:	2300      	movs	r3, #0
 800951a:	637b      	str	r3, [r7, #52]	; 0x34
 800951c:	e005      	b.n	800952a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	021a      	lsls	r2, r3, #8
 8009522:	893b      	ldrh	r3, [r7, #8]
 8009524:	fbb2 f3f3 	udiv	r3, r2, r3
 8009528:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800952a:	f107 0318 	add.w	r3, r7, #24
 800952e:	461a      	mov	r2, r3
 8009530:	2103      	movs	r1, #3
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f7fc f9b2 	bl	800589c <VL53L0X_GetLimitCheckValue>
 8009538:	4603      	mov	r3, r0
 800953a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d006      	beq.n	8009552 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8009544:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8009546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009548:	429a      	cmp	r2, r3
 800954a:	d202      	bcs.n	8009552 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800954c:	2301      	movs	r3, #1
 800954e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009552:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009556:	2b00      	cmp	r3, #0
 8009558:	d14a      	bne.n	80095f0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800955a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800955e:	2b01      	cmp	r3, #1
 8009560:	d103      	bne.n	800956a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8009562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009564:	22ff      	movs	r2, #255	; 0xff
 8009566:	701a      	strb	r2, [r3, #0]
 8009568:	e042      	b.n	80095f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800956a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800956e:	2b01      	cmp	r3, #1
 8009570:	d007      	beq.n	8009582 <VL53L0X_get_pal_range_status+0x272>
 8009572:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009576:	2b02      	cmp	r3, #2
 8009578:	d003      	beq.n	8009582 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800957a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800957e:	2b03      	cmp	r3, #3
 8009580:	d103      	bne.n	800958a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8009582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009584:	2205      	movs	r2, #5
 8009586:	701a      	strb	r2, [r3, #0]
 8009588:	e032      	b.n	80095f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800958a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800958e:	2b06      	cmp	r3, #6
 8009590:	d003      	beq.n	800959a <VL53L0X_get_pal_range_status+0x28a>
 8009592:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009596:	2b09      	cmp	r3, #9
 8009598:	d103      	bne.n	80095a2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800959a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800959c:	2204      	movs	r2, #4
 800959e:	701a      	strb	r2, [r3, #0]
 80095a0:	e026      	b.n	80095f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80095a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095a6:	2b08      	cmp	r3, #8
 80095a8:	d007      	beq.n	80095ba <VL53L0X_get_pal_range_status+0x2aa>
 80095aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095ae:	2b0a      	cmp	r3, #10
 80095b0:	d003      	beq.n	80095ba <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80095b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d103      	bne.n	80095c2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80095ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095bc:	2203      	movs	r2, #3
 80095be:	701a      	strb	r2, [r3, #0]
 80095c0:	e016      	b.n	80095f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80095c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095c6:	2b04      	cmp	r3, #4
 80095c8:	d003      	beq.n	80095d2 <VL53L0X_get_pal_range_status+0x2c2>
 80095ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d103      	bne.n	80095da <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80095d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d4:	2202      	movs	r2, #2
 80095d6:	701a      	strb	r2, [r3, #0]
 80095d8:	e00a      	b.n	80095f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80095da:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d103      	bne.n	80095ea <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80095e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095e4:	2201      	movs	r2, #1
 80095e6:	701a      	strb	r2, [r3, #0]
 80095e8:	e002      	b.n	80095f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80095ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095ec:	2200      	movs	r2, #0
 80095ee:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80095f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d102      	bne.n	80095fe <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80095f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095fa:	2200      	movs	r2, #0
 80095fc:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80095fe:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8009602:	461a      	mov	r2, r3
 8009604:	2101      	movs	r1, #1
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f7fc f8c2 	bl	8005790 <VL53L0X_GetLimitCheckEnable>
 800960c:	4603      	mov	r3, r0
 800960e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8009612:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009616:	2b00      	cmp	r3, #0
 8009618:	d14f      	bne.n	80096ba <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800961a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800961e:	2b00      	cmp	r3, #0
 8009620:	d003      	beq.n	800962a <VL53L0X_get_pal_range_status+0x31a>
 8009622:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009626:	2b01      	cmp	r3, #1
 8009628:	d103      	bne.n	8009632 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800962a:	2301      	movs	r3, #1
 800962c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009630:	e002      	b.n	8009638 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8009632:	2300      	movs	r3, #0
 8009634:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800963e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8009642:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009646:	2b04      	cmp	r3, #4
 8009648:	d003      	beq.n	8009652 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800964a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800964e:	2b00      	cmp	r3, #0
 8009650:	d103      	bne.n	800965a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8009652:	2301      	movs	r3, #1
 8009654:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009658:	e002      	b.n	8009660 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800965a:	2300      	movs	r3, #0
 800965c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009666:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800966a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <VL53L0X_get_pal_range_status+0x36a>
 8009672:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009676:	2b01      	cmp	r3, #1
 8009678:	d103      	bne.n	8009682 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800967a:	2301      	movs	r3, #1
 800967c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009680:	e002      	b.n	8009688 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800968e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8009692:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009696:	2b00      	cmp	r3, #0
 8009698:	d003      	beq.n	80096a2 <VL53L0X_get_pal_range_status+0x392>
 800969a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d103      	bne.n	80096aa <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80096a2:	2301      	movs	r3, #1
 80096a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096a8:	e002      	b.n	80096b0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80096aa:	2300      	movs	r3, #0
 80096ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80096b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80096ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80096be:	4618      	mov	r0, r3
 80096c0:	3740      	adds	r7, #64	; 0x40
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b088      	sub	sp, #32
 80096ca:	af02      	add	r7, sp, #8
 80096cc:	60f8      	str	r0, [r7, #12]
 80096ce:	60b9      	str	r1, [r7, #8]
 80096d0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	330a      	adds	r3, #10
 80096d6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80096e4:	b299      	uxth	r1, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	4613      	mov	r3, r2
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	f7f8 fbcf 	bl	8001e94 <HAL_I2C_Master_Transmit>
 80096f6:	4603      	mov	r3, r0
 80096f8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80096fa:	693b      	ldr	r3, [r7, #16]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3718      	adds	r7, #24
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8009704:	b580      	push	{r7, lr}
 8009706:	b088      	sub	sp, #32
 8009708:	af02      	add	r7, sp, #8
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	330a      	adds	r3, #10
 8009714:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8009722:	f043 0301 	orr.w	r3, r3, #1
 8009726:	b2db      	uxtb	r3, r3
 8009728:	b299      	uxth	r1, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	b29a      	uxth	r2, r3
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	4613      	mov	r3, r2
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	f7f8 fcab 	bl	8002090 <HAL_I2C_Master_Receive>
 800973a:	4603      	mov	r3, r0
 800973c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800973e:	693b      	ldr	r3, [r7, #16]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3718      	adds	r7, #24
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	607a      	str	r2, [r7, #4]
 8009752:	603b      	str	r3, [r7, #0]
 8009754:	460b      	mov	r3, r1
 8009756:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009758:	2300      	movs	r3, #0
 800975a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	2b3f      	cmp	r3, #63	; 0x3f
 8009760:	d902      	bls.n	8009768 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8009762:	f06f 0303 	mvn.w	r3, #3
 8009766:	e016      	b.n	8009796 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8009768:	4a0d      	ldr	r2, [pc, #52]	; (80097a0 <VL53L0X_WriteMulti+0x58>)
 800976a:	7afb      	ldrb	r3, [r7, #11]
 800976c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	6879      	ldr	r1, [r7, #4]
 8009772:	480c      	ldr	r0, [pc, #48]	; (80097a4 <VL53L0X_WriteMulti+0x5c>)
 8009774:	f000 f99e 	bl	8009ab4 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	3301      	adds	r3, #1
 800977c:	461a      	mov	r2, r3
 800977e:	4908      	ldr	r1, [pc, #32]	; (80097a0 <VL53L0X_WriteMulti+0x58>)
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f7ff ffa0 	bl	80096c6 <_I2CWrite>
 8009786:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d001      	beq.n	8009792 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800978e:	23ec      	movs	r3, #236	; 0xec
 8009790:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009792:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	200005d4 	.word	0x200005d4
 80097a4:	200005d5 	.word	0x200005d5

080097a8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	607a      	str	r2, [r7, #4]
 80097b2:	603b      	str	r3, [r7, #0]
 80097b4:	460b      	mov	r3, r1
 80097b6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097b8:	2300      	movs	r3, #0
 80097ba:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80097bc:	f107 030b 	add.w	r3, r7, #11
 80097c0:	2201      	movs	r2, #1
 80097c2:	4619      	mov	r1, r3
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f7ff ff7e 	bl	80096c6 <_I2CWrite>
 80097ca:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d002      	beq.n	80097d8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80097d2:	23ec      	movs	r3, #236	; 0xec
 80097d4:	75fb      	strb	r3, [r7, #23]
        goto done;
 80097d6:	e00c      	b.n	80097f2 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80097d8:	683a      	ldr	r2, [r7, #0]
 80097da:	6879      	ldr	r1, [r7, #4]
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f7ff ff91 	bl	8009704 <_I2CRead>
 80097e2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d002      	beq.n	80097f0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80097ea:	23ec      	movs	r3, #236	; 0xec
 80097ec:	75fb      	strb	r3, [r7, #23]
 80097ee:	e000      	b.n	80097f2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 80097f0:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80097f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3718      	adds	r7, #24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
	...

08009800 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	460b      	mov	r3, r1
 800980a:	70fb      	strb	r3, [r7, #3]
 800980c:	4613      	mov	r3, r2
 800980e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009810:	2300      	movs	r3, #0
 8009812:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8009814:	4a0b      	ldr	r2, [pc, #44]	; (8009844 <VL53L0X_WrByte+0x44>)
 8009816:	78fb      	ldrb	r3, [r7, #3]
 8009818:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800981a:	4a0a      	ldr	r2, [pc, #40]	; (8009844 <VL53L0X_WrByte+0x44>)
 800981c:	78bb      	ldrb	r3, [r7, #2]
 800981e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8009820:	2202      	movs	r2, #2
 8009822:	4908      	ldr	r1, [pc, #32]	; (8009844 <VL53L0X_WrByte+0x44>)
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7ff ff4e 	bl	80096c6 <_I2CWrite>
 800982a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009832:	23ec      	movs	r3, #236	; 0xec
 8009834:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009836:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	200005d4 	.word	0x200005d4

08009848 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	460b      	mov	r3, r1
 8009852:	70fb      	strb	r3, [r7, #3]
 8009854:	4613      	mov	r3, r2
 8009856:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009858:	2300      	movs	r3, #0
 800985a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800985c:	4a0e      	ldr	r2, [pc, #56]	; (8009898 <VL53L0X_WrWord+0x50>)
 800985e:	78fb      	ldrb	r3, [r7, #3]
 8009860:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8009862:	883b      	ldrh	r3, [r7, #0]
 8009864:	0a1b      	lsrs	r3, r3, #8
 8009866:	b29b      	uxth	r3, r3
 8009868:	b2da      	uxtb	r2, r3
 800986a:	4b0b      	ldr	r3, [pc, #44]	; (8009898 <VL53L0X_WrWord+0x50>)
 800986c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800986e:	883b      	ldrh	r3, [r7, #0]
 8009870:	b2da      	uxtb	r2, r3
 8009872:	4b09      	ldr	r3, [pc, #36]	; (8009898 <VL53L0X_WrWord+0x50>)
 8009874:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8009876:	2203      	movs	r2, #3
 8009878:	4907      	ldr	r1, [pc, #28]	; (8009898 <VL53L0X_WrWord+0x50>)
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7ff ff23 	bl	80096c6 <_I2CWrite>
 8009880:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d001      	beq.n	800988c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009888:	23ec      	movs	r3, #236	; 0xec
 800988a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800988c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	200005d4 	.word	0x200005d4

0800989c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	4608      	mov	r0, r1
 80098a6:	4611      	mov	r1, r2
 80098a8:	461a      	mov	r2, r3
 80098aa:	4603      	mov	r3, r0
 80098ac:	70fb      	strb	r3, [r7, #3]
 80098ae:	460b      	mov	r3, r1
 80098b0:	70bb      	strb	r3, [r7, #2]
 80098b2:	4613      	mov	r3, r2
 80098b4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098b6:	2300      	movs	r3, #0
 80098b8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80098ba:	f107 020e 	add.w	r2, r7, #14
 80098be:	78fb      	ldrb	r3, [r7, #3]
 80098c0:	4619      	mov	r1, r3
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 f81e 	bl	8009904 <VL53L0X_RdByte>
 80098c8:	4603      	mov	r3, r0
 80098ca:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 80098cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d110      	bne.n	80098f6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 80098d4:	7bba      	ldrb	r2, [r7, #14]
 80098d6:	78bb      	ldrb	r3, [r7, #2]
 80098d8:	4013      	ands	r3, r2
 80098da:	b2da      	uxtb	r2, r3
 80098dc:	787b      	ldrb	r3, [r7, #1]
 80098de:	4313      	orrs	r3, r2
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 80098e4:	7bba      	ldrb	r2, [r7, #14]
 80098e6:	78fb      	ldrb	r3, [r7, #3]
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7ff ff88 	bl	8009800 <VL53L0X_WrByte>
 80098f0:	4603      	mov	r3, r0
 80098f2:	73fb      	strb	r3, [r7, #15]
 80098f4:	e000      	b.n	80098f8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 80098f6:	bf00      	nop
done:
    return Status;
 80098f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8009904:	b580      	push	{r7, lr}
 8009906:	b086      	sub	sp, #24
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	460b      	mov	r3, r1
 800990e:	607a      	str	r2, [r7, #4]
 8009910:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009912:	2300      	movs	r3, #0
 8009914:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009916:	f107 030b 	add.w	r3, r7, #11
 800991a:	2201      	movs	r2, #1
 800991c:	4619      	mov	r1, r3
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f7ff fed1 	bl	80096c6 <_I2CWrite>
 8009924:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d002      	beq.n	8009932 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800992c:	23ec      	movs	r3, #236	; 0xec
 800992e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009930:	e00c      	b.n	800994c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8009932:	2201      	movs	r2, #1
 8009934:	6879      	ldr	r1, [r7, #4]
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f7ff fee4 	bl	8009704 <_I2CRead>
 800993c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009944:	23ec      	movs	r3, #236	; 0xec
 8009946:	75fb      	strb	r3, [r7, #23]
 8009948:	e000      	b.n	800994c <VL53L0X_RdByte+0x48>
    }
done:
 800994a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800994c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3718      	adds	r7, #24
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	460b      	mov	r3, r1
 8009962:	607a      	str	r2, [r7, #4]
 8009964:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009966:	2300      	movs	r3, #0
 8009968:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800996a:	f107 030b 	add.w	r3, r7, #11
 800996e:	2201      	movs	r2, #1
 8009970:	4619      	mov	r1, r3
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f7ff fea7 	bl	80096c6 <_I2CWrite>
 8009978:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009980:	23ec      	movs	r3, #236	; 0xec
 8009982:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009984:	e017      	b.n	80099b6 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8009986:	2202      	movs	r2, #2
 8009988:	490e      	ldr	r1, [pc, #56]	; (80099c4 <VL53L0X_RdWord+0x6c>)
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f7ff feba 	bl	8009704 <_I2CRead>
 8009990:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d002      	beq.n	800999e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009998:	23ec      	movs	r3, #236	; 0xec
 800999a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800999c:	e00b      	b.n	80099b6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800999e:	4b09      	ldr	r3, [pc, #36]	; (80099c4 <VL53L0X_RdWord+0x6c>)
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	021b      	lsls	r3, r3, #8
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	4b06      	ldr	r3, [pc, #24]	; (80099c4 <VL53L0X_RdWord+0x6c>)
 80099aa:	785b      	ldrb	r3, [r3, #1]
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	4413      	add	r3, r2
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 80099b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3718      	adds	r7, #24
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	200005d4 	.word	0x200005d4

080099c8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	460b      	mov	r3, r1
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099d6:	2300      	movs	r3, #0
 80099d8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80099da:	f107 030b 	add.w	r3, r7, #11
 80099de:	2201      	movs	r2, #1
 80099e0:	4619      	mov	r1, r3
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f7ff fe6f 	bl	80096c6 <_I2CWrite>
 80099e8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80099f0:	23ec      	movs	r3, #236	; 0xec
 80099f2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80099f4:	e01b      	b.n	8009a2e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80099f6:	2204      	movs	r2, #4
 80099f8:	4910      	ldr	r1, [pc, #64]	; (8009a3c <VL53L0X_RdDWord+0x74>)
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f7ff fe82 	bl	8009704 <_I2CRead>
 8009a00:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d002      	beq.n	8009a0e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009a08:	23ec      	movs	r3, #236	; 0xec
 8009a0a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009a0c:	e00f      	b.n	8009a2e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8009a0e:	4b0b      	ldr	r3, [pc, #44]	; (8009a3c <VL53L0X_RdDWord+0x74>)
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	061a      	lsls	r2, r3, #24
 8009a14:	4b09      	ldr	r3, [pc, #36]	; (8009a3c <VL53L0X_RdDWord+0x74>)
 8009a16:	785b      	ldrb	r3, [r3, #1]
 8009a18:	041b      	lsls	r3, r3, #16
 8009a1a:	441a      	add	r2, r3
 8009a1c:	4b07      	ldr	r3, [pc, #28]	; (8009a3c <VL53L0X_RdDWord+0x74>)
 8009a1e:	789b      	ldrb	r3, [r3, #2]
 8009a20:	021b      	lsls	r3, r3, #8
 8009a22:	4413      	add	r3, r2
 8009a24:	4a05      	ldr	r2, [pc, #20]	; (8009a3c <VL53L0X_RdDWord+0x74>)
 8009a26:	78d2      	ldrb	r2, [r2, #3]
 8009a28:	441a      	add	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8009a2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3718      	adds	r7, #24
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	200005d4 	.word	0x200005d4

08009a40 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8009a4c:	2002      	movs	r0, #2
 8009a4e:	f7f7 fdb9 	bl	80015c4 <HAL_Delay>
    return status;
 8009a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
	...

08009a60 <__errno>:
 8009a60:	4b01      	ldr	r3, [pc, #4]	; (8009a68 <__errno+0x8>)
 8009a62:	6818      	ldr	r0, [r3, #0]
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	200002dc 	.word	0x200002dc

08009a6c <__libc_init_array>:
 8009a6c:	b570      	push	{r4, r5, r6, lr}
 8009a6e:	4e0d      	ldr	r6, [pc, #52]	; (8009aa4 <__libc_init_array+0x38>)
 8009a70:	4c0d      	ldr	r4, [pc, #52]	; (8009aa8 <__libc_init_array+0x3c>)
 8009a72:	1ba4      	subs	r4, r4, r6
 8009a74:	10a4      	asrs	r4, r4, #2
 8009a76:	2500      	movs	r5, #0
 8009a78:	42a5      	cmp	r5, r4
 8009a7a:	d109      	bne.n	8009a90 <__libc_init_array+0x24>
 8009a7c:	4e0b      	ldr	r6, [pc, #44]	; (8009aac <__libc_init_array+0x40>)
 8009a7e:	4c0c      	ldr	r4, [pc, #48]	; (8009ab0 <__libc_init_array+0x44>)
 8009a80:	f000 fc9c 	bl	800a3bc <_init>
 8009a84:	1ba4      	subs	r4, r4, r6
 8009a86:	10a4      	asrs	r4, r4, #2
 8009a88:	2500      	movs	r5, #0
 8009a8a:	42a5      	cmp	r5, r4
 8009a8c:	d105      	bne.n	8009a9a <__libc_init_array+0x2e>
 8009a8e:	bd70      	pop	{r4, r5, r6, pc}
 8009a90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a94:	4798      	blx	r3
 8009a96:	3501      	adds	r5, #1
 8009a98:	e7ee      	b.n	8009a78 <__libc_init_array+0xc>
 8009a9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a9e:	4798      	blx	r3
 8009aa0:	3501      	adds	r5, #1
 8009aa2:	e7f2      	b.n	8009a8a <__libc_init_array+0x1e>
 8009aa4:	0800ac90 	.word	0x0800ac90
 8009aa8:	0800ac90 	.word	0x0800ac90
 8009aac:	0800ac90 	.word	0x0800ac90
 8009ab0:	0800ac94 	.word	0x0800ac94

08009ab4 <memcpy>:
 8009ab4:	b510      	push	{r4, lr}
 8009ab6:	1e43      	subs	r3, r0, #1
 8009ab8:	440a      	add	r2, r1
 8009aba:	4291      	cmp	r1, r2
 8009abc:	d100      	bne.n	8009ac0 <memcpy+0xc>
 8009abe:	bd10      	pop	{r4, pc}
 8009ac0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ac4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ac8:	e7f7      	b.n	8009aba <memcpy+0x6>

08009aca <memset>:
 8009aca:	4402      	add	r2, r0
 8009acc:	4603      	mov	r3, r0
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d100      	bne.n	8009ad4 <memset+0xa>
 8009ad2:	4770      	bx	lr
 8009ad4:	f803 1b01 	strb.w	r1, [r3], #1
 8009ad8:	e7f9      	b.n	8009ace <memset+0x4>
	...

08009adc <_puts_r>:
 8009adc:	b570      	push	{r4, r5, r6, lr}
 8009ade:	460e      	mov	r6, r1
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	b118      	cbz	r0, 8009aec <_puts_r+0x10>
 8009ae4:	6983      	ldr	r3, [r0, #24]
 8009ae6:	b90b      	cbnz	r3, 8009aec <_puts_r+0x10>
 8009ae8:	f000 fa14 	bl	8009f14 <__sinit>
 8009aec:	69ab      	ldr	r3, [r5, #24]
 8009aee:	68ac      	ldr	r4, [r5, #8]
 8009af0:	b913      	cbnz	r3, 8009af8 <_puts_r+0x1c>
 8009af2:	4628      	mov	r0, r5
 8009af4:	f000 fa0e 	bl	8009f14 <__sinit>
 8009af8:	4b23      	ldr	r3, [pc, #140]	; (8009b88 <_puts_r+0xac>)
 8009afa:	429c      	cmp	r4, r3
 8009afc:	d117      	bne.n	8009b2e <_puts_r+0x52>
 8009afe:	686c      	ldr	r4, [r5, #4]
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	071b      	lsls	r3, r3, #28
 8009b04:	d51d      	bpl.n	8009b42 <_puts_r+0x66>
 8009b06:	6923      	ldr	r3, [r4, #16]
 8009b08:	b1db      	cbz	r3, 8009b42 <_puts_r+0x66>
 8009b0a:	3e01      	subs	r6, #1
 8009b0c:	68a3      	ldr	r3, [r4, #8]
 8009b0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b12:	3b01      	subs	r3, #1
 8009b14:	60a3      	str	r3, [r4, #8]
 8009b16:	b9e9      	cbnz	r1, 8009b54 <_puts_r+0x78>
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	da2e      	bge.n	8009b7a <_puts_r+0x9e>
 8009b1c:	4622      	mov	r2, r4
 8009b1e:	210a      	movs	r1, #10
 8009b20:	4628      	mov	r0, r5
 8009b22:	f000 f847 	bl	8009bb4 <__swbuf_r>
 8009b26:	3001      	adds	r0, #1
 8009b28:	d011      	beq.n	8009b4e <_puts_r+0x72>
 8009b2a:	200a      	movs	r0, #10
 8009b2c:	e011      	b.n	8009b52 <_puts_r+0x76>
 8009b2e:	4b17      	ldr	r3, [pc, #92]	; (8009b8c <_puts_r+0xb0>)
 8009b30:	429c      	cmp	r4, r3
 8009b32:	d101      	bne.n	8009b38 <_puts_r+0x5c>
 8009b34:	68ac      	ldr	r4, [r5, #8]
 8009b36:	e7e3      	b.n	8009b00 <_puts_r+0x24>
 8009b38:	4b15      	ldr	r3, [pc, #84]	; (8009b90 <_puts_r+0xb4>)
 8009b3a:	429c      	cmp	r4, r3
 8009b3c:	bf08      	it	eq
 8009b3e:	68ec      	ldreq	r4, [r5, #12]
 8009b40:	e7de      	b.n	8009b00 <_puts_r+0x24>
 8009b42:	4621      	mov	r1, r4
 8009b44:	4628      	mov	r0, r5
 8009b46:	f000 f887 	bl	8009c58 <__swsetup_r>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d0dd      	beq.n	8009b0a <_puts_r+0x2e>
 8009b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b52:	bd70      	pop	{r4, r5, r6, pc}
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	da04      	bge.n	8009b62 <_puts_r+0x86>
 8009b58:	69a2      	ldr	r2, [r4, #24]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	dc06      	bgt.n	8009b6c <_puts_r+0x90>
 8009b5e:	290a      	cmp	r1, #10
 8009b60:	d004      	beq.n	8009b6c <_puts_r+0x90>
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	6022      	str	r2, [r4, #0]
 8009b68:	7019      	strb	r1, [r3, #0]
 8009b6a:	e7cf      	b.n	8009b0c <_puts_r+0x30>
 8009b6c:	4622      	mov	r2, r4
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f000 f820 	bl	8009bb4 <__swbuf_r>
 8009b74:	3001      	adds	r0, #1
 8009b76:	d1c9      	bne.n	8009b0c <_puts_r+0x30>
 8009b78:	e7e9      	b.n	8009b4e <_puts_r+0x72>
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	200a      	movs	r0, #10
 8009b7e:	1c5a      	adds	r2, r3, #1
 8009b80:	6022      	str	r2, [r4, #0]
 8009b82:	7018      	strb	r0, [r3, #0]
 8009b84:	e7e5      	b.n	8009b52 <_puts_r+0x76>
 8009b86:	bf00      	nop
 8009b88:	0800ac48 	.word	0x0800ac48
 8009b8c:	0800ac68 	.word	0x0800ac68
 8009b90:	0800ac28 	.word	0x0800ac28

08009b94 <puts>:
 8009b94:	4b02      	ldr	r3, [pc, #8]	; (8009ba0 <puts+0xc>)
 8009b96:	4601      	mov	r1, r0
 8009b98:	6818      	ldr	r0, [r3, #0]
 8009b9a:	f7ff bf9f 	b.w	8009adc <_puts_r>
 8009b9e:	bf00      	nop
 8009ba0:	200002dc 	.word	0x200002dc

08009ba4 <strcpy>:
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009baa:	f803 2b01 	strb.w	r2, [r3], #1
 8009bae:	2a00      	cmp	r2, #0
 8009bb0:	d1f9      	bne.n	8009ba6 <strcpy+0x2>
 8009bb2:	4770      	bx	lr

08009bb4 <__swbuf_r>:
 8009bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb6:	460e      	mov	r6, r1
 8009bb8:	4614      	mov	r4, r2
 8009bba:	4605      	mov	r5, r0
 8009bbc:	b118      	cbz	r0, 8009bc6 <__swbuf_r+0x12>
 8009bbe:	6983      	ldr	r3, [r0, #24]
 8009bc0:	b90b      	cbnz	r3, 8009bc6 <__swbuf_r+0x12>
 8009bc2:	f000 f9a7 	bl	8009f14 <__sinit>
 8009bc6:	4b21      	ldr	r3, [pc, #132]	; (8009c4c <__swbuf_r+0x98>)
 8009bc8:	429c      	cmp	r4, r3
 8009bca:	d12a      	bne.n	8009c22 <__swbuf_r+0x6e>
 8009bcc:	686c      	ldr	r4, [r5, #4]
 8009bce:	69a3      	ldr	r3, [r4, #24]
 8009bd0:	60a3      	str	r3, [r4, #8]
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	071a      	lsls	r2, r3, #28
 8009bd6:	d52e      	bpl.n	8009c36 <__swbuf_r+0x82>
 8009bd8:	6923      	ldr	r3, [r4, #16]
 8009bda:	b363      	cbz	r3, 8009c36 <__swbuf_r+0x82>
 8009bdc:	6923      	ldr	r3, [r4, #16]
 8009bde:	6820      	ldr	r0, [r4, #0]
 8009be0:	1ac0      	subs	r0, r0, r3
 8009be2:	6963      	ldr	r3, [r4, #20]
 8009be4:	b2f6      	uxtb	r6, r6
 8009be6:	4283      	cmp	r3, r0
 8009be8:	4637      	mov	r7, r6
 8009bea:	dc04      	bgt.n	8009bf6 <__swbuf_r+0x42>
 8009bec:	4621      	mov	r1, r4
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f000 f926 	bl	8009e40 <_fflush_r>
 8009bf4:	bb28      	cbnz	r0, 8009c42 <__swbuf_r+0x8e>
 8009bf6:	68a3      	ldr	r3, [r4, #8]
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	60a3      	str	r3, [r4, #8]
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	1c5a      	adds	r2, r3, #1
 8009c00:	6022      	str	r2, [r4, #0]
 8009c02:	701e      	strb	r6, [r3, #0]
 8009c04:	6963      	ldr	r3, [r4, #20]
 8009c06:	3001      	adds	r0, #1
 8009c08:	4283      	cmp	r3, r0
 8009c0a:	d004      	beq.n	8009c16 <__swbuf_r+0x62>
 8009c0c:	89a3      	ldrh	r3, [r4, #12]
 8009c0e:	07db      	lsls	r3, r3, #31
 8009c10:	d519      	bpl.n	8009c46 <__swbuf_r+0x92>
 8009c12:	2e0a      	cmp	r6, #10
 8009c14:	d117      	bne.n	8009c46 <__swbuf_r+0x92>
 8009c16:	4621      	mov	r1, r4
 8009c18:	4628      	mov	r0, r5
 8009c1a:	f000 f911 	bl	8009e40 <_fflush_r>
 8009c1e:	b190      	cbz	r0, 8009c46 <__swbuf_r+0x92>
 8009c20:	e00f      	b.n	8009c42 <__swbuf_r+0x8e>
 8009c22:	4b0b      	ldr	r3, [pc, #44]	; (8009c50 <__swbuf_r+0x9c>)
 8009c24:	429c      	cmp	r4, r3
 8009c26:	d101      	bne.n	8009c2c <__swbuf_r+0x78>
 8009c28:	68ac      	ldr	r4, [r5, #8]
 8009c2a:	e7d0      	b.n	8009bce <__swbuf_r+0x1a>
 8009c2c:	4b09      	ldr	r3, [pc, #36]	; (8009c54 <__swbuf_r+0xa0>)
 8009c2e:	429c      	cmp	r4, r3
 8009c30:	bf08      	it	eq
 8009c32:	68ec      	ldreq	r4, [r5, #12]
 8009c34:	e7cb      	b.n	8009bce <__swbuf_r+0x1a>
 8009c36:	4621      	mov	r1, r4
 8009c38:	4628      	mov	r0, r5
 8009c3a:	f000 f80d 	bl	8009c58 <__swsetup_r>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	d0cc      	beq.n	8009bdc <__swbuf_r+0x28>
 8009c42:	f04f 37ff 	mov.w	r7, #4294967295
 8009c46:	4638      	mov	r0, r7
 8009c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	0800ac48 	.word	0x0800ac48
 8009c50:	0800ac68 	.word	0x0800ac68
 8009c54:	0800ac28 	.word	0x0800ac28

08009c58 <__swsetup_r>:
 8009c58:	4b32      	ldr	r3, [pc, #200]	; (8009d24 <__swsetup_r+0xcc>)
 8009c5a:	b570      	push	{r4, r5, r6, lr}
 8009c5c:	681d      	ldr	r5, [r3, #0]
 8009c5e:	4606      	mov	r6, r0
 8009c60:	460c      	mov	r4, r1
 8009c62:	b125      	cbz	r5, 8009c6e <__swsetup_r+0x16>
 8009c64:	69ab      	ldr	r3, [r5, #24]
 8009c66:	b913      	cbnz	r3, 8009c6e <__swsetup_r+0x16>
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f000 f953 	bl	8009f14 <__sinit>
 8009c6e:	4b2e      	ldr	r3, [pc, #184]	; (8009d28 <__swsetup_r+0xd0>)
 8009c70:	429c      	cmp	r4, r3
 8009c72:	d10f      	bne.n	8009c94 <__swsetup_r+0x3c>
 8009c74:	686c      	ldr	r4, [r5, #4]
 8009c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	0715      	lsls	r5, r2, #28
 8009c7e:	d42c      	bmi.n	8009cda <__swsetup_r+0x82>
 8009c80:	06d0      	lsls	r0, r2, #27
 8009c82:	d411      	bmi.n	8009ca8 <__swsetup_r+0x50>
 8009c84:	2209      	movs	r2, #9
 8009c86:	6032      	str	r2, [r6, #0]
 8009c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c8c:	81a3      	strh	r3, [r4, #12]
 8009c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c92:	e03e      	b.n	8009d12 <__swsetup_r+0xba>
 8009c94:	4b25      	ldr	r3, [pc, #148]	; (8009d2c <__swsetup_r+0xd4>)
 8009c96:	429c      	cmp	r4, r3
 8009c98:	d101      	bne.n	8009c9e <__swsetup_r+0x46>
 8009c9a:	68ac      	ldr	r4, [r5, #8]
 8009c9c:	e7eb      	b.n	8009c76 <__swsetup_r+0x1e>
 8009c9e:	4b24      	ldr	r3, [pc, #144]	; (8009d30 <__swsetup_r+0xd8>)
 8009ca0:	429c      	cmp	r4, r3
 8009ca2:	bf08      	it	eq
 8009ca4:	68ec      	ldreq	r4, [r5, #12]
 8009ca6:	e7e6      	b.n	8009c76 <__swsetup_r+0x1e>
 8009ca8:	0751      	lsls	r1, r2, #29
 8009caa:	d512      	bpl.n	8009cd2 <__swsetup_r+0x7a>
 8009cac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cae:	b141      	cbz	r1, 8009cc2 <__swsetup_r+0x6a>
 8009cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cb4:	4299      	cmp	r1, r3
 8009cb6:	d002      	beq.n	8009cbe <__swsetup_r+0x66>
 8009cb8:	4630      	mov	r0, r6
 8009cba:	f000 fa19 	bl	800a0f0 <_free_r>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	6363      	str	r3, [r4, #52]	; 0x34
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009cc8:	81a3      	strh	r3, [r4, #12]
 8009cca:	2300      	movs	r3, #0
 8009ccc:	6063      	str	r3, [r4, #4]
 8009cce:	6923      	ldr	r3, [r4, #16]
 8009cd0:	6023      	str	r3, [r4, #0]
 8009cd2:	89a3      	ldrh	r3, [r4, #12]
 8009cd4:	f043 0308 	orr.w	r3, r3, #8
 8009cd8:	81a3      	strh	r3, [r4, #12]
 8009cda:	6923      	ldr	r3, [r4, #16]
 8009cdc:	b94b      	cbnz	r3, 8009cf2 <__swsetup_r+0x9a>
 8009cde:	89a3      	ldrh	r3, [r4, #12]
 8009ce0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ce8:	d003      	beq.n	8009cf2 <__swsetup_r+0x9a>
 8009cea:	4621      	mov	r1, r4
 8009cec:	4630      	mov	r0, r6
 8009cee:	f000 f9bf 	bl	800a070 <__smakebuf_r>
 8009cf2:	89a2      	ldrh	r2, [r4, #12]
 8009cf4:	f012 0301 	ands.w	r3, r2, #1
 8009cf8:	d00c      	beq.n	8009d14 <__swsetup_r+0xbc>
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	60a3      	str	r3, [r4, #8]
 8009cfe:	6963      	ldr	r3, [r4, #20]
 8009d00:	425b      	negs	r3, r3
 8009d02:	61a3      	str	r3, [r4, #24]
 8009d04:	6923      	ldr	r3, [r4, #16]
 8009d06:	b953      	cbnz	r3, 8009d1e <__swsetup_r+0xc6>
 8009d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d0c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009d10:	d1ba      	bne.n	8009c88 <__swsetup_r+0x30>
 8009d12:	bd70      	pop	{r4, r5, r6, pc}
 8009d14:	0792      	lsls	r2, r2, #30
 8009d16:	bf58      	it	pl
 8009d18:	6963      	ldrpl	r3, [r4, #20]
 8009d1a:	60a3      	str	r3, [r4, #8]
 8009d1c:	e7f2      	b.n	8009d04 <__swsetup_r+0xac>
 8009d1e:	2000      	movs	r0, #0
 8009d20:	e7f7      	b.n	8009d12 <__swsetup_r+0xba>
 8009d22:	bf00      	nop
 8009d24:	200002dc 	.word	0x200002dc
 8009d28:	0800ac48 	.word	0x0800ac48
 8009d2c:	0800ac68 	.word	0x0800ac68
 8009d30:	0800ac28 	.word	0x0800ac28

08009d34 <__sflush_r>:
 8009d34:	898a      	ldrh	r2, [r1, #12]
 8009d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3a:	4605      	mov	r5, r0
 8009d3c:	0710      	lsls	r0, r2, #28
 8009d3e:	460c      	mov	r4, r1
 8009d40:	d458      	bmi.n	8009df4 <__sflush_r+0xc0>
 8009d42:	684b      	ldr	r3, [r1, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	dc05      	bgt.n	8009d54 <__sflush_r+0x20>
 8009d48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	dc02      	bgt.n	8009d54 <__sflush_r+0x20>
 8009d4e:	2000      	movs	r0, #0
 8009d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d56:	2e00      	cmp	r6, #0
 8009d58:	d0f9      	beq.n	8009d4e <__sflush_r+0x1a>
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d60:	682f      	ldr	r7, [r5, #0]
 8009d62:	6a21      	ldr	r1, [r4, #32]
 8009d64:	602b      	str	r3, [r5, #0]
 8009d66:	d032      	beq.n	8009dce <__sflush_r+0x9a>
 8009d68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d6a:	89a3      	ldrh	r3, [r4, #12]
 8009d6c:	075a      	lsls	r2, r3, #29
 8009d6e:	d505      	bpl.n	8009d7c <__sflush_r+0x48>
 8009d70:	6863      	ldr	r3, [r4, #4]
 8009d72:	1ac0      	subs	r0, r0, r3
 8009d74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d76:	b10b      	cbz	r3, 8009d7c <__sflush_r+0x48>
 8009d78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d7a:	1ac0      	subs	r0, r0, r3
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	4602      	mov	r2, r0
 8009d80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d82:	6a21      	ldr	r1, [r4, #32]
 8009d84:	4628      	mov	r0, r5
 8009d86:	47b0      	blx	r6
 8009d88:	1c43      	adds	r3, r0, #1
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	d106      	bne.n	8009d9c <__sflush_r+0x68>
 8009d8e:	6829      	ldr	r1, [r5, #0]
 8009d90:	291d      	cmp	r1, #29
 8009d92:	d848      	bhi.n	8009e26 <__sflush_r+0xf2>
 8009d94:	4a29      	ldr	r2, [pc, #164]	; (8009e3c <__sflush_r+0x108>)
 8009d96:	40ca      	lsrs	r2, r1
 8009d98:	07d6      	lsls	r6, r2, #31
 8009d9a:	d544      	bpl.n	8009e26 <__sflush_r+0xf2>
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	6062      	str	r2, [r4, #4]
 8009da0:	04d9      	lsls	r1, r3, #19
 8009da2:	6922      	ldr	r2, [r4, #16]
 8009da4:	6022      	str	r2, [r4, #0]
 8009da6:	d504      	bpl.n	8009db2 <__sflush_r+0x7e>
 8009da8:	1c42      	adds	r2, r0, #1
 8009daa:	d101      	bne.n	8009db0 <__sflush_r+0x7c>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	b903      	cbnz	r3, 8009db2 <__sflush_r+0x7e>
 8009db0:	6560      	str	r0, [r4, #84]	; 0x54
 8009db2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009db4:	602f      	str	r7, [r5, #0]
 8009db6:	2900      	cmp	r1, #0
 8009db8:	d0c9      	beq.n	8009d4e <__sflush_r+0x1a>
 8009dba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dbe:	4299      	cmp	r1, r3
 8009dc0:	d002      	beq.n	8009dc8 <__sflush_r+0x94>
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f000 f994 	bl	800a0f0 <_free_r>
 8009dc8:	2000      	movs	r0, #0
 8009dca:	6360      	str	r0, [r4, #52]	; 0x34
 8009dcc:	e7c0      	b.n	8009d50 <__sflush_r+0x1c>
 8009dce:	2301      	movs	r3, #1
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	47b0      	blx	r6
 8009dd4:	1c41      	adds	r1, r0, #1
 8009dd6:	d1c8      	bne.n	8009d6a <__sflush_r+0x36>
 8009dd8:	682b      	ldr	r3, [r5, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d0c5      	beq.n	8009d6a <__sflush_r+0x36>
 8009dde:	2b1d      	cmp	r3, #29
 8009de0:	d001      	beq.n	8009de6 <__sflush_r+0xb2>
 8009de2:	2b16      	cmp	r3, #22
 8009de4:	d101      	bne.n	8009dea <__sflush_r+0xb6>
 8009de6:	602f      	str	r7, [r5, #0]
 8009de8:	e7b1      	b.n	8009d4e <__sflush_r+0x1a>
 8009dea:	89a3      	ldrh	r3, [r4, #12]
 8009dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009df0:	81a3      	strh	r3, [r4, #12]
 8009df2:	e7ad      	b.n	8009d50 <__sflush_r+0x1c>
 8009df4:	690f      	ldr	r7, [r1, #16]
 8009df6:	2f00      	cmp	r7, #0
 8009df8:	d0a9      	beq.n	8009d4e <__sflush_r+0x1a>
 8009dfa:	0793      	lsls	r3, r2, #30
 8009dfc:	680e      	ldr	r6, [r1, #0]
 8009dfe:	bf08      	it	eq
 8009e00:	694b      	ldreq	r3, [r1, #20]
 8009e02:	600f      	str	r7, [r1, #0]
 8009e04:	bf18      	it	ne
 8009e06:	2300      	movne	r3, #0
 8009e08:	eba6 0807 	sub.w	r8, r6, r7
 8009e0c:	608b      	str	r3, [r1, #8]
 8009e0e:	f1b8 0f00 	cmp.w	r8, #0
 8009e12:	dd9c      	ble.n	8009d4e <__sflush_r+0x1a>
 8009e14:	4643      	mov	r3, r8
 8009e16:	463a      	mov	r2, r7
 8009e18:	6a21      	ldr	r1, [r4, #32]
 8009e1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	47b0      	blx	r6
 8009e20:	2800      	cmp	r0, #0
 8009e22:	dc06      	bgt.n	8009e32 <__sflush_r+0xfe>
 8009e24:	89a3      	ldrh	r3, [r4, #12]
 8009e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e2a:	81a3      	strh	r3, [r4, #12]
 8009e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e30:	e78e      	b.n	8009d50 <__sflush_r+0x1c>
 8009e32:	4407      	add	r7, r0
 8009e34:	eba8 0800 	sub.w	r8, r8, r0
 8009e38:	e7e9      	b.n	8009e0e <__sflush_r+0xda>
 8009e3a:	bf00      	nop
 8009e3c:	20400001 	.word	0x20400001

08009e40 <_fflush_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	690b      	ldr	r3, [r1, #16]
 8009e44:	4605      	mov	r5, r0
 8009e46:	460c      	mov	r4, r1
 8009e48:	b1db      	cbz	r3, 8009e82 <_fflush_r+0x42>
 8009e4a:	b118      	cbz	r0, 8009e54 <_fflush_r+0x14>
 8009e4c:	6983      	ldr	r3, [r0, #24]
 8009e4e:	b90b      	cbnz	r3, 8009e54 <_fflush_r+0x14>
 8009e50:	f000 f860 	bl	8009f14 <__sinit>
 8009e54:	4b0c      	ldr	r3, [pc, #48]	; (8009e88 <_fflush_r+0x48>)
 8009e56:	429c      	cmp	r4, r3
 8009e58:	d109      	bne.n	8009e6e <_fflush_r+0x2e>
 8009e5a:	686c      	ldr	r4, [r5, #4]
 8009e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e60:	b17b      	cbz	r3, 8009e82 <_fflush_r+0x42>
 8009e62:	4621      	mov	r1, r4
 8009e64:	4628      	mov	r0, r5
 8009e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e6a:	f7ff bf63 	b.w	8009d34 <__sflush_r>
 8009e6e:	4b07      	ldr	r3, [pc, #28]	; (8009e8c <_fflush_r+0x4c>)
 8009e70:	429c      	cmp	r4, r3
 8009e72:	d101      	bne.n	8009e78 <_fflush_r+0x38>
 8009e74:	68ac      	ldr	r4, [r5, #8]
 8009e76:	e7f1      	b.n	8009e5c <_fflush_r+0x1c>
 8009e78:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <_fflush_r+0x50>)
 8009e7a:	429c      	cmp	r4, r3
 8009e7c:	bf08      	it	eq
 8009e7e:	68ec      	ldreq	r4, [r5, #12]
 8009e80:	e7ec      	b.n	8009e5c <_fflush_r+0x1c>
 8009e82:	2000      	movs	r0, #0
 8009e84:	bd38      	pop	{r3, r4, r5, pc}
 8009e86:	bf00      	nop
 8009e88:	0800ac48 	.word	0x0800ac48
 8009e8c:	0800ac68 	.word	0x0800ac68
 8009e90:	0800ac28 	.word	0x0800ac28

08009e94 <std>:
 8009e94:	2300      	movs	r3, #0
 8009e96:	b510      	push	{r4, lr}
 8009e98:	4604      	mov	r4, r0
 8009e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8009e9e:	6083      	str	r3, [r0, #8]
 8009ea0:	8181      	strh	r1, [r0, #12]
 8009ea2:	6643      	str	r3, [r0, #100]	; 0x64
 8009ea4:	81c2      	strh	r2, [r0, #14]
 8009ea6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009eaa:	6183      	str	r3, [r0, #24]
 8009eac:	4619      	mov	r1, r3
 8009eae:	2208      	movs	r2, #8
 8009eb0:	305c      	adds	r0, #92	; 0x5c
 8009eb2:	f7ff fe0a 	bl	8009aca <memset>
 8009eb6:	4b05      	ldr	r3, [pc, #20]	; (8009ecc <std+0x38>)
 8009eb8:	6263      	str	r3, [r4, #36]	; 0x24
 8009eba:	4b05      	ldr	r3, [pc, #20]	; (8009ed0 <std+0x3c>)
 8009ebc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ebe:	4b05      	ldr	r3, [pc, #20]	; (8009ed4 <std+0x40>)
 8009ec0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ec2:	4b05      	ldr	r3, [pc, #20]	; (8009ed8 <std+0x44>)
 8009ec4:	6224      	str	r4, [r4, #32]
 8009ec6:	6323      	str	r3, [r4, #48]	; 0x30
 8009ec8:	bd10      	pop	{r4, pc}
 8009eca:	bf00      	nop
 8009ecc:	0800a261 	.word	0x0800a261
 8009ed0:	0800a283 	.word	0x0800a283
 8009ed4:	0800a2bb 	.word	0x0800a2bb
 8009ed8:	0800a2df 	.word	0x0800a2df

08009edc <_cleanup_r>:
 8009edc:	4901      	ldr	r1, [pc, #4]	; (8009ee4 <_cleanup_r+0x8>)
 8009ede:	f000 b885 	b.w	8009fec <_fwalk_reent>
 8009ee2:	bf00      	nop
 8009ee4:	08009e41 	.word	0x08009e41

08009ee8 <__sfmoreglue>:
 8009ee8:	b570      	push	{r4, r5, r6, lr}
 8009eea:	1e4a      	subs	r2, r1, #1
 8009eec:	2568      	movs	r5, #104	; 0x68
 8009eee:	4355      	muls	r5, r2
 8009ef0:	460e      	mov	r6, r1
 8009ef2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ef6:	f000 f949 	bl	800a18c <_malloc_r>
 8009efa:	4604      	mov	r4, r0
 8009efc:	b140      	cbz	r0, 8009f10 <__sfmoreglue+0x28>
 8009efe:	2100      	movs	r1, #0
 8009f00:	e9c0 1600 	strd	r1, r6, [r0]
 8009f04:	300c      	adds	r0, #12
 8009f06:	60a0      	str	r0, [r4, #8]
 8009f08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f0c:	f7ff fddd 	bl	8009aca <memset>
 8009f10:	4620      	mov	r0, r4
 8009f12:	bd70      	pop	{r4, r5, r6, pc}

08009f14 <__sinit>:
 8009f14:	6983      	ldr	r3, [r0, #24]
 8009f16:	b510      	push	{r4, lr}
 8009f18:	4604      	mov	r4, r0
 8009f1a:	bb33      	cbnz	r3, 8009f6a <__sinit+0x56>
 8009f1c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009f20:	6503      	str	r3, [r0, #80]	; 0x50
 8009f22:	4b12      	ldr	r3, [pc, #72]	; (8009f6c <__sinit+0x58>)
 8009f24:	4a12      	ldr	r2, [pc, #72]	; (8009f70 <__sinit+0x5c>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	6282      	str	r2, [r0, #40]	; 0x28
 8009f2a:	4298      	cmp	r0, r3
 8009f2c:	bf04      	itt	eq
 8009f2e:	2301      	moveq	r3, #1
 8009f30:	6183      	streq	r3, [r0, #24]
 8009f32:	f000 f81f 	bl	8009f74 <__sfp>
 8009f36:	6060      	str	r0, [r4, #4]
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f000 f81b 	bl	8009f74 <__sfp>
 8009f3e:	60a0      	str	r0, [r4, #8]
 8009f40:	4620      	mov	r0, r4
 8009f42:	f000 f817 	bl	8009f74 <__sfp>
 8009f46:	2200      	movs	r2, #0
 8009f48:	60e0      	str	r0, [r4, #12]
 8009f4a:	2104      	movs	r1, #4
 8009f4c:	6860      	ldr	r0, [r4, #4]
 8009f4e:	f7ff ffa1 	bl	8009e94 <std>
 8009f52:	2201      	movs	r2, #1
 8009f54:	2109      	movs	r1, #9
 8009f56:	68a0      	ldr	r0, [r4, #8]
 8009f58:	f7ff ff9c 	bl	8009e94 <std>
 8009f5c:	2202      	movs	r2, #2
 8009f5e:	2112      	movs	r1, #18
 8009f60:	68e0      	ldr	r0, [r4, #12]
 8009f62:	f7ff ff97 	bl	8009e94 <std>
 8009f66:	2301      	movs	r3, #1
 8009f68:	61a3      	str	r3, [r4, #24]
 8009f6a:	bd10      	pop	{r4, pc}
 8009f6c:	0800ac24 	.word	0x0800ac24
 8009f70:	08009edd 	.word	0x08009edd

08009f74 <__sfp>:
 8009f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f76:	4b1b      	ldr	r3, [pc, #108]	; (8009fe4 <__sfp+0x70>)
 8009f78:	681e      	ldr	r6, [r3, #0]
 8009f7a:	69b3      	ldr	r3, [r6, #24]
 8009f7c:	4607      	mov	r7, r0
 8009f7e:	b913      	cbnz	r3, 8009f86 <__sfp+0x12>
 8009f80:	4630      	mov	r0, r6
 8009f82:	f7ff ffc7 	bl	8009f14 <__sinit>
 8009f86:	3648      	adds	r6, #72	; 0x48
 8009f88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	d503      	bpl.n	8009f98 <__sfp+0x24>
 8009f90:	6833      	ldr	r3, [r6, #0]
 8009f92:	b133      	cbz	r3, 8009fa2 <__sfp+0x2e>
 8009f94:	6836      	ldr	r6, [r6, #0]
 8009f96:	e7f7      	b.n	8009f88 <__sfp+0x14>
 8009f98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f9c:	b16d      	cbz	r5, 8009fba <__sfp+0x46>
 8009f9e:	3468      	adds	r4, #104	; 0x68
 8009fa0:	e7f4      	b.n	8009f8c <__sfp+0x18>
 8009fa2:	2104      	movs	r1, #4
 8009fa4:	4638      	mov	r0, r7
 8009fa6:	f7ff ff9f 	bl	8009ee8 <__sfmoreglue>
 8009faa:	6030      	str	r0, [r6, #0]
 8009fac:	2800      	cmp	r0, #0
 8009fae:	d1f1      	bne.n	8009f94 <__sfp+0x20>
 8009fb0:	230c      	movs	r3, #12
 8009fb2:	603b      	str	r3, [r7, #0]
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fba:	4b0b      	ldr	r3, [pc, #44]	; (8009fe8 <__sfp+0x74>)
 8009fbc:	6665      	str	r5, [r4, #100]	; 0x64
 8009fbe:	e9c4 5500 	strd	r5, r5, [r4]
 8009fc2:	60a5      	str	r5, [r4, #8]
 8009fc4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009fc8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009fcc:	2208      	movs	r2, #8
 8009fce:	4629      	mov	r1, r5
 8009fd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fd4:	f7ff fd79 	bl	8009aca <memset>
 8009fd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009fe0:	e7e9      	b.n	8009fb6 <__sfp+0x42>
 8009fe2:	bf00      	nop
 8009fe4:	0800ac24 	.word	0x0800ac24
 8009fe8:	ffff0001 	.word	0xffff0001

08009fec <_fwalk_reent>:
 8009fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ff0:	4680      	mov	r8, r0
 8009ff2:	4689      	mov	r9, r1
 8009ff4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ff8:	2600      	movs	r6, #0
 8009ffa:	b914      	cbnz	r4, 800a002 <_fwalk_reent+0x16>
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a002:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a006:	3f01      	subs	r7, #1
 800a008:	d501      	bpl.n	800a00e <_fwalk_reent+0x22>
 800a00a:	6824      	ldr	r4, [r4, #0]
 800a00c:	e7f5      	b.n	8009ffa <_fwalk_reent+0xe>
 800a00e:	89ab      	ldrh	r3, [r5, #12]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d907      	bls.n	800a024 <_fwalk_reent+0x38>
 800a014:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a018:	3301      	adds	r3, #1
 800a01a:	d003      	beq.n	800a024 <_fwalk_reent+0x38>
 800a01c:	4629      	mov	r1, r5
 800a01e:	4640      	mov	r0, r8
 800a020:	47c8      	blx	r9
 800a022:	4306      	orrs	r6, r0
 800a024:	3568      	adds	r5, #104	; 0x68
 800a026:	e7ee      	b.n	800a006 <_fwalk_reent+0x1a>

0800a028 <__swhatbuf_r>:
 800a028:	b570      	push	{r4, r5, r6, lr}
 800a02a:	460e      	mov	r6, r1
 800a02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a030:	2900      	cmp	r1, #0
 800a032:	b096      	sub	sp, #88	; 0x58
 800a034:	4614      	mov	r4, r2
 800a036:	461d      	mov	r5, r3
 800a038:	da07      	bge.n	800a04a <__swhatbuf_r+0x22>
 800a03a:	2300      	movs	r3, #0
 800a03c:	602b      	str	r3, [r5, #0]
 800a03e:	89b3      	ldrh	r3, [r6, #12]
 800a040:	061a      	lsls	r2, r3, #24
 800a042:	d410      	bmi.n	800a066 <__swhatbuf_r+0x3e>
 800a044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a048:	e00e      	b.n	800a068 <__swhatbuf_r+0x40>
 800a04a:	466a      	mov	r2, sp
 800a04c:	f000 f96e 	bl	800a32c <_fstat_r>
 800a050:	2800      	cmp	r0, #0
 800a052:	dbf2      	blt.n	800a03a <__swhatbuf_r+0x12>
 800a054:	9a01      	ldr	r2, [sp, #4]
 800a056:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a05a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a05e:	425a      	negs	r2, r3
 800a060:	415a      	adcs	r2, r3
 800a062:	602a      	str	r2, [r5, #0]
 800a064:	e7ee      	b.n	800a044 <__swhatbuf_r+0x1c>
 800a066:	2340      	movs	r3, #64	; 0x40
 800a068:	2000      	movs	r0, #0
 800a06a:	6023      	str	r3, [r4, #0]
 800a06c:	b016      	add	sp, #88	; 0x58
 800a06e:	bd70      	pop	{r4, r5, r6, pc}

0800a070 <__smakebuf_r>:
 800a070:	898b      	ldrh	r3, [r1, #12]
 800a072:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a074:	079d      	lsls	r5, r3, #30
 800a076:	4606      	mov	r6, r0
 800a078:	460c      	mov	r4, r1
 800a07a:	d507      	bpl.n	800a08c <__smakebuf_r+0x1c>
 800a07c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a080:	6023      	str	r3, [r4, #0]
 800a082:	6123      	str	r3, [r4, #16]
 800a084:	2301      	movs	r3, #1
 800a086:	6163      	str	r3, [r4, #20]
 800a088:	b002      	add	sp, #8
 800a08a:	bd70      	pop	{r4, r5, r6, pc}
 800a08c:	ab01      	add	r3, sp, #4
 800a08e:	466a      	mov	r2, sp
 800a090:	f7ff ffca 	bl	800a028 <__swhatbuf_r>
 800a094:	9900      	ldr	r1, [sp, #0]
 800a096:	4605      	mov	r5, r0
 800a098:	4630      	mov	r0, r6
 800a09a:	f000 f877 	bl	800a18c <_malloc_r>
 800a09e:	b948      	cbnz	r0, 800a0b4 <__smakebuf_r+0x44>
 800a0a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0a4:	059a      	lsls	r2, r3, #22
 800a0a6:	d4ef      	bmi.n	800a088 <__smakebuf_r+0x18>
 800a0a8:	f023 0303 	bic.w	r3, r3, #3
 800a0ac:	f043 0302 	orr.w	r3, r3, #2
 800a0b0:	81a3      	strh	r3, [r4, #12]
 800a0b2:	e7e3      	b.n	800a07c <__smakebuf_r+0xc>
 800a0b4:	4b0d      	ldr	r3, [pc, #52]	; (800a0ec <__smakebuf_r+0x7c>)
 800a0b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0b8:	89a3      	ldrh	r3, [r4, #12]
 800a0ba:	6020      	str	r0, [r4, #0]
 800a0bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c0:	81a3      	strh	r3, [r4, #12]
 800a0c2:	9b00      	ldr	r3, [sp, #0]
 800a0c4:	6163      	str	r3, [r4, #20]
 800a0c6:	9b01      	ldr	r3, [sp, #4]
 800a0c8:	6120      	str	r0, [r4, #16]
 800a0ca:	b15b      	cbz	r3, 800a0e4 <__smakebuf_r+0x74>
 800a0cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f000 f93d 	bl	800a350 <_isatty_r>
 800a0d6:	b128      	cbz	r0, 800a0e4 <__smakebuf_r+0x74>
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	f023 0303 	bic.w	r3, r3, #3
 800a0de:	f043 0301 	orr.w	r3, r3, #1
 800a0e2:	81a3      	strh	r3, [r4, #12]
 800a0e4:	89a3      	ldrh	r3, [r4, #12]
 800a0e6:	431d      	orrs	r5, r3
 800a0e8:	81a5      	strh	r5, [r4, #12]
 800a0ea:	e7cd      	b.n	800a088 <__smakebuf_r+0x18>
 800a0ec:	08009edd 	.word	0x08009edd

0800a0f0 <_free_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4605      	mov	r5, r0
 800a0f4:	2900      	cmp	r1, #0
 800a0f6:	d045      	beq.n	800a184 <_free_r+0x94>
 800a0f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0fc:	1f0c      	subs	r4, r1, #4
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	bfb8      	it	lt
 800a102:	18e4      	addlt	r4, r4, r3
 800a104:	f000 f946 	bl	800a394 <__malloc_lock>
 800a108:	4a1f      	ldr	r2, [pc, #124]	; (800a188 <_free_r+0x98>)
 800a10a:	6813      	ldr	r3, [r2, #0]
 800a10c:	4610      	mov	r0, r2
 800a10e:	b933      	cbnz	r3, 800a11e <_free_r+0x2e>
 800a110:	6063      	str	r3, [r4, #4]
 800a112:	6014      	str	r4, [r2, #0]
 800a114:	4628      	mov	r0, r5
 800a116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a11a:	f000 b93c 	b.w	800a396 <__malloc_unlock>
 800a11e:	42a3      	cmp	r3, r4
 800a120:	d90c      	bls.n	800a13c <_free_r+0x4c>
 800a122:	6821      	ldr	r1, [r4, #0]
 800a124:	1862      	adds	r2, r4, r1
 800a126:	4293      	cmp	r3, r2
 800a128:	bf04      	itt	eq
 800a12a:	681a      	ldreq	r2, [r3, #0]
 800a12c:	685b      	ldreq	r3, [r3, #4]
 800a12e:	6063      	str	r3, [r4, #4]
 800a130:	bf04      	itt	eq
 800a132:	1852      	addeq	r2, r2, r1
 800a134:	6022      	streq	r2, [r4, #0]
 800a136:	6004      	str	r4, [r0, #0]
 800a138:	e7ec      	b.n	800a114 <_free_r+0x24>
 800a13a:	4613      	mov	r3, r2
 800a13c:	685a      	ldr	r2, [r3, #4]
 800a13e:	b10a      	cbz	r2, 800a144 <_free_r+0x54>
 800a140:	42a2      	cmp	r2, r4
 800a142:	d9fa      	bls.n	800a13a <_free_r+0x4a>
 800a144:	6819      	ldr	r1, [r3, #0]
 800a146:	1858      	adds	r0, r3, r1
 800a148:	42a0      	cmp	r0, r4
 800a14a:	d10b      	bne.n	800a164 <_free_r+0x74>
 800a14c:	6820      	ldr	r0, [r4, #0]
 800a14e:	4401      	add	r1, r0
 800a150:	1858      	adds	r0, r3, r1
 800a152:	4282      	cmp	r2, r0
 800a154:	6019      	str	r1, [r3, #0]
 800a156:	d1dd      	bne.n	800a114 <_free_r+0x24>
 800a158:	6810      	ldr	r0, [r2, #0]
 800a15a:	6852      	ldr	r2, [r2, #4]
 800a15c:	605a      	str	r2, [r3, #4]
 800a15e:	4401      	add	r1, r0
 800a160:	6019      	str	r1, [r3, #0]
 800a162:	e7d7      	b.n	800a114 <_free_r+0x24>
 800a164:	d902      	bls.n	800a16c <_free_r+0x7c>
 800a166:	230c      	movs	r3, #12
 800a168:	602b      	str	r3, [r5, #0]
 800a16a:	e7d3      	b.n	800a114 <_free_r+0x24>
 800a16c:	6820      	ldr	r0, [r4, #0]
 800a16e:	1821      	adds	r1, r4, r0
 800a170:	428a      	cmp	r2, r1
 800a172:	bf04      	itt	eq
 800a174:	6811      	ldreq	r1, [r2, #0]
 800a176:	6852      	ldreq	r2, [r2, #4]
 800a178:	6062      	str	r2, [r4, #4]
 800a17a:	bf04      	itt	eq
 800a17c:	1809      	addeq	r1, r1, r0
 800a17e:	6021      	streq	r1, [r4, #0]
 800a180:	605c      	str	r4, [r3, #4]
 800a182:	e7c7      	b.n	800a114 <_free_r+0x24>
 800a184:	bd38      	pop	{r3, r4, r5, pc}
 800a186:	bf00      	nop
 800a188:	20000360 	.word	0x20000360

0800a18c <_malloc_r>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	1ccd      	adds	r5, r1, #3
 800a190:	f025 0503 	bic.w	r5, r5, #3
 800a194:	3508      	adds	r5, #8
 800a196:	2d0c      	cmp	r5, #12
 800a198:	bf38      	it	cc
 800a19a:	250c      	movcc	r5, #12
 800a19c:	2d00      	cmp	r5, #0
 800a19e:	4606      	mov	r6, r0
 800a1a0:	db01      	blt.n	800a1a6 <_malloc_r+0x1a>
 800a1a2:	42a9      	cmp	r1, r5
 800a1a4:	d903      	bls.n	800a1ae <_malloc_r+0x22>
 800a1a6:	230c      	movs	r3, #12
 800a1a8:	6033      	str	r3, [r6, #0]
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	bd70      	pop	{r4, r5, r6, pc}
 800a1ae:	f000 f8f1 	bl	800a394 <__malloc_lock>
 800a1b2:	4a21      	ldr	r2, [pc, #132]	; (800a238 <_malloc_r+0xac>)
 800a1b4:	6814      	ldr	r4, [r2, #0]
 800a1b6:	4621      	mov	r1, r4
 800a1b8:	b991      	cbnz	r1, 800a1e0 <_malloc_r+0x54>
 800a1ba:	4c20      	ldr	r4, [pc, #128]	; (800a23c <_malloc_r+0xb0>)
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	b91b      	cbnz	r3, 800a1c8 <_malloc_r+0x3c>
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f000 f83d 	bl	800a240 <_sbrk_r>
 800a1c6:	6020      	str	r0, [r4, #0]
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	f000 f838 	bl	800a240 <_sbrk_r>
 800a1d0:	1c43      	adds	r3, r0, #1
 800a1d2:	d124      	bne.n	800a21e <_malloc_r+0x92>
 800a1d4:	230c      	movs	r3, #12
 800a1d6:	6033      	str	r3, [r6, #0]
 800a1d8:	4630      	mov	r0, r6
 800a1da:	f000 f8dc 	bl	800a396 <__malloc_unlock>
 800a1de:	e7e4      	b.n	800a1aa <_malloc_r+0x1e>
 800a1e0:	680b      	ldr	r3, [r1, #0]
 800a1e2:	1b5b      	subs	r3, r3, r5
 800a1e4:	d418      	bmi.n	800a218 <_malloc_r+0x8c>
 800a1e6:	2b0b      	cmp	r3, #11
 800a1e8:	d90f      	bls.n	800a20a <_malloc_r+0x7e>
 800a1ea:	600b      	str	r3, [r1, #0]
 800a1ec:	50cd      	str	r5, [r1, r3]
 800a1ee:	18cc      	adds	r4, r1, r3
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	f000 f8d0 	bl	800a396 <__malloc_unlock>
 800a1f6:	f104 000b 	add.w	r0, r4, #11
 800a1fa:	1d23      	adds	r3, r4, #4
 800a1fc:	f020 0007 	bic.w	r0, r0, #7
 800a200:	1ac3      	subs	r3, r0, r3
 800a202:	d0d3      	beq.n	800a1ac <_malloc_r+0x20>
 800a204:	425a      	negs	r2, r3
 800a206:	50e2      	str	r2, [r4, r3]
 800a208:	e7d0      	b.n	800a1ac <_malloc_r+0x20>
 800a20a:	428c      	cmp	r4, r1
 800a20c:	684b      	ldr	r3, [r1, #4]
 800a20e:	bf16      	itet	ne
 800a210:	6063      	strne	r3, [r4, #4]
 800a212:	6013      	streq	r3, [r2, #0]
 800a214:	460c      	movne	r4, r1
 800a216:	e7eb      	b.n	800a1f0 <_malloc_r+0x64>
 800a218:	460c      	mov	r4, r1
 800a21a:	6849      	ldr	r1, [r1, #4]
 800a21c:	e7cc      	b.n	800a1b8 <_malloc_r+0x2c>
 800a21e:	1cc4      	adds	r4, r0, #3
 800a220:	f024 0403 	bic.w	r4, r4, #3
 800a224:	42a0      	cmp	r0, r4
 800a226:	d005      	beq.n	800a234 <_malloc_r+0xa8>
 800a228:	1a21      	subs	r1, r4, r0
 800a22a:	4630      	mov	r0, r6
 800a22c:	f000 f808 	bl	800a240 <_sbrk_r>
 800a230:	3001      	adds	r0, #1
 800a232:	d0cf      	beq.n	800a1d4 <_malloc_r+0x48>
 800a234:	6025      	str	r5, [r4, #0]
 800a236:	e7db      	b.n	800a1f0 <_malloc_r+0x64>
 800a238:	20000360 	.word	0x20000360
 800a23c:	20000364 	.word	0x20000364

0800a240 <_sbrk_r>:
 800a240:	b538      	push	{r3, r4, r5, lr}
 800a242:	4c06      	ldr	r4, [pc, #24]	; (800a25c <_sbrk_r+0x1c>)
 800a244:	2300      	movs	r3, #0
 800a246:	4605      	mov	r5, r0
 800a248:	4608      	mov	r0, r1
 800a24a:	6023      	str	r3, [r4, #0]
 800a24c:	f7f7 f8dc 	bl	8001408 <_sbrk>
 800a250:	1c43      	adds	r3, r0, #1
 800a252:	d102      	bne.n	800a25a <_sbrk_r+0x1a>
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	b103      	cbz	r3, 800a25a <_sbrk_r+0x1a>
 800a258:	602b      	str	r3, [r5, #0]
 800a25a:	bd38      	pop	{r3, r4, r5, pc}
 800a25c:	20000614 	.word	0x20000614

0800a260 <__sread>:
 800a260:	b510      	push	{r4, lr}
 800a262:	460c      	mov	r4, r1
 800a264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a268:	f000 f896 	bl	800a398 <_read_r>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	bfab      	itete	ge
 800a270:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a272:	89a3      	ldrhlt	r3, [r4, #12]
 800a274:	181b      	addge	r3, r3, r0
 800a276:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a27a:	bfac      	ite	ge
 800a27c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a27e:	81a3      	strhlt	r3, [r4, #12]
 800a280:	bd10      	pop	{r4, pc}

0800a282 <__swrite>:
 800a282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a286:	461f      	mov	r7, r3
 800a288:	898b      	ldrh	r3, [r1, #12]
 800a28a:	05db      	lsls	r3, r3, #23
 800a28c:	4605      	mov	r5, r0
 800a28e:	460c      	mov	r4, r1
 800a290:	4616      	mov	r6, r2
 800a292:	d505      	bpl.n	800a2a0 <__swrite+0x1e>
 800a294:	2302      	movs	r3, #2
 800a296:	2200      	movs	r2, #0
 800a298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a29c:	f000 f868 	bl	800a370 <_lseek_r>
 800a2a0:	89a3      	ldrh	r3, [r4, #12]
 800a2a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2aa:	81a3      	strh	r3, [r4, #12]
 800a2ac:	4632      	mov	r2, r6
 800a2ae:	463b      	mov	r3, r7
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b6:	f000 b817 	b.w	800a2e8 <_write_r>

0800a2ba <__sseek>:
 800a2ba:	b510      	push	{r4, lr}
 800a2bc:	460c      	mov	r4, r1
 800a2be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c2:	f000 f855 	bl	800a370 <_lseek_r>
 800a2c6:	1c43      	adds	r3, r0, #1
 800a2c8:	89a3      	ldrh	r3, [r4, #12]
 800a2ca:	bf15      	itete	ne
 800a2cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2d6:	81a3      	strheq	r3, [r4, #12]
 800a2d8:	bf18      	it	ne
 800a2da:	81a3      	strhne	r3, [r4, #12]
 800a2dc:	bd10      	pop	{r4, pc}

0800a2de <__sclose>:
 800a2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2e2:	f000 b813 	b.w	800a30c <_close_r>
	...

0800a2e8 <_write_r>:
 800a2e8:	b538      	push	{r3, r4, r5, lr}
 800a2ea:	4c07      	ldr	r4, [pc, #28]	; (800a308 <_write_r+0x20>)
 800a2ec:	4605      	mov	r5, r0
 800a2ee:	4608      	mov	r0, r1
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	6022      	str	r2, [r4, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	f7f7 f836 	bl	8001368 <_write>
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	d102      	bne.n	800a306 <_write_r+0x1e>
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	b103      	cbz	r3, 800a306 <_write_r+0x1e>
 800a304:	602b      	str	r3, [r5, #0]
 800a306:	bd38      	pop	{r3, r4, r5, pc}
 800a308:	20000614 	.word	0x20000614

0800a30c <_close_r>:
 800a30c:	b538      	push	{r3, r4, r5, lr}
 800a30e:	4c06      	ldr	r4, [pc, #24]	; (800a328 <_close_r+0x1c>)
 800a310:	2300      	movs	r3, #0
 800a312:	4605      	mov	r5, r0
 800a314:	4608      	mov	r0, r1
 800a316:	6023      	str	r3, [r4, #0]
 800a318:	f7f7 f842 	bl	80013a0 <_close>
 800a31c:	1c43      	adds	r3, r0, #1
 800a31e:	d102      	bne.n	800a326 <_close_r+0x1a>
 800a320:	6823      	ldr	r3, [r4, #0]
 800a322:	b103      	cbz	r3, 800a326 <_close_r+0x1a>
 800a324:	602b      	str	r3, [r5, #0]
 800a326:	bd38      	pop	{r3, r4, r5, pc}
 800a328:	20000614 	.word	0x20000614

0800a32c <_fstat_r>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	4c07      	ldr	r4, [pc, #28]	; (800a34c <_fstat_r+0x20>)
 800a330:	2300      	movs	r3, #0
 800a332:	4605      	mov	r5, r0
 800a334:	4608      	mov	r0, r1
 800a336:	4611      	mov	r1, r2
 800a338:	6023      	str	r3, [r4, #0]
 800a33a:	f7f7 f83d 	bl	80013b8 <_fstat>
 800a33e:	1c43      	adds	r3, r0, #1
 800a340:	d102      	bne.n	800a348 <_fstat_r+0x1c>
 800a342:	6823      	ldr	r3, [r4, #0]
 800a344:	b103      	cbz	r3, 800a348 <_fstat_r+0x1c>
 800a346:	602b      	str	r3, [r5, #0]
 800a348:	bd38      	pop	{r3, r4, r5, pc}
 800a34a:	bf00      	nop
 800a34c:	20000614 	.word	0x20000614

0800a350 <_isatty_r>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	4c06      	ldr	r4, [pc, #24]	; (800a36c <_isatty_r+0x1c>)
 800a354:	2300      	movs	r3, #0
 800a356:	4605      	mov	r5, r0
 800a358:	4608      	mov	r0, r1
 800a35a:	6023      	str	r3, [r4, #0]
 800a35c:	f7f7 f83c 	bl	80013d8 <_isatty>
 800a360:	1c43      	adds	r3, r0, #1
 800a362:	d102      	bne.n	800a36a <_isatty_r+0x1a>
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	b103      	cbz	r3, 800a36a <_isatty_r+0x1a>
 800a368:	602b      	str	r3, [r5, #0]
 800a36a:	bd38      	pop	{r3, r4, r5, pc}
 800a36c:	20000614 	.word	0x20000614

0800a370 <_lseek_r>:
 800a370:	b538      	push	{r3, r4, r5, lr}
 800a372:	4c07      	ldr	r4, [pc, #28]	; (800a390 <_lseek_r+0x20>)
 800a374:	4605      	mov	r5, r0
 800a376:	4608      	mov	r0, r1
 800a378:	4611      	mov	r1, r2
 800a37a:	2200      	movs	r2, #0
 800a37c:	6022      	str	r2, [r4, #0]
 800a37e:	461a      	mov	r2, r3
 800a380:	f7f7 f835 	bl	80013ee <_lseek>
 800a384:	1c43      	adds	r3, r0, #1
 800a386:	d102      	bne.n	800a38e <_lseek_r+0x1e>
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	b103      	cbz	r3, 800a38e <_lseek_r+0x1e>
 800a38c:	602b      	str	r3, [r5, #0]
 800a38e:	bd38      	pop	{r3, r4, r5, pc}
 800a390:	20000614 	.word	0x20000614

0800a394 <__malloc_lock>:
 800a394:	4770      	bx	lr

0800a396 <__malloc_unlock>:
 800a396:	4770      	bx	lr

0800a398 <_read_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	4c07      	ldr	r4, [pc, #28]	; (800a3b8 <_read_r+0x20>)
 800a39c:	4605      	mov	r5, r0
 800a39e:	4608      	mov	r0, r1
 800a3a0:	4611      	mov	r1, r2
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	6022      	str	r2, [r4, #0]
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	f7f6 ffc1 	bl	800132e <_read>
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	d102      	bne.n	800a3b6 <_read_r+0x1e>
 800a3b0:	6823      	ldr	r3, [r4, #0]
 800a3b2:	b103      	cbz	r3, 800a3b6 <_read_r+0x1e>
 800a3b4:	602b      	str	r3, [r5, #0]
 800a3b6:	bd38      	pop	{r3, r4, r5, pc}
 800a3b8:	20000614 	.word	0x20000614

0800a3bc <_init>:
 800a3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3be:	bf00      	nop
 800a3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3c2:	bc08      	pop	{r3}
 800a3c4:	469e      	mov	lr, r3
 800a3c6:	4770      	bx	lr

0800a3c8 <_fini>:
 800a3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ca:	bf00      	nop
 800a3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ce:	bc08      	pop	{r3}
 800a3d0:	469e      	mov	lr, r3
 800a3d2:	4770      	bx	lr
