
ptm-machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000215c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  080022e4  080022e4  000122e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002828  08002828  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08002828  08002828  00012828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002830  08002830  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002830  08002830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002834  08002834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000014  0800284c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  0800284c  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7c1  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018c6  00000000  00000000  0002a805  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000748  00000000  00000000  0002c0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000668  00000000  00000000  0002c818  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000210d5  00000000  00000000  0002ce80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000074ba  00000000  00000000  0004df55  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2161  00000000  00000000  0005540f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00117570  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bc0  00000000  00000000  001175ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022cc 	.word	0x080022cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080022cc 	.word	0x080022cc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <programistScreen>:
void emptyTankScreen(){
	LCD_DisplayString(10,20,"THERE IS",&Font16,LCD_BACKGROUND,RED);
	LCD_DisplayString(10,40,"NO LIQUID ",&Font16,LCD_BACKGROUND,RED);
}

void programistScreen(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af02      	add	r7, sp, #8
		LCD_DisplayString(10,20,"servo 70",&Font12,LCD_BACKGROUND,BLUE);
 80004ce:	231f      	movs	r3, #31
 80004d0:	9301      	str	r3, [sp, #4]
 80004d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <programistScreen+0x64>)
 80004da:	4a15      	ldr	r2, [pc, #84]	; (8000530 <programistScreen+0x68>)
 80004dc:	2114      	movs	r1, #20
 80004de:	200a      	movs	r0, #10
 80004e0:	f000 fbd2 	bl	8000c88 <LCD_DisplayString>
		LCD_DisplayString(10,40,"cup distance 14",&Font12,LCD_BACKGROUND,BLUE);
 80004e4:	231f      	movs	r3, #31
 80004e6:	9301      	str	r3, [sp, #4]
 80004e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <programistScreen+0x64>)
 80004f0:	4a10      	ldr	r2, [pc, #64]	; (8000534 <programistScreen+0x6c>)
 80004f2:	2128      	movs	r1, #40	; 0x28
 80004f4:	200a      	movs	r0, #10
 80004f6:	f000 fbc7 	bl	8000c88 <LCD_DisplayString>
		LCD_DisplayString(10,60,"engine 1 true",&Font12,LCD_BACKGROUND,BLUE);
 80004fa:	231f      	movs	r3, #31
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <programistScreen+0x64>)
 8000506:	4a0c      	ldr	r2, [pc, #48]	; (8000538 <programistScreen+0x70>)
 8000508:	213c      	movs	r1, #60	; 0x3c
 800050a:	200a      	movs	r0, #10
 800050c:	f000 fbbc 	bl	8000c88 <LCD_DisplayString>
		LCD_DisplayString(10,80,"engine 2 false",&Font12,LCD_BACKGROUND,BLUE);
 8000510:	231f      	movs	r3, #31
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	4b04      	ldr	r3, [pc, #16]	; (800052c <programistScreen+0x64>)
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <programistScreen+0x74>)
 800051e:	2150      	movs	r1, #80	; 0x50
 8000520:	200a      	movs	r0, #10
 8000522:	f000 fbb1 	bl	8000c88 <LCD_DisplayString>
	}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000000 	.word	0x20000000
 8000530:	08002368 	.word	0x08002368
 8000534:	08002374 	.word	0x08002374
 8000538:	08002384 	.word	0x08002384
 800053c:	08002394 	.word	0x08002394

08000540 <LCD_Reset>:
***********************************************************************************************************************/
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_Reset(void){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	LCD_RST_1;
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 7100 	mov.w	r1, #512	; 0x200
 800054a:	480d      	ldr	r0, [pc, #52]	; (8000580 <LCD_Reset+0x40>)
 800054c:	f001 f9c2 	bl	80018d4 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 8000550:	2064      	movs	r0, #100	; 0x64
 8000552:	f000 fc25 	bl	8000da0 <Driver_Delay_ms>
	LCD_RST_0;
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055c:	4808      	ldr	r0, [pc, #32]	; (8000580 <LCD_Reset+0x40>)
 800055e:	f001 f9b9 	bl	80018d4 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 8000562:	2064      	movs	r0, #100	; 0x64
 8000564:	f000 fc1c 	bl	8000da0 <Driver_Delay_ms>
	LCD_RST_1;
 8000568:	2201      	movs	r2, #1
 800056a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056e:	4804      	ldr	r0, [pc, #16]	; (8000580 <LCD_Reset+0x40>)
 8000570:	f001 f9b0 	bl	80018d4 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 8000574:	2064      	movs	r0, #100	; 0x64
 8000576:	f000 fc13 	bl	8000da0 <Driver_Delay_ms>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40020000 	.word	0x40020000

08000584 <LCD_WriteReg>:

/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_WriteReg(uint8_t Reg){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	LCD_DC_0;
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000594:	480a      	ldr	r0, [pc, #40]	; (80005c0 <LCD_WriteReg+0x3c>)
 8000596:	f001 f99d 	bl	80018d4 <HAL_GPIO_WritePin>
	LCD_CS_0;
 800059a:	2200      	movs	r2, #0
 800059c:	2140      	movs	r1, #64	; 0x40
 800059e:	4809      	ldr	r0, [pc, #36]	; (80005c4 <LCD_WriteReg+0x40>)
 80005a0:	f001 f998 	bl	80018d4 <HAL_GPIO_WritePin>
	SPI_Write_Byte(Reg);
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fbc0 	bl	8000d2c <SPI_Write_Byte>
	LCD_CS_1;
 80005ac:	2201      	movs	r2, #1
 80005ae:	2140      	movs	r1, #64	; 0x40
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <LCD_WriteReg+0x40>)
 80005b2:	f001 f98f 	bl	80018d4 <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40020000 	.word	0x40020000
 80005c4:	40020400 	.word	0x40020400

080005c8 <LCD_WriteData_8Bit>:

static void LCD_WriteData_8Bit(uint8_t Data){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	LCD_DC_1;
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d8:	480a      	ldr	r0, [pc, #40]	; (8000604 <LCD_WriteData_8Bit+0x3c>)
 80005da:	f001 f97b 	bl	80018d4 <HAL_GPIO_WritePin>
	LCD_CS_0;
 80005de:	2200      	movs	r2, #0
 80005e0:	2140      	movs	r1, #64	; 0x40
 80005e2:	4809      	ldr	r0, [pc, #36]	; (8000608 <LCD_WriteData_8Bit+0x40>)
 80005e4:	f001 f976 	bl	80018d4 <HAL_GPIO_WritePin>
	SPI_Write_Byte(Data);
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fb9e 	bl	8000d2c <SPI_Write_Byte>
	LCD_CS_1;
 80005f0:	2201      	movs	r2, #1
 80005f2:	2140      	movs	r1, #64	; 0x40
 80005f4:	4804      	ldr	r0, [pc, #16]	; (8000608 <LCD_WriteData_8Bit+0x40>)
 80005f6:	f001 f96d 	bl	80018d4 <HAL_GPIO_WritePin>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40020000 	.word	0x40020000
 8000608:	40020400 	.word	0x40020400

0800060c <LCD_WriteData_NLen16Bit>:
	SPI_Write_Byte(Data >> 8);
	SPI_Write_Byte(Data & 0XFF);
	LCD_CS_1;
}

static void LCD_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen){
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	6039      	str	r1, [r7, #0]
 8000616:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	LCD_DC_1;
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061e:	4813      	ldr	r0, [pc, #76]	; (800066c <LCD_WriteData_NLen16Bit+0x60>)
 8000620:	f001 f958 	bl	80018d4 <HAL_GPIO_WritePin>
	LCD_CS_0;
 8000624:	2200      	movs	r2, #0
 8000626:	2140      	movs	r1, #64	; 0x40
 8000628:	4811      	ldr	r0, [pc, #68]	; (8000670 <LCD_WriteData_NLen16Bit+0x64>)
 800062a:	f001 f953 	bl	80018d4 <HAL_GPIO_WritePin>
	for(i = 0; i < DataLen; i++){
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e00e      	b.n	8000652 <LCD_WriteData_NLen16Bit+0x46>
		SPI_Write_Byte( (uint8_t)(Data >> 8) );
 8000634:	88fb      	ldrh	r3, [r7, #6]
 8000636:	0a1b      	lsrs	r3, r3, #8
 8000638:	b29b      	uxth	r3, r3
 800063a:	b2db      	uxtb	r3, r3
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fb75 	bl	8000d2c <SPI_Write_Byte>
		SPI_Write_Byte( (uint8_t)(Data & 0XFF) );
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fb70 	bl	8000d2c <SPI_Write_Byte>
	for(i = 0; i < DataLen; i++){
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	429a      	cmp	r2, r3
 8000658:	d3ec      	bcc.n	8000634 <LCD_WriteData_NLen16Bit+0x28>
	}	
	LCD_CS_1;
 800065a:	2201      	movs	r2, #1
 800065c:	2140      	movs	r1, #64	; 0x40
 800065e:	4804      	ldr	r0, [pc, #16]	; (8000670 <LCD_WriteData_NLen16Bit+0x64>)
 8000660:	f001 f938 	bl	80018d4 <HAL_GPIO_WritePin>
}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40020000 	.word	0x40020000
 8000670:	40020400 	.word	0x40020400

08000674 <LCD_InitReg>:

/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_InitReg(void){	
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	//ST7735R Frame Rate
	LCD_WriteReg(0xB1); 
 8000678:	20b1      	movs	r0, #177	; 0xb1
 800067a:	f7ff ff83 	bl	8000584 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 800067e:	2001      	movs	r0, #1
 8000680:	f7ff ffa2 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 8000684:	202c      	movs	r0, #44	; 0x2c
 8000686:	f7ff ff9f 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 800068a:	202d      	movs	r0, #45	; 0x2d
 800068c:	f7ff ff9c 	bl	80005c8 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xB2); 
 8000690:	20b2      	movs	r0, #178	; 0xb2
 8000692:	f7ff ff77 	bl	8000584 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff ff96 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 800069c:	202c      	movs	r0, #44	; 0x2c
 800069e:	f7ff ff93 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 80006a2:	202d      	movs	r0, #45	; 0x2d
 80006a4:	f7ff ff90 	bl	80005c8 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xB3); 
 80006a8:	20b3      	movs	r0, #179	; 0xb3
 80006aa:	f7ff ff6b 	bl	8000584 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 80006ae:	2001      	movs	r0, #1
 80006b0:	f7ff ff8a 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 80006b4:	202c      	movs	r0, #44	; 0x2c
 80006b6:	f7ff ff87 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 80006ba:	202d      	movs	r0, #45	; 0x2d
 80006bc:	f7ff ff84 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x01); 
 80006c0:	2001      	movs	r0, #1
 80006c2:	f7ff ff81 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 80006c6:	202c      	movs	r0, #44	; 0x2c
 80006c8:	f7ff ff7e 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 80006cc:	202d      	movs	r0, #45	; 0x2d
 80006ce:	f7ff ff7b 	bl	80005c8 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xB4); //Column inversion 
 80006d2:	20b4      	movs	r0, #180	; 0xb4
 80006d4:	f7ff ff56 	bl	8000584 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x07); 
 80006d8:	2007      	movs	r0, #7
 80006da:	f7ff ff75 	bl	80005c8 <LCD_WriteData_8Bit>
	
	//ST7735R Power Sequence
	LCD_WriteReg(0xC0); 
 80006de:	20c0      	movs	r0, #192	; 0xc0
 80006e0:	f7ff ff50 	bl	8000584 <LCD_WriteReg>
	LCD_WriteData_8Bit(0xA2); 
 80006e4:	20a2      	movs	r0, #162	; 0xa2
 80006e6:	f7ff ff6f 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x02); 
 80006ea:	2002      	movs	r0, #2
 80006ec:	f7ff ff6c 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x84); 
 80006f0:	2084      	movs	r0, #132	; 0x84
 80006f2:	f7ff ff69 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteReg(0xC1); 
 80006f6:	20c1      	movs	r0, #193	; 0xc1
 80006f8:	f7ff ff44 	bl	8000584 <LCD_WriteReg>
	LCD_WriteData_8Bit(0xC5); 
 80006fc:	20c5      	movs	r0, #197	; 0xc5
 80006fe:	f7ff ff63 	bl	80005c8 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xC2); 
 8000702:	20c2      	movs	r0, #194	; 0xc2
 8000704:	f7ff ff3e 	bl	8000584 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0A); 
 8000708:	200a      	movs	r0, #10
 800070a:	f7ff ff5d 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff ff5a 	bl	80005c8 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xC3); 
 8000714:	20c3      	movs	r0, #195	; 0xc3
 8000716:	f7ff ff35 	bl	8000584 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x8A); 
 800071a:	208a      	movs	r0, #138	; 0x8a
 800071c:	f7ff ff54 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2A); 
 8000720:	202a      	movs	r0, #42	; 0x2a
 8000722:	f7ff ff51 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteReg(0xC4); 
 8000726:	20c4      	movs	r0, #196	; 0xc4
 8000728:	f7ff ff2c 	bl	8000584 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x8A); 
 800072c:	208a      	movs	r0, #138	; 0x8a
 800072e:	f7ff ff4b 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0xEE); 
 8000732:	20ee      	movs	r0, #238	; 0xee
 8000734:	f7ff ff48 	bl	80005c8 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xC5); //VCOM 
 8000738:	20c5      	movs	r0, #197	; 0xc5
 800073a:	f7ff ff23 	bl	8000584 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0E); 
 800073e:	200e      	movs	r0, #14
 8000740:	f7ff ff42 	bl	80005c8 <LCD_WriteData_8Bit>
	
	//ST7735R Gamma Sequence
	LCD_WriteReg(0xe0); 
 8000744:	20e0      	movs	r0, #224	; 0xe0
 8000746:	f7ff ff1d 	bl	8000584 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0f); 
 800074a:	200f      	movs	r0, #15
 800074c:	f7ff ff3c 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1a); 
 8000750:	201a      	movs	r0, #26
 8000752:	f7ff ff39 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x0f); 
 8000756:	200f      	movs	r0, #15
 8000758:	f7ff ff36 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x18); 
 800075c:	2018      	movs	r0, #24
 800075e:	f7ff ff33 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2f); 
 8000762:	202f      	movs	r0, #47	; 0x2f
 8000764:	f7ff ff30 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x28); 
 8000768:	2028      	movs	r0, #40	; 0x28
 800076a:	f7ff ff2d 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x20); 
 800076e:	2020      	movs	r0, #32
 8000770:	f7ff ff2a 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x22); 
 8000774:	2022      	movs	r0, #34	; 0x22
 8000776:	f7ff ff27 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1f); 
 800077a:	201f      	movs	r0, #31
 800077c:	f7ff ff24 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1b); 
 8000780:	201b      	movs	r0, #27
 8000782:	f7ff ff21 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x23); 
 8000786:	2023      	movs	r0, #35	; 0x23
 8000788:	f7ff ff1e 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x37); 
 800078c:	2037      	movs	r0, #55	; 0x37
 800078e:	f7ff ff1b 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 	
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff ff18 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x07); 
 8000798:	2007      	movs	r0, #7
 800079a:	f7ff ff15 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x02); 
 800079e:	2002      	movs	r0, #2
 80007a0:	f7ff ff12 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x10); 
 80007a4:	2010      	movs	r0, #16
 80007a6:	f7ff ff0f 	bl	80005c8 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xe1); 
 80007aa:	20e1      	movs	r0, #225	; 0xe1
 80007ac:	f7ff feea 	bl	8000584 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0f); 
 80007b0:	200f      	movs	r0, #15
 80007b2:	f7ff ff09 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1b); 
 80007b6:	201b      	movs	r0, #27
 80007b8:	f7ff ff06 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x0f); 
 80007bc:	200f      	movs	r0, #15
 80007be:	f7ff ff03 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x17); 
 80007c2:	2017      	movs	r0, #23
 80007c4:	f7ff ff00 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x33); 
 80007c8:	2033      	movs	r0, #51	; 0x33
 80007ca:	f7ff fefd 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2c); 
 80007ce:	202c      	movs	r0, #44	; 0x2c
 80007d0:	f7ff fefa 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x29); 
 80007d4:	2029      	movs	r0, #41	; 0x29
 80007d6:	f7ff fef7 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2e); 
 80007da:	202e      	movs	r0, #46	; 0x2e
 80007dc:	f7ff fef4 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x30); 
 80007e0:	2030      	movs	r0, #48	; 0x30
 80007e2:	f7ff fef1 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x30); 
 80007e6:	2030      	movs	r0, #48	; 0x30
 80007e8:	f7ff feee 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x39); 
 80007ec:	2039      	movs	r0, #57	; 0x39
 80007ee:	f7ff feeb 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x3f); 
 80007f2:	203f      	movs	r0, #63	; 0x3f
 80007f4:	f7ff fee8 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 
 80007f8:	2000      	movs	r0, #0
 80007fa:	f7ff fee5 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x07); 
 80007fe:	2007      	movs	r0, #7
 8000800:	f7ff fee2 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x03); 
 8000804:	2003      	movs	r0, #3
 8000806:	f7ff fedf 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x10);  
 800080a:	2010      	movs	r0, #16
 800080c:	f7ff fedc 	bl	80005c8 <LCD_WriteData_8Bit>
		
	LCD_WriteReg(0xF0); //Enable test command  
 8000810:	20f0      	movs	r0, #240	; 0xf0
 8000812:	f7ff feb7 	bl	8000584 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 8000816:	2001      	movs	r0, #1
 8000818:	f7ff fed6 	bl	80005c8 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xF6); //Disable ram power save mode 
 800081c:	20f6      	movs	r0, #246	; 0xf6
 800081e:	f7ff feb1 	bl	8000584 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x00); 
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff fed0 	bl	80005c8 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0x3A); //65k mode 
 8000828:	203a      	movs	r0, #58	; 0x3a
 800082a:	f7ff feab 	bl	8000584 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x05); 
 800082e:	2005      	movs	r0, #5
 8000830:	f7ff feca 	bl	80005c8 <LCD_WriteData_8Bit>
		
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}

08000838 <LCD_SetGramScanWay>:
function:	Set the display scan and color transfer modes
parameter: 
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_SetGramScanWay(LCD_SCAN_DIR Scan_dir){		
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	//Get the screen scan direction
	sLCD_DIS.LCD_Scan_Dir = Scan_dir;
 8000842:	4a34      	ldr	r2, [pc, #208]	; (8000914 <LCD_SetGramScanWay+0xdc>)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	7113      	strb	r3, [r2, #4]
	
	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U){
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d008      	beq.n	8000860 <LCD_SetGramScanWay+0x28>
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d005      	beq.n	8000860 <LCD_SetGramScanWay+0x28>
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b02      	cmp	r3, #2
 8000858:	d002      	beq.n	8000860 <LCD_SetGramScanWay+0x28>
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b03      	cmp	r3, #3
 800085e:	d10c      	bne.n	800087a <LCD_SetGramScanWay+0x42>
		sLCD_DIS.LCD_Dis_Column	= LCD_HEIGHT ;
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <LCD_SetGramScanWay+0xdc>)
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	801a      	strh	r2, [r3, #0]
		sLCD_DIS.LCD_Dis_Page = LCD_WIDTH ;		
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <LCD_SetGramScanWay+0xdc>)
 8000868:	22a0      	movs	r2, #160	; 0xa0
 800086a:	805a      	strh	r2, [r3, #2]
		sLCD_DIS.LCD_X_Adjust = LCD_X;
 800086c:	4b29      	ldr	r3, [pc, #164]	; (8000914 <LCD_SetGramScanWay+0xdc>)
 800086e:	2202      	movs	r2, #2
 8000870:	80da      	strh	r2, [r3, #6]
		sLCD_DIS.LCD_Y_Adjust = LCD_Y;
 8000872:	4b28      	ldr	r3, [pc, #160]	; (8000914 <LCD_SetGramScanWay+0xdc>)
 8000874:	2201      	movs	r2, #1
 8000876:	811a      	strh	r2, [r3, #8]
 8000878:	e00b      	b.n	8000892 <LCD_SetGramScanWay+0x5a>
	}else{
		sLCD_DIS.LCD_Dis_Column	= LCD_WIDTH ;
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <LCD_SetGramScanWay+0xdc>)
 800087c:	22a0      	movs	r2, #160	; 0xa0
 800087e:	801a      	strh	r2, [r3, #0]
		sLCD_DIS.LCD_Dis_Page = LCD_HEIGHT ;	
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <LCD_SetGramScanWay+0xdc>)
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	805a      	strh	r2, [r3, #2]
		sLCD_DIS.LCD_X_Adjust = LCD_Y;
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <LCD_SetGramScanWay+0xdc>)
 8000888:	2201      	movs	r2, #1
 800088a:	80da      	strh	r2, [r3, #6]
		sLCD_DIS.LCD_Y_Adjust = LCD_X;
 800088c:	4b21      	ldr	r3, [pc, #132]	; (8000914 <LCD_SetGramScanWay+0xdc>)
 800088e:	2202      	movs	r2, #2
 8000890:	811a      	strh	r2, [r3, #8]
	}
	
	// Gets the scan direction of GRAM
	uint16_t MemoryAccessReg_Data=0;  //0x36	
 8000892:	2300      	movs	r3, #0
 8000894:	81fb      	strh	r3, [r7, #14]
	switch (Scan_dir){				
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b07      	cmp	r3, #7
 800089a:	d82b      	bhi.n	80008f4 <LCD_SetGramScanWay+0xbc>
 800089c:	a201      	add	r2, pc, #4	; (adr r2, 80008a4 <LCD_SetGramScanWay+0x6c>)
 800089e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a2:	bf00      	nop
 80008a4:	080008c5 	.word	0x080008c5
 80008a8:	080008cb 	.word	0x080008cb
 80008ac:	080008d1 	.word	0x080008d1
 80008b0:	080008d7 	.word	0x080008d7
 80008b4:	080008dd 	.word	0x080008dd
 80008b8:	080008e3 	.word	0x080008e3
 80008bc:	080008e9 	.word	0x080008e9
 80008c0:	080008ef 	.word	0x080008ef
		case L2R_U2D:
			MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 80008c4:	2300      	movs	r3, #0
 80008c6:	81fb      	strh	r3, [r7, #14]
			break;
 80008c8:	e014      	b.n	80008f4 <LCD_SetGramScanWay+0xbc>
		case L2R_D2U:
			MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 80008ca:	2380      	movs	r3, #128	; 0x80
 80008cc:	81fb      	strh	r3, [r7, #14]
			break;
 80008ce:	e011      	b.n	80008f4 <LCD_SetGramScanWay+0xbc>
		case R2L_U2D://	0X4
			MemoryAccessReg_Data = 0x40 | 0x00;
 80008d0:	2340      	movs	r3, #64	; 0x40
 80008d2:	81fb      	strh	r3, [r7, #14]
			break;
 80008d4:	e00e      	b.n	80008f4 <LCD_SetGramScanWay+0xbc>
		case R2L_D2U://	0XC
			MemoryAccessReg_Data = 0x40 | 0x80;
 80008d6:	23c0      	movs	r3, #192	; 0xc0
 80008d8:	81fb      	strh	r3, [r7, #14]
			break;
 80008da:	e00b      	b.n	80008f4 <LCD_SetGramScanWay+0xbc>
		case U2D_L2R://0X2
			MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 80008dc:	2320      	movs	r3, #32
 80008de:	81fb      	strh	r3, [r7, #14]
			break;
 80008e0:	e008      	b.n	80008f4 <LCD_SetGramScanWay+0xbc>
		case U2D_R2L://0X6
			MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 80008e2:	2360      	movs	r3, #96	; 0x60
 80008e4:	81fb      	strh	r3, [r7, #14]
			break;
 80008e6:	e005      	b.n	80008f4 <LCD_SetGramScanWay+0xbc>
		case D2U_L2R://0XA
			MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 80008e8:	23a0      	movs	r3, #160	; 0xa0
 80008ea:	81fb      	strh	r3, [r7, #14]
			break;
 80008ec:	e002      	b.n	80008f4 <LCD_SetGramScanWay+0xbc>
		case D2U_R2L://0XE
			MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 80008ee:	23e0      	movs	r3, #224	; 0xe0
 80008f0:	81fb      	strh	r3, [r7, #14]
			break;
 80008f2:	bf00      	nop
	}
	

	// Set the read / write scan direction of the frame memory
	LCD_WriteReg(0x36); //MX, MY, RGB mode 	
 80008f4:	2036      	movs	r0, #54	; 0x36
 80008f6:	f7ff fe45 	bl	8000584 <LCD_WriteReg>
#if defined(LCD_1IN44)
	LCD_WriteData_8Bit( MemoryAccessReg_Data | 0x08);	//0x08 set RGB
#elif defined(LCD_1IN8)
	LCD_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 80008fa:	89fb      	ldrh	r3, [r7, #14]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	f023 0308 	bic.w	r3, r3, #8
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fe5f 	bl	80005c8 <LCD_WriteData_8Bit>
#endif
	
}
 800090a:	bf00      	nop
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000088 	.word	0x20000088

08000918 <LCD_Init>:

/********************************************************************************
function:	
			initialization
********************************************************************************/
void LCD_Init( LCD_SCAN_DIR Lcd_ScanDir ){	
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
	//Turn on the backlight
	LCD_BL_1;
 8000922:	2201      	movs	r2, #1
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	480f      	ldr	r0, [pc, #60]	; (8000964 <LCD_Init+0x4c>)
 8000928:	f000 ffd4 	bl	80018d4 <HAL_GPIO_WritePin>
	
	//Hardware reset
	LCD_Reset(); 
 800092c:	f7ff fe08 	bl	8000540 <LCD_Reset>
	
	//Set the initialization register
	LCD_InitReg();
 8000930:	f7ff fea0 	bl	8000674 <LCD_InitReg>
	
	//Set the display scan and color transfer modes	
	LCD_SetGramScanWay( Lcd_ScanDir );
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ff7e 	bl	8000838 <LCD_SetGramScanWay>
	Driver_Delay_ms(200); 
 800093c:	20c8      	movs	r0, #200	; 0xc8
 800093e:	f000 fa2f 	bl	8000da0 <Driver_Delay_ms>
	
	//sleep out
	LCD_WriteReg(0x11);
 8000942:	2011      	movs	r0, #17
 8000944:	f7ff fe1e 	bl	8000584 <LCD_WriteReg>
	Driver_Delay_ms(120);
 8000948:	2078      	movs	r0, #120	; 0x78
 800094a:	f000 fa29 	bl	8000da0 <Driver_Delay_ms>
	
	//Turn on the LCD display
	LCD_WriteReg(0x29);	
 800094e:	2029      	movs	r0, #41	; 0x29
 8000950:	f7ff fe18 	bl	8000584 <LCD_WriteReg>

	//clear
	LCD_Clear(WHITE);	
 8000954:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000958:	f000 f8d8 	bl	8000b0c <LCD_Clear>
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40020800 	.word	0x40020800

08000968 <LCD_SetWindows>:
		Xstart 	:   X direction Start coordinates
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend ){
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4604      	mov	r4, r0
 8000970:	4608      	mov	r0, r1
 8000972:	4611      	mov	r1, r2
 8000974:	461a      	mov	r2, r3
 8000976:	4623      	mov	r3, r4
 8000978:	80fb      	strh	r3, [r7, #6]
 800097a:	4603      	mov	r3, r0
 800097c:	80bb      	strh	r3, [r7, #4]
 800097e:	460b      	mov	r3, r1
 8000980:	807b      	strh	r3, [r7, #2]
 8000982:	4613      	mov	r3, r2
 8000984:	803b      	strh	r3, [r7, #0]

	//set the X coordinates
	LCD_WriteReg ( 0x2A ); 				
 8000986:	202a      	movs	r0, #42	; 0x2a
 8000988:	f7ff fdfc 	bl	8000584 <LCD_WriteReg>
	LCD_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 800098c:	2000      	movs	r0, #0
 800098e:	f7ff fe1b 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (Xstart & 0xff) + sLCD_DIS.LCD_X_Adjust);			//Set the horizontal starting point to the low octet
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <LCD_SetWindows+0xa8>)
 8000998:	88db      	ldrh	r3, [r3, #6]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	4413      	add	r3, r2
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fe11 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff fe0e 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_DIS.LCD_X_Adjust);	//Set the horizontal end to the low octet
 80009ac:	887b      	ldrh	r3, [r7, #2]
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <LCD_SetWindows+0xa8>)
 80009b2:	88db      	ldrh	r3, [r3, #6]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4413      	add	r3, r2
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	3b01      	subs	r3, #1
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fe02 	bl	80005c8 <LCD_WriteData_8Bit>

	//set the Y coordinates
	LCD_WriteReg ( 0x2B );
 80009c4:	202b      	movs	r0, #43	; 0x2b
 80009c6:	f7ff fddd 	bl	8000584 <LCD_WriteReg>
	LCD_WriteData_8Bit ( 0x00 );
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff fdfc 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (Ystart & 0xff) + sLCD_DIS.LCD_Y_Adjust);
 80009d0:	88bb      	ldrh	r3, [r7, #4]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <LCD_SetWindows+0xa8>)
 80009d6:	891b      	ldrh	r3, [r3, #8]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4413      	add	r3, r2
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fdf2 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( 0x00 );
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff fdef 	bl	80005c8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_DIS.LCD_Y_Adjust);
 80009ea:	883b      	ldrh	r3, [r7, #0]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <LCD_SetWindows+0xa8>)
 80009f0:	891b      	ldrh	r3, [r3, #8]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	4413      	add	r3, r2
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	3b01      	subs	r3, #1
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fde3 	bl	80005c8 <LCD_WriteData_8Bit>
		
	LCD_WriteReg(0x2C);	
 8000a02:	202c      	movs	r0, #44	; 0x2c
 8000a04:	f7ff fdbe 	bl	8000584 <LCD_WriteReg>
	
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd90      	pop	{r4, r7, pc}
 8000a10:	20000088 	.word	0x20000088

08000a14 <LCD_SetCursor>:
function:	Set the display point (Xpoint, Ypoint)
parameter: 
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_SetCursor ( POINT Xpoint, POINT Ypoint ){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	460a      	mov	r2, r1
 8000a1e:	80fb      	strh	r3, [r7, #6]
 8000a20:	4613      	mov	r3, r2
 8000a22:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	88fa      	ldrh	r2, [r7, #6]
 8000a28:	88b9      	ldrh	r1, [r7, #4]
 8000a2a:	88f8      	ldrh	r0, [r7, #6]
 8000a2c:	f7ff ff9c 	bl	8000968 <LCD_SetWindows>
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <LCD_SetColor>:
function:	Set show color
parameter: 
		Color  :   Set show color
********************************************************************************/
//static void LCD_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint){		
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]
 8000a42:	460b      	mov	r3, r1
 8000a44:	80bb      	strh	r3, [r7, #4]
 8000a46:	4613      	mov	r3, r2
 8000a48:	807b      	strh	r3, [r7, #2]
	LCD_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint); 
 8000a4a:	88bb      	ldrh	r3, [r7, #4]
 8000a4c:	887a      	ldrh	r2, [r7, #2]
 8000a4e:	fb02 f203 	mul.w	r2, r2, r3
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	4611      	mov	r1, r2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fdd8 	bl	800060c <LCD_WriteData_NLen16Bit>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <LCD_SetPointlColor>:
parameter: 
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_SetPointlColor ( POINT Xpoint, POINT Ypoint, COLOR Color ){	
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	80bb      	strh	r3, [r7, #4]
 8000a72:	4613      	mov	r3, r2
 8000a74:	807b      	strh	r3, [r7, #2]
	if ( ( Xpoint <= sLCD_DIS.LCD_Dis_Column ) && ( Ypoint <= sLCD_DIS.LCD_Dis_Page ) ){		
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <LCD_SetPointlColor+0x48>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	88fa      	ldrh	r2, [r7, #6]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d810      	bhi.n	8000aa2 <LCD_SetPointlColor+0x3e>
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <LCD_SetPointlColor+0x48>)
 8000a82:	885b      	ldrh	r3, [r3, #2]
 8000a84:	88ba      	ldrh	r2, [r7, #4]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d80b      	bhi.n	8000aa2 <LCD_SetPointlColor+0x3e>
		LCD_SetCursor (Xpoint, Ypoint);		
 8000a8a:	88ba      	ldrh	r2, [r7, #4]
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ffbf 	bl	8000a14 <LCD_SetCursor>
		LCD_SetColor ( Color , 1 , 1);
 8000a96:	887b      	ldrh	r3, [r7, #2]
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ffcb 	bl	8000a38 <LCD_SetColor>
	}
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000088 	.word	0x20000088

08000ab0 <LCD_SetArealColor>:
		Ystart :   Start point y coordinate
		Xend   :   End point coordinates
		Yend   :   End point coordinates
		Color  :   Set the color
********************************************************************************/
void LCD_SetArealColor (POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,	COLOR  Color){	
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	4608      	mov	r0, r1
 8000aba:	4611      	mov	r1, r2
 8000abc:	461a      	mov	r2, r3
 8000abe:	4623      	mov	r3, r4
 8000ac0:	80fb      	strh	r3, [r7, #6]
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80bb      	strh	r3, [r7, #4]
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	807b      	strh	r3, [r7, #2]
 8000aca:	4613      	mov	r3, r2
 8000acc:	803b      	strh	r3, [r7, #0]
	if((Xend > Xstart) && (Yend > Ystart)){			
 8000ace:	887a      	ldrh	r2, [r7, #2]
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d915      	bls.n	8000b02 <LCD_SetArealColor+0x52>
 8000ad6:	883a      	ldrh	r2, [r7, #0]
 8000ad8:	88bb      	ldrh	r3, [r7, #4]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d911      	bls.n	8000b02 <LCD_SetArealColor+0x52>
		LCD_SetWindows( Xstart , Ystart , Xend , Yend  );
 8000ade:	883b      	ldrh	r3, [r7, #0]
 8000ae0:	887a      	ldrh	r2, [r7, #2]
 8000ae2:	88b9      	ldrh	r1, [r7, #4]
 8000ae4:	88f8      	ldrh	r0, [r7, #6]
 8000ae6:	f7ff ff3f 	bl	8000968 <LCD_SetWindows>
		LCD_SetColor ( Color ,Xend - Xstart , Yend - Ystart );
 8000aea:	887a      	ldrh	r2, [r7, #2]
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	b299      	uxth	r1, r3
 8000af2:	883a      	ldrh	r2, [r7, #0]
 8000af4:	88bb      	ldrh	r3, [r7, #4]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	8b3b      	ldrh	r3, [r7, #24]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff9b 	bl	8000a38 <LCD_SetColor>
	}
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd90      	pop	{r4, r7, pc}
	...

08000b0c <LCD_Clear>:

/********************************************************************************
function:	
			Clear screen 
********************************************************************************/
void LCD_Clear(COLOR  Color){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af02      	add	r7, sp, #8
 8000b12:	4603      	mov	r3, r0
 8000b14:	80fb      	strh	r3, [r7, #6]

	LCD_SetArealColor(0,0, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page  , Color);	
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <LCD_Clear+0x28>)
 8000b18:	881a      	ldrh	r2, [r3, #0]
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <LCD_Clear+0x28>)
 8000b1c:	8859      	ldrh	r1, [r3, #2]
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	460b      	mov	r3, r1
 8000b24:	2100      	movs	r1, #0
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff ffc2 	bl	8000ab0 <LCD_SetArealColor>

}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000088 	.word	0x20000088

08000b38 <LCD_DisplayChar>:
			Font  ��A structure pointer that displays a character size
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
void LCD_DisplayChar( 	POINT Xpoint, POINT Ypoint, const char Acsii_Char,
						sFONT* Font, COLOR Color_Background,	COLOR Color_Foreground ){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	4603      	mov	r3, r0
 8000b42:	81fb      	strh	r3, [r7, #14]
 8000b44:	460b      	mov	r3, r1
 8000b46:	81bb      	strh	r3, [r7, #12]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	72fb      	strb	r3, [r7, #11]
	POINT Page, Column;
	
	if (Xpoint >= sLCD_DIS.LCD_Dis_Column || Ypoint >= sLCD_DIS.LCD_Dis_Page) {
 8000b4c:	4b4d      	ldr	r3, [pc, #308]	; (8000c84 <LCD_DisplayChar+0x14c>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	89fa      	ldrh	r2, [r7, #14]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	f080 8091 	bcs.w	8000c7a <LCD_DisplayChar+0x142>
 8000b58:	4b4a      	ldr	r3, [pc, #296]	; (8000c84 <LCD_DisplayChar+0x14c>)
 8000b5a:	885b      	ldrh	r3, [r3, #2]
 8000b5c:	89ba      	ldrh	r2, [r7, #12]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	f080 808b 	bcs.w	8000c7a <LCD_DisplayChar+0x142>
		return;
	}
	
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000b64:	7afb      	ldrb	r3, [r7, #11]
 8000b66:	3b20      	subs	r3, #32
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	88d2      	ldrh	r2, [r2, #6]
 8000b6c:	fb02 f303 	mul.w	r3, r2, r3
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	8892      	ldrh	r2, [r2, #4]
 8000b74:	08d2      	lsrs	r2, r2, #3
 8000b76:	b292      	uxth	r2, r2
 8000b78:	4611      	mov	r1, r2
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	8892      	ldrh	r2, [r2, #4]
 8000b7e:	f002 0207 	and.w	r2, r2, #7
 8000b82:	b292      	uxth	r2, r2
 8000b84:	2a00      	cmp	r2, #0
 8000b86:	bf14      	ite	ne
 8000b88:	2201      	movne	r2, #1
 8000b8a:	2200      	moveq	r2, #0
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440a      	add	r2, r1
 8000b90:	fb02 f303 	mul.w	r3, r2, r3
 8000b94:	617b      	str	r3, [r7, #20]
	const unsigned char* ptr = &Font->table[Char_Offset];
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]

	for ( Page = 0; Page < Font->Height; Page ++ ){
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	83fb      	strh	r3, [r7, #30]
 8000ba4:	e063      	b.n	8000c6e <LCD_DisplayChar+0x136>
		for ( Column = 0; Column < Font->Width; Column ++ ){
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	83bb      	strh	r3, [r7, #28]
 8000baa:	e04e      	b.n	8000c4a <LCD_DisplayChar+0x112>
			
			//To determine whether the font background color and screen background color is consistent
			if (FONT_BACKGROUND == Color_Background){//this process is to speed up the scan
 8000bac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d118      	bne.n	8000be8 <LCD_DisplayChar+0xb0>
				if (*ptr & (0x80 >> (Column % 8)))
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	8bbb      	ldrh	r3, [r7, #28]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	fa42 f303 	asr.w	r3, r2, r3
 8000bc8:	400b      	ands	r3, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d031      	beq.n	8000c32 <LCD_DisplayChar+0xfa>
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Foreground );
 8000bce:	89fa      	ldrh	r2, [r7, #14]
 8000bd0:	8bbb      	ldrh	r3, [r7, #28]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	b298      	uxth	r0, r3
 8000bd6:	89ba      	ldrh	r2, [r7, #12]
 8000bd8:	8bfb      	ldrh	r3, [r7, #30]
 8000bda:	4413      	add	r3, r2
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000be0:	4619      	mov	r1, r3
 8000be2:	f7ff ff3f 	bl	8000a64 <LCD_SetPointlColor>
 8000be6:	e024      	b.n	8000c32 <LCD_DisplayChar+0xfa>
			}else{
				if (*ptr & (0x80 >> (Column % 8))){
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	8bbb      	ldrh	r3, [r7, #28]
 8000bf0:	f003 0307 	and.w	r3, r3, #7
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	fa42 f303 	asr.w	r3, r2, r3
 8000bfa:	400b      	ands	r3, r1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d00c      	beq.n	8000c1a <LCD_DisplayChar+0xe2>
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Foreground );
 8000c00:	89fa      	ldrh	r2, [r7, #14]
 8000c02:	8bbb      	ldrh	r3, [r7, #28]
 8000c04:	4413      	add	r3, r2
 8000c06:	b298      	uxth	r0, r3
 8000c08:	89ba      	ldrh	r2, [r7, #12]
 8000c0a:	8bfb      	ldrh	r3, [r7, #30]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000c12:	4619      	mov	r1, r3
 8000c14:	f7ff ff26 	bl	8000a64 <LCD_SetPointlColor>
 8000c18:	e00b      	b.n	8000c32 <LCD_DisplayChar+0xfa>
				}else{
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Background );
 8000c1a:	89fa      	ldrh	r2, [r7, #14]
 8000c1c:	8bbb      	ldrh	r3, [r7, #28]
 8000c1e:	4413      	add	r3, r2
 8000c20:	b298      	uxth	r0, r3
 8000c22:	89ba      	ldrh	r2, [r7, #12]
 8000c24:	8bfb      	ldrh	r3, [r7, #30]
 8000c26:	4413      	add	r3, r2
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f7ff ff19 	bl	8000a64 <LCD_SetPointlColor>
				}
			}
			//One pixel is 8 bits
            if (Column % 8 == 7) {
 8000c32:	8bbb      	ldrh	r3, [r7, #28]
 8000c34:	f003 0307 	and.w	r3, r3, #7
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	2b07      	cmp	r3, #7
 8000c3c:	d102      	bne.n	8000c44 <LCD_DisplayChar+0x10c>
                ptr++;
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	3301      	adds	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
		for ( Column = 0; Column < Font->Width; Column ++ ){
 8000c44:	8bbb      	ldrh	r3, [r7, #28]
 8000c46:	3301      	adds	r3, #1
 8000c48:	83bb      	strh	r3, [r7, #28]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	889b      	ldrh	r3, [r3, #4]
 8000c4e:	8bba      	ldrh	r2, [r7, #28]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d3ab      	bcc.n	8000bac <LCD_DisplayChar+0x74>
            }	
		}/* Write a line */
		if (Font->Width % 8 != 0) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	889b      	ldrh	r3, [r3, #4]
 8000c58:	f003 0307 	and.w	r3, r3, #7
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <LCD_DisplayChar+0x130>
				ptr++;
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	3301      	adds	r3, #1
 8000c66:	61bb      	str	r3, [r7, #24]
	for ( Page = 0; Page < Font->Height; Page ++ ){
 8000c68:	8bfb      	ldrh	r3, [r7, #30]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	83fb      	strh	r3, [r7, #30]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	88db      	ldrh	r3, [r3, #6]
 8000c72:	8bfa      	ldrh	r2, [r7, #30]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d396      	bcc.n	8000ba6 <LCD_DisplayChar+0x6e>
 8000c78:	e000      	b.n	8000c7c <LCD_DisplayChar+0x144>
		return;
 8000c7a:	bf00      	nop
		}
	}/* Write all */
}
 8000c7c:	3720      	adds	r7, #32
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000088 	.word	0x20000088

08000c88 <LCD_DisplayString>:
			Font  ��A structure pointer that displays a character size
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
void LCD_DisplayString (	POINT Xstart, POINT Ystart, const char * pString, 
							sFONT* Font,COLOR Color_Background, COLOR Color_Foreground ){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af02      	add	r7, sp, #8
 8000c8e:	60ba      	str	r2, [r7, #8]
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4603      	mov	r3, r0
 8000c94:	81fb      	strh	r3, [r7, #14]
 8000c96:	460b      	mov	r3, r1
 8000c98:	81bb      	strh	r3, [r7, #12]
	POINT Xpoint = Xstart;
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	82fb      	strh	r3, [r7, #22]
	POINT Ypoint = Ystart;
 8000c9e:	89bb      	ldrh	r3, [r7, #12]
 8000ca0:	82bb      	strh	r3, [r7, #20]

	if (Xstart >= sLCD_DIS.LCD_Dis_Column || Ystart >= sLCD_DIS.LCD_Dis_Page) {
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <LCD_DisplayString+0xa0>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	89fa      	ldrh	r2, [r7, #14]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d238      	bcs.n	8000d1e <LCD_DisplayString+0x96>
 8000cac:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <LCD_DisplayString+0xa0>)
 8000cae:	885b      	ldrh	r3, [r3, #2]
 8000cb0:	89ba      	ldrh	r2, [r7, #12]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d233      	bcs.n	8000d1e <LCD_DisplayString+0x96>
		return;
	}
		
	while ( * pString != '\0')
 8000cb6:	e02d      	b.n	8000d14 <LCD_DisplayString+0x8c>
	{
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the height of the character
		if ( ( Xpoint + Font->Width ) > sLCD_DIS.LCD_Dis_Column ){
 8000cb8:	8afb      	ldrh	r3, [r7, #22]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	8892      	ldrh	r2, [r2, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <LCD_DisplayString+0xa0>)
 8000cc2:	8812      	ldrh	r2, [r2, #0]
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	dd06      	ble.n	8000cd6 <LCD_DisplayString+0x4e>
			Xpoint = Xstart;
 8000cc8:	89fb      	ldrh	r3, [r7, #14]
 8000cca:	82fb      	strh	r3, [r7, #22]
			Ypoint += Font->Height;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	88da      	ldrh	r2, [r3, #6]
 8000cd0:	8abb      	ldrh	r3, [r7, #20]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	82bb      	strh	r3, [r7, #20]
		}
		
		// If the Y direction is full, reposition to (Xstart, Ystart)
		if ( ( Ypoint  + Font->Height ) > sLCD_DIS.LCD_Dis_Page ){
 8000cd6:	8abb      	ldrh	r3, [r7, #20]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	88d2      	ldrh	r2, [r2, #6]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <LCD_DisplayString+0xa0>)
 8000ce0:	8852      	ldrh	r2, [r2, #2]
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	dd03      	ble.n	8000cee <LCD_DisplayString+0x66>
			Xpoint = Xstart;
 8000ce6:	89fb      	ldrh	r3, [r7, #14]
 8000ce8:	82fb      	strh	r3, [r7, #22]
			Ypoint = Ystart;
 8000cea:	89bb      	ldrh	r3, [r7, #12]
 8000cec:	82bb      	strh	r3, [r7, #20]
		}		
		LCD_DisplayChar ( Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground );
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	8ab9      	ldrh	r1, [r7, #20]
 8000cf4:	8af8      	ldrh	r0, [r7, #22]
 8000cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cf8:	9301      	str	r3, [sp, #4]
 8000cfa:	8c3b      	ldrh	r3, [r7, #32]
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f7ff ff1a 	bl	8000b38 <LCD_DisplayChar>
		
		//The next character of the address
		pString ++;
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	3301      	adds	r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
		
		//The next word of the abscissa increases the font of the broadband
		Xpoint += Font->Width;	
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	889a      	ldrh	r2, [r3, #4]
 8000d0e:	8afb      	ldrh	r3, [r7, #22]
 8000d10:	4413      	add	r3, r2
 8000d12:	82fb      	strh	r3, [r7, #22]
	while ( * pString != '\0')
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1cd      	bne.n	8000cb8 <LCD_DisplayString+0x30>
 8000d1c:	e000      	b.n	8000d20 <LCD_DisplayString+0x98>
		return;
 8000d1e:	bf00      	nop
	}
}
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000088 	.word	0x20000088

08000d2c <SPI_Write_Byte>:
/*********************************************


*********************************************/	
 uint8_t SPI_Write_Byte(uint8_t value)                                    
{    
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
		Driver_Delay_us(10);
		value = (value << 1); 	
	}
#else
	
    __HAL_SPI_ENABLE(&hspi1);
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <SPI_Write_Byte+0x68>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <SPI_Write_Byte+0x68>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d44:	601a      	str	r2, [r3, #0]
	SPI1->CR2 |= (1)<<12;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <SPI_Write_Byte+0x6c>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <SPI_Write_Byte+0x6c>)
 8000d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d50:	6053      	str	r3, [r2, #4]
	
	while((SPI1->SR & (1<<1)) == 0)
 8000d52:	bf00      	nop
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <SPI_Write_Byte+0x6c>)
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d0f9      	beq.n	8000d54 <SPI_Write_Byte+0x28>
		;
        
        *((__IO uint8_t *)(&SPI1->DR)) = value;
 8000d60:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <SPI_Write_Byte+0x70>)
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	7013      	strb	r3, [r2, #0]
        
        while(SPI1->SR & (1<<7)) ; //Wait for not busy
 8000d66:	bf00      	nop
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <SPI_Write_Byte+0x6c>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1f9      	bne.n	8000d68 <SPI_Write_Byte+0x3c>

        while((SPI1->SR & (1<<0)) == 0) ; // Wait for the receiving area to be empty
 8000d74:	bf00      	nop
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <SPI_Write_Byte+0x6c>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f9      	beq.n	8000d76 <SPI_Write_Byte+0x4a>
        
        return *((__IO uint8_t *)(&SPI1->DR));
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <SPI_Write_Byte+0x70>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b2db      	uxtb	r3, r3

#endif
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	20000030 	.word	0x20000030
 8000d98:	40013000 	.word	0x40013000
 8000d9c:	4001300c 	.word	0x4001300c

08000da0 <Driver_Delay_ms>:
/*********************************************


*********************************************/	
void Driver_Delay_ms(uint32_t xms)	
{	
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f000 fac5 	bl	8001338 <HAL_Delay>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void init() {
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
	// Initialize
	LCD_SCAN_DIR Lcd_ScanDir = SCAN_DIR_DFT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	71fb      	strb	r3, [r7, #7]
	LCD_Init( Lcd_ScanDir );
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fda8 	bl	8000918 <LCD_Init>
	//startingScreen();
	//setConcentrationScreen();
	//setCupFillScreen();
	//movedCupErrorScreen();
	//emptyTankScreen();
	programistScreen();
 8000dc8:	f7ff fb7e 	bl	80004c8 <programistScreen>

	Driver_Delay_ms(1000);
 8000dcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dd0:	f7ff ffe6 	bl	8000da0 <Driver_Delay_ms>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de0:	f000 fa38 	bl	8001254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de4:	f000 f808 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de8:	f000 f8a6 	bl	8000f38 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000dec:	f000 f86e 	bl	8000ecc <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  init();
 8000df0:	f7ff ffe1 	bl	8000db6 <init>
   while (1)
 8000df4:	e7fe      	b.n	8000df4 <main+0x18>
	...

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b094      	sub	sp, #80	; 0x50
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	2230      	movs	r2, #48	; 0x30
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fa58 	bl	80022bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <SystemClock_Config+0xcc>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a27      	ldr	r2, [pc, #156]	; (8000ec4 <SystemClock_Config+0xcc>)
 8000e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <SystemClock_Config+0xcc>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <SystemClock_Config+0xd0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <SystemClock_Config+0xd0>)
 8000e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <SystemClock_Config+0xd0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e54:	2301      	movs	r3, #1
 8000e56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e6c:	23a8      	movs	r3, #168	; 0xa8
 8000e6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e74:	2304      	movs	r3, #4
 8000e76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e78:	f107 0320 	add.w	r3, r7, #32
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fd67 	bl	8001950 <HAL_RCC_OscConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e88:	f000 f8f6 	bl	8001078 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e90:	2302      	movs	r3, #2
 8000e92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	2105      	movs	r1, #5
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 ffc0 	bl	8001e30 <HAL_RCC_ClockConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eb6:	f000 f8df 	bl	8001078 <Error_Handler>
  }
}
 8000eba:	bf00      	nop
 8000ebc:	3750      	adds	r7, #80	; 0x50
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40007000 	.word	0x40007000

08000ecc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000ed2:	4a18      	ldr	r2, [pc, #96]	; (8000f34 <MX_SPI1_Init+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000ed8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000edc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000f00:	2210      	movs	r2, #16
 8000f02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000f18:	220a      	movs	r2, #10
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <MX_SPI1_Init+0x64>)
 8000f1e:	f001 f945 	bl	80021ac <HAL_SPI_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f28:	f000 f8a6 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000030 	.word	0x20000030
 8000f34:	40013000 	.word	0x40013000

08000f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b44      	ldr	r3, [pc, #272]	; (8001064 <MX_GPIO_Init+0x12c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a43      	ldr	r2, [pc, #268]	; (8001064 <MX_GPIO_Init+0x12c>)
 8000f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b41      	ldr	r3, [pc, #260]	; (8001064 <MX_GPIO_Init+0x12c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b3d      	ldr	r3, [pc, #244]	; (8001064 <MX_GPIO_Init+0x12c>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a3c      	ldr	r2, [pc, #240]	; (8001064 <MX_GPIO_Init+0x12c>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b3a      	ldr	r3, [pc, #232]	; (8001064 <MX_GPIO_Init+0x12c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b36      	ldr	r3, [pc, #216]	; (8001064 <MX_GPIO_Init+0x12c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a35      	ldr	r2, [pc, #212]	; (8001064 <MX_GPIO_Init+0x12c>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b33      	ldr	r3, [pc, #204]	; (8001064 <MX_GPIO_Init+0x12c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b2f      	ldr	r3, [pc, #188]	; (8001064 <MX_GPIO_Init+0x12c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a2e      	ldr	r2, [pc, #184]	; (8001064 <MX_GPIO_Init+0x12c>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <MX_GPIO_Init+0x12c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	4829      	ldr	r0, [pc, #164]	; (8001068 <MX_GPIO_Init+0x130>)
 8000fc4:	f000 fc86 	bl	80018d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000fce:	4827      	ldr	r0, [pc, #156]	; (800106c <MX_GPIO_Init+0x134>)
 8000fd0:	f000 fc80 	bl	80018d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2140      	movs	r1, #64	; 0x40
 8000fd8:	4825      	ldr	r0, [pc, #148]	; (8001070 <MX_GPIO_Init+0x138>)
 8000fda:	f000 fc7b 	bl	80018d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fe2:	4b24      	ldr	r3, [pc, #144]	; (8001074 <MX_GPIO_Init+0x13c>)
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481e      	ldr	r0, [pc, #120]	; (800106c <MX_GPIO_Init+0x134>)
 8000ff2:	f000 fad5 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	4816      	ldr	r0, [pc, #88]	; (8001068 <MX_GPIO_Init+0x130>)
 800100e:	f000 fac7 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001012:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4810      	ldr	r0, [pc, #64]	; (800106c <MX_GPIO_Init+0x134>)
 800102c:	f000 fab8 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001030:	2340      	movs	r3, #64	; 0x40
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	480a      	ldr	r0, [pc, #40]	; (8001070 <MX_GPIO_Init+0x138>)
 8001048:	f000 faaa 	bl	80015a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2100      	movs	r1, #0
 8001050:	2006      	movs	r0, #6
 8001052:	f000 fa6e 	bl	8001532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001056:	2006      	movs	r0, #6
 8001058:	f000 fa87 	bl	800156a <HAL_NVIC_EnableIRQ>

}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	; 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40020800 	.word	0x40020800
 800106c:	40020000 	.word	0x40020000
 8001070:	40020400 	.word	0x40020400
 8001074:	10210000 	.word	0x10210000

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <HAL_MspInit+0x4c>)
 8001098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_MspInit+0x4c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_MspInit+0x4c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_MspInit+0x4c>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_MspInit+0x4c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800

080010d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a19      	ldr	r2, [pc, #100]	; (800115c <HAL_SPI_MspInit+0x84>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d12b      	bne.n	8001152 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_SPI_MspInit+0x88>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_SPI_MspInit+0x88>)
 8001104:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_SPI_MspInit+0x88>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_SPI_MspInit+0x88>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a10      	ldr	r2, [pc, #64]	; (8001160 <HAL_SPI_MspInit+0x88>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_SPI_MspInit+0x88>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001132:	23a0      	movs	r3, #160	; 0xa0
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001142:	2305      	movs	r3, #5
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <HAL_SPI_MspInit+0x8c>)
 800114e:	f000 fa27 	bl	80015a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	; 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40013000 	.word	0x40013000
 8001160:	40023800 	.word	0x40023800
 8001164:	40020000 	.word	0x40020000

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011bc:	f000 f89c 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f000 fb9d 	bl	8001908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <SystemInit+0x28>)
 80011da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011de:	4a07      	ldr	r2, [pc, #28]	; (80011fc <SystemInit+0x28>)
 80011e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <SystemInit+0x28>)
 80011ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ee:	609a      	str	r2, [r3, #8]
#endif
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001238 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001204:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001206:	e003      	b.n	8001210 <LoopCopyDataInit>

08001208 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800120a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800120c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800120e:	3104      	adds	r1, #4

08001210 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001210:	480b      	ldr	r0, [pc, #44]	; (8001240 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001214:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001216:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001218:	d3f6      	bcc.n	8001208 <CopyDataInit>
  ldr  r2, =_sbss
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800121c:	e002      	b.n	8001224 <LoopFillZerobss>

0800121e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800121e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001220:	f842 3b04 	str.w	r3, [r2], #4

08001224 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001226:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001228:	d3f9      	bcc.n	800121e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800122a:	f7ff ffd3 	bl	80011d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122e:	f001 f821 	bl	8002274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001232:	f7ff fdd3 	bl	8000ddc <main>
  bx  lr    
 8001236:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001238:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800123c:	08002838 	.word	0x08002838
  ldr  r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001244:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001248:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800124c:	20000098 	.word	0x20000098

08001250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC_IRQHandler>
	...

08001254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <HAL_Init+0x40>)
 800125e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_Init+0x40>)
 800126a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_Init+0x40>)
 8001276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 f94d 	bl	800151c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001282:	2000      	movs	r0, #0
 8001284:	f000 f808 	bl	8001298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001288:	f7ff fefe 	bl	8001088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023c00 	.word	0x40023c00

08001298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_InitTick+0x54>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_InitTick+0x58>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f965 	bl	8001586 <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00e      	b.n	80012e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d80a      	bhi.n	80012e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f000 f92d 	bl	8001532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <HAL_InitTick+0x5c>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000010 	.word	0x20000010
 80012f4:	2000000c 	.word	0x2000000c

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000010 	.word	0x20000010
 800131c:	20000094 	.word	0x20000094

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000094 	.word	0x20000094

08001338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001340:	f7ff ffee 	bl	8001320 <HAL_GetTick>
 8001344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001350:	d005      	beq.n	800135e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_Delay+0x40>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4413      	add	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800135e:	bf00      	nop
 8001360:	f7ff ffde 	bl	8001320 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	429a      	cmp	r2, r3
 800136e:	d8f7      	bhi.n	8001360 <HAL_Delay+0x28>
  {
  }
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000010 	.word	0x20000010

0800137c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db0b      	blt.n	800140a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	f003 021f 	and.w	r2, r3, #31
 80013f8:	4907      	ldr	r1, [pc, #28]	; (8001418 <__NVIC_EnableIRQ+0x38>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	2001      	movs	r0, #1
 8001402:	fa00 f202 	lsl.w	r2, r0, r2
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000e100 	.word	0xe000e100

0800141c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	db0a      	blt.n	8001446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	490c      	ldr	r1, [pc, #48]	; (8001468 <__NVIC_SetPriority+0x4c>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	440b      	add	r3, r1
 8001440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001444:	e00a      	b.n	800145c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4908      	ldr	r1, [pc, #32]	; (800146c <__NVIC_SetPriority+0x50>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	3b04      	subs	r3, #4
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	440b      	add	r3, r1
 800145a:	761a      	strb	r2, [r3, #24]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000e100 	.word	0xe000e100
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f1c3 0307 	rsb	r3, r3, #7
 800148a:	2b04      	cmp	r3, #4
 800148c:	bf28      	it	cs
 800148e:	2304      	movcs	r3, #4
 8001490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3304      	adds	r3, #4
 8001496:	2b06      	cmp	r3, #6
 8001498:	d902      	bls.n	80014a0 <NVIC_EncodePriority+0x30>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3b03      	subs	r3, #3
 800149e:	e000      	b.n	80014a2 <NVIC_EncodePriority+0x32>
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43d9      	mvns	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	4313      	orrs	r3, r2
         );
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3724      	adds	r7, #36	; 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e8:	d301      	bcc.n	80014ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00f      	b.n	800150e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <SysTick_Config+0x40>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f6:	210f      	movs	r1, #15
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f7ff ff8e 	bl	800141c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <SysTick_Config+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <SysTick_Config+0x40>)
 8001508:	2207      	movs	r2, #7
 800150a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	e000e010 	.word	0xe000e010

0800151c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ff29 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001544:	f7ff ff3e 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 8001548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f7ff ff8e 	bl	8001470 <NVIC_EncodePriority>
 8001554:	4602      	mov	r2, r0
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff5d 	bl	800141c <__NVIC_SetPriority>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff31 	bl	80013e0 <__NVIC_EnableIRQ>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffa2 	bl	80014d8 <SysTick_Config>
 8001594:	4603      	mov	r3, r0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	e16b      	b.n	8001894 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015bc:	2201      	movs	r2, #1
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	f040 815a 	bne.w	800188e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d00b      	beq.n	80015fa <HAL_GPIO_Init+0x5a>
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d007      	beq.n	80015fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ee:	2b11      	cmp	r3, #17
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b12      	cmp	r3, #18
 80015f8:	d130      	bne.n	800165c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001630:	2201      	movs	r2, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 0201 	and.w	r2, r3, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0xfc>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b12      	cmp	r3, #18
 800169a:	d123      	bne.n	80016e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	08da      	lsrs	r2, r3, #3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3208      	adds	r2, #8
 80016a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	220f      	movs	r2, #15
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	08da      	lsrs	r2, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3208      	adds	r2, #8
 80016de:	69b9      	ldr	r1, [r7, #24]
 80016e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0203 	and.w	r2, r3, #3
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80b4 	beq.w	800188e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b5f      	ldr	r3, [pc, #380]	; (80018a8 <HAL_GPIO_Init+0x308>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	4a5e      	ldr	r2, [pc, #376]	; (80018a8 <HAL_GPIO_Init+0x308>)
 8001730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001734:	6453      	str	r3, [r2, #68]	; 0x44
 8001736:	4b5c      	ldr	r3, [pc, #368]	; (80018a8 <HAL_GPIO_Init+0x308>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001742:	4a5a      	ldr	r2, [pc, #360]	; (80018ac <HAL_GPIO_Init+0x30c>)
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	3302      	adds	r3, #2
 800174a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	220f      	movs	r2, #15
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a51      	ldr	r2, [pc, #324]	; (80018b0 <HAL_GPIO_Init+0x310>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d02b      	beq.n	80017c6 <HAL_GPIO_Init+0x226>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a50      	ldr	r2, [pc, #320]	; (80018b4 <HAL_GPIO_Init+0x314>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d025      	beq.n	80017c2 <HAL_GPIO_Init+0x222>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4f      	ldr	r2, [pc, #316]	; (80018b8 <HAL_GPIO_Init+0x318>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d01f      	beq.n	80017be <HAL_GPIO_Init+0x21e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4e      	ldr	r2, [pc, #312]	; (80018bc <HAL_GPIO_Init+0x31c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d019      	beq.n	80017ba <HAL_GPIO_Init+0x21a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4d      	ldr	r2, [pc, #308]	; (80018c0 <HAL_GPIO_Init+0x320>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d013      	beq.n	80017b6 <HAL_GPIO_Init+0x216>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4c      	ldr	r2, [pc, #304]	; (80018c4 <HAL_GPIO_Init+0x324>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d00d      	beq.n	80017b2 <HAL_GPIO_Init+0x212>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4b      	ldr	r2, [pc, #300]	; (80018c8 <HAL_GPIO_Init+0x328>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d007      	beq.n	80017ae <HAL_GPIO_Init+0x20e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4a      	ldr	r2, [pc, #296]	; (80018cc <HAL_GPIO_Init+0x32c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d101      	bne.n	80017aa <HAL_GPIO_Init+0x20a>
 80017a6:	2307      	movs	r3, #7
 80017a8:	e00e      	b.n	80017c8 <HAL_GPIO_Init+0x228>
 80017aa:	2308      	movs	r3, #8
 80017ac:	e00c      	b.n	80017c8 <HAL_GPIO_Init+0x228>
 80017ae:	2306      	movs	r3, #6
 80017b0:	e00a      	b.n	80017c8 <HAL_GPIO_Init+0x228>
 80017b2:	2305      	movs	r3, #5
 80017b4:	e008      	b.n	80017c8 <HAL_GPIO_Init+0x228>
 80017b6:	2304      	movs	r3, #4
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x228>
 80017ba:	2303      	movs	r3, #3
 80017bc:	e004      	b.n	80017c8 <HAL_GPIO_Init+0x228>
 80017be:	2302      	movs	r3, #2
 80017c0:	e002      	b.n	80017c8 <HAL_GPIO_Init+0x228>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <HAL_GPIO_Init+0x228>
 80017c6:	2300      	movs	r3, #0
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	f002 0203 	and.w	r2, r2, #3
 80017ce:	0092      	lsls	r2, r2, #2
 80017d0:	4093      	lsls	r3, r2
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017d8:	4934      	ldr	r1, [pc, #208]	; (80018ac <HAL_GPIO_Init+0x30c>)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	3302      	adds	r3, #2
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e6:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <HAL_GPIO_Init+0x330>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800180a:	4a31      	ldr	r2, [pc, #196]	; (80018d0 <HAL_GPIO_Init+0x330>)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001810:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <HAL_GPIO_Init+0x330>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001834:	4a26      	ldr	r2, [pc, #152]	; (80018d0 <HAL_GPIO_Init+0x330>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183a:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <HAL_GPIO_Init+0x330>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800185e:	4a1c      	ldr	r2, [pc, #112]	; (80018d0 <HAL_GPIO_Init+0x330>)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <HAL_GPIO_Init+0x330>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001888:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <HAL_GPIO_Init+0x330>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3301      	adds	r3, #1
 8001892:	61fb      	str	r3, [r7, #28]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	2b0f      	cmp	r3, #15
 8001898:	f67f ae90 	bls.w	80015bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800189c:	bf00      	nop
 800189e:	3724      	adds	r7, #36	; 0x24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40013800 	.word	0x40013800
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40020400 	.word	0x40020400
 80018b8:	40020800 	.word	0x40020800
 80018bc:	40020c00 	.word	0x40020c00
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40021400 	.word	0x40021400
 80018c8:	40021800 	.word	0x40021800
 80018cc:	40021c00 	.word	0x40021c00
 80018d0:	40013c00 	.word	0x40013c00

080018d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
 80018e0:	4613      	mov	r3, r2
 80018e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e4:	787b      	ldrb	r3, [r7, #1]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018f0:	e003      	b.n	80018fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018f2:	887b      	ldrh	r3, [r7, #2]
 80018f4:	041a      	lsls	r2, r3, #16
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	619a      	str	r2, [r3, #24]
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001914:	695a      	ldr	r2, [r3, #20]
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	4013      	ands	r3, r2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d006      	beq.n	800192c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f806 	bl	8001938 <HAL_GPIO_EXTI_Callback>
  }
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40013c00 	.word	0x40013c00

08001938 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e25b      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d075      	beq.n	8001a5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800196e:	4ba3      	ldr	r3, [pc, #652]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b04      	cmp	r3, #4
 8001978:	d00c      	beq.n	8001994 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800197a:	4ba0      	ldr	r3, [pc, #640]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001982:	2b08      	cmp	r3, #8
 8001984:	d112      	bne.n	80019ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001986:	4b9d      	ldr	r3, [pc, #628]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001992:	d10b      	bne.n	80019ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	4b99      	ldr	r3, [pc, #612]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d05b      	beq.n	8001a58 <HAL_RCC_OscConfig+0x108>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d157      	bne.n	8001a58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e236      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b4:	d106      	bne.n	80019c4 <HAL_RCC_OscConfig+0x74>
 80019b6:	4b91      	ldr	r3, [pc, #580]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a90      	ldr	r2, [pc, #576]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e01d      	b.n	8001a00 <HAL_RCC_OscConfig+0xb0>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x98>
 80019ce:	4b8b      	ldr	r3, [pc, #556]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a8a      	ldr	r2, [pc, #552]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	4b88      	ldr	r3, [pc, #544]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a87      	ldr	r2, [pc, #540]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e00b      	b.n	8001a00 <HAL_RCC_OscConfig+0xb0>
 80019e8:	4b84      	ldr	r3, [pc, #528]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a83      	ldr	r2, [pc, #524]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b81      	ldr	r3, [pc, #516]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a80      	ldr	r2, [pc, #512]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d013      	beq.n	8001a30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff fc8a 	bl	8001320 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a10:	f7ff fc86 	bl	8001320 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b64      	cmp	r3, #100	; 0x64
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e1fb      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a22:	4b76      	ldr	r3, [pc, #472]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0xc0>
 8001a2e:	e014      	b.n	8001a5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fc76 	bl	8001320 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a38:	f7ff fc72 	bl	8001320 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	; 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e1e7      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4a:	4b6c      	ldr	r3, [pc, #432]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0xe8>
 8001a56:	e000      	b.n	8001a5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d063      	beq.n	8001b2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a66:	4b65      	ldr	r3, [pc, #404]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00b      	beq.n	8001a8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a72:	4b62      	ldr	r3, [pc, #392]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d11c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a7e:	4b5f      	ldr	r3, [pc, #380]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d116      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8a:	4b5c      	ldr	r3, [pc, #368]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d005      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x152>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d001      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e1bb      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa2:	4b56      	ldr	r3, [pc, #344]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4952      	ldr	r1, [pc, #328]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab6:	e03a      	b.n	8001b2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d020      	beq.n	8001b02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac0:	4b4f      	ldr	r3, [pc, #316]	; (8001c00 <HAL_RCC_OscConfig+0x2b0>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fc2b 	bl	8001320 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ace:	f7ff fc27 	bl	8001320 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e19c      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae0:	4b46      	ldr	r3, [pc, #280]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aec:	4b43      	ldr	r3, [pc, #268]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4940      	ldr	r1, [pc, #256]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	600b      	str	r3, [r1, #0]
 8001b00:	e015      	b.n	8001b2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b02:	4b3f      	ldr	r3, [pc, #252]	; (8001c00 <HAL_RCC_OscConfig+0x2b0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff fc0a 	bl	8001320 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b10:	f7ff fc06 	bl	8001320 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e17b      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b22:	4b36      	ldr	r3, [pc, #216]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d030      	beq.n	8001b9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d016      	beq.n	8001b70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b42:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <HAL_RCC_OscConfig+0x2b4>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b48:	f7ff fbea 	bl	8001320 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b50:	f7ff fbe6 	bl	8001320 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e15b      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b62:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x200>
 8001b6e:	e015      	b.n	8001b9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_RCC_OscConfig+0x2b4>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b76:	f7ff fbd3 	bl	8001320 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b7e:	f7ff fbcf 	bl	8001320 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e144      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80a0 	beq.w	8001cea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10f      	bne.n	8001bda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_OscConfig+0x2b8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d121      	bne.n	8001c2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <HAL_RCC_OscConfig+0x2b8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <HAL_RCC_OscConfig+0x2b8>)
 8001bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fb95 	bl	8001320 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf8:	e011      	b.n	8001c1e <HAL_RCC_OscConfig+0x2ce>
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	42470000 	.word	0x42470000
 8001c04:	42470e80 	.word	0x42470e80
 8001c08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0c:	f7ff fb88 	bl	8001320 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e0fd      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1e:	4b81      	ldr	r3, [pc, #516]	; (8001e24 <HAL_RCC_OscConfig+0x4d4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d106      	bne.n	8001c40 <HAL_RCC_OscConfig+0x2f0>
 8001c32:	4b7d      	ldr	r3, [pc, #500]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	4a7c      	ldr	r2, [pc, #496]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3e:	e01c      	b.n	8001c7a <HAL_RCC_OscConfig+0x32a>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b05      	cmp	r3, #5
 8001c46:	d10c      	bne.n	8001c62 <HAL_RCC_OscConfig+0x312>
 8001c48:	4b77      	ldr	r3, [pc, #476]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4c:	4a76      	ldr	r2, [pc, #472]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	6713      	str	r3, [r2, #112]	; 0x70
 8001c54:	4b74      	ldr	r3, [pc, #464]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c58:	4a73      	ldr	r2, [pc, #460]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c60:	e00b      	b.n	8001c7a <HAL_RCC_OscConfig+0x32a>
 8001c62:	4b71      	ldr	r3, [pc, #452]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c66:	4a70      	ldr	r2, [pc, #448]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6e:	4b6e      	ldr	r3, [pc, #440]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	4a6d      	ldr	r2, [pc, #436]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d015      	beq.n	8001cae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7ff fb4d 	bl	8001320 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff fb49 	bl	8001320 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e0bc      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca0:	4b61      	ldr	r3, [pc, #388]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ee      	beq.n	8001c8a <HAL_RCC_OscConfig+0x33a>
 8001cac:	e014      	b.n	8001cd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cae:	f7ff fb37 	bl	8001320 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb6:	f7ff fb33 	bl	8001320 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e0a6      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ccc:	4b56      	ldr	r3, [pc, #344]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1ee      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cd8:	7dfb      	ldrb	r3, [r7, #23]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d105      	bne.n	8001cea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cde:	4b52      	ldr	r3, [pc, #328]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a51      	ldr	r2, [pc, #324]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8092 	beq.w	8001e18 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cf4:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d05c      	beq.n	8001dba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d141      	bne.n	8001d8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d08:	4b48      	ldr	r3, [pc, #288]	; (8001e2c <HAL_RCC_OscConfig+0x4dc>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7ff fb07 	bl	8001320 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d16:	f7ff fb03 	bl	8001320 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e078      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d28:	4b3f      	ldr	r3, [pc, #252]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69da      	ldr	r2, [r3, #28]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	019b      	lsls	r3, r3, #6
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4a:	085b      	lsrs	r3, r3, #1
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	041b      	lsls	r3, r3, #16
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	061b      	lsls	r3, r3, #24
 8001d58:	4933      	ldr	r1, [pc, #204]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d5e:	4b33      	ldr	r3, [pc, #204]	; (8001e2c <HAL_RCC_OscConfig+0x4dc>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff fadc 	bl	8001320 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6c:	f7ff fad8 	bl	8001320 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e04d      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7e:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x41c>
 8001d8a:	e045      	b.n	8001e18 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8c:	4b27      	ldr	r3, [pc, #156]	; (8001e2c <HAL_RCC_OscConfig+0x4dc>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7ff fac5 	bl	8001320 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9a:	f7ff fac1 	bl	8001320 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e036      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f0      	bne.n	8001d9a <HAL_RCC_OscConfig+0x44a>
 8001db8:	e02e      	b.n	8001e18 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e029      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dc6:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_RCC_OscConfig+0x4d8>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d11c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d115      	bne.n	8001e14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dee:	4013      	ands	r3, r2
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d10d      	bne.n	8001e14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d106      	bne.n	8001e14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40007000 	.word	0x40007000
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	42470060 	.word	0x42470060

08001e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0cc      	b.n	8001fde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e44:	4b68      	ldr	r3, [pc, #416]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d90c      	bls.n	8001e6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b65      	ldr	r3, [pc, #404]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5a:	4b63      	ldr	r3, [pc, #396]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0b8      	b.n	8001fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d020      	beq.n	8001eba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e84:	4b59      	ldr	r3, [pc, #356]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4a58      	ldr	r2, [pc, #352]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e9c:	4b53      	ldr	r3, [pc, #332]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	4a52      	ldr	r2, [pc, #328]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea8:	4b50      	ldr	r3, [pc, #320]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	494d      	ldr	r1, [pc, #308]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d044      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d107      	bne.n	8001ede <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	4b47      	ldr	r3, [pc, #284]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d119      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e07f      	b.n	8001fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d003      	beq.n	8001eee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d107      	bne.n	8001efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eee:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d109      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e06f      	b.n	8001fde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efe:	4b3b      	ldr	r3, [pc, #236]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e067      	b.n	8001fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0e:	4b37      	ldr	r3, [pc, #220]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f023 0203 	bic.w	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4934      	ldr	r1, [pc, #208]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f20:	f7ff f9fe 	bl	8001320 <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f28:	f7ff f9fa 	bl	8001320 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e04f      	b.n	8001fde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3e:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 020c 	and.w	r2, r3, #12
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d1eb      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f50:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d20c      	bcs.n	8001f78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e032      	b.n	8001fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4916      	ldr	r1, [pc, #88]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d009      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	490e      	ldr	r1, [pc, #56]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fb6:	f000 f821 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8001fba:	4601      	mov	r1, r0
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	5cd3      	ldrb	r3, [r2, r3]
 8001fca:	fa21 f303 	lsr.w	r3, r1, r3
 8001fce:	4a09      	ldr	r2, [pc, #36]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff f95e 	bl	8001298 <HAL_InitTick>

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023c00 	.word	0x40023c00
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	08002818 	.word	0x08002818
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	2000000c 	.word	0x2000000c

08001ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	2300      	movs	r3, #0
 800200c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002012:	4b63      	ldr	r3, [pc, #396]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b04      	cmp	r3, #4
 800201c:	d007      	beq.n	800202e <HAL_RCC_GetSysClockFreq+0x32>
 800201e:	2b08      	cmp	r3, #8
 8002020:	d008      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0x38>
 8002022:	2b00      	cmp	r3, #0
 8002024:	f040 80b4 	bne.w	8002190 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002028:	4b5e      	ldr	r3, [pc, #376]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800202a:	60bb      	str	r3, [r7, #8]
       break;
 800202c:	e0b3      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800202e:	4b5e      	ldr	r3, [pc, #376]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002030:	60bb      	str	r3, [r7, #8]
      break;
 8002032:	e0b0      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002034:	4b5a      	ldr	r3, [pc, #360]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800203c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800203e:	4b58      	ldr	r3, [pc, #352]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d04a      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800204a:	4b55      	ldr	r3, [pc, #340]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	099b      	lsrs	r3, r3, #6
 8002050:	f04f 0400 	mov.w	r4, #0
 8002054:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	ea03 0501 	and.w	r5, r3, r1
 8002060:	ea04 0602 	and.w	r6, r4, r2
 8002064:	4629      	mov	r1, r5
 8002066:	4632      	mov	r2, r6
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	f04f 0400 	mov.w	r4, #0
 8002070:	0154      	lsls	r4, r2, #5
 8002072:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002076:	014b      	lsls	r3, r1, #5
 8002078:	4619      	mov	r1, r3
 800207a:	4622      	mov	r2, r4
 800207c:	1b49      	subs	r1, r1, r5
 800207e:	eb62 0206 	sbc.w	r2, r2, r6
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	f04f 0400 	mov.w	r4, #0
 800208a:	0194      	lsls	r4, r2, #6
 800208c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002090:	018b      	lsls	r3, r1, #6
 8002092:	1a5b      	subs	r3, r3, r1
 8002094:	eb64 0402 	sbc.w	r4, r4, r2
 8002098:	f04f 0100 	mov.w	r1, #0
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	00e2      	lsls	r2, r4, #3
 80020a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020a6:	00d9      	lsls	r1, r3, #3
 80020a8:	460b      	mov	r3, r1
 80020aa:	4614      	mov	r4, r2
 80020ac:	195b      	adds	r3, r3, r5
 80020ae:	eb44 0406 	adc.w	r4, r4, r6
 80020b2:	f04f 0100 	mov.w	r1, #0
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	0262      	lsls	r2, r4, #9
 80020bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80020c0:	0259      	lsls	r1, r3, #9
 80020c2:	460b      	mov	r3, r1
 80020c4:	4614      	mov	r4, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	4621      	mov	r1, r4
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f04f 0400 	mov.w	r4, #0
 80020d0:	461a      	mov	r2, r3
 80020d2:	4623      	mov	r3, r4
 80020d4:	f7fe f878 	bl	80001c8 <__aeabi_uldivmod>
 80020d8:	4603      	mov	r3, r0
 80020da:	460c      	mov	r4, r1
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	e049      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e0:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	099b      	lsrs	r3, r3, #6
 80020e6:	f04f 0400 	mov.w	r4, #0
 80020ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	ea03 0501 	and.w	r5, r3, r1
 80020f6:	ea04 0602 	and.w	r6, r4, r2
 80020fa:	4629      	mov	r1, r5
 80020fc:	4632      	mov	r2, r6
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	f04f 0400 	mov.w	r4, #0
 8002106:	0154      	lsls	r4, r2, #5
 8002108:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800210c:	014b      	lsls	r3, r1, #5
 800210e:	4619      	mov	r1, r3
 8002110:	4622      	mov	r2, r4
 8002112:	1b49      	subs	r1, r1, r5
 8002114:	eb62 0206 	sbc.w	r2, r2, r6
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	f04f 0400 	mov.w	r4, #0
 8002120:	0194      	lsls	r4, r2, #6
 8002122:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002126:	018b      	lsls	r3, r1, #6
 8002128:	1a5b      	subs	r3, r3, r1
 800212a:	eb64 0402 	sbc.w	r4, r4, r2
 800212e:	f04f 0100 	mov.w	r1, #0
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	00e2      	lsls	r2, r4, #3
 8002138:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800213c:	00d9      	lsls	r1, r3, #3
 800213e:	460b      	mov	r3, r1
 8002140:	4614      	mov	r4, r2
 8002142:	195b      	adds	r3, r3, r5
 8002144:	eb44 0406 	adc.w	r4, r4, r6
 8002148:	f04f 0100 	mov.w	r1, #0
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	02a2      	lsls	r2, r4, #10
 8002152:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002156:	0299      	lsls	r1, r3, #10
 8002158:	460b      	mov	r3, r1
 800215a:	4614      	mov	r4, r2
 800215c:	4618      	mov	r0, r3
 800215e:	4621      	mov	r1, r4
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f04f 0400 	mov.w	r4, #0
 8002166:	461a      	mov	r2, r3
 8002168:	4623      	mov	r3, r4
 800216a:	f7fe f82d 	bl	80001c8 <__aeabi_uldivmod>
 800216e:	4603      	mov	r3, r0
 8002170:	460c      	mov	r4, r1
 8002172:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002174:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	0c1b      	lsrs	r3, r3, #16
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	3301      	adds	r3, #1
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	60bb      	str	r3, [r7, #8]
      break;
 800218e:	e002      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002192:	60bb      	str	r3, [r7, #8]
      break;
 8002194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002196:	68bb      	ldr	r3, [r7, #8]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a0:	40023800 	.word	0x40023800
 80021a4:	00f42400 	.word	0x00f42400
 80021a8:	007a1200 	.word	0x007a1200

080021ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e056      	b.n	800226c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d106      	bne.n	80021de <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7fe ff7d 	bl	80010d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2202      	movs	r2, #2
 80021e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	ea42 0103 	orr.w	r1, r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	0c1b      	lsrs	r3, r3, #16
 800223c:	f003 0104 	and.w	r1, r3, #4
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	69da      	ldr	r2, [r3, #28]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800225a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <__libc_init_array>:
 8002274:	b570      	push	{r4, r5, r6, lr}
 8002276:	4e0d      	ldr	r6, [pc, #52]	; (80022ac <__libc_init_array+0x38>)
 8002278:	4c0d      	ldr	r4, [pc, #52]	; (80022b0 <__libc_init_array+0x3c>)
 800227a:	1ba4      	subs	r4, r4, r6
 800227c:	10a4      	asrs	r4, r4, #2
 800227e:	2500      	movs	r5, #0
 8002280:	42a5      	cmp	r5, r4
 8002282:	d109      	bne.n	8002298 <__libc_init_array+0x24>
 8002284:	4e0b      	ldr	r6, [pc, #44]	; (80022b4 <__libc_init_array+0x40>)
 8002286:	4c0c      	ldr	r4, [pc, #48]	; (80022b8 <__libc_init_array+0x44>)
 8002288:	f000 f820 	bl	80022cc <_init>
 800228c:	1ba4      	subs	r4, r4, r6
 800228e:	10a4      	asrs	r4, r4, #2
 8002290:	2500      	movs	r5, #0
 8002292:	42a5      	cmp	r5, r4
 8002294:	d105      	bne.n	80022a2 <__libc_init_array+0x2e>
 8002296:	bd70      	pop	{r4, r5, r6, pc}
 8002298:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800229c:	4798      	blx	r3
 800229e:	3501      	adds	r5, #1
 80022a0:	e7ee      	b.n	8002280 <__libc_init_array+0xc>
 80022a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022a6:	4798      	blx	r3
 80022a8:	3501      	adds	r5, #1
 80022aa:	e7f2      	b.n	8002292 <__libc_init_array+0x1e>
 80022ac:	08002830 	.word	0x08002830
 80022b0:	08002830 	.word	0x08002830
 80022b4:	08002830 	.word	0x08002830
 80022b8:	08002834 	.word	0x08002834

080022bc <memset>:
 80022bc:	4402      	add	r2, r0
 80022be:	4603      	mov	r3, r0
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d100      	bne.n	80022c6 <memset+0xa>
 80022c4:	4770      	bx	lr
 80022c6:	f803 1b01 	strb.w	r1, [r3], #1
 80022ca:	e7f9      	b.n	80022c0 <memset+0x4>

080022cc <_init>:
 80022cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ce:	bf00      	nop
 80022d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d2:	bc08      	pop	{r3}
 80022d4:	469e      	mov	lr, r3
 80022d6:	4770      	bx	lr

080022d8 <_fini>:
 80022d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022da:	bf00      	nop
 80022dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022de:	bc08      	pop	{r3}
 80022e0:	469e      	mov	lr, r3
 80022e2:	4770      	bx	lr
