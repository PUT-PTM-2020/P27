
ptm-machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007504  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800768c  0800768c  0001768c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076a4  080076a4  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  080076a4  080076a4  000176a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076ac  080076ac  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076ac  080076ac  000176ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076b0  080076b0  000176b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  080076b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200002cc  08007980  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08007980  00020598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014579  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021df  00000000  00000000  00034875  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e40  00000000  00000000  00036a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d48  00000000  00000000  00037898  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000034fe  00000000  00000000  000385e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d009  00000000  00000000  0003bade  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca98c  00000000  00000000  00048ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00113473  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb0  00000000  00000000  001134f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200002cc 	.word	0x200002cc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007674 	.word	0x08007674

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200002d0 	.word	0x200002d0
 80001c4:	08007674 	.word	0x08007674

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
 80004e2:	4b4a      	ldr	r3, [pc, #296]	; (800060c <MX_GPIO_Init+0x144>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a49      	ldr	r2, [pc, #292]	; (800060c <MX_GPIO_Init+0x144>)
 80004e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b47      	ldr	r3, [pc, #284]	; (800060c <MX_GPIO_Init+0x144>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	4b43      	ldr	r3, [pc, #268]	; (800060c <MX_GPIO_Init+0x144>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a42      	ldr	r2, [pc, #264]	; (800060c <MX_GPIO_Init+0x144>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	4b40      	ldr	r3, [pc, #256]	; (800060c <MX_GPIO_Init+0x144>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	4b3c      	ldr	r3, [pc, #240]	; (800060c <MX_GPIO_Init+0x144>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a3b      	ldr	r2, [pc, #236]	; (800060c <MX_GPIO_Init+0x144>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b39      	ldr	r3, [pc, #228]	; (800060c <MX_GPIO_Init+0x144>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	4b35      	ldr	r3, [pc, #212]	; (800060c <MX_GPIO_Init+0x144>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a34      	ldr	r2, [pc, #208]	; (800060c <MX_GPIO_Init+0x144>)
 800053c:	f043 0302 	orr.w	r3, r3, #2
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b32      	ldr	r3, [pc, #200]	; (800060c <MX_GPIO_Init+0x144>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	482f      	ldr	r0, [pc, #188]	; (8000610 <MX_GPIO_Init+0x148>)
 8000554:	f000 fe72 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|TOF_XSHUT_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800055e:	482d      	ldr	r0, [pc, #180]	; (8000614 <MX_GPIO_Init+0x14c>)
 8000560:	f000 fe6c 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	482b      	ldr	r0, [pc, #172]	; (8000618 <MX_GPIO_Init+0x150>)
 800056a:	f000 fe67 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800056e:	2301      	movs	r3, #1
 8000570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000572:	4b2a      	ldr	r3, [pc, #168]	; (800061c <MX_GPIO_Init+0x154>)
 8000574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4619      	mov	r1, r3
 8000580:	4824      	ldr	r0, [pc, #144]	; (8000614 <MX_GPIO_Init+0x14c>)
 8000582:	f000 fcc1 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_EXTI_Pin;
 8000586:	2302      	movs	r3, #2
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800058a:	4b24      	ldr	r3, [pc, #144]	; (800061c <MX_GPIO_Init+0x154>)
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800058e:	2301      	movs	r3, #1
 8000590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOF_EXTI_GPIO_Port, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	481e      	ldr	r0, [pc, #120]	; (8000614 <MX_GPIO_Init+0x14c>)
 800059a:	f000 fcb5 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800059e:	2380      	movs	r3, #128	; 0x80
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4619      	mov	r1, r3
 80005b4:	4816      	ldr	r0, [pc, #88]	; (8000610 <MX_GPIO_Init+0x148>)
 80005b6:	f000 fca7 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|TOF_XSHUT_Pin;
 80005ba:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80005be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	2301      	movs	r3, #1
 80005c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2300      	movs	r3, #0
 80005ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4619      	mov	r1, r3
 80005d2:	4810      	ldr	r0, [pc, #64]	; (8000614 <MX_GPIO_Init+0x14c>)
 80005d4:	f000 fc98 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80005d8:	2340      	movs	r3, #64	; 0x40
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2300      	movs	r3, #0
 80005e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	480a      	ldr	r0, [pc, #40]	; (8000618 <MX_GPIO_Init+0x150>)
 80005f0:	f000 fc8a 	bl	8000f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2100      	movs	r1, #0
 80005f8:	2007      	movs	r0, #7
 80005fa:	f000 fc40 	bl	8000e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80005fe:	2007      	movs	r0, #7
 8000600:	f000 fc59 	bl	8000eb6 <HAL_NVIC_EnableIRQ>

}
 8000604:	bf00      	nop
 8000606:	3728      	adds	r7, #40	; 0x28
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40020800 	.word	0x40020800
 8000614:	40020000 	.word	0x40020000
 8000618:	40020400 	.word	0x40020400
 800061c:	10210000 	.word	0x10210000

08000620 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_I2C1_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <MX_I2C1_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_I2C1_Init+0x50>)
 800062c:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_I2C1_Init+0x58>)
 800062e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_I2C1_Init+0x50>)
 800063e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_I2C1_Init+0x50>)
 800065e:	f000 fe1f 	bl	80012a0 <HAL_I2C_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 f954 	bl	8000914 <Error_Handler>
  }

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200002ec 	.word	0x200002ec
 8000674:	40005400 	.word	0x40005400
 8000678:	00061a80 	.word	0x00061a80

0800067c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a19      	ldr	r2, [pc, #100]	; (8000700 <HAL_I2C_MspInit+0x84>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d12c      	bne.n	80006f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <HAL_I2C_MspInit+0x88>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a17      	ldr	r2, [pc, #92]	; (8000704 <HAL_I2C_MspInit+0x88>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <HAL_I2C_MspInit+0x88>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006c0:	2312      	movs	r3, #18
 80006c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c8:	2303      	movs	r3, #3
 80006ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006cc:	2304      	movs	r3, #4
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	480c      	ldr	r0, [pc, #48]	; (8000708 <HAL_I2C_MspInit+0x8c>)
 80006d8:	f000 fc16 	bl	8000f08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_I2C_MspInit+0x88>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <HAL_I2C_MspInit+0x88>)
 80006e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <HAL_I2C_MspInit+0x88>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006f8:	bf00      	nop
 80006fa:	3728      	adds	r7, #40	; 0x28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40005400 	.word	0x40005400
 8000704:	40023800 	.word	0x40023800
 8000708:	40020400 	.word	0x40020400

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000710:	f000 fa24 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000714:	f000 f872 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000718:	f7ff fed6 	bl	80004c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800071c:	f000 f902 	bl	8000924 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000720:	f7ff ff7e 	bl	8000620 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	Dev->I2cHandle = &hi2c1;
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <main+0xc8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a2b      	ldr	r2, [pc, #172]	; (80007d8 <main+0xcc>)
 800072a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 800072e:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <main+0xc8>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2252      	movs	r2, #82	; 0x52
 8000734:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET); // Disable XSHUT
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073e:	4827      	ldr	r0, [pc, #156]	; (80007dc <main+0xd0>)
 8000740:	f000 fd7c 	bl	800123c <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 8000744:	2014      	movs	r0, #20
 8000746:	f000 fa7b 	bl	8000c40 <HAL_Delay>
	  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET); // Enable XSHUT
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000750:	4822      	ldr	r0, [pc, #136]	; (80007dc <main+0xd0>)
 8000752:	f000 fd73 	bl	800123c <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 8000756:	2014      	movs	r0, #20
 8000758:	f000 fa72 	bl	8000c40 <HAL_Delay>

	//
	// VL53L0X init for Single Measurement
	//
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800075c:	2007      	movs	r0, #7
 800075e:	f000 fbb8 	bl	8000ed2 <HAL_NVIC_DisableIRQ>

	VL53L0X_WaitDeviceBooted( Dev );
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <main+0xc8>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fcce 	bl	8003108 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <main+0xc8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f002 f9e3 	bl	8002b3c <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <main+0xc8>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	f002 fb42 	bl	8002e04 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <main+0xc8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <main+0xd4>)
 8000786:	4917      	ldr	r1, [pc, #92]	; (80007e4 <main+0xd8>)
 8000788:	4618      	mov	r0, r3
 800078a:	f003 f9e1 	bl	8003b50 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <main+0xc8>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <main+0xdc>)
 8000794:	4915      	ldr	r1, [pc, #84]	; (80007ec <main+0xe0>)
 8000796:	4618      	mov	r0, r3
 8000798:	f003 fe68 	bl	800446c <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800079c:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <main+0xc8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2101      	movs	r1, #1
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fd4e 	bl	8003244 <VL53L0X_SetDeviceMode>
	VL53L0X_StartMeasurement(Dev);
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <main+0xc8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 fa4b 	bl	8003c48 <VL53L0X_StartMeasurement>

	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007b2:	2007      	movs	r0, #7
 80007b4:	f000 fb7f 	bl	8000eb6 <HAL_NVIC_EnableIRQ>

  //init();
   while (1)
   {

	if(TofDataRead == 1)
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <main+0xe4>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d1fa      	bne.n	80007b8 <main+0xac>
	{
		milimeters = RangingData.RangeMilliMeter;
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <main+0xe8>)
 80007c4:	891a      	ldrh	r2, [r3, #8]
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <main+0xec>)
 80007c8:	801a      	strh	r2, [r3, #0]
		TofDataRead = 0;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <main+0xe4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
	if(TofDataRead == 1)
 80007d0:	e7f2      	b.n	80007b8 <main+0xac>
 80007d2:	bf00      	nop
 80007d4:	20000000 	.word	0x20000000
 80007d8:	200002ec 	.word	0x200002ec
 80007dc:	40020000 	.word	0x40020000
 80007e0:	20000364 	.word	0x20000364
 80007e4:	200004f8 	.word	0x200004f8
 80007e8:	2000035c 	.word	0x2000035c
 80007ec:	20000360 	.word	0x20000360
 80007f0:	2000035d 	.word	0x2000035d
 80007f4:	20000340 	.word	0x20000340
 80007f8:	200002e8 	.word	0x200002e8

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	; 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	2230      	movs	r2, #48	; 0x30
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f006 ff21 	bl	8007652 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <SystemClock_Config+0xcc>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	4a27      	ldr	r2, [pc, #156]	; (80008c8 <SystemClock_Config+0xcc>)
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082e:	6413      	str	r3, [r2, #64]	; 0x40
 8000830:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <SystemClock_Config+0xcc>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b22      	ldr	r3, [pc, #136]	; (80008cc <SystemClock_Config+0xd0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a21      	ldr	r2, [pc, #132]	; (80008cc <SystemClock_Config+0xd0>)
 8000846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <SystemClock_Config+0xd0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800085c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800086c:	2304      	movs	r3, #4
 800086e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000870:	23a8      	movs	r3, #168	; 0xa8
 8000872:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000874:	2302      	movs	r3, #2
 8000876:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000878:	2304      	movs	r3, #4
 800087a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	4618      	mov	r0, r3
 8000882:	f001 fc95 	bl	80021b0 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800088c:	f000 f842 	bl	8000914 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	230f      	movs	r3, #15
 8000892:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000894:	2302      	movs	r3, #2
 8000896:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800089c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2105      	movs	r1, #5
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 feee 	bl	8002690 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ba:	f000 f82b 	bl	8000914 <Error_Handler>
  }
}
 80008be:	bf00      	nop
 80008c0:	3750      	adds	r7, #80	; 0x50
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == TOF_EXTI_Pin)
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d10e      	bne.n	80008fe <HAL_GPIO_EXTI_Callback+0x2e>
		{
			VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_GPIO_EXTI_Callback+0x38>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4909      	ldr	r1, [pc, #36]	; (800090c <HAL_GPIO_EXTI_Callback+0x3c>)
 80008e6:	4618      	mov	r0, r3
 80008e8:	f003 faae 	bl	8003e48 <VL53L0X_GetRangingMeasurementData>
			VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_GPIO_EXTI_Callback+0x38>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2104      	movs	r1, #4
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 fd58 	bl	80043a8 <VL53L0X_ClearInterruptMask>
			TofDataRead = 1;
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_GPIO_EXTI_Callback+0x40>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
		}
	}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000000 	.word	0x20000000
 800090c:	20000340 	.word	0x20000340
 8000910:	2000035d 	.word	0x2000035d

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_SPI1_Init+0x64>)
 800092a:	4a18      	ldr	r2, [pc, #96]	; (800098c <MX_SPI1_Init+0x68>)
 800092c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_SPI1_Init+0x64>)
 8000930:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000934:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_SPI1_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_SPI1_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_SPI1_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_SPI1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_SPI1_Init+0x64>)
 8000950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000954:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_SPI1_Init+0x64>)
 8000958:	2210      	movs	r2, #16
 800095a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <MX_SPI1_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_SPI1_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <MX_SPI1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_SPI1_Init+0x64>)
 8000970:	220a      	movs	r2, #10
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_SPI1_Init+0x64>)
 8000976:	f002 f869 	bl	8002a4c <HAL_SPI_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000980:	f7ff ffc8 	bl	8000914 <Error_Handler>
  }

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200004fc 	.word	0x200004fc
 800098c:	40013000 	.word	0x40013000

08000990 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a19      	ldr	r2, [pc, #100]	; (8000a14 <HAL_SPI_MspInit+0x84>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d12b      	bne.n	8000a0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <HAL_SPI_MspInit+0x88>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <HAL_SPI_MspInit+0x88>)
 80009bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_SPI_MspInit+0x88>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <HAL_SPI_MspInit+0x88>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <HAL_SPI_MspInit+0x88>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_SPI_MspInit+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 80009ea:	23a0      	movs	r3, #160	; 0xa0
 80009ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009fa:	2305      	movs	r3, #5
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <HAL_SPI_MspInit+0x8c>)
 8000a06:	f000 fa7f 	bl	8000f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	; 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40013000 	.word	0x40013000
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020000 	.word	0x40020000

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f89c 	bl	8000c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	f000 fbcd 	bl	8001270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <SystemInit+0x28>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae6:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <SystemInit+0x28>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <SystemInit+0x28>)
 8000af2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000af6:	609a      	str	r2, [r3, #8]
#endif
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b0e:	e003      	b.n	8000b18 <LoopCopyDataInit>

08000b10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b16:	3104      	adds	r1, #4

08000b18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b18:	480b      	ldr	r0, [pc, #44]	; (8000b48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b20:	d3f6      	bcc.n	8000b10 <CopyDataInit>
  ldr  r2, =_sbss
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b24:	e002      	b.n	8000b2c <LoopFillZerobss>

08000b26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b28:	f842 3b04 	str.w	r3, [r2], #4

08000b2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b30:	d3f9      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b32:	f7ff ffd3 	bl	8000adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b36:	f006 fd5d 	bl	80075f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3a:	f7ff fde7 	bl	800070c <main>
  bx  lr    
 8000b3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b44:	080076b4 	.word	0x080076b4
  ldr  r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b4c:	200002cc 	.word	0x200002cc
  ldr  r2, =_sbss
 8000b50:	200002cc 	.word	0x200002cc
  ldr  r3, = _ebss
 8000b54:	20000598 	.word	0x20000598

08000b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <HAL_Init+0x40>)
 8000b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_Init+0x40>)
 8000b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_Init+0x40>)
 8000b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f000 f96f 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 f808 	bl	8000ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b90:	f7ff ff46 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023c00 	.word	0x40023c00

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_InitTick+0x54>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_InitTick+0x58>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f995 	bl	8000eee <HAL_SYSTICK_Config>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00e      	b.n	8000bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d80a      	bhi.n	8000bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f000 f94f 	bl	8000e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be0:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <HAL_InitTick+0x5c>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000004 	.word	0x20000004
 8000bf8:	2000000c 	.word	0x2000000c
 8000bfc:	20000008 	.word	0x20000008

08000c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <HAL_IncTick+0x24>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	2000000c 	.word	0x2000000c
 8000c24:	20000554 	.word	0x20000554

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000554 	.word	0x20000554

08000c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c48:	f7ff ffee 	bl	8000c28 <HAL_GetTick>
 8000c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c58:	d005      	beq.n	8000c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_Delay+0x40>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4413      	add	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c66:	bf00      	nop
 8000c68:	f7ff ffde 	bl	8000c28 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d8f7      	bhi.n	8000c68 <HAL_Delay+0x28>
  {
  }
}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2000000c 	.word	0x2000000c

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4907      	ldr	r1, [pc, #28]	; (8000d20 <__NVIC_EnableIRQ+0x38>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db10      	blt.n	8000d58 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4909      	ldr	r1, [pc, #36]	; (8000d64 <__NVIC_DisableIRQ+0x40>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	3320      	adds	r3, #32
 8000d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d54:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f7ff ff8e 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff07 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e90:	f7ff ff1c 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff8e 	bl	8000dbc <NVIC_EncodePriority>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5d 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff0f 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff1f 	bl	8000d24 <__NVIC_DisableIRQ>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ff94 	bl	8000e24 <SysTick_Config>
 8000efc:	4603      	mov	r3, r0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	e16b      	b.n	80011fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f24:	2201      	movs	r2, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	f040 815a 	bne.w	80011f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d00b      	beq.n	8000f62 <HAL_GPIO_Init+0x5a>
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d007      	beq.n	8000f62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f56:	2b11      	cmp	r3, #17
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b12      	cmp	r3, #18
 8000f60:	d130      	bne.n	8000fc4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0xfc>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b12      	cmp	r3, #18
 8001002:	d123      	bne.n	800104c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	08da      	lsrs	r2, r3, #3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3208      	adds	r2, #8
 800100c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	220f      	movs	r2, #15
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	691a      	ldr	r2, [r3, #16]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	08da      	lsrs	r2, r3, #3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3208      	adds	r2, #8
 8001046:	69b9      	ldr	r1, [r7, #24]
 8001048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0203 	and.w	r2, r3, #3
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 80b4 	beq.w	80011f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b5f      	ldr	r3, [pc, #380]	; (8001210 <HAL_GPIO_Init+0x308>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	4a5e      	ldr	r2, [pc, #376]	; (8001210 <HAL_GPIO_Init+0x308>)
 8001098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
 800109e:	4b5c      	ldr	r3, [pc, #368]	; (8001210 <HAL_GPIO_Init+0x308>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010aa:	4a5a      	ldr	r2, [pc, #360]	; (8001214 <HAL_GPIO_Init+0x30c>)
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	3302      	adds	r3, #2
 80010b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a51      	ldr	r2, [pc, #324]	; (8001218 <HAL_GPIO_Init+0x310>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d02b      	beq.n	800112e <HAL_GPIO_Init+0x226>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a50      	ldr	r2, [pc, #320]	; (800121c <HAL_GPIO_Init+0x314>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d025      	beq.n	800112a <HAL_GPIO_Init+0x222>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4f      	ldr	r2, [pc, #316]	; (8001220 <HAL_GPIO_Init+0x318>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d01f      	beq.n	8001126 <HAL_GPIO_Init+0x21e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4e      	ldr	r2, [pc, #312]	; (8001224 <HAL_GPIO_Init+0x31c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d019      	beq.n	8001122 <HAL_GPIO_Init+0x21a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4d      	ldr	r2, [pc, #308]	; (8001228 <HAL_GPIO_Init+0x320>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d013      	beq.n	800111e <HAL_GPIO_Init+0x216>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4c      	ldr	r2, [pc, #304]	; (800122c <HAL_GPIO_Init+0x324>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d00d      	beq.n	800111a <HAL_GPIO_Init+0x212>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4b      	ldr	r2, [pc, #300]	; (8001230 <HAL_GPIO_Init+0x328>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d007      	beq.n	8001116 <HAL_GPIO_Init+0x20e>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4a      	ldr	r2, [pc, #296]	; (8001234 <HAL_GPIO_Init+0x32c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d101      	bne.n	8001112 <HAL_GPIO_Init+0x20a>
 800110e:	2307      	movs	r3, #7
 8001110:	e00e      	b.n	8001130 <HAL_GPIO_Init+0x228>
 8001112:	2308      	movs	r3, #8
 8001114:	e00c      	b.n	8001130 <HAL_GPIO_Init+0x228>
 8001116:	2306      	movs	r3, #6
 8001118:	e00a      	b.n	8001130 <HAL_GPIO_Init+0x228>
 800111a:	2305      	movs	r3, #5
 800111c:	e008      	b.n	8001130 <HAL_GPIO_Init+0x228>
 800111e:	2304      	movs	r3, #4
 8001120:	e006      	b.n	8001130 <HAL_GPIO_Init+0x228>
 8001122:	2303      	movs	r3, #3
 8001124:	e004      	b.n	8001130 <HAL_GPIO_Init+0x228>
 8001126:	2302      	movs	r3, #2
 8001128:	e002      	b.n	8001130 <HAL_GPIO_Init+0x228>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <HAL_GPIO_Init+0x228>
 800112e:	2300      	movs	r3, #0
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	f002 0203 	and.w	r2, r2, #3
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	4093      	lsls	r3, r2
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001140:	4934      	ldr	r1, [pc, #208]	; (8001214 <HAL_GPIO_Init+0x30c>)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <HAL_GPIO_Init+0x330>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001172:	4a31      	ldr	r2, [pc, #196]	; (8001238 <HAL_GPIO_Init+0x330>)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001178:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <HAL_GPIO_Init+0x330>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800119c:	4a26      	ldr	r2, [pc, #152]	; (8001238 <HAL_GPIO_Init+0x330>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a2:	4b25      	ldr	r3, [pc, #148]	; (8001238 <HAL_GPIO_Init+0x330>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c6:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <HAL_GPIO_Init+0x330>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <HAL_GPIO_Init+0x330>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f0:	4a11      	ldr	r2, [pc, #68]	; (8001238 <HAL_GPIO_Init+0x330>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3301      	adds	r3, #1
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	2b0f      	cmp	r3, #15
 8001200:	f67f ae90 	bls.w	8000f24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001204:	bf00      	nop
 8001206:	3724      	adds	r7, #36	; 0x24
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	40023800 	.word	0x40023800
 8001214:	40013800 	.word	0x40013800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40021000 	.word	0x40021000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021800 	.word	0x40021800
 8001234:	40021c00 	.word	0x40021c00
 8001238:	40013c00 	.word	0x40013c00

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800127c:	695a      	ldr	r2, [r3, #20]
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	4013      	ands	r3, r2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d006      	beq.n	8001294 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fb1e 	bl	80008d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40013c00 	.word	0x40013c00

080012a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e11f      	b.n	80014f2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d106      	bne.n	80012cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff f9d8 	bl	800067c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2224      	movs	r2, #36	; 0x24
 80012d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0201 	bic.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001302:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001304:	f001 fb8e 	bl	8002a24 <HAL_RCC_GetPCLK1Freq>
 8001308:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4a7b      	ldr	r2, [pc, #492]	; (80014fc <HAL_I2C_Init+0x25c>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d807      	bhi.n	8001324 <HAL_I2C_Init+0x84>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4a7a      	ldr	r2, [pc, #488]	; (8001500 <HAL_I2C_Init+0x260>)
 8001318:	4293      	cmp	r3, r2
 800131a:	bf94      	ite	ls
 800131c:	2301      	movls	r3, #1
 800131e:	2300      	movhi	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	e006      	b.n	8001332 <HAL_I2C_Init+0x92>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4a77      	ldr	r2, [pc, #476]	; (8001504 <HAL_I2C_Init+0x264>)
 8001328:	4293      	cmp	r3, r2
 800132a:	bf94      	ite	ls
 800132c:	2301      	movls	r3, #1
 800132e:	2300      	movhi	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e0db      	b.n	80014f2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4a72      	ldr	r2, [pc, #456]	; (8001508 <HAL_I2C_Init+0x268>)
 800133e:	fba2 2303 	umull	r2, r3, r2, r3
 8001342:	0c9b      	lsrs	r3, r3, #18
 8001344:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	430a      	orrs	r2, r1
 8001358:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4a64      	ldr	r2, [pc, #400]	; (80014fc <HAL_I2C_Init+0x25c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d802      	bhi.n	8001374 <HAL_I2C_Init+0xd4>
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	3301      	adds	r3, #1
 8001372:	e009      	b.n	8001388 <HAL_I2C_Init+0xe8>
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800137a:	fb02 f303 	mul.w	r3, r2, r3
 800137e:	4a63      	ldr	r2, [pc, #396]	; (800150c <HAL_I2C_Init+0x26c>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	099b      	lsrs	r3, r3, #6
 8001386:	3301      	adds	r3, #1
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6812      	ldr	r2, [r2, #0]
 800138c:	430b      	orrs	r3, r1
 800138e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800139a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4956      	ldr	r1, [pc, #344]	; (80014fc <HAL_I2C_Init+0x25c>)
 80013a4:	428b      	cmp	r3, r1
 80013a6:	d80d      	bhi.n	80013c4 <HAL_I2C_Init+0x124>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	1e59      	subs	r1, r3, #1
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80013b6:	3301      	adds	r3, #1
 80013b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013bc:	2b04      	cmp	r3, #4
 80013be:	bf38      	it	cc
 80013c0:	2304      	movcc	r3, #4
 80013c2:	e04f      	b.n	8001464 <HAL_I2C_Init+0x1c4>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d111      	bne.n	80013f0 <HAL_I2C_Init+0x150>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	1e58      	subs	r0, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6859      	ldr	r1, [r3, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	440b      	add	r3, r1
 80013da:	fbb0 f3f3 	udiv	r3, r0, r3
 80013de:	3301      	adds	r3, #1
 80013e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	bf0c      	ite	eq
 80013e8:	2301      	moveq	r3, #1
 80013ea:	2300      	movne	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	e012      	b.n	8001416 <HAL_I2C_Init+0x176>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1e58      	subs	r0, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6859      	ldr	r1, [r3, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	0099      	lsls	r1, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	fbb0 f3f3 	udiv	r3, r0, r3
 8001406:	3301      	adds	r3, #1
 8001408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800140c:	2b00      	cmp	r3, #0
 800140e:	bf0c      	ite	eq
 8001410:	2301      	moveq	r3, #1
 8001412:	2300      	movne	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_I2C_Init+0x17e>
 800141a:	2301      	movs	r3, #1
 800141c:	e022      	b.n	8001464 <HAL_I2C_Init+0x1c4>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10e      	bne.n	8001444 <HAL_I2C_Init+0x1a4>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	1e58      	subs	r0, r3, #1
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6859      	ldr	r1, [r3, #4]
 800142e:	460b      	mov	r3, r1
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	440b      	add	r3, r1
 8001434:	fbb0 f3f3 	udiv	r3, r0, r3
 8001438:	3301      	adds	r3, #1
 800143a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800143e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001442:	e00f      	b.n	8001464 <HAL_I2C_Init+0x1c4>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	1e58      	subs	r0, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6859      	ldr	r1, [r3, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	0099      	lsls	r1, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	fbb0 f3f3 	udiv	r3, r0, r3
 800145a:	3301      	adds	r3, #1
 800145c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001460:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	6809      	ldr	r1, [r1, #0]
 8001468:	4313      	orrs	r3, r2
 800146a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69da      	ldr	r2, [r3, #28]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001492:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6911      	ldr	r1, [r2, #16]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68d2      	ldr	r2, [r2, #12]
 800149e:	4311      	orrs	r1, r2
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	430b      	orrs	r3, r1
 80014a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695a      	ldr	r2, [r3, #20]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0201 	orr.w	r2, r2, #1
 80014d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2220      	movs	r2, #32
 80014de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	000186a0 	.word	0x000186a0
 8001500:	001e847f 	.word	0x001e847f
 8001504:	003d08ff 	.word	0x003d08ff
 8001508:	431bde83 	.word	0x431bde83
 800150c:	10624dd3 	.word	0x10624dd3

08001510 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af02      	add	r7, sp, #8
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	461a      	mov	r2, r3
 800151c:	460b      	mov	r3, r1
 800151e:	817b      	strh	r3, [r7, #10]
 8001520:	4613      	mov	r3, r2
 8001522:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff fb80 	bl	8000c28 <HAL_GetTick>
 8001528:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b20      	cmp	r3, #32
 8001534:	f040 80e0 	bne.w	80016f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2319      	movs	r3, #25
 800153e:	2201      	movs	r2, #1
 8001540:	4970      	ldr	r1, [pc, #448]	; (8001704 <HAL_I2C_Master_Transmit+0x1f4>)
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f000 fc56 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800154e:	2302      	movs	r3, #2
 8001550:	e0d3      	b.n	80016fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <HAL_I2C_Master_Transmit+0x50>
 800155c:	2302      	movs	r3, #2
 800155e:	e0cc      	b.n	80016fa <HAL_I2C_Master_Transmit+0x1ea>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b01      	cmp	r3, #1
 8001574:	d007      	beq.n	8001586 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 0201 	orr.w	r2, r2, #1
 8001584:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001594:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2221      	movs	r2, #33	; 0x21
 800159a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2210      	movs	r2, #16
 80015a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	893a      	ldrh	r2, [r7, #8]
 80015b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015bc:	b29a      	uxth	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4a50      	ldr	r2, [pc, #320]	; (8001708 <HAL_I2C_Master_Transmit+0x1f8>)
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015c8:	8979      	ldrh	r1, [r7, #10]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	6a3a      	ldr	r2, [r7, #32]
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 fac2 	bl	8001b58 <I2C_MasterRequestWrite>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e08d      	b.n	80016fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015f4:	e066      	b.n	80016c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	6a39      	ldr	r1, [r7, #32]
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 fcd0 	bl	8001fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00d      	beq.n	8001622 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	2b04      	cmp	r3, #4
 800160c:	d107      	bne.n	800161e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800161c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e06b      	b.n	80016fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	781a      	ldrb	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800163c:	b29b      	uxth	r3, r3
 800163e:	3b01      	subs	r3, #1
 8001640:	b29a      	uxth	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164a:	3b01      	subs	r3, #1
 800164c:	b29a      	uxth	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b04      	cmp	r3, #4
 800165e:	d11b      	bne.n	8001698 <HAL_I2C_Master_Transmit+0x188>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001664:	2b00      	cmp	r3, #0
 8001666:	d017      	beq.n	8001698 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001682:	b29b      	uxth	r3, r3
 8001684:	3b01      	subs	r3, #1
 8001686:	b29a      	uxth	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001690:	3b01      	subs	r3, #1
 8001692:	b29a      	uxth	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	6a39      	ldr	r1, [r7, #32]
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 fcc0 	bl	8002022 <I2C_WaitOnBTFFlagUntilTimeout>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00d      	beq.n	80016c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d107      	bne.n	80016c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e01a      	b.n	80016fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d194      	bne.n	80015f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2220      	movs	r2, #32
 80016e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	e000      	b.n	80016fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016f8:	2302      	movs	r3, #2
  }
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	00100002 	.word	0x00100002
 8001708:	ffff0000 	.word	0xffff0000

0800170c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08c      	sub	sp, #48	; 0x30
 8001710:	af02      	add	r7, sp, #8
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	461a      	mov	r2, r3
 8001718:	460b      	mov	r3, r1
 800171a:	817b      	strh	r3, [r7, #10]
 800171c:	4613      	mov	r3, r2
 800171e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff fa82 	bl	8000c28 <HAL_GetTick>
 8001724:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b20      	cmp	r3, #32
 8001730:	f040 820b 	bne.w	8001b4a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2319      	movs	r3, #25
 800173a:	2201      	movs	r2, #1
 800173c:	497c      	ldr	r1, [pc, #496]	; (8001930 <HAL_I2C_Master_Receive+0x224>)
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f000 fb58 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800174a:	2302      	movs	r3, #2
 800174c:	e1fe      	b.n	8001b4c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_I2C_Master_Receive+0x50>
 8001758:	2302      	movs	r3, #2
 800175a:	e1f7      	b.n	8001b4c <HAL_I2C_Master_Receive+0x440>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b01      	cmp	r3, #1
 8001770:	d007      	beq.n	8001782 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 0201 	orr.w	r2, r2, #1
 8001780:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001790:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2222      	movs	r2, #34	; 0x22
 8001796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2210      	movs	r2, #16
 800179e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	893a      	ldrh	r2, [r7, #8]
 80017b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4a5c      	ldr	r2, [pc, #368]	; (8001934 <HAL_I2C_Master_Receive+0x228>)
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017c4:	8979      	ldrh	r1, [r7, #10]
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 fa46 	bl	8001c5c <I2C_MasterRequestRead>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e1b8      	b.n	8001b4c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d113      	bne.n	800180a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	623b      	str	r3, [r7, #32]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	623b      	str	r3, [r7, #32]
 80017f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	e18c      	b.n	8001b24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180e:	2b01      	cmp	r3, #1
 8001810:	d11b      	bne.n	800184a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001820:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	61fb      	str	r3, [r7, #28]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	e16c      	b.n	8001b24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184e:	2b02      	cmp	r3, #2
 8001850:	d11b      	bne.n	800188a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001860:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001870:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	61bb      	str	r3, [r7, #24]
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	e14c      	b.n	8001b24 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001898:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80018b0:	e138      	b.n	8001b24 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	f200 80f1 	bhi.w	8001a9e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d123      	bne.n	800190c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 fbeb 	bl	80020a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e139      	b.n	8001b4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691a      	ldr	r2, [r3, #16]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001900:	b29b      	uxth	r3, r3
 8001902:	3b01      	subs	r3, #1
 8001904:	b29a      	uxth	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	855a      	strh	r2, [r3, #42]	; 0x2a
 800190a:	e10b      	b.n	8001b24 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001910:	2b02      	cmp	r3, #2
 8001912:	d14e      	bne.n	80019b2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800191a:	2200      	movs	r2, #0
 800191c:	4906      	ldr	r1, [pc, #24]	; (8001938 <HAL_I2C_Master_Receive+0x22c>)
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 fa68 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d008      	beq.n	800193c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e10e      	b.n	8001b4c <HAL_I2C_Master_Receive+0x440>
 800192e:	bf00      	nop
 8001930:	00100002 	.word	0x00100002
 8001934:	ffff0000 	.word	0xffff0000
 8001938:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800194a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001974:	b29b      	uxth	r3, r3
 8001976:	3b01      	subs	r3, #1
 8001978:	b29a      	uxth	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199a:	3b01      	subs	r3, #1
 800199c:	b29a      	uxth	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	3b01      	subs	r3, #1
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019b0:	e0b8      	b.n	8001b24 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b8:	2200      	movs	r2, #0
 80019ba:	4966      	ldr	r1, [pc, #408]	; (8001b54 <HAL_I2C_Master_Receive+0x448>)
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 fa19 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0bf      	b.n	8001b4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691a      	ldr	r2, [r3, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a14:	2200      	movs	r2, #0
 8001a16:	494f      	ldr	r1, [pc, #316]	; (8001b54 <HAL_I2C_Master_Receive+0x448>)
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 f9eb 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e091      	b.n	8001b4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691a      	ldr	r2, [r3, #16]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a54:	3b01      	subs	r3, #1
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	3b01      	subs	r3, #1
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	691a      	ldr	r2, [r3, #16]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a9c:	e042      	b.n	8001b24 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 fafe 	bl	80020a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e04c      	b.n	8001b4c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d118      	bne.n	8001b24 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f47f aec2 	bne.w	80018b2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2220      	movs	r2, #32
 8001b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e000      	b.n	8001b4c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001b4a:	2302      	movs	r3, #2
  }
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3728      	adds	r7, #40	; 0x28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	00010004 	.word	0x00010004

08001b58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	460b      	mov	r3, r1
 8001b66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d006      	beq.n	8001b82 <I2C_MasterRequestWrite+0x2a>
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d003      	beq.n	8001b82 <I2C_MasterRequestWrite+0x2a>
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b80:	d108      	bne.n	8001b94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e00b      	b.n	8001bac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	2b12      	cmp	r3, #18
 8001b9a:	d107      	bne.n	8001bac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001baa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f91b 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00c      	beq.n	8001bde <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e035      	b.n	8001c4a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001be6:	d108      	bne.n	8001bfa <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001be8:	897b      	ldrh	r3, [r7, #10]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001bf6:	611a      	str	r2, [r3, #16]
 8001bf8:	e01b      	b.n	8001c32 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bfa:	897b      	ldrh	r3, [r7, #10]
 8001bfc:	11db      	asrs	r3, r3, #7
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f003 0306 	and.w	r3, r3, #6
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	f063 030f 	orn	r3, r3, #15
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	490f      	ldr	r1, [pc, #60]	; (8001c54 <I2C_MasterRequestWrite+0xfc>)
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 f942 	bl	8001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e010      	b.n	8001c4a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c28:	897b      	ldrh	r3, [r7, #10]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	4908      	ldr	r1, [pc, #32]	; (8001c58 <I2C_MasterRequestWrite+0x100>)
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 f932 	bl	8001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	00010008 	.word	0x00010008
 8001c58:	00010002 	.word	0x00010002

08001c5c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c80:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d006      	beq.n	8001c96 <I2C_MasterRequestRead+0x3a>
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d003      	beq.n	8001c96 <I2C_MasterRequestRead+0x3a>
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c94:	d108      	bne.n	8001ca8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	e00b      	b.n	8001cc0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	2b11      	cmp	r3, #17
 8001cae:	d107      	bne.n	8001cc0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 f891 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00c      	beq.n	8001cf2 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e078      	b.n	8001de4 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cfa:	d108      	bne.n	8001d0e <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001cfc:	897b      	ldrh	r3, [r7, #10]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	611a      	str	r2, [r3, #16]
 8001d0c:	e05e      	b.n	8001dcc <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d0e:	897b      	ldrh	r3, [r7, #10]
 8001d10:	11db      	asrs	r3, r3, #7
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f003 0306 	and.w	r3, r3, #6
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	f063 030f 	orn	r3, r3, #15
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4930      	ldr	r1, [pc, #192]	; (8001dec <I2C_MasterRequestRead+0x190>)
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f000 f8b8 	bl	8001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e053      	b.n	8001de4 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d3c:	897b      	ldrh	r3, [r7, #10]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4929      	ldr	r1, [pc, #164]	; (8001df0 <I2C_MasterRequestRead+0x194>)
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f8a8 	bl	8001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e043      	b.n	8001de4 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d80:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 f830 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00c      	beq.n	8001db4 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e017      	b.n	8001de4 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001db4:	897b      	ldrh	r3, [r7, #10]
 8001db6:	11db      	asrs	r3, r3, #7
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	f003 0306 	and.w	r3, r3, #6
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f063 030e 	orn	r3, r3, #14
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	4907      	ldr	r1, [pc, #28]	; (8001df0 <I2C_MasterRequestRead+0x194>)
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 f865 	bl	8001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	00010008 	.word	0x00010008
 8001df0:	00010002 	.word	0x00010002

08001df4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	4613      	mov	r3, r2
 8001e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e04:	e025      	b.n	8001e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0c:	d021      	beq.n	8001e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e0e:	f7fe ff0b 	bl	8000c28 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d302      	bcc.n	8001e24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d116      	bne.n	8001e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f043 0220 	orr.w	r2, r3, #32
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e023      	b.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	0c1b      	lsrs	r3, r3, #16
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d10d      	bne.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4013      	ands	r3, r2
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bf0c      	ite	eq
 8001e6e:	2301      	moveq	r3, #1
 8001e70:	2300      	movne	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	e00c      	b.n	8001e92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4013      	ands	r3, r2
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf0c      	ite	eq
 8001e8a:	2301      	moveq	r3, #1
 8001e8c:	2300      	movne	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d0b6      	beq.n	8001e06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001eb0:	e051      	b.n	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec0:	d123      	bne.n	8001f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001eda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f043 0204 	orr.w	r2, r3, #4
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e046      	b.n	8001f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f10:	d021      	beq.n	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f12:	f7fe fe89 	bl	8000c28 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d302      	bcc.n	8001f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d116      	bne.n	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2220      	movs	r2, #32
 8001f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f043 0220 	orr.w	r2, r3, #32
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e020      	b.n	8001f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d10c      	bne.n	8001f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf14      	ite	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	2300      	moveq	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	e00b      	b.n	8001f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	43da      	mvns	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	4013      	ands	r3, r2
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf14      	ite	ne
 8001f8c:	2301      	movne	r3, #1
 8001f8e:	2300      	moveq	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d18d      	bne.n	8001eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fac:	e02d      	b.n	800200a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f8ce 	bl	8002150 <I2C_IsAcknowledgeFailed>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e02d      	b.n	800201a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d021      	beq.n	800200a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc6:	f7fe fe2f 	bl	8000c28 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d302      	bcc.n	8001fdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d116      	bne.n	800200a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f043 0220 	orr.w	r2, r3, #32
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e007      	b.n	800201a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002014:	2b80      	cmp	r3, #128	; 0x80
 8002016:	d1ca      	bne.n	8001fae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800202e:	e02d      	b.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f88d 	bl	8002150 <I2C_IsAcknowledgeFailed>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e02d      	b.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002046:	d021      	beq.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002048:	f7fe fdee 	bl	8000c28 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	429a      	cmp	r2, r3
 8002056:	d302      	bcc.n	800205e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d116      	bne.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e007      	b.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b04      	cmp	r3, #4
 8002098:	d1ca      	bne.n	8002030 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020b0:	e042      	b.n	8002138 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2b10      	cmp	r3, #16
 80020be:	d119      	bne.n	80020f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0210 	mvn.w	r2, #16
 80020c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e029      	b.n	8002148 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f4:	f7fe fd98 	bl	8000c28 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	429a      	cmp	r2, r3
 8002102:	d302      	bcc.n	800210a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d116      	bne.n	8002138 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	f043 0220 	orr.w	r2, r3, #32
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e007      	b.n	8002148 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002142:	2b40      	cmp	r3, #64	; 0x40
 8002144:	d1b5      	bne.n	80020b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002166:	d11b      	bne.n	80021a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002170:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f043 0204 	orr.w	r2, r3, #4
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e25b      	b.n	800267a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d075      	beq.n	80022ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ce:	4ba3      	ldr	r3, [pc, #652]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d00c      	beq.n	80021f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021da:	4ba0      	ldr	r3, [pc, #640]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d112      	bne.n	800220c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021e6:	4b9d      	ldr	r3, [pc, #628]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021f2:	d10b      	bne.n	800220c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f4:	4b99      	ldr	r3, [pc, #612]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d05b      	beq.n	80022b8 <HAL_RCC_OscConfig+0x108>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d157      	bne.n	80022b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e236      	b.n	800267a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002214:	d106      	bne.n	8002224 <HAL_RCC_OscConfig+0x74>
 8002216:	4b91      	ldr	r3, [pc, #580]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a90      	ldr	r2, [pc, #576]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 800221c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e01d      	b.n	8002260 <HAL_RCC_OscConfig+0xb0>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800222c:	d10c      	bne.n	8002248 <HAL_RCC_OscConfig+0x98>
 800222e:	4b8b      	ldr	r3, [pc, #556]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a8a      	ldr	r2, [pc, #552]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 8002234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	4b88      	ldr	r3, [pc, #544]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a87      	ldr	r2, [pc, #540]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 8002240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e00b      	b.n	8002260 <HAL_RCC_OscConfig+0xb0>
 8002248:	4b84      	ldr	r3, [pc, #528]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a83      	ldr	r2, [pc, #524]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 800224e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b81      	ldr	r3, [pc, #516]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a80      	ldr	r2, [pc, #512]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 800225a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d013      	beq.n	8002290 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe fcde 	bl	8000c28 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002270:	f7fe fcda 	bl	8000c28 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	; 0x64
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e1fb      	b.n	800267a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002282:	4b76      	ldr	r3, [pc, #472]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0xc0>
 800228e:	e014      	b.n	80022ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7fe fcca 	bl	8000c28 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002298:	f7fe fcc6 	bl	8000c28 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e1e7      	b.n	800267a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022aa:	4b6c      	ldr	r3, [pc, #432]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0xe8>
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d063      	beq.n	800238e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022c6:	4b65      	ldr	r3, [pc, #404]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00b      	beq.n	80022ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022d2:	4b62      	ldr	r3, [pc, #392]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d11c      	bne.n	8002318 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022de:	4b5f      	ldr	r3, [pc, #380]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d116      	bne.n	8002318 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	4b5c      	ldr	r3, [pc, #368]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <HAL_RCC_OscConfig+0x152>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e1bb      	b.n	800267a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002302:	4b56      	ldr	r3, [pc, #344]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4952      	ldr	r1, [pc, #328]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	e03a      	b.n	800238e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d020      	beq.n	8002362 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002320:	4b4f      	ldr	r3, [pc, #316]	; (8002460 <HAL_RCC_OscConfig+0x2b0>)
 8002322:	2201      	movs	r2, #1
 8002324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002326:	f7fe fc7f 	bl	8000c28 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800232e:	f7fe fc7b 	bl	8000c28 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e19c      	b.n	800267a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002340:	4b46      	ldr	r3, [pc, #280]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234c:	4b43      	ldr	r3, [pc, #268]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4940      	ldr	r1, [pc, #256]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 800235c:	4313      	orrs	r3, r2
 800235e:	600b      	str	r3, [r1, #0]
 8002360:	e015      	b.n	800238e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002362:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <HAL_RCC_OscConfig+0x2b0>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe fc5e 	bl	8000c28 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002370:	f7fe fc5a 	bl	8000c28 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e17b      	b.n	800267a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002382:	4b36      	ldr	r3, [pc, #216]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d030      	beq.n	80023fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d016      	beq.n	80023d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a2:	4b30      	ldr	r3, [pc, #192]	; (8002464 <HAL_RCC_OscConfig+0x2b4>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a8:	f7fe fc3e 	bl	8000c28 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b0:	f7fe fc3a 	bl	8000c28 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e15b      	b.n	800267a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c2:	4b26      	ldr	r3, [pc, #152]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0x200>
 80023ce:	e015      	b.n	80023fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d0:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_RCC_OscConfig+0x2b4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d6:	f7fe fc27 	bl	8000c28 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023de:	f7fe fc23 	bl	8000c28 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e144      	b.n	800267a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f0:	4b1a      	ldr	r3, [pc, #104]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 80023f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f0      	bne.n	80023de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80a0 	beq.w	800254a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10f      	bne.n	800243a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	4a0e      	ldr	r2, [pc, #56]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002428:	6413      	str	r3, [r2, #64]	; 0x40
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_RCC_OscConfig+0x2ac>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002436:	2301      	movs	r3, #1
 8002438:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCC_OscConfig+0x2b8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002442:	2b00      	cmp	r3, #0
 8002444:	d121      	bne.n	800248a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <HAL_RCC_OscConfig+0x2b8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a07      	ldr	r2, [pc, #28]	; (8002468 <HAL_RCC_OscConfig+0x2b8>)
 800244c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002452:	f7fe fbe9 	bl	8000c28 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002458:	e011      	b.n	800247e <HAL_RCC_OscConfig+0x2ce>
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800
 8002460:	42470000 	.word	0x42470000
 8002464:	42470e80 	.word	0x42470e80
 8002468:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246c:	f7fe fbdc 	bl	8000c28 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0fd      	b.n	800267a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247e:	4b81      	ldr	r3, [pc, #516]	; (8002684 <HAL_RCC_OscConfig+0x4d4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d106      	bne.n	80024a0 <HAL_RCC_OscConfig+0x2f0>
 8002492:	4b7d      	ldr	r3, [pc, #500]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	4a7c      	ldr	r2, [pc, #496]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6713      	str	r3, [r2, #112]	; 0x70
 800249e:	e01c      	b.n	80024da <HAL_RCC_OscConfig+0x32a>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d10c      	bne.n	80024c2 <HAL_RCC_OscConfig+0x312>
 80024a8:	4b77      	ldr	r3, [pc, #476]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ac:	4a76      	ldr	r2, [pc, #472]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 80024ae:	f043 0304 	orr.w	r3, r3, #4
 80024b2:	6713      	str	r3, [r2, #112]	; 0x70
 80024b4:	4b74      	ldr	r3, [pc, #464]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	4a73      	ldr	r2, [pc, #460]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6713      	str	r3, [r2, #112]	; 0x70
 80024c0:	e00b      	b.n	80024da <HAL_RCC_OscConfig+0x32a>
 80024c2:	4b71      	ldr	r3, [pc, #452]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 80024c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c6:	4a70      	ldr	r2, [pc, #448]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	6713      	str	r3, [r2, #112]	; 0x70
 80024ce:	4b6e      	ldr	r3, [pc, #440]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	4a6d      	ldr	r2, [pc, #436]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 80024d4:	f023 0304 	bic.w	r3, r3, #4
 80024d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d015      	beq.n	800250e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e2:	f7fe fba1 	bl	8000c28 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e8:	e00a      	b.n	8002500 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7fe fb9d 	bl	8000c28 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e0bc      	b.n	800267a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002500:	4b61      	ldr	r3, [pc, #388]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0ee      	beq.n	80024ea <HAL_RCC_OscConfig+0x33a>
 800250c:	e014      	b.n	8002538 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7fe fb8b 	bl	8000c28 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002514:	e00a      	b.n	800252c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002516:	f7fe fb87 	bl	8000c28 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f241 3288 	movw	r2, #5000	; 0x1388
 8002524:	4293      	cmp	r3, r2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e0a6      	b.n	800267a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252c:	4b56      	ldr	r3, [pc, #344]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1ee      	bne.n	8002516 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002538:	7dfb      	ldrb	r3, [r7, #23]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d105      	bne.n	800254a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800253e:	4b52      	ldr	r3, [pc, #328]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a51      	ldr	r2, [pc, #324]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 8002544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 8092 	beq.w	8002678 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002554:	4b4c      	ldr	r3, [pc, #304]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b08      	cmp	r3, #8
 800255e:	d05c      	beq.n	800261a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d141      	bne.n	80025ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002568:	4b48      	ldr	r3, [pc, #288]	; (800268c <HAL_RCC_OscConfig+0x4dc>)
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7fe fb5b 	bl	8000c28 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002576:	f7fe fb57 	bl	8000c28 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e078      	b.n	800267a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002588:	4b3f      	ldr	r3, [pc, #252]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f0      	bne.n	8002576 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69da      	ldr	r2, [r3, #28]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	019b      	lsls	r3, r3, #6
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025aa:	085b      	lsrs	r3, r3, #1
 80025ac:	3b01      	subs	r3, #1
 80025ae:	041b      	lsls	r3, r3, #16
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	061b      	lsls	r3, r3, #24
 80025b8:	4933      	ldr	r1, [pc, #204]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025be:	4b33      	ldr	r3, [pc, #204]	; (800268c <HAL_RCC_OscConfig+0x4dc>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7fe fb30 	bl	8000c28 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025cc:	f7fe fb2c 	bl	8000c28 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e04d      	b.n	800267a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025de:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x41c>
 80025ea:	e045      	b.n	8002678 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_RCC_OscConfig+0x4dc>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f2:	f7fe fb19 	bl	8000c28 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fa:	f7fe fb15 	bl	8000c28 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e036      	b.n	800267a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260c:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f0      	bne.n	80025fa <HAL_RCC_OscConfig+0x44a>
 8002618:	e02e      	b.n	8002678 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e029      	b.n	800267a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <HAL_RCC_OscConfig+0x4d8>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	429a      	cmp	r2, r3
 8002638:	d11c      	bne.n	8002674 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002644:	429a      	cmp	r2, r3
 8002646:	d115      	bne.n	8002674 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800264e:	4013      	ands	r3, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002654:	4293      	cmp	r3, r2
 8002656:	d10d      	bne.n	8002674 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d106      	bne.n	8002674 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40007000 	.word	0x40007000
 8002688:	40023800 	.word	0x40023800
 800268c:	42470060 	.word	0x42470060

08002690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0cc      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a4:	4b68      	ldr	r3, [pc, #416]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 030f 	and.w	r3, r3, #15
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d90c      	bls.n	80026cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b65      	ldr	r3, [pc, #404]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b63      	ldr	r3, [pc, #396]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0b8      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e4:	4b59      	ldr	r3, [pc, #356]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	4a58      	ldr	r2, [pc, #352]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026fc:	4b53      	ldr	r3, [pc, #332]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	4a52      	ldr	r2, [pc, #328]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b50      	ldr	r3, [pc, #320]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	494d      	ldr	r1, [pc, #308]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d044      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d119      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e07f      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d003      	beq.n	800274e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800274a:	2b03      	cmp	r3, #3
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274e:	4b3f      	ldr	r3, [pc, #252]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e06f      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275e:	4b3b      	ldr	r3, [pc, #236]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e067      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276e:	4b37      	ldr	r3, [pc, #220]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f023 0203 	bic.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4934      	ldr	r1, [pc, #208]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	4313      	orrs	r3, r2
 800277e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002780:	f7fe fa52 	bl	8000c28 <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	e00a      	b.n	800279e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002788:	f7fe fa4e 	bl	8000c28 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e04f      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 020c 	and.w	r2, r3, #12
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d1eb      	bne.n	8002788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027b0:	4b25      	ldr	r3, [pc, #148]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d20c      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e032      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4916      	ldr	r1, [pc, #88]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	490e      	ldr	r1, [pc, #56]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002816:	f000 f821 	bl	800285c <HAL_RCC_GetSysClockFreq>
 800281a:	4601      	mov	r1, r0
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	5cd3      	ldrb	r3, [r2, r3]
 800282a:	fa21 f303 	lsr.w	r3, r1, r3
 800282e:	4a09      	ldr	r2, [pc, #36]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_RCC_ClockConfig+0x1c8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe f9b2 	bl	8000ba0 <HAL_InitTick>

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023c00 	.word	0x40023c00
 800284c:	40023800 	.word	0x40023800
 8002850:	0800768c 	.word	0x0800768c
 8002854:	20000004 	.word	0x20000004
 8002858:	20000008 	.word	0x20000008

0800285c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	2300      	movs	r3, #0
 800286c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002872:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b04      	cmp	r3, #4
 800287c:	d007      	beq.n	800288e <HAL_RCC_GetSysClockFreq+0x32>
 800287e:	2b08      	cmp	r3, #8
 8002880:	d008      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x38>
 8002882:	2b00      	cmp	r3, #0
 8002884:	f040 80b4 	bne.w	80029f0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002888:	4b5e      	ldr	r3, [pc, #376]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800288a:	60bb      	str	r3, [r7, #8]
       break;
 800288c:	e0b3      	b.n	80029f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800288e:	4b5e      	ldr	r3, [pc, #376]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002890:	60bb      	str	r3, [r7, #8]
      break;
 8002892:	e0b0      	b.n	80029f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002894:	4b5a      	ldr	r3, [pc, #360]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800289c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800289e:	4b58      	ldr	r3, [pc, #352]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d04a      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028aa:	4b55      	ldr	r3, [pc, #340]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	099b      	lsrs	r3, r3, #6
 80028b0:	f04f 0400 	mov.w	r4, #0
 80028b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	ea03 0501 	and.w	r5, r3, r1
 80028c0:	ea04 0602 	and.w	r6, r4, r2
 80028c4:	4629      	mov	r1, r5
 80028c6:	4632      	mov	r2, r6
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	f04f 0400 	mov.w	r4, #0
 80028d0:	0154      	lsls	r4, r2, #5
 80028d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028d6:	014b      	lsls	r3, r1, #5
 80028d8:	4619      	mov	r1, r3
 80028da:	4622      	mov	r2, r4
 80028dc:	1b49      	subs	r1, r1, r5
 80028de:	eb62 0206 	sbc.w	r2, r2, r6
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	f04f 0400 	mov.w	r4, #0
 80028ea:	0194      	lsls	r4, r2, #6
 80028ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028f0:	018b      	lsls	r3, r1, #6
 80028f2:	1a5b      	subs	r3, r3, r1
 80028f4:	eb64 0402 	sbc.w	r4, r4, r2
 80028f8:	f04f 0100 	mov.w	r1, #0
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	00e2      	lsls	r2, r4, #3
 8002902:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002906:	00d9      	lsls	r1, r3, #3
 8002908:	460b      	mov	r3, r1
 800290a:	4614      	mov	r4, r2
 800290c:	195b      	adds	r3, r3, r5
 800290e:	eb44 0406 	adc.w	r4, r4, r6
 8002912:	f04f 0100 	mov.w	r1, #0
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	0262      	lsls	r2, r4, #9
 800291c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002920:	0259      	lsls	r1, r3, #9
 8002922:	460b      	mov	r3, r1
 8002924:	4614      	mov	r4, r2
 8002926:	4618      	mov	r0, r3
 8002928:	4621      	mov	r1, r4
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f04f 0400 	mov.w	r4, #0
 8002930:	461a      	mov	r2, r3
 8002932:	4623      	mov	r3, r4
 8002934:	f7fd fc48 	bl	80001c8 <__aeabi_uldivmod>
 8002938:	4603      	mov	r3, r0
 800293a:	460c      	mov	r4, r1
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	e049      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002940:	4b2f      	ldr	r3, [pc, #188]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	f04f 0400 	mov.w	r4, #0
 800294a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	ea03 0501 	and.w	r5, r3, r1
 8002956:	ea04 0602 	and.w	r6, r4, r2
 800295a:	4629      	mov	r1, r5
 800295c:	4632      	mov	r2, r6
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	f04f 0400 	mov.w	r4, #0
 8002966:	0154      	lsls	r4, r2, #5
 8002968:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800296c:	014b      	lsls	r3, r1, #5
 800296e:	4619      	mov	r1, r3
 8002970:	4622      	mov	r2, r4
 8002972:	1b49      	subs	r1, r1, r5
 8002974:	eb62 0206 	sbc.w	r2, r2, r6
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	f04f 0400 	mov.w	r4, #0
 8002980:	0194      	lsls	r4, r2, #6
 8002982:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002986:	018b      	lsls	r3, r1, #6
 8002988:	1a5b      	subs	r3, r3, r1
 800298a:	eb64 0402 	sbc.w	r4, r4, r2
 800298e:	f04f 0100 	mov.w	r1, #0
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	00e2      	lsls	r2, r4, #3
 8002998:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800299c:	00d9      	lsls	r1, r3, #3
 800299e:	460b      	mov	r3, r1
 80029a0:	4614      	mov	r4, r2
 80029a2:	195b      	adds	r3, r3, r5
 80029a4:	eb44 0406 	adc.w	r4, r4, r6
 80029a8:	f04f 0100 	mov.w	r1, #0
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	02a2      	lsls	r2, r4, #10
 80029b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029b6:	0299      	lsls	r1, r3, #10
 80029b8:	460b      	mov	r3, r1
 80029ba:	4614      	mov	r4, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	4621      	mov	r1, r4
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f04f 0400 	mov.w	r4, #0
 80029c6:	461a      	mov	r2, r3
 80029c8:	4623      	mov	r3, r4
 80029ca:	f7fd fbfd 	bl	80001c8 <__aeabi_uldivmod>
 80029ce:	4603      	mov	r3, r0
 80029d0:	460c      	mov	r4, r1
 80029d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	0c1b      	lsrs	r3, r3, #16
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	3301      	adds	r3, #1
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	60bb      	str	r3, [r7, #8]
      break;
 80029ee:	e002      	b.n	80029f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029f2:	60bb      	str	r3, [r7, #8]
      break;
 80029f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029f6:	68bb      	ldr	r3, [r7, #8]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a00:	40023800 	.word	0x40023800
 8002a04:	00f42400 	.word	0x00f42400
 8002a08:	007a1200 	.word	0x007a1200

08002a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a10:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a12:	681b      	ldr	r3, [r3, #0]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20000004 	.word	0x20000004

08002a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a28:	f7ff fff0 	bl	8002a0c <HAL_RCC_GetHCLKFreq>
 8002a2c:	4601      	mov	r1, r0
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	0a9b      	lsrs	r3, r3, #10
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	4a03      	ldr	r2, [pc, #12]	; (8002a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a3a:	5cd3      	ldrb	r3, [r2, r3]
 8002a3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40023800 	.word	0x40023800
 8002a48:	0800769c 	.word	0x0800769c

08002a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e056      	b.n	8002b0c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d106      	bne.n	8002a7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7fd ff89 	bl	8000990 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2202      	movs	r2, #2
 8002a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	ea42 0103 	orr.w	r1, r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	0c1b      	lsrs	r3, r3, #16
 8002adc:	f003 0104 	and.w	r1, r3, #4
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002afa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8002b22:	6839      	ldr	r1, [r7, #0]
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f001 fcb6 	bl	8004496 <VL53L0X_get_offset_calibration_data_micro_meter>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8002b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8002b3c:	b5b0      	push	{r4, r5, r7, lr}
 8002b3e:	b096      	sub	sp, #88	; 0x58
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8002b4a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d107      	bne.n	8002b62 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2188      	movs	r1, #136	; 0x88
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f004 fc1c 	bl	8007394 <VL53L0X_WrByte>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b70:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b7a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a9e      	ldr	r2, [pc, #632]	; (8002dfc <VL53L0X_DataInit+0x2c0>)
 8002b82:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a9d      	ldr	r2, [pc, #628]	; (8002e00 <VL53L0X_DataInit+0x2c4>)
 8002b8a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002b94:	f107 0310 	add.w	r3, r7, #16
 8002b98:	4619      	mov	r1, r3
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fac2 	bl	8003124 <VL53L0X_GetDeviceParameters>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8002ba6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d112      	bne.n	8002bd4 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f103 0410 	add.w	r4, r3, #16
 8002bbc:	f107 0510 	add.w	r5, r7, #16
 8002bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bcc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002bd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2264      	movs	r2, #100	; 0x64
 8002bd8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002be2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002bec:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002bf6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002c02:	2201      	movs	r2, #1
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f004 fbc4 	bl	8007394 <VL53L0X_WrByte>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	21ff      	movs	r1, #255	; 0xff
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f004 fbb8 	bl	8007394 <VL53L0X_WrByte>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002c32:	2200      	movs	r2, #0
 8002c34:	2100      	movs	r1, #0
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f004 fbac 	bl	8007394 <VL53L0X_WrByte>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8002c4a:	f107 030f 	add.w	r3, r7, #15
 8002c4e:	461a      	mov	r2, r3
 8002c50:	2191      	movs	r1, #145	; 0x91
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f004 fc20 	bl	8007498 <VL53L0X_RdByte>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8002c66:	7bfa      	ldrb	r2, [r7, #15]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002c6e:	2201      	movs	r2, #1
 8002c70:	2100      	movs	r1, #0
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f004 fb8e 	bl	8007394 <VL53L0X_WrByte>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002c86:	2200      	movs	r2, #0
 8002c88:	21ff      	movs	r1, #255	; 0xff
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f004 fb82 	bl	8007394 <VL53L0X_WrByte>
 8002c90:	4603      	mov	r3, r0
 8002c92:	461a      	mov	r2, r3
 8002c94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f004 fb76 	bl	8007394 <VL53L0X_WrByte>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	461a      	mov	r2, r3
 8002cac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	653b      	str	r3, [r7, #80]	; 0x50
 8002cba:	e014      	b.n	8002ce6 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8002cbc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d114      	bne.n	8002cee <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8002cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2201      	movs	r2, #1
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fd39 	bl	8003744 <VL53L0X_SetLimitCheckEnable>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	653b      	str	r3, [r7, #80]	; 0x50
 8002ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce8:	2b05      	cmp	r3, #5
 8002cea:	dde7      	ble.n	8002cbc <VL53L0X_DataInit+0x180>
 8002cec:	e000      	b.n	8002cf0 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8002cee:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8002cf0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2102      	movs	r1, #2
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fd21 	bl	8003744 <VL53L0X_SetLimitCheckEnable>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002d08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002d10:	2200      	movs	r2, #0
 8002d12:	2103      	movs	r1, #3
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fd15 	bl	8003744 <VL53L0X_SetLimitCheckEnable>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002d20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d107      	bne.n	8002d38 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2104      	movs	r1, #4
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 fd09 	bl	8003744 <VL53L0X_SetLimitCheckEnable>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002d38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d107      	bne.n	8002d50 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002d40:	2200      	movs	r2, #0
 8002d42:	2105      	movs	r1, #5
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fcfd 	bl	8003744 <VL53L0X_SetLimitCheckEnable>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8002d50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d108      	bne.n	8002d6a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002d58:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fda0 	bl	80038a4 <VL53L0X_SetLimitCheckValue>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002d6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d108      	bne.n	8002d84 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002d72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d76:	2101      	movs	r1, #1
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 fd93 	bl	80038a4 <VL53L0X_SetLimitCheckValue>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002d84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d108      	bne.n	8002d9e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002d8c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8002d90:	2102      	movs	r1, #2
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fd86 	bl	80038a4 <VL53L0X_SetLimitCheckValue>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002d9e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d107      	bne.n	8002db6 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002da6:	2200      	movs	r2, #0
 8002da8:	2103      	movs	r1, #3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fd7a 	bl	80038a4 <VL53L0X_SetLimitCheckValue>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002db6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10f      	bne.n	8002dde <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	22ff      	movs	r2, #255	; 0xff
 8002dc2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002dc6:	22ff      	movs	r2, #255	; 0xff
 8002dc8:	2101      	movs	r1, #1
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f004 fae2 	bl	8007394 <VL53L0X_WrByte>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8002dde:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8002dee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3758      	adds	r7, #88	; 0x58
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	00016b85 	.word	0x00016b85
 8002e00:	000970a4 	.word	0x000970a4

08002e04 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8002e04:	b5b0      	push	{r4, r5, r7, lr}
 8002e06:	b09e      	sub	sp, #120	; 0x78
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8002e12:	f107 031c 	add.w	r3, r7, #28
 8002e16:	2240      	movs	r2, #64	; 0x40
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f004 fc19 	bl	8007652 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8002e40:	2101      	movs	r1, #1
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f002 fa6a 	bl	800531c <VL53L0X_get_info_from_device>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8002e54:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8002e5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8002e60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d80d      	bhi.n	8002e84 <VL53L0X_StaticInit+0x80>
 8002e68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d102      	bne.n	8002e76 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8002e70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e72:	2b20      	cmp	r3, #32
 8002e74:	d806      	bhi.n	8002e84 <VL53L0X_StaticInit+0x80>
 8002e76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10e      	bne.n	8002e9c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8002e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e80:	2b0c      	cmp	r3, #12
 8002e82:	d90b      	bls.n	8002e9c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8002e84:	f107 0218 	add.w	r2, r7, #24
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f001 fcfc 	bl	800488c <VL53L0X_perform_ref_spad_management>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002e9a:	e009      	b.n	8002eb0 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8002e9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f001 fefd 	bl	8004ca4 <VL53L0X_set_reference_spads>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8002eb0:	4b94      	ldr	r3, [pc, #592]	; (8003104 <VL53L0X_StaticInit+0x300>)
 8002eb2:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8002eb4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10f      	bne.n	8002edc <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8002ec2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8002ec6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d104      	bne.n	8002ed8 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002ed4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ed6:	e001      	b.n	8002edc <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8002ed8:	4b8a      	ldr	r3, [pc, #552]	; (8003104 <VL53L0X_StaticInit+0x300>)
 8002eda:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002edc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d106      	bne.n	8002ef2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8002ee4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f003 fb34 	bl	8006554 <VL53L0X_load_tuning_settings>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8002ef2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10a      	bne.n	8002f10 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8002efa:	2300      	movs	r3, #0
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	2304      	movs	r3, #4
 8002f00:	2200      	movs	r2, #0
 8002f02:	2100      	movs	r1, #0
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f001 f8f5 	bl	80040f4 <VL53L0X_SetGpioConfig>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002f10:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d121      	bne.n	8002f5c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002f18:	2201      	movs	r2, #1
 8002f1a:	21ff      	movs	r1, #255	; 0xff
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f004 fa39 	bl	8007394 <VL53L0X_WrByte>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8002f28:	f107 031a 	add.w	r3, r7, #26
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2184      	movs	r1, #132	; 0x84
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f004 fadb 	bl	80074ec <VL53L0X_RdWord>
 8002f36:	4603      	mov	r3, r0
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002f44:	2200      	movs	r2, #0
 8002f46:	21ff      	movs	r1, #255	; 0xff
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f004 fa23 	bl	8007394 <VL53L0X_WrByte>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	461a      	mov	r2, r3
 8002f52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002f5c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8002f64:	8b7b      	ldrh	r3, [r7, #26]
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	461a      	mov	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8002f70:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d108      	bne.n	8002f8a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002f78:	f107 031c 	add.w	r3, r7, #28
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f8d0 	bl	8003124 <VL53L0X_GetDeviceParameters>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8002f8a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d110      	bne.n	8002fb4 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8002f92:	f107 0319 	add.w	r3, r7, #25
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f9ae 	bl	80032fa <VL53L0X_GetFractionEnable>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8002fa4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d103      	bne.n	8002fb4 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8002fac:	7e7a      	ldrb	r2, [r7, #25]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002fb4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10e      	bne.n	8002fda <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f103 0410 	add.w	r4, r3, #16
 8002fc2:	f107 051c 	add.w	r5, r7, #28
 8002fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fd2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002fd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8002fda:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d111      	bne.n	8003006 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8002fe2:	f107 0319 	add.w	r3, r7, #25
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2101      	movs	r1, #1
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f004 fa54 	bl	8007498 <VL53L0X_RdByte>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8002ff6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d103      	bne.n	8003006 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8002ffe:	7e7a      	ldrb	r2, [r7, #25]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8003006:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800300a:	2b00      	cmp	r3, #0
 800300c:	d107      	bne.n	800301e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800300e:	2200      	movs	r2, #0
 8003010:	2100      	movs	r1, #0
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f9ce 	bl	80033b4 <VL53L0X_SetSequenceStepEnable>
 8003018:	4603      	mov	r3, r0
 800301a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800301e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003022:	2b00      	cmp	r3, #0
 8003024:	d107      	bne.n	8003036 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003026:	2200      	movs	r2, #0
 8003028:	2102      	movs	r1, #2
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f9c2 	bl	80033b4 <VL53L0X_SetSequenceStepEnable>
 8003030:	4603      	mov	r3, r0
 8003032:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8003036:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800303a:	2b00      	cmp	r3, #0
 800303c:	d103      	bne.n	8003046 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2203      	movs	r2, #3
 8003042:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003046:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800304e:	f107 0313 	add.w	r3, r7, #19
 8003052:	461a      	mov	r2, r3
 8003054:	2100      	movs	r1, #0
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f994 	bl	8003384 <VL53L0X_GetVcselPulsePeriod>
 800305c:	4603      	mov	r3, r0
 800305e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003062:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003066:	2b00      	cmp	r3, #0
 8003068:	d103      	bne.n	8003072 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800306a:	7cfa      	ldrb	r2, [r7, #19]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003072:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800307a:	f107 0313 	add.w	r3, r7, #19
 800307e:	461a      	mov	r2, r3
 8003080:	2101      	movs	r1, #1
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f97e 	bl	8003384 <VL53L0X_GetVcselPulsePeriod>
 8003088:	4603      	mov	r3, r0
 800308a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800308e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003092:	2b00      	cmp	r3, #0
 8003094:	d103      	bne.n	800309e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003096:	7cfa      	ldrb	r2, [r7, #19]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800309e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80030a6:	f107 030c 	add.w	r3, r7, #12
 80030aa:	461a      	mov	r2, r3
 80030ac:	2103      	movs	r1, #3
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f002 feb4 	bl	8005e1c <get_sequence_step_timeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80030ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d103      	bne.n	80030ca <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80030ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80030d2:	f107 030c 	add.w	r3, r7, #12
 80030d6:	461a      	mov	r2, r3
 80030d8:	2104      	movs	r1, #4
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f002 fe9e 	bl	8005e1c <get_sequence_step_timeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80030e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80030f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3770      	adds	r7, #112	; 0x70
 80030fe:	46bd      	mov	sp, r7
 8003100:	bdb0      	pop	{r4, r5, r7, pc}
 8003102:	bf00      	nop
 8003104:	20000010 	.word	0x20000010

08003108 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8003110:	239d      	movs	r3, #157	; 0x9d
 8003112:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8003114:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800312e:	2300      	movs	r3, #0
 8003130:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	4619      	mov	r1, r3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f8cc 	bl	80032d4 <VL53L0X_GetDeviceMode>
 800313c:	4603      	mov	r3, r0
 800313e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d107      	bne.n	8003158 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	3308      	adds	r3, #8
 800314c:	4619      	mov	r1, r3
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fa7c 	bl	800364c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8003154:	4603      	mov	r3, r0
 8003156:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8003158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d102      	bne.n	8003166 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	2200      	movs	r2, #0
 8003164:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8003166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d107      	bne.n	800317e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	3310      	adds	r3, #16
 8003172:	4619      	mov	r1, r3
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fab2 	bl	80036de <VL53L0X_GetXTalkCompensationRateMegaCps>
 800317a:	4603      	mov	r3, r0
 800317c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800317e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d107      	bne.n	8003196 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	3314      	adds	r3, #20
 800318a:	4619      	mov	r1, r3
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff fcc1 	bl	8002b14 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8003192:	4603      	mov	r3, r0
 8003194:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8003196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d134      	bne.n	8003208 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	e02a      	b.n	80031fa <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80031a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d12a      	bne.n	8003202 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	b299      	uxth	r1, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	3308      	adds	r3, #8
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	4413      	add	r3, r2
 80031ba:	3304      	adds	r3, #4
 80031bc:	461a      	mov	r2, r3
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fbd2 	bl	8003968 <VL53L0X_GetLimitCheckValue>
 80031c4:	4603      	mov	r3, r0
 80031c6:	461a      	mov	r2, r3
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80031ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d117      	bne.n	8003206 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	b299      	uxth	r1, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	3318      	adds	r3, #24
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	4413      	add	r3, r2
 80031e2:	461a      	mov	r2, r3
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fb39 	bl	800385c <VL53L0X_GetLimitCheckEnable>
 80031ea:	4603      	mov	r3, r0
 80031ec:	461a      	mov	r2, r3
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	3301      	adds	r3, #1
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b05      	cmp	r3, #5
 80031fe:	ddd1      	ble.n	80031a4 <VL53L0X_GetDeviceParameters+0x80>
 8003200:	e002      	b.n	8003208 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8003202:	bf00      	nop
 8003204:	e000      	b.n	8003208 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8003206:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d107      	bne.n	8003220 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	333c      	adds	r3, #60	; 0x3c
 8003214:	4619      	mov	r1, r3
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fc34 	bl	8003a84 <VL53L0X_GetWrapAroundCheckEnable>
 800321c:	4603      	mov	r3, r0
 800321e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8003220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d107      	bne.n	8003238 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	3304      	adds	r3, #4
 800322c:	4619      	mov	r1, r3
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f895 	bl	800335e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8003234:	4603      	mov	r3, r0
 8003236:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003238:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003250:	2300      	movs	r3, #0
 8003252:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8003254:	78fb      	ldrb	r3, [r7, #3]
 8003256:	2b15      	cmp	r3, #21
 8003258:	d832      	bhi.n	80032c0 <VL53L0X_SetDeviceMode+0x7c>
 800325a:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <VL53L0X_SetDeviceMode+0x1c>)
 800325c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003260:	080032b9 	.word	0x080032b9
 8003264:	080032b9 	.word	0x080032b9
 8003268:	080032c1 	.word	0x080032c1
 800326c:	080032b9 	.word	0x080032b9
 8003270:	080032c1 	.word	0x080032c1
 8003274:	080032c1 	.word	0x080032c1
 8003278:	080032c1 	.word	0x080032c1
 800327c:	080032c1 	.word	0x080032c1
 8003280:	080032c1 	.word	0x080032c1
 8003284:	080032c1 	.word	0x080032c1
 8003288:	080032c1 	.word	0x080032c1
 800328c:	080032c1 	.word	0x080032c1
 8003290:	080032c1 	.word	0x080032c1
 8003294:	080032c1 	.word	0x080032c1
 8003298:	080032c1 	.word	0x080032c1
 800329c:	080032c1 	.word	0x080032c1
 80032a0:	080032c1 	.word	0x080032c1
 80032a4:	080032c1 	.word	0x080032c1
 80032a8:	080032c1 	.word	0x080032c1
 80032ac:	080032c1 	.word	0x080032c1
 80032b0:	080032b9 	.word	0x080032b9
 80032b4:	080032b9 	.word	0x080032b9
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	741a      	strb	r2, [r3, #16]
		break;
 80032be:	e001      	b.n	80032c4 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80032c0:	23f8      	movs	r3, #248	; 0xf8
 80032c2:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80032c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80032de:	2300      	movs	r3, #0
 80032e0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	7c1a      	ldrb	r2, [r3, #16]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80032ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	2109      	movs	r1, #9
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f004 f8c3 	bl	8007498 <VL53L0X_RdByte>
 8003312:	4603      	mov	r3, r0
 8003314:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	b2da      	uxtb	r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800332c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003342:	2300      	movs	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8003346:	6839      	ldr	r1, [r7, #0]
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f002 ff71 	bl	8006230 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800334e:	4603      	mov	r3, r0
 8003350:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8003352:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003368:	2300      	movs	r3, #0
 800336a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800336c:	6839      	ldr	r1, [r7, #0]
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f003 f83e 	bl	80063f0 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8003374:	4603      	mov	r3, r0
 8003376:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8003378:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	460b      	mov	r3, r1
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003392:	2300      	movs	r3, #0
 8003394:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8003396:	7afb      	ldrb	r3, [r7, #11]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	4619      	mov	r1, r3
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f002 ff10 	bl	80061c2 <VL53L0X_get_vcsel_pulse_period>
 80033a2:	4603      	mov	r3, r0
 80033a4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80033a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	70fb      	strb	r3, [r7, #3]
 80033c0:	4613      	mov	r3, r2
 80033c2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033c4:	2300      	movs	r3, #0
 80033c6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80033d0:	f107 030f 	add.w	r3, r7, #15
 80033d4:	461a      	mov	r2, r3
 80033d6:	2101      	movs	r1, #1
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f004 f85d 	bl	8007498 <VL53L0X_RdByte>
 80033de:	4603      	mov	r3, r0
 80033e0:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80033e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d15a      	bne.n	80034a4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80033ee:	78bb      	ldrb	r3, [r7, #2]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d12b      	bne.n	800344c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d825      	bhi.n	8003446 <VL53L0X_SetSequenceStepEnable+0x92>
 80033fa:	a201      	add	r2, pc, #4	; (adr r2, 8003400 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80033fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003400:	08003415 	.word	0x08003415
 8003404:	0800341f 	.word	0x0800341f
 8003408:	08003429 	.word	0x08003429
 800340c:	08003433 	.word	0x08003433
 8003410:	0800343d 	.word	0x0800343d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8003414:	7dbb      	ldrb	r3, [r7, #22]
 8003416:	f043 0310 	orr.w	r3, r3, #16
 800341a:	75bb      	strb	r3, [r7, #22]
				break;
 800341c:	e043      	b.n	80034a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800341e:	7dbb      	ldrb	r3, [r7, #22]
 8003420:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003424:	75bb      	strb	r3, [r7, #22]
				break;
 8003426:	e03e      	b.n	80034a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8003428:	7dbb      	ldrb	r3, [r7, #22]
 800342a:	f043 0304 	orr.w	r3, r3, #4
 800342e:	75bb      	strb	r3, [r7, #22]
				break;
 8003430:	e039      	b.n	80034a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8003432:	7dbb      	ldrb	r3, [r7, #22]
 8003434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003438:	75bb      	strb	r3, [r7, #22]
				break;
 800343a:	e034      	b.n	80034a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800343c:	7dbb      	ldrb	r3, [r7, #22]
 800343e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003442:	75bb      	strb	r3, [r7, #22]
				break;
 8003444:	e02f      	b.n	80034a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003446:	23fc      	movs	r3, #252	; 0xfc
 8003448:	75fb      	strb	r3, [r7, #23]
 800344a:	e02c      	b.n	80034a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	2b04      	cmp	r3, #4
 8003450:	d825      	bhi.n	800349e <VL53L0X_SetSequenceStepEnable+0xea>
 8003452:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8003454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003458:	0800346d 	.word	0x0800346d
 800345c:	08003477 	.word	0x08003477
 8003460:	08003481 	.word	0x08003481
 8003464:	0800348b 	.word	0x0800348b
 8003468:	08003495 	.word	0x08003495
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800346c:	7dbb      	ldrb	r3, [r7, #22]
 800346e:	f023 0310 	bic.w	r3, r3, #16
 8003472:	75bb      	strb	r3, [r7, #22]
				break;
 8003474:	e017      	b.n	80034a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8003476:	7dbb      	ldrb	r3, [r7, #22]
 8003478:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800347c:	75bb      	strb	r3, [r7, #22]
				break;
 800347e:	e012      	b.n	80034a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8003480:	7dbb      	ldrb	r3, [r7, #22]
 8003482:	f023 0304 	bic.w	r3, r3, #4
 8003486:	75bb      	strb	r3, [r7, #22]
				break;
 8003488:	e00d      	b.n	80034a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800348a:	7dbb      	ldrb	r3, [r7, #22]
 800348c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003490:	75bb      	strb	r3, [r7, #22]
				break;
 8003492:	e008      	b.n	80034a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8003494:	7dbb      	ldrb	r3, [r7, #22]
 8003496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800349a:	75bb      	strb	r3, [r7, #22]
				break;
 800349c:	e003      	b.n	80034a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800349e:	23fc      	movs	r3, #252	; 0xfc
 80034a0:	75fb      	strb	r3, [r7, #23]
 80034a2:	e000      	b.n	80034a6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80034a4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	7dba      	ldrb	r2, [r7, #22]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d01e      	beq.n	80034ec <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80034ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d107      	bne.n	80034c6 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80034b6:	7dbb      	ldrb	r3, [r7, #22]
 80034b8:	461a      	mov	r2, r3
 80034ba:	2101      	movs	r1, #1
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f003 ff69 	bl	8007394 <VL53L0X_WrByte>
 80034c2:	4603      	mov	r3, r0
 80034c4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80034c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	7dba      	ldrb	r2, [r7, #22]
 80034d2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80034d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80034e4:	6939      	ldr	r1, [r7, #16]
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff ff26 	bl	8003338 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80034ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	607b      	str	r3, [r7, #4]
 8003502:	460b      	mov	r3, r1
 8003504:	72fb      	strb	r3, [r7, #11]
 8003506:	4613      	mov	r3, r2
 8003508:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800350a:	2300      	movs	r3, #0
 800350c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8003514:	7afb      	ldrb	r3, [r7, #11]
 8003516:	2b04      	cmp	r3, #4
 8003518:	d836      	bhi.n	8003588 <sequence_step_enabled+0x90>
 800351a:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <sequence_step_enabled+0x28>)
 800351c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003520:	08003535 	.word	0x08003535
 8003524:	08003547 	.word	0x08003547
 8003528:	08003559 	.word	0x08003559
 800352c:	0800356b 	.word	0x0800356b
 8003530:	0800357d 	.word	0x0800357d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8003534:	7abb      	ldrb	r3, [r7, #10]
 8003536:	111b      	asrs	r3, r3, #4
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	b2da      	uxtb	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	701a      	strb	r2, [r3, #0]
		break;
 8003544:	e022      	b.n	800358c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8003546:	7abb      	ldrb	r3, [r7, #10]
 8003548:	10db      	asrs	r3, r3, #3
 800354a:	b2db      	uxtb	r3, r3
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	b2da      	uxtb	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	701a      	strb	r2, [r3, #0]
		break;
 8003556:	e019      	b.n	800358c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8003558:	7abb      	ldrb	r3, [r7, #10]
 800355a:	109b      	asrs	r3, r3, #2
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	b2da      	uxtb	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	701a      	strb	r2, [r3, #0]
		break;
 8003568:	e010      	b.n	800358c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800356a:	7abb      	ldrb	r3, [r7, #10]
 800356c:	119b      	asrs	r3, r3, #6
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	b2da      	uxtb	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	701a      	strb	r2, [r3, #0]
		break;
 800357a:	e007      	b.n	800358c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800357c:	7abb      	ldrb	r3, [r7, #10]
 800357e:	09db      	lsrs	r3, r3, #7
 8003580:	b2da      	uxtb	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	701a      	strb	r2, [r3, #0]
		break;
 8003586:	e001      	b.n	800358c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003588:	23fc      	movs	r3, #252	; 0xfc
 800358a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800358c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003590:	4618      	mov	r0, r3
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035a6:	2300      	movs	r3, #0
 80035a8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80035ae:	f107 030e 	add.w	r3, r7, #14
 80035b2:	461a      	mov	r2, r3
 80035b4:	2101      	movs	r1, #1
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f003 ff6e 	bl	8007498 <VL53L0X_RdByte>
 80035bc:	4603      	mov	r3, r0
 80035be:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80035c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d107      	bne.n	80035d8 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80035c8:	7bba      	ldrb	r2, [r7, #14]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2100      	movs	r1, #0
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff ff92 	bl	80034f8 <sequence_step_enabled>
 80035d4:	4603      	mov	r3, r0
 80035d6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80035d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d108      	bne.n	80035f2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80035e0:	7bba      	ldrb	r2, [r7, #14]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	3302      	adds	r3, #2
 80035e6:	2101      	movs	r1, #1
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff ff85 	bl	80034f8 <sequence_step_enabled>
 80035ee:	4603      	mov	r3, r0
 80035f0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80035f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d108      	bne.n	800360c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80035fa:	7bba      	ldrb	r2, [r7, #14]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	3301      	adds	r3, #1
 8003600:	2102      	movs	r1, #2
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ff78 	bl	80034f8 <sequence_step_enabled>
 8003608:	4603      	mov	r3, r0
 800360a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800360c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d108      	bne.n	8003626 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8003614:	7bba      	ldrb	r2, [r7, #14]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	3303      	adds	r3, #3
 800361a:	2103      	movs	r1, #3
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff ff6b 	bl	80034f8 <sequence_step_enabled>
 8003622:	4603      	mov	r3, r0
 8003624:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d108      	bne.n	8003640 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800362e:	7bba      	ldrb	r2, [r7, #14]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	3304      	adds	r3, #4
 8003634:	2104      	movs	r1, #4
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff ff5e 	bl	80034f8 <sequence_step_enabled>
 800363c:	4603      	mov	r3, r0
 800363e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003640:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003656:	2300      	movs	r3, #0
 8003658:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800365a:	f107 030c 	add.w	r3, r7, #12
 800365e:	461a      	mov	r2, r3
 8003660:	21f8      	movs	r1, #248	; 0xf8
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f003 ff42 	bl	80074ec <VL53L0X_RdWord>
 8003668:	4603      	mov	r3, r0
 800366a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800366c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d108      	bne.n	8003686 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8003674:	f107 0308 	add.w	r3, r7, #8
 8003678:	461a      	mov	r2, r3
 800367a:	2104      	movs	r1, #4
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f003 ff6d 	bl	800755c <VL53L0X_RdDWord>
 8003682:	4603      	mov	r3, r0
 8003684:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10c      	bne.n	80036a8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800368e:	89bb      	ldrh	r3, [r7, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	89ba      	ldrh	r2, [r7, #12]
 8003698:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80036a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036be:	2300      	movs	r3, #0
 80036c0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	7f1b      	ldrb	r3, [r3, #28]
 80036c6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	7bba      	ldrb	r2, [r7, #14]
 80036cc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80036ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80036ec:	f107 030e 	add.w	r3, r7, #14
 80036f0:	461a      	mov	r2, r3
 80036f2:	2120      	movs	r1, #32
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f003 fef9 	bl	80074ec <VL53L0X_RdWord>
 80036fa:	4603      	mov	r3, r0
 80036fc:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80036fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d118      	bne.n	8003738 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8003706:	89fb      	ldrh	r3, [r7, #14]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d109      	bne.n	8003720 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	771a      	strb	r2, [r3, #28]
 800371e:	e00b      	b.n	8003738 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8003720:	89fb      	ldrh	r3, [r7, #14]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003738:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	807b      	strh	r3, [r7, #2]
 8003750:	4613      	mov	r3, r2
 8003752:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003754:	2300      	movs	r3, #0
 8003756:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8003760:	2300      	movs	r3, #0
 8003762:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003764:	887b      	ldrh	r3, [r7, #2]
 8003766:	2b05      	cmp	r3, #5
 8003768:	d902      	bls.n	8003770 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800376a:	23fc      	movs	r3, #252	; 0xfc
 800376c:	75fb      	strb	r3, [r7, #23]
 800376e:	e05b      	b.n	8003828 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8003770:	787b      	ldrb	r3, [r7, #1]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800377e:	2301      	movs	r3, #1
 8003780:	73bb      	strb	r3, [r7, #14]
 8003782:	e00a      	b.n	800379a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003784:	887b      	ldrh	r3, [r7, #2]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	330c      	adds	r3, #12
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8003796:	2301      	movs	r3, #1
 8003798:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800379a:	887b      	ldrh	r3, [r7, #2]
 800379c:	2b05      	cmp	r3, #5
 800379e:	d841      	bhi.n	8003824 <VL53L0X_SetLimitCheckEnable+0xe0>
 80037a0:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <VL53L0X_SetLimitCheckEnable+0x64>)
 80037a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a6:	bf00      	nop
 80037a8:	080037c1 	.word	0x080037c1
 80037ac:	080037cb 	.word	0x080037cb
 80037b0:	080037e1 	.word	0x080037e1
 80037b4:	080037eb 	.word	0x080037eb
 80037b8:	080037f5 	.word	0x080037f5
 80037bc:	0800380d 	.word	0x0800380d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	7bfa      	ldrb	r2, [r7, #15]
 80037c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80037c8:	e02e      	b.n	8003828 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	2144      	movs	r1, #68	; 0x44
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f003 fe01 	bl	80073dc <VL53L0X_WrWord>
 80037da:	4603      	mov	r3, r0
 80037dc:	75fb      	strb	r3, [r7, #23]

			break;
 80037de:	e023      	b.n	8003828 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	7bfa      	ldrb	r2, [r7, #15]
 80037e4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80037e8:	e01e      	b.n	8003828 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	7bfa      	ldrb	r2, [r7, #15]
 80037ee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80037f2:	e019      	b.n	8003828 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80037f4:	7bbb      	ldrb	r3, [r7, #14]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80037fa:	7b7b      	ldrb	r3, [r7, #13]
 80037fc:	22fe      	movs	r2, #254	; 0xfe
 80037fe:	2160      	movs	r1, #96	; 0x60
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f003 fe15 	bl	8007430 <VL53L0X_UpdateByte>
 8003806:	4603      	mov	r3, r0
 8003808:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800380a:	e00d      	b.n	8003828 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800380c:	7bbb      	ldrb	r3, [r7, #14]
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8003812:	7b7b      	ldrb	r3, [r7, #13]
 8003814:	22ef      	movs	r2, #239	; 0xef
 8003816:	2160      	movs	r1, #96	; 0x60
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f003 fe09 	bl	8007430 <VL53L0X_UpdateByte>
 800381e:	4603      	mov	r3, r0
 8003820:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8003822:	e001      	b.n	8003828 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003824:	23fc      	movs	r3, #252	; 0xfc
 8003826:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003828:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10f      	bne.n	8003850 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8003830:	787b      	ldrb	r3, [r7, #1]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003836:	887b      	ldrh	r3, [r7, #2]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	4413      	add	r3, r2
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003842:	e005      	b.n	8003850 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003844:	887b      	ldrh	r3, [r7, #2]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	4413      	add	r3, r2
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003850:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	460b      	mov	r3, r1
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800386a:	2300      	movs	r3, #0
 800386c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800386e:	897b      	ldrh	r3, [r7, #10]
 8003870:	2b05      	cmp	r3, #5
 8003872:	d905      	bls.n	8003880 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003874:	23fc      	movs	r3, #252	; 0xfc
 8003876:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	e008      	b.n	8003892 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003880:	897b      	ldrh	r3, [r7, #10]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4413      	add	r3, r2
 8003886:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800388a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	7dba      	ldrb	r2, [r7, #22]
 8003890:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003892:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003896:	4618      	mov	r0, r3
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	460b      	mov	r3, r1
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80038b6:	897b      	ldrh	r3, [r7, #10]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4413      	add	r3, r2
 80038bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038c0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80038c2:	7dbb      	ldrb	r3, [r7, #22]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d107      	bne.n	80038d8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80038c8:	897b      	ldrh	r3, [r7, #10]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	330c      	adds	r3, #12
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	e040      	b.n	800395a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80038d8:	897b      	ldrh	r3, [r7, #10]
 80038da:	2b05      	cmp	r3, #5
 80038dc:	d830      	bhi.n	8003940 <VL53L0X_SetLimitCheckValue+0x9c>
 80038de:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <VL53L0X_SetLimitCheckValue+0x40>)
 80038e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e4:	080038fd 	.word	0x080038fd
 80038e8:	08003905 	.word	0x08003905
 80038ec:	0800391b 	.word	0x0800391b
 80038f0:	08003923 	.word	0x08003923
 80038f4:	0800392b 	.word	0x0800392b
 80038f8:	0800392b 	.word	0x0800392b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8003902:	e01f      	b.n	8003944 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003908:	b29b      	uxth	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	2144      	movs	r1, #68	; 0x44
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f003 fd64 	bl	80073dc <VL53L0X_WrWord>
 8003914:	4603      	mov	r3, r0
 8003916:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8003918:	e014      	b.n	8003944 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8003920:	e010      	b.n	8003944 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8003928:	e00c      	b.n	8003944 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800392e:	b29b      	uxth	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	2164      	movs	r1, #100	; 0x64
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f003 fd51 	bl	80073dc <VL53L0X_WrWord>
 800393a:	4603      	mov	r3, r0
 800393c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800393e:	e001      	b.n	8003944 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003940:	23fc      	movs	r3, #252	; 0xfc
 8003942:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8003944:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d106      	bne.n	800395a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800394c:	897b      	ldrh	r3, [r7, #10]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	330c      	adds	r3, #12
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800395a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop

08003968 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	460b      	mov	r3, r1
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003976:	2300      	movs	r3, #0
 8003978:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800397e:	897b      	ldrh	r3, [r7, #10]
 8003980:	2b05      	cmp	r3, #5
 8003982:	d847      	bhi.n	8003a14 <VL53L0X_GetLimitCheckValue+0xac>
 8003984:	a201      	add	r2, pc, #4	; (adr r2, 800398c <VL53L0X_GetLimitCheckValue+0x24>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	080039a5 	.word	0x080039a5
 8003990:	080039b1 	.word	0x080039b1
 8003994:	080039d7 	.word	0x080039d7
 8003998:	080039e3 	.word	0x080039e3
 800399c:	080039ef 	.word	0x080039ef
 80039a0:	080039ef 	.word	0x080039ef

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	77bb      	strb	r3, [r7, #30]
		break;
 80039ae:	e033      	b.n	8003a18 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80039b0:	f107 0316 	add.w	r3, r7, #22
 80039b4:	461a      	mov	r2, r3
 80039b6:	2144      	movs	r1, #68	; 0x44
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f003 fd97 	bl	80074ec <VL53L0X_RdWord>
 80039be:	4603      	mov	r3, r0
 80039c0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80039c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80039ca:	8afb      	ldrh	r3, [r7, #22]
 80039cc:	025b      	lsls	r3, r3, #9
 80039ce:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80039d0:	2301      	movs	r3, #1
 80039d2:	77bb      	strb	r3, [r7, #30]
		break;
 80039d4:	e020      	b.n	8003a18 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	77bb      	strb	r3, [r7, #30]
		break;
 80039e0:	e01a      	b.n	8003a18 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	77bb      	strb	r3, [r7, #30]
		break;
 80039ec:	e014      	b.n	8003a18 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80039ee:	f107 0316 	add.w	r3, r7, #22
 80039f2:	461a      	mov	r2, r3
 80039f4:	2164      	movs	r1, #100	; 0x64
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f003 fd78 	bl	80074ec <VL53L0X_RdWord>
 80039fc:	4603      	mov	r3, r0
 80039fe:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8003a00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003a08:	8afb      	ldrh	r3, [r7, #22]
 8003a0a:	025b      	lsls	r3, r3, #9
 8003a0c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	77bb      	strb	r3, [r7, #30]
		break;
 8003a12:	e001      	b.n	8003a18 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003a14:	23fc      	movs	r3, #252	; 0xfc
 8003a16:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003a18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d12a      	bne.n	8003a76 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8003a20:	7fbb      	ldrb	r3, [r7, #30]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d124      	bne.n	8003a70 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d110      	bne.n	8003a4e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8003a2c:	897b      	ldrh	r3, [r7, #10]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	330c      	adds	r3, #12
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003a40:	897b      	ldrh	r3, [r7, #10]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4413      	add	r3, r2
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003a4c:	e013      	b.n	8003a76 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003a54:	897b      	ldrh	r3, [r7, #10]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003a62:	897b      	ldrh	r3, [r7, #10]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4413      	add	r3, r2
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003a6e:	e002      	b.n	8003a76 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003a76:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3720      	adds	r7, #32
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop

08003a84 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8003a92:	f107 030e 	add.w	r3, r7, #14
 8003a96:	461a      	mov	r2, r3
 8003a98:	2101      	movs	r1, #1
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f003 fcfc 	bl	8007498 <VL53L0X_RdByte>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8003aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10e      	bne.n	8003aca <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8003aac:	7bba      	ldrb	r2, [r7, #14]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8003ab4:	7bbb      	ldrb	r3, [r7, #14]
 8003ab6:	b25b      	sxtb	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	da03      	bge.n	8003ac4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	701a      	strb	r2, [r3, #0]
 8003ac2:	e002      	b.n	8003aca <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d104      	bne.n	8003adc <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	781a      	ldrb	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003af4:	f107 030e 	add.w	r3, r7, #14
 8003af8:	4619      	mov	r1, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fbea 	bl	80032d4 <VL53L0X_GetDeviceMode>
 8003b00:	4603      	mov	r3, r0
 8003b02:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d107      	bne.n	8003b1c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003b0c:	7bbb      	ldrb	r3, [r7, #14]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d104      	bne.n	8003b1c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f898 	bl	8003c48 <VL53L0X_StartMeasurement>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d104      	bne.n	8003b2e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f001 fb3f 	bl	80051a8 <VL53L0X_measurement_poll_for_completion>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003b36:	7bbb      	ldrb	r3, [r7, #14]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d103      	bne.n	8003b44 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2203      	movs	r2, #3
 8003b40:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8003b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8003b60:	2301      	movs	r3, #1
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f001 fae1 	bl	800512e <VL53L0X_perform_ref_calibration>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8003b70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8003b92:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8003b94:	7dbb      	ldrb	r3, [r7, #22]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d005      	beq.n	8003ba6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8003b9a:	7dbb      	ldrb	r3, [r7, #22]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d002      	beq.n	8003ba6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8003ba0:	7dbb      	ldrb	r3, [r7, #22]
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d147      	bne.n	8003c36 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8003ba6:	f107 030c 	add.w	r3, r7, #12
 8003baa:	f107 0210 	add.w	r2, r7, #16
 8003bae:	2101      	movs	r1, #1
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fbc3 	bl	800433c <VL53L0X_GetInterruptThresholds>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8003bc0:	d803      	bhi.n	8003bca <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8003bc2:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8003bc4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8003bc8:	d935      	bls.n	8003c36 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8003bca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d131      	bne.n	8003c36 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d006      	beq.n	8003be6 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8003bd8:	491a      	ldr	r1, [pc, #104]	; (8003c44 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f002 fcba 	bl	8006554 <VL53L0X_load_tuning_settings>
 8003be0:	4603      	mov	r3, r0
 8003be2:	75fb      	strb	r3, [r7, #23]
 8003be4:	e027      	b.n	8003c36 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8003be6:	2204      	movs	r2, #4
 8003be8:	21ff      	movs	r1, #255	; 0xff
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f003 fbd2 	bl	8007394 <VL53L0X_WrByte>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2170      	movs	r1, #112	; 0x70
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f003 fbc8 	bl	8007394 <VL53L0X_WrByte>
 8003c04:	4603      	mov	r3, r0
 8003c06:	461a      	mov	r2, r3
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	21ff      	movs	r1, #255	; 0xff
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f003 fbbe 	bl	8007394 <VL53L0X_WrByte>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	7dfb      	ldrb	r3, [r7, #23]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003c22:	2200      	movs	r2, #0
 8003c24:	2180      	movs	r1, #128	; 0x80
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f003 fbb4 	bl	8007394 <VL53L0X_WrByte>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	461a      	mov	r2, r3
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8003c36:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000104 	.word	0x20000104

08003c48 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c50:	2300      	movs	r3, #0
 8003c52:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003c58:	f107 030e 	add.w	r3, r7, #14
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff fb38 	bl	80032d4 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003c64:	2201      	movs	r2, #1
 8003c66:	2180      	movs	r1, #128	; 0x80
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f003 fb93 	bl	8007394 <VL53L0X_WrByte>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003c72:	2201      	movs	r2, #1
 8003c74:	21ff      	movs	r1, #255	; 0xff
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f003 fb8c 	bl	8007394 <VL53L0X_WrByte>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003c80:	2200      	movs	r2, #0
 8003c82:	2100      	movs	r1, #0
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f003 fb85 	bl	8007394 <VL53L0X_WrByte>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003c94:	461a      	mov	r2, r3
 8003c96:	2191      	movs	r1, #145	; 0x91
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f003 fb7b 	bl	8007394 <VL53L0X_WrByte>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f003 fb74 	bl	8007394 <VL53L0X_WrByte>
 8003cac:	4603      	mov	r3, r0
 8003cae:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	21ff      	movs	r1, #255	; 0xff
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f003 fb6d 	bl	8007394 <VL53L0X_WrByte>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2180      	movs	r1, #128	; 0x80
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f003 fb66 	bl	8007394 <VL53L0X_WrByte>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8003ccc:	7bbb      	ldrb	r3, [r7, #14]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d037      	beq.n	8003d42 <VL53L0X_StartMeasurement+0xfa>
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d04f      	beq.n	8003d76 <VL53L0X_StartMeasurement+0x12e>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d167      	bne.n	8003daa <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8003cda:	2201      	movs	r2, #1
 8003cdc:	2100      	movs	r1, #0
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f003 fb58 	bl	8007394 <VL53L0X_WrByte>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8003cec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d15d      	bne.n	8003db0 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8003cfe:	f107 030d 	add.w	r3, r7, #13
 8003d02:	461a      	mov	r2, r3
 8003d04:	2100      	movs	r1, #0
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f003 fbc6 	bl	8007498 <VL53L0X_RdByte>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	3301      	adds	r3, #1
 8003d14:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8003d16:	7b7a      	ldrb	r2, [r7, #13]
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003d1e:	7bfa      	ldrb	r2, [r7, #15]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d107      	bne.n	8003d34 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8003d24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d103      	bne.n	8003d34 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003d32:	d3e1      	bcc.n	8003cf8 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003d3a:	d339      	bcc.n	8003db0 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8003d3c:	23f9      	movs	r3, #249	; 0xf9
 8003d3e:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8003d40:	e036      	b.n	8003db0 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003d42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d105      	bne.n	8003d56 <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff ff15 	bl	8003b7c <VL53L0X_CheckAndLoadInterruptSettings>
 8003d52:	4603      	mov	r3, r0
 8003d54:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003d56:	2202      	movs	r2, #2
 8003d58:	2100      	movs	r1, #0
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f003 fb1a 	bl	8007394 <VL53L0X_WrByte>
 8003d60:	4603      	mov	r3, r0
 8003d62:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8003d64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d123      	bne.n	8003db4 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2204      	movs	r2, #4
 8003d70:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003d74:	e01e      	b.n	8003db4 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003d76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d105      	bne.n	8003d8a <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003d7e:	2101      	movs	r1, #1
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff fefb 	bl	8003b7c <VL53L0X_CheckAndLoadInterruptSettings>
 8003d86:	4603      	mov	r3, r0
 8003d88:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f003 fb00 	bl	8007394 <VL53L0X_WrByte>
 8003d94:	4603      	mov	r3, r0
 8003d96:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8003d98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10b      	bne.n	8003db8 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2204      	movs	r2, #4
 8003da4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003da8:	e006      	b.n	8003db8 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003daa:	23f8      	movs	r3, #248	; 0xf8
 8003dac:	75fb      	strb	r3, [r7, #23]
 8003dae:	e004      	b.n	8003dba <VL53L0X_StartMeasurement+0x172>
		break;
 8003db0:	bf00      	nop
 8003db2:	e002      	b.n	8003dba <VL53L0X_StartMeasurement+0x172>
		break;
 8003db4:	bf00      	nop
 8003db6:	e000      	b.n	8003dba <VL53L0X_StartMeasurement+0x172>
		break;
 8003db8:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8003dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8003dda:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8003ddc:	7bbb      	ldrb	r3, [r7, #14]
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d112      	bne.n	8003e08 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8003de2:	f107 0308 	add.w	r3, r7, #8
 8003de6:	4619      	mov	r1, r3
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fb1d 	bl	8004428 <VL53L0X_GetInterruptMaskStatus>
 8003dee:	4603      	mov	r3, r0
 8003df0:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d103      	bne.n	8003e00 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	701a      	strb	r2, [r3, #0]
 8003dfe:	e01c      	b.n	8003e3a <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2200      	movs	r2, #0
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	e018      	b.n	8003e3a <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8003e08:	f107 030d 	add.w	r3, r7, #13
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	2114      	movs	r1, #20
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f003 fb41 	bl	8007498 <VL53L0X_RdByte>
 8003e16:	4603      	mov	r3, r0
 8003e18:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8003e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10b      	bne.n	8003e3a <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8003e22:	7b7b      	ldrb	r3, [r7, #13]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	e002      	b.n	8003e3a <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2200      	movs	r2, #0
 8003e38:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003e48:	b5b0      	push	{r4, r5, r7, lr}
 8003e4a:	b096      	sub	sp, #88	; 0x58
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e52:	2300      	movs	r3, #0
 8003e54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8003e58:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e5c:	230c      	movs	r3, #12
 8003e5e:	2114      	movs	r1, #20
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f003 fa6b 	bl	800733c <VL53L0X_ReadMulti>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8003e6c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f040 80d2 	bne.w	800401a <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8003e82:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	021b      	lsls	r3, r3, #8
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8003e9e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	4413      	add	r3, r2
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	025b      	lsls	r3, r3, #9
 8003eb4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eba:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8003ebc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8003ed2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003ed6:	025b      	lsls	r3, r3, #9
 8003ed8:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8003ede:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	4413      	add	r3, r2
 8003ef0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003efa:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8003efc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8003f0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8003f12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8003f16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003f18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f1c:	d047      	beq.n	8003fae <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8003f1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003f20:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003f24:	fb02 f303 	mul.w	r3, r2, r3
 8003f28:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003f2c:	4a58      	ldr	r2, [pc, #352]	; (8004090 <VL53L0X_GetRangingMeasurementData+0x248>)
 8003f2e:	fb82 1203 	smull	r1, r2, r2, r3
 8003f32:	1192      	asrs	r2, r2, #6
 8003f34:	17db      	asrs	r3, r3, #31
 8003f36:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8003f38:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	7f1b      	ldrb	r3, [r3, #28]
 8003f46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8003f4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d02d      	beq.n	8003fae <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8003f52:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003f54:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003f58:	fb02 f303 	mul.w	r3, r2, r3
 8003f5c:	121b      	asrs	r3, r3, #8
 8003f5e:	461a      	mov	r2, r3
				if ((SignalRate
 8003f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d10d      	bne.n	8003f82 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8003f66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d004      	beq.n	8003f78 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8003f6e:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8003f72:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003f76:	e016      	b.n	8003fa6 <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8003f78:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8003f7c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003f80:	e011      	b.n	8003fa6 <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8003f82:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f88:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8003f8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003f8e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8003f96:	121b      	asrs	r3, r3, #8
 8003f98:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8003f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f9c:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8003f9e:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8003fa2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8003fa6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003faa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8003fae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8003fb6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003fba:	089b      	lsrs	r3, r3, #2
 8003fbc:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8003fc2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	019b      	lsls	r3, r3, #6
 8003fca:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	75da      	strb	r2, [r3, #23]
 8003fd0:	e006      	b.n	8003fe0 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003fd8:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8003fe0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003fe4:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8003fe8:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8003fec:	9301      	str	r3, [sp, #4]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f002 ff54 	bl	8006ea4 <VL53L0X_get_pal_range_status>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	461a      	mov	r2, r3
 8004000:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004004:	4313      	orrs	r3, r2
 8004006:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800400a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800400e:	2b00      	cmp	r3, #0
 8004010:	d103      	bne.n	800401a <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8004012:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800401a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800401e:	2b00      	cmp	r3, #0
 8004020:	d12f      	bne.n	8004082 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f107 040c 	add.w	r4, r7, #12
 8004028:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800402c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800402e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004030:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004034:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800403c:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8004042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800404a:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8004050:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8004056:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800405c:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8004062:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8004068:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8004072:	f107 050c 	add.w	r5, r7, #12
 8004076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800407a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800407e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004082:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8004086:	4618      	mov	r0, r3
 8004088:	3750      	adds	r7, #80	; 0x50
 800408a:	46bd      	mov	sp, r7
 800408c:	bdb0      	pop	{r4, r5, r7, pc}
 800408e:	bf00      	nop
 8004090:	10624dd3 	.word	0x10624dd3

08004094 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800409e:	2300      	movs	r3, #0
 80040a0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80040a2:	2100      	movs	r1, #0
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff f8cd 	bl	8003244 <VL53L0X_SetDeviceMode>
 80040aa:	4603      	mov	r3, r0
 80040ac:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80040ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d104      	bne.n	80040c0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff fd16 	bl	8003ae8 <VL53L0X_PerformSingleMeasurement>
 80040bc:	4603      	mov	r3, r0
 80040be:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80040c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d105      	bne.n	80040d4 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80040c8:	6839      	ldr	r1, [r7, #0]
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff febc 	bl	8003e48 <VL53L0X_GetRangingMeasurementData>
 80040d0:	4603      	mov	r3, r0
 80040d2:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80040d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d105      	bne.n	80040e8 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80040dc:	2100      	movs	r1, #0
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f962 	bl	80043a8 <VL53L0X_ClearInterruptMask>
 80040e4:	4603      	mov	r3, r0
 80040e6:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80040e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	4608      	mov	r0, r1
 80040fe:	4611      	mov	r1, r2
 8004100:	461a      	mov	r2, r3
 8004102:	4603      	mov	r3, r0
 8004104:	70fb      	strb	r3, [r7, #3]
 8004106:	460b      	mov	r3, r1
 8004108:	70bb      	strb	r3, [r7, #2]
 800410a:	4613      	mov	r3, r2
 800410c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800410e:	2300      	movs	r3, #0
 8004110:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8004118:	23f6      	movs	r3, #246	; 0xf6
 800411a:	73fb      	strb	r3, [r7, #15]
 800411c:	e107      	b.n	800432e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800411e:	78bb      	ldrb	r3, [r7, #2]
 8004120:	2b14      	cmp	r3, #20
 8004122:	d110      	bne.n	8004146 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004124:	7e3b      	ldrb	r3, [r7, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d102      	bne.n	8004130 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800412a:	2310      	movs	r3, #16
 800412c:	73bb      	strb	r3, [r7, #14]
 800412e:	e001      	b.n	8004134 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8004130:	2301      	movs	r3, #1
 8004132:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8004134:	7bbb      	ldrb	r3, [r7, #14]
 8004136:	461a      	mov	r2, r3
 8004138:	2184      	movs	r1, #132	; 0x84
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f003 f92a 	bl	8007394 <VL53L0X_WrByte>
 8004140:	4603      	mov	r3, r0
 8004142:	73fb      	strb	r3, [r7, #15]
 8004144:	e0f3      	b.n	800432e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8004146:	78bb      	ldrb	r3, [r7, #2]
 8004148:	2b15      	cmp	r3, #21
 800414a:	f040 8097 	bne.w	800427c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800414e:	2201      	movs	r2, #1
 8004150:	21ff      	movs	r1, #255	; 0xff
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f003 f91e 	bl	8007394 <VL53L0X_WrByte>
 8004158:	4603      	mov	r3, r0
 800415a:	461a      	mov	r2, r3
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	4313      	orrs	r3, r2
 8004160:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004162:	2200      	movs	r2, #0
 8004164:	2100      	movs	r1, #0
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f003 f914 	bl	8007394 <VL53L0X_WrByte>
 800416c:	4603      	mov	r3, r0
 800416e:	461a      	mov	r2, r3
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	4313      	orrs	r3, r2
 8004174:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004176:	2200      	movs	r2, #0
 8004178:	21ff      	movs	r1, #255	; 0xff
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f003 f90a 	bl	8007394 <VL53L0X_WrByte>
 8004180:	4603      	mov	r3, r0
 8004182:	461a      	mov	r2, r3
 8004184:	7bfb      	ldrb	r3, [r7, #15]
 8004186:	4313      	orrs	r3, r2
 8004188:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800418a:	2201      	movs	r2, #1
 800418c:	2180      	movs	r1, #128	; 0x80
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f003 f900 	bl	8007394 <VL53L0X_WrByte>
 8004194:	4603      	mov	r3, r0
 8004196:	461a      	mov	r2, r3
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	4313      	orrs	r3, r2
 800419c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800419e:	2202      	movs	r2, #2
 80041a0:	2185      	movs	r1, #133	; 0x85
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f003 f8f6 	bl	8007394 <VL53L0X_WrByte>
 80041a8:	4603      	mov	r3, r0
 80041aa:	461a      	mov	r2, r3
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80041b2:	2204      	movs	r2, #4
 80041b4:	21ff      	movs	r1, #255	; 0xff
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f003 f8ec 	bl	8007394 <VL53L0X_WrByte>
 80041bc:	4603      	mov	r3, r0
 80041be:	461a      	mov	r2, r3
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80041c6:	2200      	movs	r2, #0
 80041c8:	21cd      	movs	r1, #205	; 0xcd
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f003 f8e2 	bl	8007394 <VL53L0X_WrByte>
 80041d0:	4603      	mov	r3, r0
 80041d2:	461a      	mov	r2, r3
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80041da:	2211      	movs	r2, #17
 80041dc:	21cc      	movs	r1, #204	; 0xcc
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f003 f8d8 	bl	8007394 <VL53L0X_WrByte>
 80041e4:	4603      	mov	r3, r0
 80041e6:	461a      	mov	r2, r3
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80041ee:	2207      	movs	r2, #7
 80041f0:	21ff      	movs	r1, #255	; 0xff
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f003 f8ce 	bl	8007394 <VL53L0X_WrByte>
 80041f8:	4603      	mov	r3, r0
 80041fa:	461a      	mov	r2, r3
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	4313      	orrs	r3, r2
 8004200:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8004202:	2200      	movs	r2, #0
 8004204:	21be      	movs	r1, #190	; 0xbe
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f003 f8c4 	bl	8007394 <VL53L0X_WrByte>
 800420c:	4603      	mov	r3, r0
 800420e:	461a      	mov	r2, r3
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	4313      	orrs	r3, r2
 8004214:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8004216:	2206      	movs	r2, #6
 8004218:	21ff      	movs	r1, #255	; 0xff
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f003 f8ba 	bl	8007394 <VL53L0X_WrByte>
 8004220:	4603      	mov	r3, r0
 8004222:	461a      	mov	r2, r3
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	4313      	orrs	r3, r2
 8004228:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800422a:	2209      	movs	r2, #9
 800422c:	21cc      	movs	r1, #204	; 0xcc
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f003 f8b0 	bl	8007394 <VL53L0X_WrByte>
 8004234:	4603      	mov	r3, r0
 8004236:	461a      	mov	r2, r3
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	4313      	orrs	r3, r2
 800423c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800423e:	2200      	movs	r2, #0
 8004240:	21ff      	movs	r1, #255	; 0xff
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f003 f8a6 	bl	8007394 <VL53L0X_WrByte>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	4313      	orrs	r3, r2
 8004250:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004252:	2201      	movs	r2, #1
 8004254:	21ff      	movs	r1, #255	; 0xff
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f003 f89c 	bl	8007394 <VL53L0X_WrByte>
 800425c:	4603      	mov	r3, r0
 800425e:	461a      	mov	r2, r3
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	4313      	orrs	r3, r2
 8004264:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004266:	2200      	movs	r2, #0
 8004268:	2100      	movs	r1, #0
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f003 f892 	bl	8007394 <VL53L0X_WrByte>
 8004270:	4603      	mov	r3, r0
 8004272:	461a      	mov	r2, r3
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	4313      	orrs	r3, r2
 8004278:	73fb      	strb	r3, [r7, #15]
 800427a:	e058      	b.n	800432e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800427c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d121      	bne.n	80042c8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8004284:	787b      	ldrb	r3, [r7, #1]
 8004286:	2b04      	cmp	r3, #4
 8004288:	d81b      	bhi.n	80042c2 <VL53L0X_SetGpioConfig+0x1ce>
 800428a:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <VL53L0X_SetGpioConfig+0x19c>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	080042a5 	.word	0x080042a5
 8004294:	080042ab 	.word	0x080042ab
 8004298:	080042b1 	.word	0x080042b1
 800429c:	080042b7 	.word	0x080042b7
 80042a0:	080042bd 	.word	0x080042bd
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80042a4:	2300      	movs	r3, #0
 80042a6:	73bb      	strb	r3, [r7, #14]
				break;
 80042a8:	e00f      	b.n	80042ca <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80042aa:	2301      	movs	r3, #1
 80042ac:	73bb      	strb	r3, [r7, #14]
				break;
 80042ae:	e00c      	b.n	80042ca <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80042b0:	2302      	movs	r3, #2
 80042b2:	73bb      	strb	r3, [r7, #14]
				break;
 80042b4:	e009      	b.n	80042ca <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80042b6:	2303      	movs	r3, #3
 80042b8:	73bb      	strb	r3, [r7, #14]
				break;
 80042ba:	e006      	b.n	80042ca <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80042bc:	2304      	movs	r3, #4
 80042be:	73bb      	strb	r3, [r7, #14]
				break;
 80042c0:	e003      	b.n	80042ca <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80042c2:	23f5      	movs	r3, #245	; 0xf5
 80042c4:	73fb      	strb	r3, [r7, #15]
 80042c6:	e000      	b.n	80042ca <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80042c8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80042ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d107      	bne.n	80042e2 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80042d2:	7bbb      	ldrb	r3, [r7, #14]
 80042d4:	461a      	mov	r2, r3
 80042d6:	210a      	movs	r1, #10
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f003 f85b 	bl	8007394 <VL53L0X_WrByte>
 80042de:	4603      	mov	r3, r0
 80042e0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80042e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10f      	bne.n	800430a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80042ea:	7e3b      	ldrb	r3, [r7, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d102      	bne.n	80042f6 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73bb      	strb	r3, [r7, #14]
 80042f4:	e001      	b.n	80042fa <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80042f6:	2310      	movs	r3, #16
 80042f8:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80042fa:	7bbb      	ldrb	r3, [r7, #14]
 80042fc:	22ef      	movs	r2, #239	; 0xef
 80042fe:	2184      	movs	r1, #132	; 0x84
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f003 f895 	bl	8007430 <VL53L0X_UpdateByte>
 8004306:	4603      	mov	r3, r0
 8004308:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800430a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	787a      	ldrb	r2, [r7, #1]
 8004316:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800431a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d105      	bne.n	800432e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004322:	2100      	movs	r1, #0
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f83f 	bl	80043a8 <VL53L0X_ClearInterruptMask>
 800432a:	4603      	mov	r3, r0
 800432c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800432e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop

0800433c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	607a      	str	r2, [r7, #4]
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	460b      	mov	r3, r1
 800434a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800434c:	2300      	movs	r3, #0
 800434e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8004350:	f107 0314 	add.w	r3, r7, #20
 8004354:	461a      	mov	r2, r3
 8004356:	210e      	movs	r1, #14
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f003 f8c7 	bl	80074ec <VL53L0X_RdWord>
 800435e:	4603      	mov	r3, r0
 8004360:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004362:	8abb      	ldrh	r3, [r7, #20]
 8004364:	045b      	lsls	r3, r3, #17
 8004366:	461a      	mov	r2, r3
 8004368:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <VL53L0X_GetInterruptThresholds+0x68>)
 800436a:	4013      	ands	r3, r2
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8004370:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10f      	bne.n	8004398 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8004378:	f107 0314 	add.w	r3, r7, #20
 800437c:	461a      	mov	r2, r3
 800437e:	210c      	movs	r1, #12
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f003 f8b3 	bl	80074ec <VL53L0X_RdWord>
 8004386:	4603      	mov	r3, r0
 8004388:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800438a:	8abb      	ldrh	r3, [r7, #20]
 800438c:	045b      	lsls	r3, r3, #17
 800438e:	461a      	mov	r2, r3
 8004390:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <VL53L0X_GetInterruptThresholds+0x68>)
 8004392:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004398:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	1ffe0000 	.word	0x1ffe0000

080043a8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043b2:	2300      	movs	r3, #0
 80043b4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80043ba:	2201      	movs	r2, #1
 80043bc:	210b      	movs	r1, #11
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f002 ffe8 	bl	8007394 <VL53L0X_WrByte>
 80043c4:	4603      	mov	r3, r0
 80043c6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80043c8:	2200      	movs	r2, #0
 80043ca:	210b      	movs	r1, #11
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f002 ffe1 	bl	8007394 <VL53L0X_WrByte>
 80043d2:	4603      	mov	r3, r0
 80043d4:	461a      	mov	r2, r3
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
 80043d8:	4313      	orrs	r3, r2
 80043da:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80043dc:	f107 030d 	add.w	r3, r7, #13
 80043e0:	461a      	mov	r2, r3
 80043e2:	2113      	movs	r1, #19
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f003 f857 	bl	8007498 <VL53L0X_RdByte>
 80043ea:	4603      	mov	r3, r0
 80043ec:	461a      	mov	r2, r3
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80043f4:	7bbb      	ldrb	r3, [r7, #14]
 80043f6:	3301      	adds	r3, #1
 80043f8:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80043fa:	7b7b      	ldrb	r3, [r7, #13]
 80043fc:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8004400:	2b00      	cmp	r3, #0
 8004402:	d006      	beq.n	8004412 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8004404:	7bbb      	ldrb	r3, [r7, #14]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d803      	bhi.n	8004412 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800440a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0d3      	beq.n	80043ba <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8004412:	7bbb      	ldrb	r3, [r7, #14]
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8004418:	23f4      	movs	r3, #244	; 0xf4
 800441a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800441c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004432:	2300      	movs	r3, #0
 8004434:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8004436:	f107 030e 	add.w	r3, r7, #14
 800443a:	461a      	mov	r2, r3
 800443c:	2113      	movs	r1, #19
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f003 f82a 	bl	8007498 <VL53L0X_RdByte>
 8004444:	4603      	mov	r3, r0
 8004446:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8004448:	7bbb      	ldrb	r3, [r7, #14]
 800444a:	f003 0207 	and.w	r2, r3, #7
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8004452:	7bbb      	ldrb	r3, [r7, #14]
 8004454:	f003 0318 	and.w	r3, r3, #24
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800445c:	23fa      	movs	r3, #250	; 0xfa
 800445e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004460:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004478:	2300      	movs	r3, #0
 800447a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 fa03 	bl	800488c <VL53L0X_perform_ref_spad_management>
 8004486:	4603      	mov	r3, r0
 8004488:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800448a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b084      	sub	sp, #16
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044a0:	2300      	movs	r3, #0
 80044a2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80044a4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80044a8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80044aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044ae:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80044b0:	f107 0308 	add.w	r3, r7, #8
 80044b4:	461a      	mov	r2, r3
 80044b6:	2128      	movs	r1, #40	; 0x28
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f003 f817 	bl	80074ec <VL53L0X_RdWord>
 80044be:	4603      	mov	r3, r0
 80044c0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80044c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d11e      	bne.n	8004508 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80044ca:	893b      	ldrh	r3, [r7, #8]
 80044cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80044d4:	893b      	ldrh	r3, [r7, #8]
 80044d6:	461a      	mov	r2, r3
 80044d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044dc:	429a      	cmp	r2, r3
 80044de:	dd0b      	ble.n	80044f8 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80044e0:	893a      	ldrh	r2, [r7, #8]
 80044e2:	897b      	ldrh	r3, [r7, #10]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	b21b      	sxth	r3, r3
 80044ea:	461a      	mov	r2, r3
					* 250;
 80044ec:	23fa      	movs	r3, #250	; 0xfa
 80044ee:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e007      	b.n	8004508 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80044f8:	893b      	ldrh	r3, [r7, #8]
 80044fa:	b21b      	sxth	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	23fa      	movs	r3, #250	; 0xfa
 8004500:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8004508:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8004514:	b480      	push	{r7}
 8004516:	b08b      	sub	sp, #44	; 0x2c
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8004522:	2308      	movs	r3, #8
 8004524:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8004526:	2300      	movs	r3, #0
 8004528:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	f04f 32ff 	mov.w	r2, #4294967295
 8004530:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	fbb2 f3f3 	udiv	r3, r2, r3
 800453a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	fbb3 f2f2 	udiv	r2, r3, r2
 8004544:	69b9      	ldr	r1, [r7, #24]
 8004546:	fb01 f202 	mul.w	r2, r1, r2
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
 8004552:	e030      	b.n	80045b6 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	4413      	add	r3, r2
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8004562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	429a      	cmp	r2, r3
 8004568:	d11e      	bne.n	80045a8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800456a:	7ffa      	ldrb	r2, [r7, #31]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	fa42 f303 	asr.w	r3, r2, r3
 8004572:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8004578:	e016      	b.n	80045a8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800457a:	7ffb      	ldrb	r3, [r7, #31]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00b      	beq.n	800459c <get_next_good_spad+0x88>
				success = 1;
 8004584:	2301      	movs	r3, #1
 8004586:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	fb02 f203 	mul.w	r2, r2, r3
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	4413      	add	r3, r2
 8004594:	461a      	mov	r2, r3
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	601a      	str	r2, [r3, #0]
				break;
 800459a:	e009      	b.n	80045b0 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800459c:	7ffb      	ldrb	r3, [r7, #31]
 800459e:	085b      	lsrs	r3, r3, #1
 80045a0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	3301      	adds	r3, #1
 80045a6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80045a8:	6a3a      	ldr	r2, [r7, #32]
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d3e4      	bcc.n	800457a <get_next_good_spad+0x66>
				coarseIndex++) {
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	3301      	adds	r3, #1
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80045b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d202      	bcs.n	80045c4 <get_next_good_spad+0xb0>
 80045be:	7fbb      	ldrb	r3, [r7, #30]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0c7      	beq.n	8004554 <get_next_good_spad+0x40>
		}
	}
}
 80045c4:	bf00      	nop
 80045c6:	372c      	adds	r7, #44	; 0x2c
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	099b      	lsrs	r3, r3, #6
 80045e0:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80045e2:	4a07      	ldr	r2, [pc, #28]	; (8004600 <is_aperture+0x30>)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <is_aperture+0x22>
		isAperture = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	200002bc 	.word	0x200002bc

08004604 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8004604:	b480      	push	{r7}
 8004606:	b089      	sub	sp, #36	; 0x24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004610:	2300      	movs	r3, #0
 8004612:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8004614:	2308      	movs	r3, #8
 8004616:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004620:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	fbb3 f2f2 	udiv	r2, r3, r2
 800462a:	69b9      	ldr	r1, [r7, #24]
 800462c:	fb01 f202 	mul.w	r2, r1, r2
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	429a      	cmp	r2, r3
 800463a:	d302      	bcc.n	8004642 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800463c:	23ce      	movs	r3, #206	; 0xce
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	e010      	b.n	8004664 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	4413      	add	r3, r2
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	b25a      	sxtb	r2, r3
 800464c:	2101      	movs	r1, #1
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	fa01 f303 	lsl.w	r3, r1, r3
 8004654:	b25b      	sxtb	r3, r3
 8004656:	4313      	orrs	r3, r2
 8004658:	b259      	sxtb	r1, r3
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	4413      	add	r3, r2
 8004660:	b2ca      	uxtb	r2, r1
 8004662:	701a      	strb	r2, [r3, #0]

	return status;
 8004664:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3724      	adds	r7, #36	; 0x24
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800467e:	2306      	movs	r3, #6
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	21b0      	movs	r1, #176	; 0xb0
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f002 fe29 	bl	80072dc <VL53L0X_WriteMulti>
 800468a:	4603      	mov	r3, r0
 800468c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800468e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80046a4:	2306      	movs	r3, #6
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	21b0      	movs	r1, #176	; 0xb0
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f002 fe46 	bl	800733c <VL53L0X_ReadMulti>
 80046b0:	4603      	mov	r3, r0
 80046b2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80046b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08c      	sub	sp, #48	; 0x30
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	607a      	str	r2, [r7, #4]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	460b      	mov	r3, r1
 80046ce:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80046d0:	2300      	movs	r3, #0
 80046d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80046d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d8:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80046da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046dc:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80046de:	2300      	movs	r3, #0
 80046e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046e2:	e02b      	b.n	800473c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80046e4:	f107 031c 	add.w	r3, r7, #28
 80046e8:	6a3a      	ldr	r2, [r7, #32]
 80046ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ff11 	bl	8004514 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d103      	bne.n	8004702 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80046fa:	23ce      	movs	r3, #206	; 0xce
 80046fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8004700:	e020      	b.n	8004744 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	461a      	mov	r2, r3
 8004706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004708:	4413      	add	r3, r2
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff ff60 	bl	80045d0 <is_aperture>
 8004710:	4603      	mov	r3, r0
 8004712:	461a      	mov	r2, r3
 8004714:	7afb      	ldrb	r3, [r7, #11]
 8004716:	4293      	cmp	r3, r2
 8004718:	d003      	beq.n	8004722 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800471a:	23ce      	movs	r3, #206	; 0xce
 800471c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8004720:	e010      	b.n	8004744 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8004726:	6a3a      	ldr	r2, [r7, #32]
 8004728:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800472a:	6838      	ldr	r0, [r7, #0]
 800472c:	f7ff ff6a 	bl	8004604 <enable_spad_bit>
		currentSpad++;
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	3301      	adds	r3, #1
 8004734:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8004736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004738:	3301      	adds	r3, #1
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
 800473c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800473e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004740:	429a      	cmp	r2, r3
 8004742:	d3cf      	bcc.n	80046e4 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8004744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004746:	6a3a      	ldr	r2, [r7, #32]
 8004748:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800474a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8004752:	6839      	ldr	r1, [r7, #0]
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f7ff ff8d 	bl	8004674 <set_ref_spad_map>
 800475a:	4603      	mov	r3, r0
 800475c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8004760:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004764:	2b00      	cmp	r3, #0
 8004766:	d121      	bne.n	80047ac <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8004768:	f107 0314 	add.w	r3, r7, #20
 800476c:	4619      	mov	r1, r3
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f7ff ff93 	bl	800469a <get_ref_spad_map>
 8004774:	4603      	mov	r3, r0
 8004776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800477e:	e011      	b.n	80047a4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	4413      	add	r3, r2
 8004786:	781a      	ldrb	r2, [r3, #0]
 8004788:	f107 0114 	add.w	r1, r7, #20
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	440b      	add	r3, r1
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d003      	beq.n	800479e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004796:	23ce      	movs	r3, #206	; 0xce
 8004798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800479c:	e006      	b.n	80047ac <enable_ref_spads+0xec>
			}
			i++;
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	3301      	adds	r3, #1
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80047a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d3e9      	bcc.n	8004780 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80047ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3730      	adds	r7, #48	; 0x30
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	; 0x28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80047c2:	2300      	movs	r3, #0
 80047c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80047d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80047d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d107      	bne.n	80047f0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80047e0:	22c0      	movs	r2, #192	; 0xc0
 80047e2:	2101      	movs	r1, #1
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f002 fdd5 	bl	8007394 <VL53L0X_WrByte>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80047f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d108      	bne.n	800480a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80047f8:	f107 0308 	add.w	r3, r7, #8
 80047fc:	4619      	mov	r1, r3
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff fc48 	bl	8004094 <VL53L0X_PerformSingleRangingMeasurement>
 8004804:	4603      	mov	r3, r0
 8004806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800480a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800480e:	2b00      	cmp	r3, #0
 8004810:	d107      	bne.n	8004822 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004812:	2201      	movs	r2, #1
 8004814:	21ff      	movs	r1, #255	; 0xff
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f002 fdbc 	bl	8007394 <VL53L0X_WrByte>
 800481c:	4603      	mov	r3, r0
 800481e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8004822:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004826:	2b00      	cmp	r3, #0
 8004828:	d107      	bne.n	800483a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	21b6      	movs	r1, #182	; 0xb6
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f002 fe5c 	bl	80074ec <VL53L0X_RdWord>
 8004834:	4603      	mov	r3, r0
 8004836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800483a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800483e:	2b00      	cmp	r3, #0
 8004840:	d107      	bne.n	8004852 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004842:	2200      	movs	r2, #0
 8004844:	21ff      	movs	r1, #255	; 0xff
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f002 fda4 	bl	8007394 <VL53L0X_WrByte>
 800484c:	4603      	mov	r3, r0
 800484e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8004852:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004856:	2b00      	cmp	r3, #0
 8004858:	d112      	bne.n	8004880 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800485a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800485e:	461a      	mov	r2, r3
 8004860:	2101      	movs	r1, #1
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f002 fd96 	bl	8007394 <VL53L0X_WrByte>
 8004868:	4603      	mov	r3, r0
 800486a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800486e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800487c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8004880:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004884:	4618      	mov	r0, r3
 8004886:	3728      	adds	r7, #40	; 0x28
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800488c:	b590      	push	{r4, r7, lr}
 800488e:	b09d      	sub	sp, #116	; 0x74
 8004890:	af06      	add	r7, sp, #24
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004898:	2300      	movs	r3, #0
 800489a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800489e:	23b4      	movs	r3, #180	; 0xb4
 80048a0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80048a4:	2303      	movs	r3, #3
 80048a6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80048a8:	232c      	movs	r3, #44	; 0x2c
 80048aa:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80048b8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80048bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80048be:	2300      	movs	r3, #0
 80048c0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80048c6:	2306      	movs	r3, #6
 80048c8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80048f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80048f6:	e009      	b.n	800490c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004908:	3301      	adds	r3, #1
 800490a:	64bb      	str	r3, [r7, #72]	; 0x48
 800490c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	429a      	cmp	r2, r3
 8004912:	d3f1      	bcc.n	80048f8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004914:	2201      	movs	r2, #1
 8004916:	21ff      	movs	r1, #255	; 0xff
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f002 fd3b 	bl	8007394 <VL53L0X_WrByte>
 800491e:	4603      	mov	r3, r0
 8004920:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8004924:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004928:	2b00      	cmp	r3, #0
 800492a:	d107      	bne.n	800493c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800492c:	2200      	movs	r2, #0
 800492e:	214f      	movs	r1, #79	; 0x4f
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f002 fd2f 	bl	8007394 <VL53L0X_WrByte>
 8004936:	4603      	mov	r3, r0
 8004938:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800493c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004940:	2b00      	cmp	r3, #0
 8004942:	d107      	bne.n	8004954 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8004944:	222c      	movs	r2, #44	; 0x2c
 8004946:	214e      	movs	r1, #78	; 0x4e
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f002 fd23 	bl	8007394 <VL53L0X_WrByte>
 800494e:	4603      	mov	r3, r0
 8004950:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004954:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004958:	2b00      	cmp	r3, #0
 800495a:	d107      	bne.n	800496c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800495c:	2200      	movs	r2, #0
 800495e:	21ff      	movs	r1, #255	; 0xff
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f002 fd17 	bl	8007394 <VL53L0X_WrByte>
 8004966:	4603      	mov	r3, r0
 8004968:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800496c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004970:	2b00      	cmp	r3, #0
 8004972:	d109      	bne.n	8004988 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8004974:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004978:	461a      	mov	r2, r3
 800497a:	21b6      	movs	r1, #182	; 0xb6
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f002 fd09 	bl	8007394 <VL53L0X_WrByte>
 8004982:	4603      	mov	r3, r0
 8004984:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8004988:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800498c:	2b00      	cmp	r3, #0
 800498e:	d107      	bne.n	80049a0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8004990:	2200      	movs	r2, #0
 8004992:	2180      	movs	r1, #128	; 0x80
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f002 fcfd 	bl	8007394 <VL53L0X_WrByte>
 800499a:	4603      	mov	r3, r0
 800499c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80049a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10a      	bne.n	80049be <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80049a8:	f107 0210 	add.w	r2, r7, #16
 80049ac:	f107 0111 	add.w	r1, r7, #17
 80049b0:	2300      	movs	r3, #0
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fbbb 	bl	800512e <VL53L0X_perform_ref_calibration>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80049be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d121      	bne.n	8004a0a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80049ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049cc:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80049d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80049e2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80049e6:	f107 0218 	add.w	r2, r7, #24
 80049ea:	9204      	str	r2, [sp, #16]
 80049ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049ee:	9203      	str	r2, [sp, #12]
 80049f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80049f2:	9202      	str	r2, [sp, #8]
 80049f4:	9301      	str	r3, [sp, #4]
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	4623      	mov	r3, r4
 80049fc:	4602      	mov	r2, r0
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f7ff fe5e 	bl	80046c0 <enable_ref_spads>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004a0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d174      	bne.n	8004afc <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8004a16:	f107 0312 	add.w	r3, r7, #18
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f7ff fecb 	bl	80047b8 <perform_ref_signal_measurement>
 8004a22:	4603      	mov	r3, r0
 8004a24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004a28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d161      	bne.n	8004af4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8004a30:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004a32:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d25d      	bcs.n	8004af4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8004a38:	2300      	movs	r3, #0
 8004a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a3c:	e009      	b.n	8004a52 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004a48:	2200      	movs	r2, #0
 8004a4a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8004a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a4e:	3301      	adds	r3, #1
 8004a50:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d3f1      	bcc.n	8004a3e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8004a5a:	e002      	b.n	8004a62 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8004a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a5e:	3301      	adds	r3, #1
 8004a60:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8004a62:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8004a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a68:	4413      	add	r3, r2
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff fdb0 	bl	80045d0 <is_aperture>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d103      	bne.n	8004a7e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8004a76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d3ee      	bcc.n	8004a5c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8004a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a84:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8004a92:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004a96:	f107 0218 	add.w	r2, r7, #24
 8004a9a:	9204      	str	r2, [sp, #16]
 8004a9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a9e:	9203      	str	r2, [sp, #12]
 8004aa0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004aa2:	9202      	str	r2, [sp, #8]
 8004aa4:	9301      	str	r3, [sp, #4]
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	4623      	mov	r3, r4
 8004aac:	4602      	mov	r2, r0
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f7ff fe06 	bl	80046c0 <enable_ref_spads>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004aba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d11b      	bne.n	8004afa <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8004ac6:	f107 0312 	add.w	r3, r7, #18
 8004aca:	4619      	mov	r1, r3
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f7ff fe73 	bl	80047b8 <perform_ref_signal_measurement>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8004ad8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10c      	bne.n	8004afa <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8004ae0:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8004ae2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d208      	bcs.n	8004afa <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8004aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af0:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8004af2:	e002      	b.n	8004afa <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004af8:	e000      	b.n	8004afc <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8004afa:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004afc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f040 80af 	bne.w	8004c64 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8004b06:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8004b08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	f240 80aa 	bls.w	8004c64 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8004b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8004b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b18:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8004b20:	f107 031c 	add.w	r3, r7, #28
 8004b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b26:	4618      	mov	r0, r3
 8004b28:	f002 fd88 	bl	800763c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8004b2c:	8a7b      	ldrh	r3, [r7, #18]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	bfb8      	it	lt
 8004b38:	425b      	neglt	r3, r3
 8004b3a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8004b42:	e086      	b.n	8004c52 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8004b4a:	f107 0314 	add.w	r3, r7, #20
 8004b4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b52:	f7ff fcdf 	bl	8004514 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5c:	d103      	bne.n	8004b66 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004b5e:	23ce      	movs	r3, #206	; 0xce
 8004b60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8004b64:	e07e      	b.n	8004c64 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8004b66:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff fd2e 	bl	80045d0 <is_aperture>
 8004b74:	4603      	mov	r3, r0
 8004b76:	461a      	mov	r2, r3
 8004b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d003      	beq.n	8004b86 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8004b84:	e06e      	b.n	8004c64 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8004b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b88:	3301      	adds	r3, #1
 8004b8a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8004b96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff fd32 	bl	8004604 <enable_spad_bit>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004ba6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10c      	bne.n	8004bc8 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8004bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8004bba:	4619      	mov	r1, r3
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7ff fd59 	bl	8004674 <set_ref_spad_map>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8004bc8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d146      	bne.n	8004c5e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8004bd0:	f107 0312 	add.w	r3, r7, #18
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f7ff fdee 	bl	80047b8 <perform_ref_signal_measurement>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8004be2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d13b      	bne.n	8004c62 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8004bea:	8a7b      	ldrh	r3, [r7, #18]
 8004bec:	461a      	mov	r2, r3
 8004bee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	bfb8      	it	lt
 8004bf6:	425b      	neglt	r3, r3
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8004bfa:	8a7b      	ldrh	r3, [r7, #18]
 8004bfc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d21c      	bcs.n	8004c3c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8004c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d914      	bls.n	8004c34 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8004c0a:	f107 031c 	add.w	r3, r7, #28
 8004c0e:	4619      	mov	r1, r3
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f7ff fd2f 	bl	8004674 <set_ref_spad_map>
 8004c16:	4603      	mov	r3, r0
 8004c18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8004c22:	f107 011c 	add.w	r1, r7, #28
 8004c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f002 fd07 	bl	800763c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8004c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c30:	3b01      	subs	r3, #1
 8004c32:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c3a:	e00a      	b.n	8004c52 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8004c46:	f107 031c 	add.w	r3, r7, #28
 8004c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f002 fcf5 	bl	800763c <memcpy>
		while (!complete) {
 8004c52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f43f af74 	beq.w	8004b44 <VL53L0X_perform_ref_spad_management+0x2b8>
 8004c5c:	e002      	b.n	8004c64 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004c5e:	bf00      	nop
 8004c60:	e000      	b.n	8004c64 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004c62:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004c64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d115      	bne.n	8004c98 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c70:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8004c78:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	781a      	ldrb	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8004c98:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	375c      	adds	r7, #92	; 0x5c
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd90      	pop	{r4, r7, pc}

08004ca4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8004ca4:	b590      	push	{r4, r7, lr}
 8004ca6:	b093      	sub	sp, #76	; 0x4c
 8004ca8:	af06      	add	r7, sp, #24
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8004cbc:	23b4      	movs	r3, #180	; 0xb4
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8004cc2:	2306      	movs	r3, #6
 8004cc4:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8004cc6:	232c      	movs	r3, #44	; 0x2c
 8004cc8:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004cca:	2201      	movs	r2, #1
 8004ccc:	21ff      	movs	r1, #255	; 0xff
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f002 fb60 	bl	8007394 <VL53L0X_WrByte>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004cda:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d107      	bne.n	8004cf2 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	214f      	movs	r1, #79	; 0x4f
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f002 fb54 	bl	8007394 <VL53L0X_WrByte>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004cf2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d107      	bne.n	8004d0a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8004cfa:	222c      	movs	r2, #44	; 0x2c
 8004cfc:	214e      	movs	r1, #78	; 0x4e
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f002 fb48 	bl	8007394 <VL53L0X_WrByte>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004d0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d107      	bne.n	8004d22 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004d12:	2200      	movs	r2, #0
 8004d14:	21ff      	movs	r1, #255	; 0xff
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f002 fb3c 	bl	8007394 <VL53L0X_WrByte>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004d22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8004d2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d2e:	461a      	mov	r2, r3
 8004d30:	21b6      	movs	r1, #182	; 0xb6
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f002 fb2e 	bl	8007394 <VL53L0X_WrByte>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8004d3e:	2300      	movs	r3, #0
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
 8004d42:	e009      	b.n	8004d58 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004d4e:	2200      	movs	r2, #0
 8004d50:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	3301      	adds	r3, #1
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
 8004d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d3f1      	bcc.n	8004d44 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8004d60:	79fb      	ldrb	r3, [r7, #7]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d011      	beq.n	8004d8a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004d66:	e002      	b.n	8004d6e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004d6e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d74:	4413      	add	r3, r2
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff fc2a 	bl	80045d0 <is_aperture>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d103      	bne.n	8004d8a <VL53L0X_set_reference_spads+0xe6>
 8004d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d3ee      	bcc.n	8004d68 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8004d96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d9a:	79f9      	ldrb	r1, [r7, #7]
 8004d9c:	f107 0214 	add.w	r2, r7, #20
 8004da0:	9204      	str	r2, [sp, #16]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	9203      	str	r2, [sp, #12]
 8004da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004da8:	9202      	str	r2, [sp, #8]
 8004daa:	9301      	str	r3, [sp, #4]
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	4623      	mov	r3, r4
 8004db2:	4602      	mov	r2, r0
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f7ff fc83 	bl	80046c0 <enable_ref_spads>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8004dc0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10c      	bne.n	8004de2 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	79fa      	ldrb	r2, [r7, #7]
 8004dde:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8004de2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3734      	adds	r7, #52	; 0x34
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd90      	pop	{r4, r7, pc}

08004dee <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	460b      	mov	r3, r1
 8004df8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10a      	bne.n	8004e1c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8004e06:	78fb      	ldrb	r3, [r7, #3]
 8004e08:	f043 0301 	orr.w	r3, r3, #1
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	461a      	mov	r2, r3
 8004e10:	2100      	movs	r1, #0
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f002 fabe 	bl	8007394 <VL53L0X_WrByte>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8004e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d104      	bne.n	8004e2e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f9bf 	bl	80051a8 <VL53L0X_measurement_poll_for_completion>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d105      	bne.n	8004e42 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004e36:	2100      	movs	r1, #0
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff fab5 	bl	80043a8 <VL53L0X_ClearInterruptMask>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f002 faa0 	bl	8007394 <VL53L0X_WrByte>
 8004e54:	4603      	mov	r3, r0
 8004e56:	73fb      	strb	r3, [r7, #15]

	return Status;
 8004e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	4608      	mov	r0, r1
 8004e6e:	4611      	mov	r1, r2
 8004e70:	461a      	mov	r2, r3
 8004e72:	4603      	mov	r3, r0
 8004e74:	70fb      	strb	r3, [r7, #3]
 8004e76:	460b      	mov	r3, r1
 8004e78:	70bb      	strb	r3, [r7, #2]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004e86:	2201      	movs	r2, #1
 8004e88:	21ff      	movs	r1, #255	; 0xff
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f002 fa82 	bl	8007394 <VL53L0X_WrByte>
 8004e90:	4603      	mov	r3, r0
 8004e92:	461a      	mov	r2, r3
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f002 fa78 	bl	8007394 <VL53L0X_WrByte>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004eae:	2200      	movs	r2, #0
 8004eb0:	21ff      	movs	r1, #255	; 0xff
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f002 fa6e 	bl	8007394 <VL53L0X_WrByte>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	461a      	mov	r2, r3
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8004ec2:	78fb      	ldrb	r3, [r7, #3]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d01e      	beq.n	8004f06 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8004ec8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d009      	beq.n	8004ee4 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	21cb      	movs	r1, #203	; 0xcb
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f002 fadf 	bl	8007498 <VL53L0X_RdByte>
 8004eda:	4603      	mov	r3, r0
 8004edc:	461a      	mov	r2, r3
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004ee4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d02a      	beq.n	8004f42 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8004eec:	f107 030e 	add.w	r3, r7, #14
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	21ee      	movs	r1, #238	; 0xee
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f002 facf 	bl	8007498 <VL53L0X_RdByte>
 8004efa:	4603      	mov	r3, r0
 8004efc:	461a      	mov	r2, r3
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	73fb      	strb	r3, [r7, #15]
 8004f04:	e01d      	b.n	8004f42 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8004f06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8004f0e:	78bb      	ldrb	r3, [r7, #2]
 8004f10:	461a      	mov	r2, r3
 8004f12:	21cb      	movs	r1, #203	; 0xcb
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f002 fa3d 	bl	8007394 <VL53L0X_WrByte>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004f24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8004f2c:	787b      	ldrb	r3, [r7, #1]
 8004f2e:	2280      	movs	r2, #128	; 0x80
 8004f30:	21ee      	movs	r1, #238	; 0xee
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f002 fa7c 	bl	8007430 <VL53L0X_UpdateByte>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004f42:	2201      	movs	r2, #1
 8004f44:	21ff      	movs	r1, #255	; 0xff
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f002 fa24 	bl	8007394 <VL53L0X_WrByte>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	461a      	mov	r2, r3
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004f56:	2201      	movs	r2, #1
 8004f58:	2100      	movs	r1, #0
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f002 fa1a 	bl	8007394 <VL53L0X_WrByte>
 8004f60:	4603      	mov	r3, r0
 8004f62:	461a      	mov	r2, r3
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	21ff      	movs	r1, #255	; 0xff
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f002 fa10 	bl	8007394 <VL53L0X_WrByte>
 8004f74:	4603      	mov	r3, r0
 8004f76:	461a      	mov	r2, r3
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8004f7e:	7bbb      	ldrb	r3, [r7, #14]
 8004f80:	f023 0310 	bic.w	r3, r3, #16
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	701a      	strb	r2, [r3, #0]

	return Status;
 8004f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b08a      	sub	sp, #40	; 0x28
 8004f9a:	af04      	add	r7, sp, #16
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	71fb      	strb	r3, [r7, #7]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fac:	2300      	movs	r3, #0
 8004fae:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004fc0:	79bb      	ldrb	r3, [r7, #6]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004fcc:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8004fce:	2201      	movs	r2, #1
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f002 f9de 	bl	8007394 <VL53L0X_WrByte>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004fdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d105      	bne.n	8004ff0 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8004fe4:	2140      	movs	r1, #64	; 0x40
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7ff ff01 	bl	8004dee <VL53L0X_perform_single_ref_calibration>
 8004fec:	4603      	mov	r3, r0
 8004fee:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004ff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d115      	bne.n	8005024 <VL53L0X_perform_vhv_calibration+0x8e>
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d112      	bne.n	8005024 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004ffe:	7d39      	ldrb	r1, [r7, #20]
 8005000:	7d7a      	ldrb	r2, [r7, #21]
 8005002:	2300      	movs	r3, #0
 8005004:	9303      	str	r3, [sp, #12]
 8005006:	2301      	movs	r3, #1
 8005008:	9302      	str	r3, [sp, #8]
 800500a:	f107 0313 	add.w	r3, r7, #19
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	460b      	mov	r3, r1
 8005016:	2101      	movs	r1, #1
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f7ff ff23 	bl	8004e64 <VL53L0X_ref_calibration_io>
 800501e:	4603      	mov	r3, r0
 8005020:	75fb      	strb	r3, [r7, #23]
 8005022:	e002      	b.n	800502a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2200      	movs	r2, #0
 8005028:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800502a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d112      	bne.n	8005058 <VL53L0X_perform_vhv_calibration+0xc2>
 8005032:	79bb      	ldrb	r3, [r7, #6]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00f      	beq.n	8005058 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005038:	7dbb      	ldrb	r3, [r7, #22]
 800503a:	461a      	mov	r2, r3
 800503c:	2101      	movs	r1, #1
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f002 f9a8 	bl	8007394 <VL53L0X_WrByte>
 8005044:	4603      	mov	r3, r0
 8005046:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005048:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d103      	bne.n	8005058 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	7dba      	ldrb	r2, [r7, #22]
 8005054:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005058:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	; 0x28
 8005068:	af04      	add	r7, sp, #16
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	4611      	mov	r1, r2
 8005070:	461a      	mov	r2, r3
 8005072:	460b      	mov	r3, r1
 8005074:	71fb      	strb	r3, [r7, #7]
 8005076:	4613      	mov	r3, r2
 8005078:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800507a:	2300      	movs	r3, #0
 800507c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800507e:	2300      	movs	r3, #0
 8005080:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800508a:	79bb      	ldrb	r3, [r7, #6]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005096:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005098:	2202      	movs	r2, #2
 800509a:	2101      	movs	r1, #1
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f002 f979 	bl	8007394 <VL53L0X_WrByte>
 80050a2:	4603      	mov	r3, r0
 80050a4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80050a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d105      	bne.n	80050ba <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80050ae:	2100      	movs	r1, #0
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7ff fe9c 	bl	8004dee <VL53L0X_perform_single_ref_calibration>
 80050b6:	4603      	mov	r3, r0
 80050b8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80050ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d115      	bne.n	80050ee <VL53L0X_perform_phase_calibration+0x8a>
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d112      	bne.n	80050ee <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80050c8:	7d39      	ldrb	r1, [r7, #20]
 80050ca:	7d7a      	ldrb	r2, [r7, #21]
 80050cc:	2301      	movs	r3, #1
 80050ce:	9303      	str	r3, [sp, #12]
 80050d0:	2300      	movs	r3, #0
 80050d2:	9302      	str	r3, [sp, #8]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	9301      	str	r3, [sp, #4]
 80050d8:	f107 0313 	add.w	r3, r7, #19
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	460b      	mov	r3, r1
 80050e0:	2101      	movs	r1, #1
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7ff febe 	bl	8004e64 <VL53L0X_ref_calibration_io>
 80050e8:	4603      	mov	r3, r0
 80050ea:	75fb      	strb	r3, [r7, #23]
 80050ec:	e002      	b.n	80050f4 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2200      	movs	r2, #0
 80050f2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80050f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d112      	bne.n	8005122 <VL53L0X_perform_phase_calibration+0xbe>
 80050fc:	79bb      	ldrb	r3, [r7, #6]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00f      	beq.n	8005122 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005102:	7dbb      	ldrb	r3, [r7, #22]
 8005104:	461a      	mov	r2, r3
 8005106:	2101      	movs	r1, #1
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f002 f943 	bl	8007394 <VL53L0X_WrByte>
 800510e:	4603      	mov	r3, r0
 8005110:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005112:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d103      	bne.n	8005122 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	7dba      	ldrb	r2, [r7, #22]
 800511e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005122:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b086      	sub	sp, #24
 8005132:	af00      	add	r7, sp, #0
 8005134:	60f8      	str	r0, [r7, #12]
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	607a      	str	r2, [r7, #4]
 800513a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800513c:	2300      	movs	r3, #0
 800513e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005140:	2300      	movs	r3, #0
 8005142:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800514a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800514c:	78fa      	ldrb	r2, [r7, #3]
 800514e:	2300      	movs	r3, #0
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f7ff ff1f 	bl	8004f96 <VL53L0X_perform_vhv_calibration>
 8005158:	4603      	mov	r3, r0
 800515a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800515c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d107      	bne.n	8005174 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005164:	78fa      	ldrb	r2, [r7, #3]
 8005166:	2300      	movs	r3, #0
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7ff ff7a 	bl	8005064 <VL53L0X_perform_phase_calibration>
 8005170:	4603      	mov	r3, r0
 8005172:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005174:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10f      	bne.n	800519c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800517c:	7dbb      	ldrb	r3, [r7, #22]
 800517e:	461a      	mov	r2, r3
 8005180:	2101      	movs	r1, #1
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f002 f906 	bl	8007394 <VL53L0X_WrByte>
 8005188:	4603      	mov	r3, r0
 800518a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800518c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d103      	bne.n	800519c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	7dba      	ldrb	r2, [r7, #22]
 8005198:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800519c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051b0:	2300      	movs	r3, #0
 80051b2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80051bc:	f107 030f 	add.w	r3, r7, #15
 80051c0:	4619      	mov	r1, r3
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fe fdff 	bl	8003dc6 <VL53L0X_GetMeasurementDataReady>
 80051c8:	4603      	mov	r3, r0
 80051ca:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80051cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d110      	bne.n	80051f6 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d00f      	beq.n	80051fa <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	3301      	adds	r3, #1
 80051de:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80051e6:	d302      	bcc.n	80051ee <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80051e8:	23f9      	movs	r3, #249	; 0xf9
 80051ea:	75fb      	strb	r3, [r7, #23]
			break;
 80051ec:	e006      	b.n	80051fc <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f002 f9f0 	bl	80075d4 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80051f4:	e7e2      	b.n	80051bc <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80051f6:	bf00      	nop
 80051f8:	e000      	b.n	80051fc <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80051fa:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80051fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	3301      	adds	r3, #1
 800521a:	b2db      	uxtb	r3, r3
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8005220:	7bfb      	ldrb	r3, [r7, #15]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800522e:	b480      	push	{r7}
 8005230:	b085      	sub	sp, #20
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800523a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800523e:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8005240:	e002      	b.n	8005248 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	089b      	lsrs	r3, r3, #2
 8005246:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	429a      	cmp	r2, r3
 800524e:	d8f8      	bhi.n	8005242 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005250:	e017      	b.n	8005282 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4413      	add	r3, r2
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	429a      	cmp	r2, r3
 800525c:	d30b      	bcc.n	8005276 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4413      	add	r3, r2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	085b      	lsrs	r3, r3, #1
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	4413      	add	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	e002      	b.n	800527c <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	085b      	lsrs	r3, r3, #1
 800527a:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	089b      	lsrs	r3, r3, #2
 8005280:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e4      	bne.n	8005252 <VL53L0X_isqrt+0x24>
	}

	return res;
 8005288:	68fb      	ldr	r3, [r7, #12]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b086      	sub	sp, #24
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800529e:	2300      	movs	r3, #0
 80052a0:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80052a2:	2200      	movs	r2, #0
 80052a4:	2183      	movs	r1, #131	; 0x83
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f002 f874 	bl	8007394 <VL53L0X_WrByte>
 80052ac:	4603      	mov	r3, r0
 80052ae:	461a      	mov	r2, r3
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80052b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d11e      	bne.n	80052fc <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80052c2:	f107 030f 	add.w	r3, r7, #15
 80052c6:	461a      	mov	r2, r3
 80052c8:	2183      	movs	r1, #131	; 0x83
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f002 f8e4 	bl	8007498 <VL53L0X_RdByte>
 80052d0:	4603      	mov	r3, r0
 80052d2:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10a      	bne.n	80052f0 <VL53L0X_device_read_strobe+0x5a>
 80052da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	3301      	adds	r3, #1
 80052e6:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80052ee:	d3e8      	bcc.n	80052c2 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80052f6:	d301      	bcc.n	80052fc <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80052f8:	23f9      	movs	r3, #249	; 0xf9
 80052fa:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80052fc:	2201      	movs	r2, #1
 80052fe:	2183      	movs	r1, #131	; 0x83
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f002 f847 	bl	8007394 <VL53L0X_WrByte>
 8005306:	4603      	mov	r3, r0
 8005308:	461a      	mov	r2, r3
 800530a:	7dfb      	ldrb	r3, [r7, #23]
 800530c:	4313      	orrs	r3, r2
 800530e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8005310:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005314:	4618      	mov	r0, r3
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b098      	sub	sp, #96	; 0x60
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005328:	2300      	movs	r3, #0
 800532a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800533e:	2300      	movs	r3, #0
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800534c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005350:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005352:	2300      	movs	r3, #0
 8005354:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005364:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8005368:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800536c:	2b07      	cmp	r3, #7
 800536e:	f000 8408 	beq.w	8005b82 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005372:	2201      	movs	r2, #1
 8005374:	2180      	movs	r1, #128	; 0x80
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f002 f80c 	bl	8007394 <VL53L0X_WrByte>
 800537c:	4603      	mov	r3, r0
 800537e:	461a      	mov	r2, r3
 8005380:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005384:	4313      	orrs	r3, r2
 8005386:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800538a:	2201      	movs	r2, #1
 800538c:	21ff      	movs	r1, #255	; 0xff
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f002 f800 	bl	8007394 <VL53L0X_WrByte>
 8005394:	4603      	mov	r3, r0
 8005396:	461a      	mov	r2, r3
 8005398:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800539c:	4313      	orrs	r3, r2
 800539e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80053a2:	2200      	movs	r2, #0
 80053a4:	2100      	movs	r1, #0
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f001 fff4 	bl	8007394 <VL53L0X_WrByte>
 80053ac:	4603      	mov	r3, r0
 80053ae:	461a      	mov	r2, r3
 80053b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80053ba:	2206      	movs	r2, #6
 80053bc:	21ff      	movs	r1, #255	; 0xff
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f001 ffe8 	bl	8007394 <VL53L0X_WrByte>
 80053c4:	4603      	mov	r3, r0
 80053c6:	461a      	mov	r2, r3
 80053c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053cc:	4313      	orrs	r3, r2
 80053ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80053d2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80053d6:	461a      	mov	r2, r3
 80053d8:	2183      	movs	r1, #131	; 0x83
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f002 f85c 	bl	8007498 <VL53L0X_RdByte>
 80053e0:	4603      	mov	r3, r0
 80053e2:	461a      	mov	r2, r3
 80053e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80053ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053f2:	f043 0304 	orr.w	r3, r3, #4
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	461a      	mov	r2, r3
 80053fa:	2183      	movs	r1, #131	; 0x83
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f001 ffc9 	bl	8007394 <VL53L0X_WrByte>
 8005402:	4603      	mov	r3, r0
 8005404:	461a      	mov	r2, r3
 8005406:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800540a:	4313      	orrs	r3, r2
 800540c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8005410:	2207      	movs	r2, #7
 8005412:	21ff      	movs	r1, #255	; 0xff
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f001 ffbd 	bl	8007394 <VL53L0X_WrByte>
 800541a:	4603      	mov	r3, r0
 800541c:	461a      	mov	r2, r3
 800541e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005422:	4313      	orrs	r3, r2
 8005424:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8005428:	2201      	movs	r2, #1
 800542a:	2181      	movs	r1, #129	; 0x81
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 ffb1 	bl	8007394 <VL53L0X_WrByte>
 8005432:	4603      	mov	r3, r0
 8005434:	461a      	mov	r2, r3
 8005436:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800543a:	4313      	orrs	r3, r2
 800543c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f002 f8c7 	bl	80075d4 <VL53L0X_PollingDelay>
 8005446:	4603      	mov	r3, r0
 8005448:	461a      	mov	r2, r3
 800544a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800544e:	4313      	orrs	r3, r2
 8005450:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005454:	2201      	movs	r2, #1
 8005456:	2180      	movs	r1, #128	; 0x80
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f001 ff9b 	bl	8007394 <VL53L0X_WrByte>
 800545e:	4603      	mov	r3, r0
 8005460:	461a      	mov	r2, r3
 8005462:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005466:	4313      	orrs	r3, r2
 8005468:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800546c:	78fb      	ldrb	r3, [r7, #3]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 8098 	beq.w	80055a8 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005478:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800547c:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005480:	2b00      	cmp	r3, #0
 8005482:	f040 8091 	bne.w	80055a8 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8005486:	226b      	movs	r2, #107	; 0x6b
 8005488:	2194      	movs	r1, #148	; 0x94
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f001 ff82 	bl	8007394 <VL53L0X_WrByte>
 8005490:	4603      	mov	r3, r0
 8005492:	461a      	mov	r2, r3
 8005494:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005498:	4313      	orrs	r3, r2
 800549a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff fef9 	bl	8005296 <VL53L0X_device_read_strobe>
 80054a4:	4603      	mov	r3, r0
 80054a6:	461a      	mov	r2, r3
 80054a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80054b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054b6:	461a      	mov	r2, r3
 80054b8:	2190      	movs	r1, #144	; 0x90
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f002 f84e 	bl	800755c <VL53L0X_RdDWord>
 80054c0:	4603      	mov	r3, r0
 80054c2:	461a      	mov	r2, r3
 80054c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	0a1b      	lsrs	r3, r3, #8
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054d8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	0bdb      	lsrs	r3, r3, #15
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80054ea:	2224      	movs	r2, #36	; 0x24
 80054ec:	2194      	movs	r1, #148	; 0x94
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f001 ff50 	bl	8007394 <VL53L0X_WrByte>
 80054f4:	4603      	mov	r3, r0
 80054f6:	461a      	mov	r2, r3
 80054f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7ff fec7 	bl	8005296 <VL53L0X_device_read_strobe>
 8005508:	4603      	mov	r3, r0
 800550a:	461a      	mov	r2, r3
 800550c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005510:	4313      	orrs	r3, r2
 8005512:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005516:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800551a:	461a      	mov	r2, r3
 800551c:	2190      	movs	r1, #144	; 0x90
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f002 f81c 	bl	800755c <VL53L0X_RdDWord>
 8005524:	4603      	mov	r3, r0
 8005526:	461a      	mov	r2, r3
 8005528:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800552c:	4313      	orrs	r3, r2
 800552e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	0e1b      	lsrs	r3, r3, #24
 8005536:	b2db      	uxtb	r3, r3
 8005538:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	0c1b      	lsrs	r3, r3, #16
 800553e:	b2db      	uxtb	r3, r3
 8005540:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	0a1b      	lsrs	r3, r3, #8
 8005546:	b2db      	uxtb	r3, r3
 8005548:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	b2db      	uxtb	r3, r3
 800554e:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8005550:	2225      	movs	r2, #37	; 0x25
 8005552:	2194      	movs	r1, #148	; 0x94
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f001 ff1d 	bl	8007394 <VL53L0X_WrByte>
 800555a:	4603      	mov	r3, r0
 800555c:	461a      	mov	r2, r3
 800555e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005562:	4313      	orrs	r3, r2
 8005564:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff fe94 	bl	8005296 <VL53L0X_device_read_strobe>
 800556e:	4603      	mov	r3, r0
 8005570:	461a      	mov	r2, r3
 8005572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005576:	4313      	orrs	r3, r2
 8005578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800557c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005580:	461a      	mov	r2, r3
 8005582:	2190      	movs	r1, #144	; 0x90
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f001 ffe9 	bl	800755c <VL53L0X_RdDWord>
 800558a:	4603      	mov	r3, r0
 800558c:	461a      	mov	r2, r3
 800558e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005592:	4313      	orrs	r3, r2
 8005594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	0e1b      	lsrs	r3, r3, #24
 800559c:	b2db      	uxtb	r3, r3
 800559e:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	0c1b      	lsrs	r3, r3, #16
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 8189 	beq.w	80058c6 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80055b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80055b8:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f040 8182 	bne.w	80058c6 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80055c2:	2202      	movs	r2, #2
 80055c4:	2194      	movs	r1, #148	; 0x94
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f001 fee4 	bl	8007394 <VL53L0X_WrByte>
 80055cc:	4603      	mov	r3, r0
 80055ce:	461a      	mov	r2, r3
 80055d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff fe5b 	bl	8005296 <VL53L0X_device_read_strobe>
 80055e0:	4603      	mov	r3, r0
 80055e2:	461a      	mov	r2, r3
 80055e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80055ee:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80055f2:	461a      	mov	r2, r3
 80055f4:	2190      	movs	r1, #144	; 0x90
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f001 ff4e 	bl	8007498 <VL53L0X_RdByte>
 80055fc:	4603      	mov	r3, r0
 80055fe:	461a      	mov	r2, r3
 8005600:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005604:	4313      	orrs	r3, r2
 8005606:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800560a:	227b      	movs	r2, #123	; 0x7b
 800560c:	2194      	movs	r1, #148	; 0x94
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f001 fec0 	bl	8007394 <VL53L0X_WrByte>
 8005614:	4603      	mov	r3, r0
 8005616:	461a      	mov	r2, r3
 8005618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800561c:	4313      	orrs	r3, r2
 800561e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fe37 	bl	8005296 <VL53L0X_device_read_strobe>
 8005628:	4603      	mov	r3, r0
 800562a:	461a      	mov	r2, r3
 800562c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005630:	4313      	orrs	r3, r2
 8005632:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8005636:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800563a:	461a      	mov	r2, r3
 800563c:	2190      	movs	r1, #144	; 0x90
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f001 ff2a 	bl	8007498 <VL53L0X_RdByte>
 8005644:	4603      	mov	r3, r0
 8005646:	461a      	mov	r2, r3
 8005648:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800564c:	4313      	orrs	r3, r2
 800564e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8005652:	2277      	movs	r2, #119	; 0x77
 8005654:	2194      	movs	r1, #148	; 0x94
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f001 fe9c 	bl	8007394 <VL53L0X_WrByte>
 800565c:	4603      	mov	r3, r0
 800565e:	461a      	mov	r2, r3
 8005660:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005664:	4313      	orrs	r3, r2
 8005666:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7ff fe13 	bl	8005296 <VL53L0X_device_read_strobe>
 8005670:	4603      	mov	r3, r0
 8005672:	461a      	mov	r2, r3
 8005674:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005678:	4313      	orrs	r3, r2
 800567a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800567e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005682:	461a      	mov	r2, r3
 8005684:	2190      	movs	r1, #144	; 0x90
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f001 ff68 	bl	800755c <VL53L0X_RdDWord>
 800568c:	4603      	mov	r3, r0
 800568e:	461a      	mov	r2, r3
 8005690:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005694:	4313      	orrs	r3, r2
 8005696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	0e5b      	lsrs	r3, r3, #25
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80056a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056aa:	0c9b      	lsrs	r3, r3, #18
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	0adb      	lsrs	r3, r3, #11
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80056c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c6:	091b      	lsrs	r3, r3, #4
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80056e4:	2278      	movs	r2, #120	; 0x78
 80056e6:	2194      	movs	r1, #148	; 0x94
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f001 fe53 	bl	8007394 <VL53L0X_WrByte>
 80056ee:	4603      	mov	r3, r0
 80056f0:	461a      	mov	r2, r3
 80056f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff fdca 	bl	8005296 <VL53L0X_device_read_strobe>
 8005702:	4603      	mov	r3, r0
 8005704:	461a      	mov	r2, r3
 8005706:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800570a:	4313      	orrs	r3, r2
 800570c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005710:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005714:	461a      	mov	r2, r3
 8005716:	2190      	movs	r1, #144	; 0x90
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f001 ff1f 	bl	800755c <VL53L0X_RdDWord>
 800571e:	4603      	mov	r3, r0
 8005720:	461a      	mov	r2, r3
 8005722:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005726:	4313      	orrs	r3, r2
 8005728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	0f5b      	lsrs	r3, r3, #29
 8005730:	b2db      	uxtb	r3, r3
 8005732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005736:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8005738:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800573c:	4413      	add	r3, r2
 800573e:	b2db      	uxtb	r3, r3
 8005740:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	0d9b      	lsrs	r3, r3, #22
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800574c:	b2db      	uxtb	r3, r3
 800574e:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	0bdb      	lsrs	r3, r3, #15
 8005754:	b2db      	uxtb	r3, r3
 8005756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800575a:	b2db      	uxtb	r3, r3
 800575c:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	0a1b      	lsrs	r3, r3, #8
 8005762:	b2db      	uxtb	r3, r3
 8005764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005768:	b2db      	uxtb	r3, r3
 800576a:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576e:	085b      	lsrs	r3, r3, #1
 8005770:	b2db      	uxtb	r3, r3
 8005772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005776:	b2db      	uxtb	r3, r3
 8005778:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	b2db      	uxtb	r3, r3
 800577e:	019b      	lsls	r3, r3, #6
 8005780:	b2db      	uxtb	r3, r3
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	b2db      	uxtb	r3, r3
 8005788:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800578c:	2279      	movs	r2, #121	; 0x79
 800578e:	2194      	movs	r1, #148	; 0x94
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f001 fdff 	bl	8007394 <VL53L0X_WrByte>
 8005796:	4603      	mov	r3, r0
 8005798:	461a      	mov	r2, r3
 800579a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800579e:	4313      	orrs	r3, r2
 80057a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff fd76 	bl	8005296 <VL53L0X_device_read_strobe>
 80057aa:	4603      	mov	r3, r0
 80057ac:	461a      	mov	r2, r3
 80057ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057b2:	4313      	orrs	r3, r2
 80057b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80057b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057bc:	461a      	mov	r2, r3
 80057be:	2190      	movs	r1, #144	; 0x90
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f001 fecb 	bl	800755c <VL53L0X_RdDWord>
 80057c6:	4603      	mov	r3, r0
 80057c8:	461a      	mov	r2, r3
 80057ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	0e9b      	lsrs	r3, r3, #26
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057de:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80057e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057e4:	4413      	add	r3, r2
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	0cdb      	lsrs	r3, r3, #19
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	0b1b      	lsrs	r3, r3, #12
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005802:	b2db      	uxtb	r3, r3
 8005804:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	095b      	lsrs	r3, r3, #5
 800580a:	b2db      	uxtb	r3, r3
 800580c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005810:	b2db      	uxtb	r3, r3
 8005812:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	b2db      	uxtb	r3, r3
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	b2db      	uxtb	r3, r3
 800581c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005820:	b2db      	uxtb	r3, r3
 8005822:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8005826:	227a      	movs	r2, #122	; 0x7a
 8005828:	2194      	movs	r1, #148	; 0x94
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f001 fdb2 	bl	8007394 <VL53L0X_WrByte>
 8005830:	4603      	mov	r3, r0
 8005832:	461a      	mov	r2, r3
 8005834:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005838:	4313      	orrs	r3, r2
 800583a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff fd29 	bl	8005296 <VL53L0X_device_read_strobe>
 8005844:	4603      	mov	r3, r0
 8005846:	461a      	mov	r2, r3
 8005848:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800584c:	4313      	orrs	r3, r2
 800584e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005856:	461a      	mov	r2, r3
 8005858:	2190      	movs	r1, #144	; 0x90
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f001 fe7e 	bl	800755c <VL53L0X_RdDWord>
 8005860:	4603      	mov	r3, r0
 8005862:	461a      	mov	r2, r3
 8005864:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005868:	4313      	orrs	r3, r2
 800586a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	0f9b      	lsrs	r3, r3, #30
 8005872:	b2db      	uxtb	r3, r3
 8005874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005878:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800587a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800587e:	4413      	add	r3, r2
 8005880:	b2db      	uxtb	r3, r3
 8005882:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	0ddb      	lsrs	r3, r3, #23
 8005888:	b2db      	uxtb	r3, r3
 800588a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800588e:	b2db      	uxtb	r3, r3
 8005890:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	0c1b      	lsrs	r3, r3, #16
 8005896:	b2db      	uxtb	r3, r3
 8005898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800589c:	b2db      	uxtb	r3, r3
 800589e:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	0a5b      	lsrs	r3, r3, #9
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	089b      	lsrs	r3, r3, #2
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80058c0:	2300      	movs	r3, #0
 80058c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80058c6:	78fb      	ldrb	r3, [r7, #3]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 80f1 	beq.w	8005ab4 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80058d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80058d6:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f040 80ea 	bne.w	8005ab4 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80058e0:	227b      	movs	r2, #123	; 0x7b
 80058e2:	2194      	movs	r1, #148	; 0x94
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f001 fd55 	bl	8007394 <VL53L0X_WrByte>
 80058ea:	4603      	mov	r3, r0
 80058ec:	461a      	mov	r2, r3
 80058ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff fccc 	bl	8005296 <VL53L0X_device_read_strobe>
 80058fe:	4603      	mov	r3, r0
 8005900:	461a      	mov	r2, r3
 8005902:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005906:	4313      	orrs	r3, r2
 8005908:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800590c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005910:	461a      	mov	r2, r3
 8005912:	2190      	movs	r1, #144	; 0x90
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f001 fe21 	bl	800755c <VL53L0X_RdDWord>
 800591a:	4603      	mov	r3, r0
 800591c:	461a      	mov	r2, r3
 800591e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005922:	4313      	orrs	r3, r2
 8005924:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8005928:	227c      	movs	r2, #124	; 0x7c
 800592a:	2194      	movs	r1, #148	; 0x94
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f001 fd31 	bl	8007394 <VL53L0X_WrByte>
 8005932:	4603      	mov	r3, r0
 8005934:	461a      	mov	r2, r3
 8005936:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800593a:	4313      	orrs	r3, r2
 800593c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff fca8 	bl	8005296 <VL53L0X_device_read_strobe>
 8005946:	4603      	mov	r3, r0
 8005948:	461a      	mov	r2, r3
 800594a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800594e:	4313      	orrs	r3, r2
 8005950:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8005954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005958:	461a      	mov	r2, r3
 800595a:	2190      	movs	r1, #144	; 0x90
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f001 fdfd 	bl	800755c <VL53L0X_RdDWord>
 8005962:	4603      	mov	r3, r0
 8005964:	461a      	mov	r2, r3
 8005966:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800596a:	4313      	orrs	r3, r2
 800596c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8005970:	2273      	movs	r2, #115	; 0x73
 8005972:	2194      	movs	r1, #148	; 0x94
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f001 fd0d 	bl	8007394 <VL53L0X_WrByte>
 800597a:	4603      	mov	r3, r0
 800597c:	461a      	mov	r2, r3
 800597e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005982:	4313      	orrs	r3, r2
 8005984:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff fc84 	bl	8005296 <VL53L0X_device_read_strobe>
 800598e:	4603      	mov	r3, r0
 8005990:	461a      	mov	r2, r3
 8005992:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005996:	4313      	orrs	r3, r2
 8005998:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800599c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059a0:	461a      	mov	r2, r3
 80059a2:	2190      	movs	r1, #144	; 0x90
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f001 fdd9 	bl	800755c <VL53L0X_RdDWord>
 80059aa:	4603      	mov	r3, r0
 80059ac:	461a      	mov	r2, r3
 80059ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80059b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ba:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80059bc:	b29b      	uxth	r3, r3
 80059be:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80059c0:	2274      	movs	r2, #116	; 0x74
 80059c2:	2194      	movs	r1, #148	; 0x94
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f001 fce5 	bl	8007394 <VL53L0X_WrByte>
 80059ca:	4603      	mov	r3, r0
 80059cc:	461a      	mov	r2, r3
 80059ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7ff fc5c 	bl	8005296 <VL53L0X_device_read_strobe>
 80059de:	4603      	mov	r3, r0
 80059e0:	461a      	mov	r2, r3
 80059e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80059ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059f0:	461a      	mov	r2, r3
 80059f2:	2190      	movs	r1, #144	; 0x90
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f001 fdb1 	bl	800755c <VL53L0X_RdDWord>
 80059fa:	4603      	mov	r3, r0
 80059fc:	461a      	mov	r2, r3
 80059fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8005a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0a:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8005a0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8005a12:	2275      	movs	r2, #117	; 0x75
 8005a14:	2194      	movs	r1, #148	; 0x94
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f001 fcbc 	bl	8007394 <VL53L0X_WrByte>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a24:	4313      	orrs	r3, r2
 8005a26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff fc33 	bl	8005296 <VL53L0X_device_read_strobe>
 8005a30:	4603      	mov	r3, r0
 8005a32:	461a      	mov	r2, r3
 8005a34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005a3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a42:	461a      	mov	r2, r3
 8005a44:	2190      	movs	r1, #144	; 0x90
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f001 fd88 	bl	800755c <VL53L0X_RdDWord>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8005a62:	2276      	movs	r2, #118	; 0x76
 8005a64:	2194      	movs	r1, #148	; 0x94
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f001 fc94 	bl	8007394 <VL53L0X_WrByte>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a74:	4313      	orrs	r3, r2
 8005a76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff fc0b 	bl	8005296 <VL53L0X_device_read_strobe>
 8005a80:	4603      	mov	r3, r0
 8005a82:	461a      	mov	r2, r3
 8005a84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005a8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a92:	461a      	mov	r2, r3
 8005a94:	2190      	movs	r1, #144	; 0x90
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f001 fd60 	bl	800755c <VL53L0X_RdDWord>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8005aae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2181      	movs	r1, #129	; 0x81
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f001 fc6b 	bl	8007394 <VL53L0X_WrByte>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005acc:	2206      	movs	r2, #6
 8005ace:	21ff      	movs	r1, #255	; 0xff
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f001 fc5f 	bl	8007394 <VL53L0X_WrByte>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	461a      	mov	r2, r3
 8005ada:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005ae4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2183      	movs	r1, #131	; 0x83
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f001 fcd3 	bl	8007498 <VL53L0X_RdByte>
 8005af2:	4603      	mov	r3, r0
 8005af4:	461a      	mov	r2, r3
 8005af6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8005b00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b04:	f023 0304 	bic.w	r3, r3, #4
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	2183      	movs	r1, #131	; 0x83
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f001 fc40 	bl	8007394 <VL53L0X_WrByte>
 8005b14:	4603      	mov	r3, r0
 8005b16:	461a      	mov	r2, r3
 8005b18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005b22:	2201      	movs	r2, #1
 8005b24:	21ff      	movs	r1, #255	; 0xff
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f001 fc34 	bl	8007394 <VL53L0X_WrByte>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b34:	4313      	orrs	r3, r2
 8005b36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f001 fc28 	bl	8007394 <VL53L0X_WrByte>
 8005b44:	4603      	mov	r3, r0
 8005b46:	461a      	mov	r2, r3
 8005b48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005b52:	2200      	movs	r2, #0
 8005b54:	21ff      	movs	r1, #255	; 0xff
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f001 fc1c 	bl	8007394 <VL53L0X_WrByte>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	2180      	movs	r1, #128	; 0x80
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f001 fc10 	bl	8007394 <VL53L0X_WrByte>
 8005b74:	4603      	mov	r3, r0
 8005b76:	461a      	mov	r2, r3
 8005b78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005b82:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f040 808f 	bne.w	8005caa <VL53L0X_get_info_from_device+0x98e>
 8005b8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b90:	2b07      	cmp	r3, #7
 8005b92:	f000 808a 	beq.w	8005caa <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8005b96:	78fb      	ldrb	r3, [r7, #3]
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d024      	beq.n	8005bea <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005ba0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ba4:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d11e      	bne.n	8005bea <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8005bb2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8005bbc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bc4:	e00e      	b.n	8005be4 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8005bc6:	f107 0208 	add.w	r2, r7, #8
 8005bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bcc:	4413      	add	r3, r2
 8005bce:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005bda:	460a      	mov	r2, r1
 8005bdc:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be0:	3301      	adds	r3, #1
 8005be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be6:	2b05      	cmp	r3, #5
 8005be8:	dded      	ble.n	8005bc6 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8005bea:	78fb      	ldrb	r3, [r7, #3]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d018      	beq.n	8005c26 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005bf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bf8:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d112      	bne.n	8005c26 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005c00:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005c0a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	33f3      	adds	r3, #243	; 0xf3
 8005c18:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8005c1a:	f107 0310 	add.w	r3, r7, #16
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c22:	f001 fd1e 	bl	8007662 <strcpy>

		}

		if (((option & 4) == 4) &&
 8005c26:	78fb      	ldrb	r3, [r7, #3]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d030      	beq.n	8005c92 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8005c30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c34:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d12a      	bne.n	8005c92 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8005c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c4e:	025b      	lsls	r3, r3, #9
 8005c50:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c56:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8005c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d011      	beq.n	8005c8a <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8005c66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8005c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c74:	fb02 f303 	mul.w	r3, r2, r3
 8005c78:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8005c7a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8005c7e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005c82:	425b      	negs	r3, r3
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8005c8a:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8005c92:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005c96:	78fb      	ldrb	r3, [r7, #3]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8005ca0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005caa:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3760      	adds	r7, #96	; 0x60
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8005cb6:	b490      	push	{r4, r7}
 8005cb8:	b086      	sub	sp, #24
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8005cc2:	f240 6377 	movw	r3, #1655	; 0x677
 8005cc6:	f04f 0400 	mov.w	r4, #0
 8005cca:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8005cce:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005cd2:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8005cd4:	78fb      	ldrb	r3, [r7, #3]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	fb02 f303 	mul.w	r3, r2, r3
 8005ce2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bc90      	pop	{r4, r7}
 8005cee:	4770      	bx	lr

08005cf0 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8005d00:	2300      	movs	r3, #0
 8005d02:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d017      	beq.n	8005d3a <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005d10:	e005      	b.n	8005d1e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	085b      	lsrs	r3, r3, #1
 8005d16:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8005d18:	89fb      	ldrh	r3, [r7, #14]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1f4      	bne.n	8005d12 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8005d28:	89fb      	ldrh	r3, [r7, #14]
 8005d2a:	021b      	lsls	r3, r3, #8
 8005d2c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8005d36:	4413      	add	r3, r2
 8005d38:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8005d3a:	8afb      	ldrh	r3, [r7, #22]

}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	371c      	adds	r7, #28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005d56:	88fb      	ldrh	r3, [r7, #6]
 8005d58:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005d5a:	88fa      	ldrh	r2, [r7, #6]
 8005d5c:	0a12      	lsrs	r2, r2, #8
 8005d5e:	b292      	uxth	r2, r2
 8005d60:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005d62:	3301      	adds	r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8005d66:	68fb      	ldr	r3, [r7, #12]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005d86:	79fb      	ldrb	r3, [r7, #7]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f7ff ff93 	bl	8005cb6 <VL53L0X_calc_macro_period_ps>
 8005d90:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005d98:	4a0a      	ldr	r2, [pc, #40]	; (8005dc4 <VL53L0X_calc_timeout_mclks+0x50>)
 8005d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9e:	099b      	lsrs	r3, r3, #6
 8005da0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005da8:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	085b      	lsrs	r3, r3, #1
 8005db0:	441a      	add	r2, r3
	timeout_period_mclks =
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8005dba:	69fb      	ldr	r3, [r7, #28]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3720      	adds	r7, #32
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	10624dd3 	.word	0x10624dd3

08005dc8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	807b      	strh	r3, [r7, #2]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005ddc:	787b      	ldrb	r3, [r7, #1]
 8005dde:	4619      	mov	r1, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff ff68 	bl	8005cb6 <VL53L0X_calc_macro_period_ps>
 8005de6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005dee:	4a0a      	ldr	r2, [pc, #40]	; (8005e18 <VL53L0X_calc_timeout_us+0x50>)
 8005df0:	fba2 2303 	umull	r2, r3, r2, r3
 8005df4:	099b      	lsrs	r3, r3, #6
 8005df6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005df8:	887b      	ldrh	r3, [r7, #2]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	fb02 f303 	mul.w	r3, r2, r3
 8005e00:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8005e04:	4a04      	ldr	r2, [pc, #16]	; (8005e18 <VL53L0X_calc_timeout_us+0x50>)
 8005e06:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0a:	099b      	lsrs	r3, r3, #6
 8005e0c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8005e0e:	697b      	ldr	r3, [r7, #20]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	10624dd3 	.word	0x10624dd3

08005e1c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08c      	sub	sp, #48	; 0x30
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	460b      	mov	r3, r1
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005e42:	7afb      	ldrb	r3, [r7, #11]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <get_sequence_step_timeout+0x38>
 8005e48:	7afb      	ldrb	r3, [r7, #11]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d002      	beq.n	8005e54 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005e4e:	7afb      	ldrb	r3, [r7, #11]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d128      	bne.n	8005ea6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005e54:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005e58:	461a      	mov	r2, r3
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f7fd fa91 	bl	8003384 <VL53L0X_GetVcselPulsePeriod>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8005e68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d109      	bne.n	8005e84 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8005e70:	f107 0320 	add.w	r3, r7, #32
 8005e74:	461a      	mov	r2, r3
 8005e76:	2146      	movs	r1, #70	; 0x46
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f001 fb0d 	bl	8007498 <VL53L0X_RdByte>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8005e84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff ff5c 	bl	8005d48 <VL53L0X_decode_timeout>
 8005e90:	4603      	mov	r3, r0
 8005e92:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005e94:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005e98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f7ff ff93 	bl	8005dc8 <VL53L0X_calc_timeout_us>
 8005ea2:	62b8      	str	r0, [r7, #40]	; 0x28
 8005ea4:	e092      	b.n	8005fcc <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005ea6:	7afb      	ldrb	r3, [r7, #11]
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d135      	bne.n	8005f18 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005eac:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f7fd fa65 	bl	8003384 <VL53L0X_GetVcselPulsePeriod>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005ec0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f040 8081 	bne.w	8005fcc <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005eca:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005ece:	461a      	mov	r2, r3
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f7fd fa56 	bl	8003384 <VL53L0X_GetVcselPulsePeriod>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8005ede:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d109      	bne.n	8005efa <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8005ee6:	f107 031e 	add.w	r3, r7, #30
 8005eea:	461a      	mov	r2, r3
 8005eec:	2151      	movs	r1, #81	; 0x51
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f001 fafc 	bl	80074ec <VL53L0X_RdWord>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005efa:	8bfb      	ldrh	r3, [r7, #30]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff ff23 	bl	8005d48 <VL53L0X_decode_timeout>
 8005f02:	4603      	mov	r3, r0
 8005f04:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005f06:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005f0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f7ff ff5a 	bl	8005dc8 <VL53L0X_calc_timeout_us>
 8005f14:	62b8      	str	r0, [r7, #40]	; 0x28
 8005f16:	e059      	b.n	8005fcc <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005f18:	7afb      	ldrb	r3, [r7, #11]
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d156      	bne.n	8005fcc <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005f1e:	f107 0314 	add.w	r3, r7, #20
 8005f22:	4619      	mov	r1, r3
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f7fd fb39 	bl	800359c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8005f2e:	7dfb      	ldrb	r3, [r7, #23]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01d      	beq.n	8005f70 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f34:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005f38:	461a      	mov	r2, r3
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7fd fa21 	bl	8003384 <VL53L0X_GetVcselPulsePeriod>
 8005f42:	4603      	mov	r3, r0
 8005f44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8005f48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10f      	bne.n	8005f70 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8005f50:	f107 031e 	add.w	r3, r7, #30
 8005f54:	461a      	mov	r2, r3
 8005f56:	2151      	movs	r1, #81	; 0x51
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f001 fac7 	bl	80074ec <VL53L0X_RdWord>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005f64:	8bfb      	ldrh	r3, [r7, #30]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff feee 	bl	8005d48 <VL53L0X_decode_timeout>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005f70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d109      	bne.n	8005f8c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f78:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	2101      	movs	r1, #1
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f7fd f9ff 	bl	8003384 <VL53L0X_GetVcselPulsePeriod>
 8005f86:	4603      	mov	r3, r0
 8005f88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005f8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10f      	bne.n	8005fb4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8005f94:	f107 031c 	add.w	r3, r7, #28
 8005f98:	461a      	mov	r2, r3
 8005f9a:	2171      	movs	r1, #113	; 0x71
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f001 faa5 	bl	80074ec <VL53L0X_RdWord>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005fa8:	8bbb      	ldrh	r3, [r7, #28]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7ff fecc 	bl	8005d48 <VL53L0X_decode_timeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8005fb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005fb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005fbc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005fc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f7ff feff 	bl	8005dc8 <VL53L0X_calc_timeout_us>
 8005fca:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fd0:	601a      	str	r2, [r3, #0]

	return Status;
 8005fd2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3730      	adds	r7, #48	; 0x30
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b08a      	sub	sp, #40	; 0x28
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	607a      	str	r2, [r7, #4]
 8005fea:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fec:	2300      	movs	r3, #0
 8005fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005ff2:	7afb      	ldrb	r3, [r7, #11]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d005      	beq.n	8006004 <set_sequence_step_timeout+0x26>
 8005ff8:	7afb      	ldrb	r3, [r7, #11]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d002      	beq.n	8006004 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005ffe:	7afb      	ldrb	r3, [r7, #11]
 8006000:	2b02      	cmp	r3, #2
 8006002:	d138      	bne.n	8006076 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006004:	f107 031b 	add.w	r3, r7, #27
 8006008:	461a      	mov	r2, r3
 800600a:	2100      	movs	r1, #0
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f7fd f9b9 	bl	8003384 <VL53L0X_GetVcselPulsePeriod>
 8006012:	4603      	mov	r3, r0
 8006014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8006018:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800601c:	2b00      	cmp	r3, #0
 800601e:	d11a      	bne.n	8006056 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8006020:	7efb      	ldrb	r3, [r7, #27]
 8006022:	461a      	mov	r2, r3
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f7ff fea4 	bl	8005d74 <VL53L0X_calc_timeout_mclks>
 800602c:	4603      	mov	r3, r0
 800602e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8006030:	8bbb      	ldrh	r3, [r7, #28]
 8006032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006036:	d903      	bls.n	8006040 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8006038:	23ff      	movs	r3, #255	; 0xff
 800603a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800603e:	e004      	b.n	800604a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8006040:	8bbb      	ldrh	r3, [r7, #28]
 8006042:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8006044:	3b01      	subs	r3, #1
 8006046:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800604a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800604e:	b29a      	uxth	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006056:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800605a:	2b00      	cmp	r3, #0
 800605c:	f040 80ab 	bne.w	80061b6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8006060:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006064:	461a      	mov	r2, r3
 8006066:	2146      	movs	r1, #70	; 0x46
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f001 f993 	bl	8007394 <VL53L0X_WrByte>
 800606e:	4603      	mov	r3, r0
 8006070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006074:	e09f      	b.n	80061b6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006076:	7afb      	ldrb	r3, [r7, #11]
 8006078:	2b03      	cmp	r3, #3
 800607a:	d135      	bne.n	80060e8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800607c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006080:	2b00      	cmp	r3, #0
 8006082:	d11b      	bne.n	80060bc <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006084:	f107 031b 	add.w	r3, r7, #27
 8006088:	461a      	mov	r2, r3
 800608a:	2100      	movs	r1, #0
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f7fd f979 	bl	8003384 <VL53L0X_GetVcselPulsePeriod>
 8006092:	4603      	mov	r3, r0
 8006094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006098:	7efb      	ldrb	r3, [r7, #27]
 800609a:	461a      	mov	r2, r3
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f7ff fe68 	bl	8005d74 <VL53L0X_calc_timeout_mclks>
 80060a4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80060a6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80060a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff fe20 	bl	8005cf0 <VL53L0X_encode_timeout>
 80060b0:	4603      	mov	r3, r0
 80060b2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80060b4:	8b3a      	ldrh	r2, [r7, #24]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80060bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d108      	bne.n	80060d6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80060c4:	8b3b      	ldrh	r3, [r7, #24]
 80060c6:	461a      	mov	r2, r3
 80060c8:	2151      	movs	r1, #81	; 0x51
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f001 f986 	bl	80073dc <VL53L0X_WrWord>
 80060d0:	4603      	mov	r3, r0
 80060d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80060d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d16b      	bne.n	80061b6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80060e6:	e066      	b.n	80061b6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80060e8:	7afb      	ldrb	r3, [r7, #11]
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d160      	bne.n	80061b0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80060ee:	f107 0310 	add.w	r3, r7, #16
 80060f2:	4619      	mov	r1, r3
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f7fd fa51 	bl	800359c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 80060fe:	7cfb      	ldrb	r3, [r7, #19]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01d      	beq.n	8006140 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006104:	f107 031b 	add.w	r3, r7, #27
 8006108:	461a      	mov	r2, r3
 800610a:	2100      	movs	r1, #0
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f7fd f939 	bl	8003384 <VL53L0X_GetVcselPulsePeriod>
 8006112:	4603      	mov	r3, r0
 8006114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8006118:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10f      	bne.n	8006140 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006120:	f107 0318 	add.w	r3, r7, #24
 8006124:	461a      	mov	r2, r3
 8006126:	2151      	movs	r1, #81	; 0x51
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f001 f9df 	bl	80074ec <VL53L0X_RdWord>
 800612e:	4603      	mov	r3, r0
 8006130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8006134:	8b3b      	ldrh	r3, [r7, #24]
 8006136:	4618      	mov	r0, r3
 8006138:	f7ff fe06 	bl	8005d48 <VL53L0X_decode_timeout>
 800613c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800613e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006140:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006144:	2b00      	cmp	r3, #0
 8006146:	d109      	bne.n	800615c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006148:	f107 031b 	add.w	r3, r7, #27
 800614c:	461a      	mov	r2, r3
 800614e:	2101      	movs	r1, #1
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7fd f917 	bl	8003384 <VL53L0X_GetVcselPulsePeriod>
 8006156:	4603      	mov	r3, r0
 8006158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800615c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006160:	2b00      	cmp	r3, #0
 8006162:	d128      	bne.n	80061b6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006164:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 8006166:	461a      	mov	r2, r3
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f7ff fe02 	bl	8005d74 <VL53L0X_calc_timeout_mclks>
 8006170:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006174:	6a3a      	ldr	r2, [r7, #32]
 8006176:	4413      	add	r3, r2
 8006178:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 800617a:	6a38      	ldr	r0, [r7, #32]
 800617c:	f7ff fdb8 	bl	8005cf0 <VL53L0X_encode_timeout>
 8006180:	4603      	mov	r3, r0
 8006182:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 8006184:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006188:	2b00      	cmp	r3, #0
 800618a:	d108      	bne.n	800619e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800618c:	8bfb      	ldrh	r3, [r7, #30]
 800618e:	461a      	mov	r2, r3
 8006190:	2171      	movs	r1, #113	; 0x71
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f001 f922 	bl	80073dc <VL53L0X_WrWord>
 8006198:	4603      	mov	r3, r0
 800619a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800619e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d107      	bne.n	80061b6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80061ae:	e002      	b.n	80061b6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80061b0:	23fc      	movs	r3, #252	; 0xfc
 80061b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80061b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3728      	adds	r7, #40	; 0x28
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b086      	sub	sp, #24
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	460b      	mov	r3, r1
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061d0:	2300      	movs	r3, #0
 80061d2:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80061d4:	7afb      	ldrb	r3, [r7, #11]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <VL53L0X_get_vcsel_pulse_period+0x1e>
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d00a      	beq.n	80061f4 <VL53L0X_get_vcsel_pulse_period+0x32>
 80061de:	e013      	b.n	8006208 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80061e0:	f107 0316 	add.w	r3, r7, #22
 80061e4:	461a      	mov	r2, r3
 80061e6:	2150      	movs	r1, #80	; 0x50
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f001 f955 	bl	8007498 <VL53L0X_RdByte>
 80061ee:	4603      	mov	r3, r0
 80061f0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80061f2:	e00b      	b.n	800620c <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80061f4:	f107 0316 	add.w	r3, r7, #22
 80061f8:	461a      	mov	r2, r3
 80061fa:	2170      	movs	r1, #112	; 0x70
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f001 f94b 	bl	8007498 <VL53L0X_RdByte>
 8006202:	4603      	mov	r3, r0
 8006204:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006206:	e001      	b.n	800620c <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006208:	23fc      	movs	r3, #252	; 0xfc
 800620a:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800620c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d107      	bne.n	8006224 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8006214:	7dbb      	ldrb	r3, [r7, #22]
 8006216:	4618      	mov	r0, r3
 8006218:	f7fe fff6 	bl	8005208 <VL53L0X_decode_vcsel_period>
 800621c:	4603      	mov	r3, r0
 800621e:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	701a      	strb	r2, [r3, #0]

	return Status;
 8006224:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b092      	sub	sp, #72	; 0x48
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800623a:	2300      	movs	r3, #0
 800623c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006240:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006244:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8006246:	f240 7376 	movw	r3, #1910	; 0x776
 800624a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800624c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006250:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006252:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006256:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8006258:	f240 234e 	movw	r3, #590	; 0x24e
 800625c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800625e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006262:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006264:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006268:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800626a:	f240 2326 	movw	r3, #550	; 0x226
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8006274:	f644 6320 	movw	r3, #20000	; 0x4e20
 8006278:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800627a:	2300      	movs	r3, #0
 800627c:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	429a      	cmp	r2, r3
 8006284:	d205      	bcs.n	8006292 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006286:	23fc      	movs	r3, #252	; 0xfc
 8006288:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800628c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006290:	e0aa      	b.n	80063e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8006292:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006296:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800629e:	f107 0314 	add.w	r3, r7, #20
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7fd f979 	bl	800359c <VL53L0X_GetSequenceStepEnables>
 80062aa:	4603      	mov	r3, r0
 80062ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80062b0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d15b      	bne.n	8006370 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80062b8:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d105      	bne.n	80062ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80062be:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d102      	bne.n	80062ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80062c4:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d052      	beq.n	8006370 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80062ca:	f107 0310 	add.w	r3, r7, #16
 80062ce:	461a      	mov	r2, r3
 80062d0:	2102      	movs	r1, #2
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff fda2 	bl	8005e1c <get_sequence_step_timeout>
 80062d8:	4603      	mov	r3, r0
 80062da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 80062de:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 80062e6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80062ea:	e07d      	b.n	80063e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80062ec:	7d3b      	ldrb	r3, [r7, #20]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00f      	beq.n	8006312 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80062f2:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80062f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062f6:	4413      	add	r3, r2
 80062f8:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fe:	429a      	cmp	r2, r3
 8006300:	d204      	bcs.n	800630c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8006302:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	643b      	str	r3, [r7, #64]	; 0x40
 800630a:	e002      	b.n	8006312 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800630c:	23fc      	movs	r3, #252	; 0xfc
 800630e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8006312:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800631a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800631e:	e063      	b.n	80063e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8006320:	7dbb      	ldrb	r3, [r7, #22]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d011      	beq.n	800634a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	4413      	add	r3, r2
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006330:	69fa      	ldr	r2, [r7, #28]
 8006332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006334:	429a      	cmp	r2, r3
 8006336:	d204      	bcs.n	8006342 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	643b      	str	r3, [r7, #64]	; 0x40
 8006340:	e016      	b.n	8006370 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006342:	23fc      	movs	r3, #252	; 0xfc
 8006344:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006348:	e012      	b.n	8006370 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800634a:	7d7b      	ldrb	r3, [r7, #21]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00f      	beq.n	8006370 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006354:	4413      	add	r3, r2
 8006356:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006358:	69fa      	ldr	r2, [r7, #28]
 800635a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800635c:	429a      	cmp	r2, r3
 800635e:	d204      	bcs.n	800636a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006360:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	643b      	str	r3, [r7, #64]	; 0x40
 8006368:	e002      	b.n	8006370 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800636a:	23fc      	movs	r3, #252	; 0xfc
 800636c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8006370:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8006378:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800637c:	e034      	b.n	80063e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800637e:	7dfb      	ldrb	r3, [r7, #23]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d019      	beq.n	80063b8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8006384:	f107 030c 	add.w	r3, r7, #12
 8006388:	461a      	mov	r2, r3
 800638a:	2103      	movs	r1, #3
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff fd45 	bl	8005e1c <get_sequence_step_timeout>
 8006392:	4603      	mov	r3, r0
 8006394:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800639c:	4413      	add	r3, r2
 800639e:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80063a0:	69fa      	ldr	r2, [r7, #28]
 80063a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d204      	bcs.n	80063b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80063a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	643b      	str	r3, [r7, #64]	; 0x40
 80063b0:	e002      	b.n	80063b8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80063b2:	23fc      	movs	r3, #252	; 0xfc
 80063b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80063b8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d111      	bne.n	80063e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 80063c0:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00e      	beq.n	80063e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 80063c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80063ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063d0:	2104      	movs	r1, #4
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff fe03 	bl	8005fde <set_sequence_step_timeout>
 80063d8:	4603      	mov	r3, r0
 80063da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80063e4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3748      	adds	r7, #72	; 0x48
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b090      	sub	sp, #64	; 0x40
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063fa:	2300      	movs	r3, #0
 80063fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006400:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006404:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8006406:	f240 7376 	movw	r3, #1910	; 0x776
 800640a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800640c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006410:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006412:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006416:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8006418:	f240 234e 	movw	r3, #590	; 0x24e
 800641c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800641e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006422:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006424:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006428:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800642a:	f240 2326 	movw	r3, #550	; 0x226
 800642e:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8006434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006438:	441a      	add	r2, r3
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800643e:	f107 0318 	add.w	r3, r7, #24
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7fd f8a9 	bl	800359c <VL53L0X_GetSequenceStepEnables>
 800644a:	4603      	mov	r3, r0
 800644c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8006450:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8006458:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800645c:	e075      	b.n	800654a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800645e:	7e3b      	ldrb	r3, [r7, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d105      	bne.n	8006470 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8006464:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8006466:	2b00      	cmp	r3, #0
 8006468:	d102      	bne.n	8006470 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800646a:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800646c:	2b00      	cmp	r3, #0
 800646e:	d030      	beq.n	80064d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8006470:	f107 0310 	add.w	r3, r7, #16
 8006474:	461a      	mov	r2, r3
 8006476:	2102      	movs	r1, #2
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff fccf 	bl	8005e1c <get_sequence_step_timeout>
 800647e:	4603      	mov	r3, r0
 8006480:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8006484:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006488:	2b00      	cmp	r3, #0
 800648a:	d122      	bne.n	80064d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800648c:	7e3b      	ldrb	r3, [r7, #24]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d007      	beq.n	80064a2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006496:	6939      	ldr	r1, [r7, #16]
 8006498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800649c:	441a      	add	r2, r3
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80064a2:	7ebb      	ldrb	r3, [r7, #26]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d009      	beq.n	80064bc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80064ac:	6939      	ldr	r1, [r7, #16]
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	440b      	add	r3, r1
 80064b2:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80064b4:	441a      	add	r2, r3
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e00a      	b.n	80064d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80064bc:	7e7b      	ldrb	r3, [r7, #25]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d007      	beq.n	80064d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80064c6:	6939      	ldr	r1, [r7, #16]
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80064cc:	441a      	add	r2, r3
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80064d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d114      	bne.n	8006504 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80064da:	7efb      	ldrb	r3, [r7, #27]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d011      	beq.n	8006504 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80064e0:	f107 030c 	add.w	r3, r7, #12
 80064e4:	461a      	mov	r2, r3
 80064e6:	2103      	movs	r1, #3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff fc97 	bl	8005e1c <get_sequence_step_timeout>
 80064ee:	4603      	mov	r3, r0
 80064f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 80064f8:	68f9      	ldr	r1, [r7, #12]
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80064fe:	441a      	add	r2, r3
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006504:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006508:	2b00      	cmp	r3, #0
 800650a:	d114      	bne.n	8006536 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800650c:	7f3b      	ldrb	r3, [r7, #28]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d011      	beq.n	8006536 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8006512:	f107 0314 	add.w	r3, r7, #20
 8006516:	461a      	mov	r2, r3
 8006518:	2104      	movs	r1, #4
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff fc7e 	bl	8005e1c <get_sequence_step_timeout>
 8006520:	4603      	mov	r3, r0
 8006522:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800652a:	6979      	ldr	r1, [r7, #20]
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006530:	441a      	add	r2, r3
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006536:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800653a:	2b00      	cmp	r3, #0
 800653c:	d103      	bne.n	8006546 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006546:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800654a:	4618      	mov	r0, r3
 800654c:	3740      	adds	r7, #64	; 0x40
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800655e:	2300      	movs	r3, #0
 8006560:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006566:	e0c6      	b.n	80066f6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	4413      	add	r3, r2
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	74fb      	strb	r3, [r7, #19]
		Index++;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	3301      	adds	r3, #1
 8006576:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8006578:	7cfb      	ldrb	r3, [r7, #19]
 800657a:	2bff      	cmp	r3, #255	; 0xff
 800657c:	f040 808d 	bne.w	800669a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	4413      	add	r3, r2
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	747b      	strb	r3, [r7, #17]
			Index++;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	3301      	adds	r3, #1
 800658e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8006590:	7c7b      	ldrb	r3, [r7, #17]
 8006592:	2b03      	cmp	r3, #3
 8006594:	d87e      	bhi.n	8006694 <VL53L0X_load_tuning_settings+0x140>
 8006596:	a201      	add	r2, pc, #4	; (adr r2, 800659c <VL53L0X_load_tuning_settings+0x48>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065ad 	.word	0x080065ad
 80065a0:	080065e7 	.word	0x080065e7
 80065a4:	08006621 	.word	0x08006621
 80065a8:	0800665b 	.word	0x0800665b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	4413      	add	r3, r2
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	743b      	strb	r3, [r7, #16]
				Index++;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	3301      	adds	r3, #1
 80065ba:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	4413      	add	r3, r2
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	73fb      	strb	r3, [r7, #15]
				Index++;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	3301      	adds	r3, #1
 80065ca:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80065cc:	7c3b      	ldrb	r3, [r7, #16]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	021b      	lsls	r3, r3, #8
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	4413      	add	r3, r2
 80065da:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	89ba      	ldrh	r2, [r7, #12]
 80065e0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 80065e4:	e087      	b.n	80066f6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	4413      	add	r3, r2
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	743b      	strb	r3, [r7, #16]
				Index++;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	3301      	adds	r3, #1
 80065f4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	4413      	add	r3, r2
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	3301      	adds	r3, #1
 8006604:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006606:	7c3b      	ldrb	r3, [r7, #16]
 8006608:	b29b      	uxth	r3, r3
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	b29a      	uxth	r2, r3
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	b29b      	uxth	r3, r3
 8006612:	4413      	add	r3, r2
 8006614:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	89ba      	ldrh	r2, [r7, #12]
 800661a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800661e:	e06a      	b.n	80066f6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	4413      	add	r3, r2
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	743b      	strb	r3, [r7, #16]
				Index++;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	3301      	adds	r3, #1
 800662e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	4413      	add	r3, r2
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	73fb      	strb	r3, [r7, #15]
				Index++;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	3301      	adds	r3, #1
 800663e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006640:	7c3b      	ldrb	r3, [r7, #16]
 8006642:	b29b      	uxth	r3, r3
 8006644:	021b      	lsls	r3, r3, #8
 8006646:	b29a      	uxth	r2, r3
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	b29b      	uxth	r3, r3
 800664c:	4413      	add	r3, r2
 800664e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	89ba      	ldrh	r2, [r7, #12]
 8006654:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8006658:	e04d      	b.n	80066f6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	4413      	add	r3, r2
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	743b      	strb	r3, [r7, #16]
				Index++;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	3301      	adds	r3, #1
 8006668:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	4413      	add	r3, r2
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	3301      	adds	r3, #1
 8006678:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800667a:	7c3b      	ldrb	r3, [r7, #16]
 800667c:	b29b      	uxth	r3, r3
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	b29a      	uxth	r2, r3
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	b29b      	uxth	r3, r3
 8006686:	4413      	add	r3, r2
 8006688:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	89ba      	ldrh	r2, [r7, #12]
 800668e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8006692:	e030      	b.n	80066f6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006694:	23fc      	movs	r3, #252	; 0xfc
 8006696:	77fb      	strb	r3, [r7, #31]
 8006698:	e02d      	b.n	80066f6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800669a:	7cfb      	ldrb	r3, [r7, #19]
 800669c:	2b04      	cmp	r3, #4
 800669e:	d828      	bhi.n	80066f2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	4413      	add	r3, r2
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	74bb      	strb	r3, [r7, #18]
			Index++;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	3301      	adds	r3, #1
 80066ae:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80066b0:	2300      	movs	r3, #0
 80066b2:	61bb      	str	r3, [r7, #24]
 80066b4:	e00f      	b.n	80066d6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	4413      	add	r3, r2
 80066bc:	7819      	ldrb	r1, [r3, #0]
 80066be:	f107 0208 	add.w	r2, r7, #8
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	4413      	add	r3, r2
 80066c6:	460a      	mov	r2, r1
 80066c8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	3301      	adds	r3, #1
 80066ce:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	3301      	adds	r3, #1
 80066d4:	61bb      	str	r3, [r7, #24]
 80066d6:	7cfb      	ldrb	r3, [r7, #19]
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	429a      	cmp	r2, r3
 80066dc:	dbeb      	blt.n	80066b6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80066de:	7cfb      	ldrb	r3, [r7, #19]
 80066e0:	f107 0208 	add.w	r2, r7, #8
 80066e4:	7cb9      	ldrb	r1, [r7, #18]
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fdf8 	bl	80072dc <VL53L0X_WriteMulti>
 80066ec:	4603      	mov	r3, r0
 80066ee:	77fb      	strb	r3, [r7, #31]
 80066f0:	e001      	b.n	80066f6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80066f2:	23fc      	movs	r3, #252	; 0xfc
 80066f4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	4413      	add	r3, r2
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d004      	beq.n	800670c <VL53L0X_load_tuning_settings+0x1b8>
 8006702:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006706:	2b00      	cmp	r3, #0
 8006708:	f43f af2e 	beq.w	8006568 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800670c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3720      	adds	r7, #32
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006724:	2300      	movs	r3, #0
 8006726:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800672e:	f107 0313 	add.w	r3, r7, #19
 8006732:	4619      	mov	r1, r3
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7fc ffbd 	bl	80036b4 <VL53L0X_GetXTalkCompensationEnable>
 800673a:	4603      	mov	r3, r0
 800673c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800673e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d111      	bne.n	800676a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8006746:	7cfb      	ldrb	r3, [r7, #19]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00e      	beq.n	800676a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	8a9b      	ldrh	r3, [r3, #20]
 8006756:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	fb02 f303 	mul.w	r3, r2, r3
 800675e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	3380      	adds	r3, #128	; 0x80
 8006764:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800676a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3720      	adds	r7, #32
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b086      	sub	sp, #24
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006782:	2300      	movs	r3, #0
 8006784:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800678e:	f107 0310 	add.w	r3, r7, #16
 8006792:	461a      	mov	r2, r3
 8006794:	68b9      	ldr	r1, [r7, #8]
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f7ff ffbe 	bl	8006718 <VL53L0X_get_total_xtalk_rate>
 800679c:	4603      	mov	r3, r0
 800679e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80067a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d105      	bne.n	80067b4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	441a      	add	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	601a      	str	r2, [r3, #0]

	return Status;
 80067b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b09a      	sub	sp, #104	; 0x68
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
 80067cc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 80067ce:	2312      	movs	r3, #18
 80067d0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 80067d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80067d6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 80067d8:	2342      	movs	r3, #66	; 0x42
 80067da:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 80067dc:	2306      	movs	r3, #6
 80067de:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 80067e0:	2307      	movs	r3, #7
 80067e2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067e4:	2300      	movs	r3, #0
 80067e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 80067f0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80067f8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80067fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067fe:	fb02 f303 	mul.w	r3, r2, r3
 8006802:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8006804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006806:	3380      	adds	r3, #128	; 0x80
 8006808:	0a1b      	lsrs	r3, r3, #8
 800680a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800680c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006810:	fb02 f303 	mul.w	r3, r2, r3
 8006814:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01b      	beq.n	8006858 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	029b      	lsls	r3, r3, #10
 8006824:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800682a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800682c:	4413      	add	r3, r2
 800682e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8006830:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	fbb2 f3f3 	udiv	r3, r2, r3
 8006838:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800683a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800683c:	4613      	mov	r3, r2
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	4413      	add	r3, r2
 8006842:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8006844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006846:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006848:	fb02 f303 	mul.w	r3, r2, r3
 800684c:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800684e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006850:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006854:	0c1b      	lsrs	r3, r3, #16
 8006856:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800685c:	fb02 f303 	mul.w	r3, r2, r3
 8006860:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8006862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006864:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006868:	0c1b      	lsrs	r3, r3, #16
 800686a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006870:	fb02 f303 	mul.w	r3, r2, r3
 8006874:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8006876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006878:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800687c:	0c1b      	lsrs	r3, r3, #16
 800687e:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8006880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006882:	085a      	lsrs	r2, r3, #1
 8006884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006886:	441a      	add	r2, r3
 8006888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800688a:	fbb2 f3f3 	udiv	r3, r2, r3
 800688e:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8006890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006892:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006894:	fb02 f303 	mul.w	r3, r2, r3
 8006898:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a0:	d302      	bcc.n	80068a8 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 80068a2:	4b55      	ldr	r3, [pc, #340]	; (80069f8 <VL53L0X_calc_dmax+0x238>)
 80068a4:	663b      	str	r3, [r7, #96]	; 0x60
 80068a6:	e016      	b.n	80068d6 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80068a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068aa:	085a      	lsrs	r2, r3, #1
 80068ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ae:	441a      	add	r2, r3
 80068b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b6:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80068b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068bc:	fb02 f303 	mul.w	r3, r2, r3
 80068c0:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80068c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80068c8:	0c1b      	lsrs	r3, r3, #16
 80068ca:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80068cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068d0:	fb02 f303 	mul.w	r3, r2, r3
 80068d4:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 80068d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068d8:	039b      	lsls	r3, r3, #14
 80068da:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80068de:	4a47      	ldr	r2, [pc, #284]	; (80069fc <VL53L0X_calc_dmax+0x23c>)
 80068e0:	fba2 2303 	umull	r2, r3, r2, r3
 80068e4:	099b      	lsrs	r3, r3, #6
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ec:	fb02 f303 	mul.w	r3, r2, r3
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 80068f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068f6:	fb02 f303 	mul.w	r3, r2, r3
 80068fa:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	3308      	adds	r3, #8
 8006900:	091b      	lsrs	r3, r3, #4
 8006902:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8006904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800690c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690e:	4613      	mov	r3, r2
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	4413      	add	r3, r2
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800691e:	0b9b      	lsrs	r3, r3, #14
 8006920:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8006922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006926:	4413      	add	r3, r2
 8006928:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800692a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800692c:	085b      	lsrs	r3, r3, #1
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	4413      	add	r3, r2
 8006932:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8006934:	69ba      	ldr	r2, [r7, #24]
 8006936:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006938:	fbb2 f3f3 	udiv	r3, r2, r3
 800693c:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	039b      	lsls	r3, r3, #14
 8006942:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	085b      	lsrs	r3, r3, #1
 8006948:	69ba      	ldr	r2, [r7, #24]
 800694a:	4413      	add	r3, r2
 800694c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	fbb2 f3f3 	udiv	r3, r2, r3
 8006956:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800695c:	fb02 f303 	mul.w	r3, r2, r3
 8006960:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006968:	4a24      	ldr	r2, [pc, #144]	; (80069fc <VL53L0X_calc_dmax+0x23c>)
 800696a:	fba2 2303 	umull	r2, r3, r2, r3
 800696e:	099b      	lsrs	r3, r3, #6
 8006970:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	011b      	lsls	r3, r3, #4
 8006976:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800697e:	4a1f      	ldr	r2, [pc, #124]	; (80069fc <VL53L0X_calc_dmax+0x23c>)
 8006980:	fba2 2303 	umull	r2, r3, r2, r3
 8006984:	099b      	lsrs	r3, r3, #6
 8006986:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8006988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800698a:	3380      	adds	r3, #128	; 0x80
 800698c:	0a1b      	lsrs	r3, r3, #8
 800698e:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d008      	beq.n	80069a8 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	085a      	lsrs	r2, r3, #1
 800699a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699c:	441a      	add	r2, r3
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80069a6:	e001      	b.n	80069ac <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80069ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80069ae:	f7fe fc3e 	bl	800522e <VL53L0X_isqrt>
 80069b2:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d008      	beq.n	80069cc <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	085a      	lsrs	r2, r3, #1
 80069be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c0:	441a      	add	r2, r3
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069ca:	e001      	b.n	80069d0 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80069cc:	2300      	movs	r3, #0
 80069ce:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80069d0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80069d2:	f7fe fc2c 	bl	800522e <VL53L0X_isqrt>
 80069d6:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 80069d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d902      	bls.n	80069ec <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 80069e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069ea:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80069ec:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3768      	adds	r7, #104	; 0x68
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	fff00000 	.word	0xfff00000
 80069fc:	10624dd3 	.word	0x10624dd3

08006a00 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b0b4      	sub	sp, #208	; 0xd0
 8006a04:	af04      	add	r7, sp, #16
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8006a0e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006a12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8006a16:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006a1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8006a1e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8006a22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8006a26:	f241 235c 	movw	r3, #4700	; 0x125c
 8006a2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8006a2e:	4b9e      	ldr	r3, [pc, #632]	; (8006ca8 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8006a30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8006a34:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006a38:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8006a3a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8006a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a46:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8006a48:	4b98      	ldr	r3, [pc, #608]	; (8006cac <VL53L0X_calc_sigma_estimate+0x2ac>)
 8006a4a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8006a4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a50:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8006a52:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8006a56:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8006a58:	f240 6377 	movw	r3, #1655	; 0x677
 8006a5c:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a72:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8006a76:	0c1b      	lsrs	r3, r3, #16
 8006a78:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8006a80:	f107 0310 	add.w	r3, r7, #16
 8006a84:	461a      	mov	r2, r3
 8006a86:	68b9      	ldr	r1, [r7, #8]
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f7ff fe74 	bl	8006776 <VL53L0X_get_total_signal_rate>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8006a94:	f107 0314 	add.w	r3, r7, #20
 8006a98:	461a      	mov	r2, r3
 8006a9a:	68b9      	ldr	r1, [r7, #8]
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f7ff fe3b 	bl	8006718 <VL53L0X_get_total_xtalk_rate>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006aae:	fb02 f303 	mul.w	r3, r2, r3
 8006ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8006ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ab6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006aba:	0c1b      	lsrs	r3, r3, #16
 8006abc:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ac4:	fb02 f303 	mul.w	r3, r2, r3
 8006ac8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8006acc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8006ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d902      	bls.n	8006adc <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8006ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8006adc:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d168      	bne.n	8006bb6 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006aea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8006af4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8006af8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006afc:	461a      	mov	r2, r3
 8006afe:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f7ff f936 	bl	8005d74 <VL53L0X_calc_timeout_mclks>
 8006b08:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8006b1a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8006b1e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8006b22:	461a      	mov	r2, r3
 8006b24:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f7ff f923 	bl	8005d74 <VL53L0X_calc_timeout_mclks>
 8006b2e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8006b30:	2303      	movs	r3, #3
 8006b32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8006b36:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006b3a:	2b08      	cmp	r3, #8
 8006b3c:	d102      	bne.n	8006b44 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8006b3e:	2302      	movs	r3, #2
 8006b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8006b44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b48:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8006b4a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006b4e:	fb02 f303 	mul.w	r3, r2, r3
 8006b52:	02db      	lsls	r3, r3, #11
 8006b54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006b58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006b5c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006b60:	4a53      	ldr	r2, [pc, #332]	; (8006cb0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8006b62:	fba2 2303 	umull	r2, r3, r2, r3
 8006b66:	099b      	lsrs	r3, r3, #6
 8006b68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8006b6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006b70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b72:	fb02 f303 	mul.w	r3, r2, r3
 8006b76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006b7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006b7e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006b82:	4a4b      	ldr	r2, [pc, #300]	; (8006cb0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8006b84:	fba2 2303 	umull	r2, r3, r2, r3
 8006b88:	099b      	lsrs	r3, r3, #6
 8006b8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	3380      	adds	r3, #128	; 0x80
 8006b92:	0a1b      	lsrs	r3, r3, #8
 8006b94:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006b9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8006ba4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ba8:	3380      	adds	r3, #128	; 0x80
 8006baa:	0a1b      	lsrs	r3, r3, #8
 8006bac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	021b      	lsls	r3, r3, #8
 8006bb4:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8006bb6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d002      	beq.n	8006bc4 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8006bbe:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8006bc2:	e165      	b.n	8006e90 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 8006bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10c      	bne.n	8006be4 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006bd0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006bd8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	e153      	b.n	8006e8c <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 8006be4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d102      	bne.n	8006bf2 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8006bec:	2301      	movs	r3, #1
 8006bee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8006bf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bf6:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8006bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bfa:	041a      	lsls	r2, r3, #16
 8006bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8006c06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d902      	bls.n	8006c16 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8006c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8006c16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006c1a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006c1e:	fb02 f303 	mul.w	r3, r2, r3
 8006c22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8006c26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	4413      	add	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fe fafb 	bl	800522e <VL53L0X_isqrt>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	891b      	ldrh	r3, [r3, #8]
 8006c42:	461a      	mov	r2, r3
 8006c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c46:	fb02 f303 	mul.w	r3, r2, r3
 8006c4a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c4e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8006c50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c54:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006c56:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8006c58:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006c5c:	4a14      	ldr	r2, [pc, #80]	; (8006cb0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8006c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c62:	099b      	lsrs	r3, r3, #6
 8006c64:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8006c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c68:	041b      	lsls	r3, r3, #16
 8006c6a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006c6e:	4a10      	ldr	r2, [pc, #64]	; (8006cb0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8006c70:	fba2 2303 	umull	r2, r3, r2, r3
 8006c74:	099b      	lsrs	r3, r3, #6
 8006c76:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8006c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8006c7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	bfb8      	it	lt
 8006c8a:	425b      	neglt	r3, r3
 8006c8c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8006c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c90:	021b      	lsls	r3, r3, #8
 8006c92:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	7e1b      	ldrb	r3, [r3, #24]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00b      	beq.n	8006cb4 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8006c9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ca0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ca4:	e035      	b.n	8006d12 <VL53L0X_calc_sigma_estimate+0x312>
 8006ca6:	bf00      	nop
 8006ca8:	028f87ae 	.word	0x028f87ae
 8006cac:	0006999a 	.word	0x0006999a
 8006cb0:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8006cb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8006cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc4:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8006cc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ccc:	fb02 f303 	mul.w	r3, r2, r3
 8006cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8006cd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006cd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cda:	4413      	add	r3, r2
 8006cdc:	0c1b      	lsrs	r3, r3, #16
 8006cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8006ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ce6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006cea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8006cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cf2:	085b      	lsrs	r3, r3, #1
 8006cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8006cf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006d00:	fb02 f303 	mul.w	r3, r2, r3
 8006d04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8006d08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d0c:	0b9b      	lsrs	r3, r3, #14
 8006d0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8006d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d18:	fb02 f303 	mul.w	r3, r2, r3
 8006d1c:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d20:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006d24:	0c1b      	lsrs	r3, r3, #16
 8006d26:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d2c:	fb02 f303 	mul.w	r3, r2, r3
 8006d30:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8006d32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d36:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8006d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006d3e:	0c1b      	lsrs	r3, r3, #16
 8006d40:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8006d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d46:	fb02 f303 	mul.w	r3, r2, r3
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8006d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d50:	4413      	add	r3, r2
 8006d52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8006d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d56:	f7fe fa6a 	bl	800522e <VL53L0X_isqrt>
 8006d5a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	041b      	lsls	r3, r3, #16
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	3332      	adds	r3, #50	; 0x32
 8006d66:	4a4c      	ldr	r2, [pc, #304]	; (8006e98 <VL53L0X_calc_sigma_estimate+0x498>)
 8006d68:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6c:	095a      	lsrs	r2, r3, #5
 8006d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8006d78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d7c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8006d80:	fb02 f303 	mul.w	r3, r2, r3
 8006d84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8006d88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d8c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006d90:	3308      	adds	r3, #8
 8006d92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8006d96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d9a:	4a40      	ldr	r2, [pc, #256]	; (8006e9c <VL53L0X_calc_sigma_estimate+0x49c>)
 8006d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006da0:	0b5b      	lsrs	r3, r3, #13
 8006da2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8006da6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006daa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d902      	bls.n	8006db6 <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8006db0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006db2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8006db6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006dba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8006dc4:	4a36      	ldr	r2, [pc, #216]	; (8006ea0 <VL53L0X_calc_sigma_estimate+0x4a0>)
 8006dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dca:	099b      	lsrs	r3, r3, #6
 8006dcc:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8006dd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dd6:	441a      	add	r2, r3
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fe fa25 	bl	800522e <VL53L0X_isqrt>
 8006de4:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	021b      	lsls	r3, r3, #8
 8006dea:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006df2:	4a2b      	ldr	r2, [pc, #172]	; (8006ea0 <VL53L0X_calc_sigma_estimate+0x4a0>)
 8006df4:	fba2 2303 	umull	r2, r3, r2, r3
 8006df8:	099b      	lsrs	r3, r3, #6
 8006dfa:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8006dfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e00:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e04:	fb02 f303 	mul.w	r3, r2, r3
 8006e08:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	fb02 f303 	mul.w	r3, r2, r3
 8006e12:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8006e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e18:	4413      	add	r3, r2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fe fa07 	bl	800522e <VL53L0X_isqrt>
 8006e20:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e28:	fb02 f303 	mul.w	r3, r2, r3
 8006e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8006e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d009      	beq.n	8006e4a <VL53L0X_calc_sigma_estimate+0x44a>
 8006e36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d005      	beq.n	8006e4a <VL53L0X_calc_sigma_estimate+0x44a>
 8006e3e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006e42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d903      	bls.n	8006e52 <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8006e4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006e58:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8006e64:	6939      	ldr	r1, [r7, #16]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	9303      	str	r3, [sp, #12]
 8006e6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e6e:	9302      	str	r3, [sp, #8]
 8006e70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e74:	9301      	str	r3, [sp, #4]
 8006e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f7ff fc9d 	bl	80067c0 <VL53L0X_calc_dmax>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006e8c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	37c0      	adds	r7, #192	; 0xc0
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	51eb851f 	.word	0x51eb851f
 8006e9c:	d1b71759 	.word	0xd1b71759
 8006ea0:	10624dd3 	.word	0x10624dd3

08006ea4 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b090      	sub	sp, #64	; 0x40
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	607a      	str	r2, [r7, #4]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	72fb      	strb	r3, [r7, #11]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8006ef6:	7afb      	ldrb	r3, [r7, #11]
 8006ef8:	10db      	asrs	r3, r3, #3
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	f003 030f 	and.w	r3, r3, #15
 8006f00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8006f04:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d017      	beq.n	8006f3c <VL53L0X_get_pal_range_status+0x98>
 8006f0c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006f10:	2b05      	cmp	r3, #5
 8006f12:	d013      	beq.n	8006f3c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8006f14:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006f18:	2b07      	cmp	r3, #7
 8006f1a:	d00f      	beq.n	8006f3c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8006f1c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006f20:	2b0c      	cmp	r3, #12
 8006f22:	d00b      	beq.n	8006f3c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8006f24:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006f28:	2b0d      	cmp	r3, #13
 8006f2a:	d007      	beq.n	8006f3c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8006f2c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006f30:	2b0e      	cmp	r3, #14
 8006f32:	d003      	beq.n	8006f3c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8006f34:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006f38:	2b0f      	cmp	r3, #15
 8006f3a:	d103      	bne.n	8006f44 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8006f42:	e002      	b.n	8006f4a <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8006f44:	2300      	movs	r3, #0
 8006f46:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006f4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d109      	bne.n	8006f66 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006f52:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006f56:	461a      	mov	r2, r3
 8006f58:	2100      	movs	r1, #0
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f7fc fc7e 	bl	800385c <VL53L0X_GetLimitCheckEnable>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8006f66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d02e      	beq.n	8006fcc <VL53L0X_get_pal_range_status+0x128>
 8006f6e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d12a      	bne.n	8006fcc <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8006f76:	f107 0310 	add.w	r3, r7, #16
 8006f7a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006f7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f7ff fd3d 	bl	8006a00 <VL53L0X_calc_sigma_estimate>
 8006f86:	4603      	mov	r3, r0
 8006f88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8006f8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d103      	bne.n	8006f9c <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f9a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8006f9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d113      	bne.n	8006fcc <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8006fa4:	f107 0320 	add.w	r3, r7, #32
 8006fa8:	461a      	mov	r2, r3
 8006faa:	2100      	movs	r1, #0
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f7fc fcdb 	bl	8003968 <VL53L0X_GetLimitCheckValue>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d006      	beq.n	8006fcc <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8006fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d902      	bls.n	8006fcc <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006fcc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d109      	bne.n	8006fe8 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006fd4:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8006fd8:	461a      	mov	r2, r3
 8006fda:	2102      	movs	r1, #2
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f7fc fc3d 	bl	800385c <VL53L0X_GetLimitCheckEnable>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8006fe8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d044      	beq.n	800707a <VL53L0X_get_pal_range_status+0x1d6>
 8006ff0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d140      	bne.n	800707a <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8006ff8:	f107 031c 	add.w	r3, r7, #28
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	2102      	movs	r1, #2
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f7fc fcb1 	bl	8003968 <VL53L0X_GetLimitCheckValue>
 8007006:	4603      	mov	r3, r0
 8007008:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800700c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007010:	2b00      	cmp	r3, #0
 8007012:	d107      	bne.n	8007024 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007014:	2201      	movs	r2, #1
 8007016:	21ff      	movs	r1, #255	; 0xff
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 f9bb 	bl	8007394 <VL53L0X_WrByte>
 800701e:	4603      	mov	r3, r0
 8007020:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8007024:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007028:	2b00      	cmp	r3, #0
 800702a:	d109      	bne.n	8007040 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800702c:	f107 0316 	add.w	r3, r7, #22
 8007030:	461a      	mov	r2, r3
 8007032:	21b6      	movs	r1, #182	; 0xb6
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 fa59 	bl	80074ec <VL53L0X_RdWord>
 800703a:	4603      	mov	r3, r0
 800703c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8007040:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007044:	2b00      	cmp	r3, #0
 8007046:	d107      	bne.n	8007058 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007048:	2200      	movs	r2, #0
 800704a:	21ff      	movs	r1, #255	; 0xff
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 f9a1 	bl	8007394 <VL53L0X_WrByte>
 8007052:	4603      	mov	r3, r0
 8007054:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007058:	8afb      	ldrh	r3, [r7, #22]
 800705a:	025b      	lsls	r3, r3, #9
 800705c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007062:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d006      	beq.n	800707a <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800706c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800706e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007070:	429a      	cmp	r2, r3
 8007072:	d902      	bls.n	800707a <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8007074:	2301      	movs	r3, #1
 8007076:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800707a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800707e:	2b00      	cmp	r3, #0
 8007080:	d109      	bne.n	8007096 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007086:	461a      	mov	r2, r3
 8007088:	2103      	movs	r1, #3
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f7fc fbe6 	bl	800385c <VL53L0X_GetLimitCheckEnable>
 8007090:	4603      	mov	r3, r0
 8007092:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8007096:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800709a:	2b00      	cmp	r3, #0
 800709c:	d023      	beq.n	80070e6 <VL53L0X_get_pal_range_status+0x242>
 800709e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d11f      	bne.n	80070e6 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80070a6:	893b      	ldrh	r3, [r7, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d102      	bne.n	80070b2 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80070ac:	2300      	movs	r3, #0
 80070ae:	637b      	str	r3, [r7, #52]	; 0x34
 80070b0:	e005      	b.n	80070be <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	021a      	lsls	r2, r3, #8
 80070b6:	893b      	ldrh	r3, [r7, #8]
 80070b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070bc:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80070be:	f107 0318 	add.w	r3, r7, #24
 80070c2:	461a      	mov	r2, r3
 80070c4:	2103      	movs	r1, #3
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7fc fc4e 	bl	8003968 <VL53L0X_GetLimitCheckValue>
 80070cc:	4603      	mov	r3, r0
 80070ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d006      	beq.n	80070e6 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 80070d8:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 80070da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070dc:	429a      	cmp	r2, r3
 80070de:	d202      	bcs.n	80070e6 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 80070e0:	2301      	movs	r3, #1
 80070e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80070e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d14a      	bne.n	8007184 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 80070ee:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d103      	bne.n	80070fe <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 80070f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070f8:	22ff      	movs	r2, #255	; 0xff
 80070fa:	701a      	strb	r2, [r3, #0]
 80070fc:	e042      	b.n	8007184 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 80070fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007102:	2b01      	cmp	r3, #1
 8007104:	d007      	beq.n	8007116 <VL53L0X_get_pal_range_status+0x272>
 8007106:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800710a:	2b02      	cmp	r3, #2
 800710c:	d003      	beq.n	8007116 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800710e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007112:	2b03      	cmp	r3, #3
 8007114:	d103      	bne.n	800711e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8007116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007118:	2205      	movs	r2, #5
 800711a:	701a      	strb	r2, [r3, #0]
 800711c:	e032      	b.n	8007184 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800711e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007122:	2b06      	cmp	r3, #6
 8007124:	d003      	beq.n	800712e <VL53L0X_get_pal_range_status+0x28a>
 8007126:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800712a:	2b09      	cmp	r3, #9
 800712c:	d103      	bne.n	8007136 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800712e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007130:	2204      	movs	r2, #4
 8007132:	701a      	strb	r2, [r3, #0]
 8007134:	e026      	b.n	8007184 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8007136:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800713a:	2b08      	cmp	r3, #8
 800713c:	d007      	beq.n	800714e <VL53L0X_get_pal_range_status+0x2aa>
 800713e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007142:	2b0a      	cmp	r3, #10
 8007144:	d003      	beq.n	800714e <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8007146:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800714a:	2b01      	cmp	r3, #1
 800714c:	d103      	bne.n	8007156 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800714e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007150:	2203      	movs	r2, #3
 8007152:	701a      	strb	r2, [r3, #0]
 8007154:	e016      	b.n	8007184 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8007156:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800715a:	2b04      	cmp	r3, #4
 800715c:	d003      	beq.n	8007166 <VL53L0X_get_pal_range_status+0x2c2>
 800715e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007162:	2b01      	cmp	r3, #1
 8007164:	d103      	bne.n	800716e <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8007166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007168:	2202      	movs	r2, #2
 800716a:	701a      	strb	r2, [r3, #0]
 800716c:	e00a      	b.n	8007184 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800716e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007172:	2b01      	cmp	r3, #1
 8007174:	d103      	bne.n	800717e <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007178:	2201      	movs	r2, #1
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	e002      	b.n	8007184 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800717e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007180:	2200      	movs	r2, #0
 8007182:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8007184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d102      	bne.n	8007192 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800718c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800718e:	2200      	movs	r2, #0
 8007190:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007192:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8007196:	461a      	mov	r2, r3
 8007198:	2101      	movs	r1, #1
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f7fc fb5e 	bl	800385c <VL53L0X_GetLimitCheckEnable>
 80071a0:	4603      	mov	r3, r0
 80071a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80071a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d14f      	bne.n	800724e <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80071ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <VL53L0X_get_pal_range_status+0x31a>
 80071b6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d103      	bne.n	80071c6 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80071be:	2301      	movs	r3, #1
 80071c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071c4:	e002      	b.n	80071cc <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80071d2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80071d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80071da:	2b04      	cmp	r3, #4
 80071dc:	d003      	beq.n	80071e6 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80071de:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d103      	bne.n	80071ee <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 80071e6:	2301      	movs	r3, #1
 80071e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ec:	e002      	b.n	80071f4 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80071fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 80071fe:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <VL53L0X_get_pal_range_status+0x36a>
 8007206:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800720a:	2b01      	cmp	r3, #1
 800720c:	d103      	bne.n	8007216 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800720e:	2301      	movs	r3, #1
 8007210:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007214:	e002      	b.n	800721c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8007216:	2300      	movs	r3, #0
 8007218:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007222:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8007226:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <VL53L0X_get_pal_range_status+0x392>
 800722e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007232:	2b01      	cmp	r3, #1
 8007234:	d103      	bne.n	800723e <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8007236:	2301      	movs	r3, #1
 8007238:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800723c:	e002      	b.n	8007244 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800723e:	2300      	movs	r3, #0
 8007240:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800724a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800724e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8007252:	4618      	mov	r0, r3
 8007254:	3740      	adds	r7, #64	; 0x40
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800725a:	b580      	push	{r7, lr}
 800725c:	b088      	sub	sp, #32
 800725e:	af02      	add	r7, sp, #8
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	60b9      	str	r1, [r7, #8]
 8007264:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	330a      	adds	r3, #10
 800726a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007278:	b299      	uxth	r1, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	b29a      	uxth	r2, r3
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	4613      	mov	r3, r2
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	f7fa f943 	bl	8001510 <HAL_I2C_Master_Transmit>
 800728a:	4603      	mov	r3, r0
 800728c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800728e:	693b      	ldr	r3, [r7, #16]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3718      	adds	r7, #24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af02      	add	r7, sp, #8
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	330a      	adds	r3, #10
 80072a8:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80072b6:	f043 0301 	orr.w	r3, r3, #1
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	b299      	uxth	r1, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	4613      	mov	r3, r2
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	f7fa fa1f 	bl	800170c <HAL_I2C_Master_Receive>
 80072ce:	4603      	mov	r3, r0
 80072d0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80072d2:	693b      	ldr	r3, [r7, #16]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	607a      	str	r2, [r7, #4]
 80072e6:	603b      	str	r3, [r7, #0]
 80072e8:	460b      	mov	r3, r1
 80072ea:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072ec:	2300      	movs	r3, #0
 80072ee:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2b3f      	cmp	r3, #63	; 0x3f
 80072f4:	d902      	bls.n	80072fc <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 80072f6:	f06f 0303 	mvn.w	r3, #3
 80072fa:	e016      	b.n	800732a <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 80072fc:	4a0d      	ldr	r2, [pc, #52]	; (8007334 <VL53L0X_WriteMulti+0x58>)
 80072fe:	7afb      	ldrb	r3, [r7, #11]
 8007300:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	6879      	ldr	r1, [r7, #4]
 8007306:	480c      	ldr	r0, [pc, #48]	; (8007338 <VL53L0X_WriteMulti+0x5c>)
 8007308:	f000 f998 	bl	800763c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	3301      	adds	r3, #1
 8007310:	461a      	mov	r2, r3
 8007312:	4908      	ldr	r1, [pc, #32]	; (8007334 <VL53L0X_WriteMulti+0x58>)
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f7ff ffa0 	bl	800725a <_I2CWrite>
 800731a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007322:	23ec      	movs	r3, #236	; 0xec
 8007324:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007326:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20000558 	.word	0x20000558
 8007338:	20000559 	.word	0x20000559

0800733c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	607a      	str	r2, [r7, #4]
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	460b      	mov	r3, r1
 800734a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800734c:	2300      	movs	r3, #0
 800734e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8007350:	f107 030b 	add.w	r3, r7, #11
 8007354:	2201      	movs	r2, #1
 8007356:	4619      	mov	r1, r3
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f7ff ff7e 	bl	800725a <_I2CWrite>
 800735e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007366:	23ec      	movs	r3, #236	; 0xec
 8007368:	75fb      	strb	r3, [r7, #23]
        goto done;
 800736a:	e00c      	b.n	8007386 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f7ff ff91 	bl	8007298 <_I2CRead>
 8007376:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800737e:	23ec      	movs	r3, #236	; 0xec
 8007380:	75fb      	strb	r3, [r7, #23]
 8007382:	e000      	b.n	8007386 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8007384:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8007386:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	70fb      	strb	r3, [r7, #3]
 80073a0:	4613      	mov	r3, r2
 80073a2:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80073a8:	4a0b      	ldr	r2, [pc, #44]	; (80073d8 <VL53L0X_WrByte+0x44>)
 80073aa:	78fb      	ldrb	r3, [r7, #3]
 80073ac:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 80073ae:	4a0a      	ldr	r2, [pc, #40]	; (80073d8 <VL53L0X_WrByte+0x44>)
 80073b0:	78bb      	ldrb	r3, [r7, #2]
 80073b2:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80073b4:	2202      	movs	r2, #2
 80073b6:	4908      	ldr	r1, [pc, #32]	; (80073d8 <VL53L0X_WrByte+0x44>)
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff ff4e 	bl	800725a <_I2CWrite>
 80073be:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80073c6:	23ec      	movs	r3, #236	; 0xec
 80073c8:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80073ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20000558 	.word	0x20000558

080073dc <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]
 80073e8:	4613      	mov	r3, r2
 80073ea:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073ec:	2300      	movs	r3, #0
 80073ee:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80073f0:	4a0e      	ldr	r2, [pc, #56]	; (800742c <VL53L0X_WrWord+0x50>)
 80073f2:	78fb      	ldrb	r3, [r7, #3]
 80073f4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 80073f6:	883b      	ldrh	r3, [r7, #0]
 80073f8:	0a1b      	lsrs	r3, r3, #8
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	4b0b      	ldr	r3, [pc, #44]	; (800742c <VL53L0X_WrWord+0x50>)
 8007400:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8007402:	883b      	ldrh	r3, [r7, #0]
 8007404:	b2da      	uxtb	r2, r3
 8007406:	4b09      	ldr	r3, [pc, #36]	; (800742c <VL53L0X_WrWord+0x50>)
 8007408:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800740a:	2203      	movs	r2, #3
 800740c:	4907      	ldr	r1, [pc, #28]	; (800742c <VL53L0X_WrWord+0x50>)
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7ff ff23 	bl	800725a <_I2CWrite>
 8007414:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800741c:	23ec      	movs	r3, #236	; 0xec
 800741e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007420:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	20000558 	.word	0x20000558

08007430 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	4608      	mov	r0, r1
 800743a:	4611      	mov	r1, r2
 800743c:	461a      	mov	r2, r3
 800743e:	4603      	mov	r3, r0
 8007440:	70fb      	strb	r3, [r7, #3]
 8007442:	460b      	mov	r3, r1
 8007444:	70bb      	strb	r3, [r7, #2]
 8007446:	4613      	mov	r3, r2
 8007448:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800744a:	2300      	movs	r3, #0
 800744c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800744e:	f107 020e 	add.w	r2, r7, #14
 8007452:	78fb      	ldrb	r3, [r7, #3]
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f81e 	bl	8007498 <VL53L0X_RdByte>
 800745c:	4603      	mov	r3, r0
 800745e:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8007460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d110      	bne.n	800748a <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8007468:	7bba      	ldrb	r2, [r7, #14]
 800746a:	78bb      	ldrb	r3, [r7, #2]
 800746c:	4013      	ands	r3, r2
 800746e:	b2da      	uxtb	r2, r3
 8007470:	787b      	ldrb	r3, [r7, #1]
 8007472:	4313      	orrs	r3, r2
 8007474:	b2db      	uxtb	r3, r3
 8007476:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8007478:	7bba      	ldrb	r2, [r7, #14]
 800747a:	78fb      	ldrb	r3, [r7, #3]
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7ff ff88 	bl	8007394 <VL53L0X_WrByte>
 8007484:	4603      	mov	r3, r0
 8007486:	73fb      	strb	r3, [r7, #15]
 8007488:	e000      	b.n	800748c <VL53L0X_UpdateByte+0x5c>
        goto done;
 800748a:	bf00      	nop
done:
    return Status;
 800748c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	460b      	mov	r3, r1
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074a6:	2300      	movs	r3, #0
 80074a8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80074aa:	f107 030b 	add.w	r3, r7, #11
 80074ae:	2201      	movs	r2, #1
 80074b0:	4619      	mov	r1, r3
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f7ff fed1 	bl	800725a <_I2CWrite>
 80074b8:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80074c0:	23ec      	movs	r3, #236	; 0xec
 80074c2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80074c4:	e00c      	b.n	80074e0 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 80074c6:	2201      	movs	r2, #1
 80074c8:	6879      	ldr	r1, [r7, #4]
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f7ff fee4 	bl	8007298 <_I2CRead>
 80074d0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80074d8:	23ec      	movs	r3, #236	; 0xec
 80074da:	75fb      	strb	r3, [r7, #23]
 80074dc:	e000      	b.n	80074e0 <VL53L0X_RdByte+0x48>
    }
done:
 80074de:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80074e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	460b      	mov	r3, r1
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074fa:	2300      	movs	r3, #0
 80074fc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80074fe:	f107 030b 	add.w	r3, r7, #11
 8007502:	2201      	movs	r2, #1
 8007504:	4619      	mov	r1, r3
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f7ff fea7 	bl	800725a <_I2CWrite>
 800750c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007514:	23ec      	movs	r3, #236	; 0xec
 8007516:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007518:	e017      	b.n	800754a <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800751a:	2202      	movs	r2, #2
 800751c:	490e      	ldr	r1, [pc, #56]	; (8007558 <VL53L0X_RdWord+0x6c>)
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f7ff feba 	bl	8007298 <_I2CRead>
 8007524:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800752c:	23ec      	movs	r3, #236	; 0xec
 800752e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007530:	e00b      	b.n	800754a <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8007532:	4b09      	ldr	r3, [pc, #36]	; (8007558 <VL53L0X_RdWord+0x6c>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	b29b      	uxth	r3, r3
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	b29a      	uxth	r2, r3
 800753c:	4b06      	ldr	r3, [pc, #24]	; (8007558 <VL53L0X_RdWord+0x6c>)
 800753e:	785b      	ldrb	r3, [r3, #1]
 8007540:	b29b      	uxth	r3, r3
 8007542:	4413      	add	r3, r2
 8007544:	b29a      	uxth	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800754a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	20000558 	.word	0x20000558

0800755c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	460b      	mov	r3, r1
 8007566:	607a      	str	r2, [r7, #4]
 8007568:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800756a:	2300      	movs	r3, #0
 800756c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800756e:	f107 030b 	add.w	r3, r7, #11
 8007572:	2201      	movs	r2, #1
 8007574:	4619      	mov	r1, r3
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f7ff fe6f 	bl	800725a <_I2CWrite>
 800757c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007584:	23ec      	movs	r3, #236	; 0xec
 8007586:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007588:	e01b      	b.n	80075c2 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800758a:	2204      	movs	r2, #4
 800758c:	4910      	ldr	r1, [pc, #64]	; (80075d0 <VL53L0X_RdDWord+0x74>)
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f7ff fe82 	bl	8007298 <_I2CRead>
 8007594:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d002      	beq.n	80075a2 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800759c:	23ec      	movs	r3, #236	; 0xec
 800759e:	75fb      	strb	r3, [r7, #23]
        goto done;
 80075a0:	e00f      	b.n	80075c2 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80075a2:	4b0b      	ldr	r3, [pc, #44]	; (80075d0 <VL53L0X_RdDWord+0x74>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	061a      	lsls	r2, r3, #24
 80075a8:	4b09      	ldr	r3, [pc, #36]	; (80075d0 <VL53L0X_RdDWord+0x74>)
 80075aa:	785b      	ldrb	r3, [r3, #1]
 80075ac:	041b      	lsls	r3, r3, #16
 80075ae:	441a      	add	r2, r3
 80075b0:	4b07      	ldr	r3, [pc, #28]	; (80075d0 <VL53L0X_RdDWord+0x74>)
 80075b2:	789b      	ldrb	r3, [r3, #2]
 80075b4:	021b      	lsls	r3, r3, #8
 80075b6:	4413      	add	r3, r2
 80075b8:	4a05      	ldr	r2, [pc, #20]	; (80075d0 <VL53L0X_RdDWord+0x74>)
 80075ba:	78d2      	ldrb	r2, [r2, #3]
 80075bc:	441a      	add	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 80075c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20000558 	.word	0x20000558

080075d4 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80075dc:	2300      	movs	r3, #0
 80075de:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80075e0:	2002      	movs	r0, #2
 80075e2:	f7f9 fb2d 	bl	8000c40 <HAL_Delay>
    return status;
 80075e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <__libc_init_array>:
 80075f4:	b570      	push	{r4, r5, r6, lr}
 80075f6:	4e0d      	ldr	r6, [pc, #52]	; (800762c <__libc_init_array+0x38>)
 80075f8:	4c0d      	ldr	r4, [pc, #52]	; (8007630 <__libc_init_array+0x3c>)
 80075fa:	1ba4      	subs	r4, r4, r6
 80075fc:	10a4      	asrs	r4, r4, #2
 80075fe:	2500      	movs	r5, #0
 8007600:	42a5      	cmp	r5, r4
 8007602:	d109      	bne.n	8007618 <__libc_init_array+0x24>
 8007604:	4e0b      	ldr	r6, [pc, #44]	; (8007634 <__libc_init_array+0x40>)
 8007606:	4c0c      	ldr	r4, [pc, #48]	; (8007638 <__libc_init_array+0x44>)
 8007608:	f000 f834 	bl	8007674 <_init>
 800760c:	1ba4      	subs	r4, r4, r6
 800760e:	10a4      	asrs	r4, r4, #2
 8007610:	2500      	movs	r5, #0
 8007612:	42a5      	cmp	r5, r4
 8007614:	d105      	bne.n	8007622 <__libc_init_array+0x2e>
 8007616:	bd70      	pop	{r4, r5, r6, pc}
 8007618:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800761c:	4798      	blx	r3
 800761e:	3501      	adds	r5, #1
 8007620:	e7ee      	b.n	8007600 <__libc_init_array+0xc>
 8007622:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007626:	4798      	blx	r3
 8007628:	3501      	adds	r5, #1
 800762a:	e7f2      	b.n	8007612 <__libc_init_array+0x1e>
 800762c:	080076ac 	.word	0x080076ac
 8007630:	080076ac 	.word	0x080076ac
 8007634:	080076ac 	.word	0x080076ac
 8007638:	080076b0 	.word	0x080076b0

0800763c <memcpy>:
 800763c:	b510      	push	{r4, lr}
 800763e:	1e43      	subs	r3, r0, #1
 8007640:	440a      	add	r2, r1
 8007642:	4291      	cmp	r1, r2
 8007644:	d100      	bne.n	8007648 <memcpy+0xc>
 8007646:	bd10      	pop	{r4, pc}
 8007648:	f811 4b01 	ldrb.w	r4, [r1], #1
 800764c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007650:	e7f7      	b.n	8007642 <memcpy+0x6>

08007652 <memset>:
 8007652:	4402      	add	r2, r0
 8007654:	4603      	mov	r3, r0
 8007656:	4293      	cmp	r3, r2
 8007658:	d100      	bne.n	800765c <memset+0xa>
 800765a:	4770      	bx	lr
 800765c:	f803 1b01 	strb.w	r1, [r3], #1
 8007660:	e7f9      	b.n	8007656 <memset+0x4>

08007662 <strcpy>:
 8007662:	4603      	mov	r3, r0
 8007664:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007668:	f803 2b01 	strb.w	r2, [r3], #1
 800766c:	2a00      	cmp	r2, #0
 800766e:	d1f9      	bne.n	8007664 <strcpy+0x2>
 8007670:	4770      	bx	lr
	...

08007674 <_init>:
 8007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007676:	bf00      	nop
 8007678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767a:	bc08      	pop	{r3}
 800767c:	469e      	mov	lr, r3
 800767e:	4770      	bx	lr

08007680 <_fini>:
 8007680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007682:	bf00      	nop
 8007684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007686:	bc08      	pop	{r3}
 8007688:	469e      	mov	lr, r3
 800768a:	4770      	bx	lr
