
ptm-machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  08004160  08004160  00014160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a0c  08004a0c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08004a0c  08004a0c  00014a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a14  08004a14  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a14  08004a14  00014a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a18  08004a18  00014a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000080  08004a9c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08004a9c  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b076  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bd6  00000000  00000000  0002b126  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007e0  00000000  00000000  0002cd00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006d8  00000000  00000000  0002d4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000218bf  00000000  00000000  0002dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000870d  00000000  00000000  0004f477  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2d8f  00000000  00000000  00057b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011a913  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000247c  00000000  00000000  0011a990  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004148 	.word	0x08004148

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08004148 	.word	0x08004148

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b972 	b.w	8000ca0 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	4688      	mov	r8, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14b      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4615      	mov	r5, r2
 80009e6:	d967      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0720 	rsb	r7, r2, #32
 80009f2:	fa01 f302 	lsl.w	r3, r1, r2
 80009f6:	fa20 f707 	lsr.w	r7, r0, r7
 80009fa:	4095      	lsls	r5, r2
 80009fc:	ea47 0803 	orr.w	r8, r7, r3
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a0c:	fa1f fc85 	uxth.w	ip, r5
 8000a10:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a14:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a18:	fb07 f10c 	mul.w	r1, r7, ip
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18eb      	adds	r3, r5, r3
 8000a22:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a26:	f080 811b 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8118 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a30:	3f02      	subs	r7, #2
 8000a32:	442b      	add	r3, r5
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a48:	45a4      	cmp	ip, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	192c      	adds	r4, r5, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a52:	f080 8107 	bcs.w	8000c64 <__udivmoddi4+0x290>
 8000a56:	45a4      	cmp	ip, r4
 8000a58:	f240 8104 	bls.w	8000c64 <__udivmoddi4+0x290>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	442c      	add	r4, r5
 8000a60:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a64:	eba4 040c 	sub.w	r4, r4, ip
 8000a68:	2700      	movs	r7, #0
 8000a6a:	b11e      	cbz	r6, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c6 4300 	strd	r4, r3, [r6]
 8000a74:	4639      	mov	r1, r7
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d909      	bls.n	8000a92 <__udivmoddi4+0xbe>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80eb 	beq.w	8000c5a <__udivmoddi4+0x286>
 8000a84:	2700      	movs	r7, #0
 8000a86:	e9c6 0100 	strd	r0, r1, [r6]
 8000a8a:	4638      	mov	r0, r7
 8000a8c:	4639      	mov	r1, r7
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	fab3 f783 	clz	r7, r3
 8000a96:	2f00      	cmp	r7, #0
 8000a98:	d147      	bne.n	8000b2a <__udivmoddi4+0x156>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d302      	bcc.n	8000aa4 <__udivmoddi4+0xd0>
 8000a9e:	4282      	cmp	r2, r0
 8000aa0:	f200 80fa 	bhi.w	8000c98 <__udivmoddi4+0x2c4>
 8000aa4:	1a84      	subs	r4, r0, r2
 8000aa6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aaa:	2001      	movs	r0, #1
 8000aac:	4698      	mov	r8, r3
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d0e0      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000ab2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ab6:	e7dd      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000ab8:	b902      	cbnz	r2, 8000abc <__udivmoddi4+0xe8>
 8000aba:	deff      	udf	#255	; 0xff
 8000abc:	fab2 f282 	clz	r2, r2
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	f040 808f 	bne.w	8000be4 <__udivmoddi4+0x210>
 8000ac6:	1b49      	subs	r1, r1, r5
 8000ac8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000acc:	fa1f f885 	uxth.w	r8, r5
 8000ad0:	2701      	movs	r7, #1
 8000ad2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ad6:	0c23      	lsrs	r3, r4, #16
 8000ad8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d907      	bls.n	8000af8 <__udivmoddi4+0x124>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x122>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	f200 80cd 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000af6:	4684      	mov	ip, r0
 8000af8:	1a59      	subs	r1, r3, r1
 8000afa:	b2a3      	uxth	r3, r4
 8000afc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b00:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b04:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b08:	fb08 f800 	mul.w	r8, r8, r0
 8000b0c:	45a0      	cmp	r8, r4
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0x14c>
 8000b10:	192c      	adds	r4, r5, r4
 8000b12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x14a>
 8000b18:	45a0      	cmp	r8, r4
 8000b1a:	f200 80b6 	bhi.w	8000c8a <__udivmoddi4+0x2b6>
 8000b1e:	4618      	mov	r0, r3
 8000b20:	eba4 0408 	sub.w	r4, r4, r8
 8000b24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b28:	e79f      	b.n	8000a6a <__udivmoddi4+0x96>
 8000b2a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b2e:	40bb      	lsls	r3, r7
 8000b30:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b34:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b38:	fa01 f407 	lsl.w	r4, r1, r7
 8000b3c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b40:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b44:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b48:	4325      	orrs	r5, r4
 8000b4a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b4e:	0c2c      	lsrs	r4, r5, #16
 8000b50:	fb08 3319 	mls	r3, r8, r9, r3
 8000b54:	fa1f fa8e 	uxth.w	sl, lr
 8000b58:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b5c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b60:	429c      	cmp	r4, r3
 8000b62:	fa02 f207 	lsl.w	r2, r2, r7
 8000b66:	fa00 f107 	lsl.w	r1, r0, r7
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b0>
 8000b6c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b70:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b74:	f080 8087 	bcs.w	8000c86 <__udivmoddi4+0x2b2>
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	f240 8084 	bls.w	8000c86 <__udivmoddi4+0x2b2>
 8000b7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b82:	4473      	add	r3, lr
 8000b84:	1b1b      	subs	r3, r3, r4
 8000b86:	b2ad      	uxth	r5, r5
 8000b88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b90:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000b94:	fb00 fa0a 	mul.w	sl, r0, sl
 8000b98:	45a2      	cmp	sl, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1da>
 8000b9c:	eb1e 0404 	adds.w	r4, lr, r4
 8000ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba4:	d26b      	bcs.n	8000c7e <__udivmoddi4+0x2aa>
 8000ba6:	45a2      	cmp	sl, r4
 8000ba8:	d969      	bls.n	8000c7e <__udivmoddi4+0x2aa>
 8000baa:	3802      	subs	r0, #2
 8000bac:	4474      	add	r4, lr
 8000bae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bb2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bb6:	eba4 040a 	sub.w	r4, r4, sl
 8000bba:	454c      	cmp	r4, r9
 8000bbc:	46c2      	mov	sl, r8
 8000bbe:	464b      	mov	r3, r9
 8000bc0:	d354      	bcc.n	8000c6c <__udivmoddi4+0x298>
 8000bc2:	d051      	beq.n	8000c68 <__udivmoddi4+0x294>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d069      	beq.n	8000c9c <__udivmoddi4+0x2c8>
 8000bc8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bcc:	eb64 0403 	sbc.w	r4, r4, r3
 8000bd0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bd4:	40fd      	lsrs	r5, r7
 8000bd6:	40fc      	lsrs	r4, r7
 8000bd8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bdc:	e9c6 5400 	strd	r5, r4, [r6]
 8000be0:	2700      	movs	r7, #0
 8000be2:	e747      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000be4:	f1c2 0320 	rsb	r3, r2, #32
 8000be8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bec:	4095      	lsls	r5, r2
 8000bee:	fa01 f002 	lsl.w	r0, r1, r2
 8000bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	4338      	orrs	r0, r7
 8000bfc:	0c01      	lsrs	r1, r0, #16
 8000bfe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c02:	fa1f f885 	uxth.w	r8, r5
 8000c06:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c0e:	fb07 f308 	mul.w	r3, r7, r8
 8000c12:	428b      	cmp	r3, r1
 8000c14:	fa04 f402 	lsl.w	r4, r4, r2
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x256>
 8000c1a:	1869      	adds	r1, r5, r1
 8000c1c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c20:	d22f      	bcs.n	8000c82 <__udivmoddi4+0x2ae>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d92d      	bls.n	8000c82 <__udivmoddi4+0x2ae>
 8000c26:	3f02      	subs	r7, #2
 8000c28:	4429      	add	r1, r5
 8000c2a:	1acb      	subs	r3, r1, r3
 8000c2c:	b281      	uxth	r1, r0
 8000c2e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c32:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3a:	fb00 f308 	mul.w	r3, r0, r8
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x27e>
 8000c42:	1869      	adds	r1, r5, r1
 8000c44:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c48:	d217      	bcs.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d915      	bls.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4e:	3802      	subs	r0, #2
 8000c50:	4429      	add	r1, r5
 8000c52:	1ac9      	subs	r1, r1, r3
 8000c54:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c58:	e73b      	b.n	8000ad2 <__udivmoddi4+0xfe>
 8000c5a:	4637      	mov	r7, r6
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	e709      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c60:	4607      	mov	r7, r0
 8000c62:	e6e7      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c64:	4618      	mov	r0, r3
 8000c66:	e6fb      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c68:	4541      	cmp	r1, r8
 8000c6a:	d2ab      	bcs.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c6c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c70:	eb69 020e 	sbc.w	r2, r9, lr
 8000c74:	3801      	subs	r0, #1
 8000c76:	4613      	mov	r3, r2
 8000c78:	e7a4      	b.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c7a:	4660      	mov	r0, ip
 8000c7c:	e7e9      	b.n	8000c52 <__udivmoddi4+0x27e>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	e795      	b.n	8000bae <__udivmoddi4+0x1da>
 8000c82:	4667      	mov	r7, ip
 8000c84:	e7d1      	b.n	8000c2a <__udivmoddi4+0x256>
 8000c86:	4681      	mov	r9, r0
 8000c88:	e77c      	b.n	8000b84 <__udivmoddi4+0x1b0>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	442c      	add	r4, r5
 8000c8e:	e747      	b.n	8000b20 <__udivmoddi4+0x14c>
 8000c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c94:	442b      	add	r3, r5
 8000c96:	e72f      	b.n	8000af8 <__udivmoddi4+0x124>
 8000c98:	4638      	mov	r0, r7
 8000c9a:	e708      	b.n	8000aae <__udivmoddi4+0xda>
 8000c9c:	4637      	mov	r7, r6
 8000c9e:	e6e9      	b.n	8000a74 <__udivmoddi4+0xa0>

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void init() {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
	// Initialize
	LCD_SCAN_DIR Lcd_ScanDir = SCAN_DIR_DFT;
 8000caa:	2300      	movs	r3, #0
 8000cac:	71fb      	strb	r3, [r7, #7]
	LCD_Init( Lcd_ScanDir );
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f001 fcd9 	bl	8002668 <LCD_Init>

	// Run LCD test
	LCD_Show();
 8000cb6:	f002 faa1 	bl	80031fc <LCD_Show>
	Driver_Delay_ms(1000);
 8000cba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cbe:	f002 fd9d 	bl	80037fc <Driver_Delay_ms>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cce:	f000 facf 	bl	8001270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd2:	f000 f807 	bl	8000ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd6:	f000 f8a5 	bl	8000e24 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cda:	f000 f86d 	bl	8000db8 <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  init();
 8000cde:	f7ff ffe1 	bl	8000ca4 <init>
   while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <main+0x18>

08000ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b094      	sub	sp, #80	; 0x50
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2230      	movs	r2, #48	; 0x30
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 fdb8 	bl	8003868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <SystemClock_Config+0xcc>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	4a27      	ldr	r2, [pc, #156]	; (8000db0 <SystemClock_Config+0xcc>)
 8000d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d16:	6413      	str	r3, [r2, #64]	; 0x40
 8000d18:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <SystemClock_Config+0xcc>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d24:	2300      	movs	r3, #0
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <SystemClock_Config+0xd0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <SystemClock_Config+0xd0>)
 8000d2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <SystemClock_Config+0xd0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d40:	2301      	movs	r3, #1
 8000d42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d54:	2304      	movs	r3, #4
 8000d56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d58:	23a8      	movs	r3, #168	; 0xa8
 8000d5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d60:	2304      	movs	r3, #4
 8000d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d64:	f107 0320 	add.w	r3, r7, #32
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fdff 	bl	800196c <HAL_RCC_OscConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d74:	f000 f8f6 	bl	8000f64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d78:	230f      	movs	r3, #15
 8000d7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2105      	movs	r1, #5
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 f858 	bl	8001e4c <HAL_RCC_ClockConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000da2:	f000 f8df 	bl	8000f64 <Error_Handler>
  }
}
 8000da6:	bf00      	nop
 8000da8:	3750      	adds	r7, #80	; 0x50
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40007000 	.word	0x40007000

08000db8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <MX_SPI1_Init+0x64>)
 8000dbe:	4a18      	ldr	r2, [pc, #96]	; (8000e20 <MX_SPI1_Init+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MX_SPI1_Init+0x64>)
 8000dc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_SPI1_Init+0x64>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <MX_SPI1_Init+0x64>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_SPI1_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_SPI1_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_SPI1_Init+0x64>)
 8000de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000de8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_SPI1_Init+0x64>)
 8000dec:	2210      	movs	r2, #16
 8000dee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <MX_SPI1_Init+0x64>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_SPI1_Init+0x64>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <MX_SPI1_Init+0x64>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_SPI1_Init+0x64>)
 8000e04:	220a      	movs	r2, #10
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <MX_SPI1_Init+0x64>)
 8000e0a:	f001 f9dd 	bl	80021c8 <HAL_SPI_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e14:	f000 f8a6 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200000a8 	.word	0x200000a8
 8000e20:	40013000 	.word	0x40013000

08000e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b44      	ldr	r3, [pc, #272]	; (8000f50 <MX_GPIO_Init+0x12c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a43      	ldr	r2, [pc, #268]	; (8000f50 <MX_GPIO_Init+0x12c>)
 8000e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b41      	ldr	r3, [pc, #260]	; (8000f50 <MX_GPIO_Init+0x12c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b3d      	ldr	r3, [pc, #244]	; (8000f50 <MX_GPIO_Init+0x12c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a3c      	ldr	r2, [pc, #240]	; (8000f50 <MX_GPIO_Init+0x12c>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b3a      	ldr	r3, [pc, #232]	; (8000f50 <MX_GPIO_Init+0x12c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <MX_GPIO_Init+0x12c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a35      	ldr	r2, [pc, #212]	; (8000f50 <MX_GPIO_Init+0x12c>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b33      	ldr	r3, [pc, #204]	; (8000f50 <MX_GPIO_Init+0x12c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <MX_GPIO_Init+0x12c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a2e      	ldr	r2, [pc, #184]	; (8000f50 <MX_GPIO_Init+0x12c>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <MX_GPIO_Init+0x12c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	4829      	ldr	r0, [pc, #164]	; (8000f54 <MX_GPIO_Init+0x130>)
 8000eb0:	f000 fd1e 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000eba:	4827      	ldr	r0, [pc, #156]	; (8000f58 <MX_GPIO_Init+0x134>)
 8000ebc:	f000 fd18 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2140      	movs	r1, #64	; 0x40
 8000ec4:	4825      	ldr	r0, [pc, #148]	; (8000f5c <MX_GPIO_Init+0x138>)
 8000ec6:	f000 fd13 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ece:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <MX_GPIO_Init+0x13c>)
 8000ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	481e      	ldr	r0, [pc, #120]	; (8000f58 <MX_GPIO_Init+0x134>)
 8000ede:	f000 fb6d 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4816      	ldr	r0, [pc, #88]	; (8000f54 <MX_GPIO_Init+0x130>)
 8000efa:	f000 fb5f 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000efe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4810      	ldr	r0, [pc, #64]	; (8000f58 <MX_GPIO_Init+0x134>)
 8000f18:	f000 fb50 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f1c:	2340      	movs	r3, #64	; 0x40
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	480a      	ldr	r0, [pc, #40]	; (8000f5c <MX_GPIO_Init+0x138>)
 8000f34:	f000 fb42 	bl	80015bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2006      	movs	r0, #6
 8000f3e:	f000 fb06 	bl	800154e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f42:	2006      	movs	r0, #6
 8000f44:	f000 fb1f 	bl	8001586 <HAL_NVIC_EnableIRQ>

}
 8000f48:	bf00      	nop
 8000f4a:	3728      	adds	r7, #40	; 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020800 	.word	0x40020800
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	10210000 	.word	0x10210000

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a19      	ldr	r2, [pc, #100]	; (8001048 <HAL_SPI_MspInit+0x84>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d12b      	bne.n	800103e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_SPI_MspInit+0x88>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a17      	ldr	r2, [pc, #92]	; (800104c <HAL_SPI_MspInit+0x88>)
 8000ff0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_SPI_MspInit+0x88>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_SPI_MspInit+0x88>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_SPI_MspInit+0x88>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_SPI_MspInit+0x88>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800101e:	23a0      	movs	r3, #160	; 0xa0
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800102e:	2305      	movs	r3, #5
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_SPI_MspInit+0x8c>)
 800103a:	f000 fabf 	bl	80015bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	3728      	adds	r7, #40	; 0x28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40013000 	.word	0x40013000
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a8:	f000 f934 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f000 fc35 	bl	8001924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}

080010be <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	e00a      	b.n	80010e6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010d0:	f3af 8000 	nop.w
 80010d4:	4601      	mov	r1, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	60ba      	str	r2, [r7, #8]
 80010dc:	b2ca      	uxtb	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	3301      	adds	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	dbf0      	blt.n	80010d0 <_read+0x12>
	}

return len;
 80010ee:	687b      	ldr	r3, [r7, #4]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	e009      	b.n	800111e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1c5a      	adds	r2, r3, #1
 800110e:	60ba      	str	r2, [r7, #8]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3301      	adds	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	429a      	cmp	r2, r3
 8001124:	dbf1      	blt.n	800110a <_write+0x12>
	}
	return len;
 8001126:	687b      	ldr	r3, [r7, #4]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_close>:

int _close(int file)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	return -1;
 8001138:	f04f 33ff 	mov.w	r3, #4294967295
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001158:	605a      	str	r2, [r3, #4]
	return 0;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_isatty>:

int _isatty(int file)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	return 1;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800117e:	b480      	push	{r7}
 8001180:	b085      	sub	sp, #20
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
	return 0;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <_sbrk+0x50>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <_sbrk+0x16>
		heap_end = &end;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <_sbrk+0x50>)
 80011aa:	4a10      	ldr	r2, [pc, #64]	; (80011ec <_sbrk+0x54>)
 80011ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <_sbrk+0x50>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <_sbrk+0x50>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	466a      	mov	r2, sp
 80011be:	4293      	cmp	r3, r2
 80011c0:	d907      	bls.n	80011d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011c2:	f002 fb27 	bl	8003814 <__errno>
 80011c6:	4602      	mov	r2, r0
 80011c8:	230c      	movs	r3, #12
 80011ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295
 80011d0:	e006      	b.n	80011e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <_sbrk+0x50>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	4a03      	ldr	r2, [pc, #12]	; (80011e8 <_sbrk+0x50>)
 80011dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011de:	68fb      	ldr	r3, [r7, #12]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000009c 	.word	0x2000009c
 80011ec:	20000118 	.word	0x20000118

080011f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <SystemInit+0x28>)
 80011f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fa:	4a07      	ldr	r2, [pc, #28]	; (8001218 <SystemInit+0x28>)
 80011fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SystemInit+0x28>)
 8001206:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800120a:	609a      	str	r2, [r3, #8]
#endif
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800121c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001254 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001220:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001222:	e003      	b.n	800122c <LoopCopyDataInit>

08001224 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001226:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001228:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800122a:	3104      	adds	r1, #4

0800122c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800122c:	480b      	ldr	r0, [pc, #44]	; (800125c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001230:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001232:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001234:	d3f6      	bcc.n	8001224 <CopyDataInit>
  ldr  r2, =_sbss
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001238:	e002      	b.n	8001240 <LoopFillZerobss>

0800123a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800123a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800123c:	f842 3b04 	str.w	r3, [r2], #4

08001240 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001242:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001244:	d3f9      	bcc.n	800123a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001246:	f7ff ffd3 	bl	80011f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800124a:	f002 fae9 	bl	8003820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124e:	f7ff fd3c 	bl	8000cca <main>
  bx  lr    
 8001252:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001254:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001258:	08004a1c 	.word	0x08004a1c
  ldr  r0, =_sdata
 800125c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001260:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8001264:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8001268:	20000114 	.word	0x20000114

0800126c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC_IRQHandler>
	...

08001270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <HAL_Init+0x40>)
 800127a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <HAL_Init+0x40>)
 8001286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800128a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_Init+0x40>)
 8001292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f000 f94d 	bl	8001538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 f808 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a4:	f7ff fe66 	bl	8000f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023c00 	.word	0x40023c00

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x54>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x58>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f965 	bl	80015a2 <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 f92d 	bl	800154e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_InitTick+0x5c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000000 	.word	0x20000000
 800130c:	20000008 	.word	0x20000008
 8001310:	20000004 	.word	0x20000004

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_IncTick+0x24>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000008 	.word	0x20000008
 8001338:	20000100 	.word	0x20000100

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000100 	.word	0x20000100

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff ffee 	bl	800133c <HAL_GetTick>
 8001360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136c:	d005      	beq.n	800137a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_Delay+0x40>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800137a:	bf00      	nop
 800137c:	f7ff ffde 	bl	800133c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d8f7      	bhi.n	800137c <HAL_Delay+0x28>
  {
  }
}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000008 	.word	0x20000008

08001398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b4:	4013      	ands	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <__NVIC_GetPriorityGrouping+0x18>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	f003 0307 	and.w	r3, r3, #7
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	db0b      	blt.n	8001426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	f003 021f 	and.w	r2, r3, #31
 8001414:	4907      	ldr	r1, [pc, #28]	; (8001434 <__NVIC_EnableIRQ+0x38>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	2001      	movs	r0, #1
 800141e:	fa00 f202 	lsl.w	r2, r0, r2
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000e100 	.word	0xe000e100

08001438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	2b00      	cmp	r3, #0
 800144a:	db0a      	blt.n	8001462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	490c      	ldr	r1, [pc, #48]	; (8001484 <__NVIC_SetPriority+0x4c>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	0112      	lsls	r2, r2, #4
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	440b      	add	r3, r1
 800145c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001460:	e00a      	b.n	8001478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4908      	ldr	r1, [pc, #32]	; (8001488 <__NVIC_SetPriority+0x50>)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	3b04      	subs	r3, #4
 8001470:	0112      	lsls	r2, r2, #4
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	440b      	add	r3, r1
 8001476:	761a      	strb	r2, [r3, #24]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000e100 	.word	0xe000e100
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f1c3 0307 	rsb	r3, r3, #7
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	bf28      	it	cs
 80014aa:	2304      	movcs	r3, #4
 80014ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3304      	adds	r3, #4
 80014b2:	2b06      	cmp	r3, #6
 80014b4:	d902      	bls.n	80014bc <NVIC_EncodePriority+0x30>
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3b03      	subs	r3, #3
 80014ba:	e000      	b.n	80014be <NVIC_EncodePriority+0x32>
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43da      	mvns	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	401a      	ands	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	43d9      	mvns	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	4313      	orrs	r3, r2
         );
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3724      	adds	r7, #36	; 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001504:	d301      	bcc.n	800150a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001506:	2301      	movs	r3, #1
 8001508:	e00f      	b.n	800152a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <SysTick_Config+0x40>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001512:	210f      	movs	r1, #15
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f7ff ff8e 	bl	8001438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <SysTick_Config+0x40>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <SysTick_Config+0x40>)
 8001524:	2207      	movs	r2, #7
 8001526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	e000e010 	.word	0xe000e010

08001538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff29 	bl	8001398 <__NVIC_SetPriorityGrouping>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001560:	f7ff ff3e 	bl	80013e0 <__NVIC_GetPriorityGrouping>
 8001564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f7ff ff8e 	bl	800148c <NVIC_EncodePriority>
 8001570:	4602      	mov	r2, r0
 8001572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff5d 	bl	8001438 <__NVIC_SetPriority>
}
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff31 	bl	80013fc <__NVIC_EnableIRQ>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ffa2 	bl	80014f4 <SysTick_Config>
 80015b0:	4603      	mov	r3, r0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	e16b      	b.n	80018b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d8:	2201      	movs	r2, #1
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	f040 815a 	bne.w	80018aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d00b      	beq.n	8001616 <HAL_GPIO_Init+0x5a>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d007      	beq.n	8001616 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800160a:	2b11      	cmp	r3, #17
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b12      	cmp	r3, #18
 8001614:	d130      	bne.n	8001678 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	2203      	movs	r2, #3
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800164c:	2201      	movs	r2, #1
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	f003 0201 	and.w	r2, r3, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0xfc>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b12      	cmp	r3, #18
 80016b6:	d123      	bne.n	8001700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	08da      	lsrs	r2, r3, #3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3208      	adds	r2, #8
 80016c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	08da      	lsrs	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3208      	adds	r2, #8
 80016fa:	69b9      	ldr	r1, [r7, #24]
 80016fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0203 	and.w	r2, r3, #3
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80b4 	beq.w	80018aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b5f      	ldr	r3, [pc, #380]	; (80018c4 <HAL_GPIO_Init+0x308>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	4a5e      	ldr	r2, [pc, #376]	; (80018c4 <HAL_GPIO_Init+0x308>)
 800174c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001750:	6453      	str	r3, [r2, #68]	; 0x44
 8001752:	4b5c      	ldr	r3, [pc, #368]	; (80018c4 <HAL_GPIO_Init+0x308>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800175e:	4a5a      	ldr	r2, [pc, #360]	; (80018c8 <HAL_GPIO_Init+0x30c>)
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	3302      	adds	r3, #2
 8001766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a51      	ldr	r2, [pc, #324]	; (80018cc <HAL_GPIO_Init+0x310>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d02b      	beq.n	80017e2 <HAL_GPIO_Init+0x226>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a50      	ldr	r2, [pc, #320]	; (80018d0 <HAL_GPIO_Init+0x314>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d025      	beq.n	80017de <HAL_GPIO_Init+0x222>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4f      	ldr	r2, [pc, #316]	; (80018d4 <HAL_GPIO_Init+0x318>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01f      	beq.n	80017da <HAL_GPIO_Init+0x21e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4e      	ldr	r2, [pc, #312]	; (80018d8 <HAL_GPIO_Init+0x31c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d019      	beq.n	80017d6 <HAL_GPIO_Init+0x21a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4d      	ldr	r2, [pc, #308]	; (80018dc <HAL_GPIO_Init+0x320>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0x216>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4c      	ldr	r2, [pc, #304]	; (80018e0 <HAL_GPIO_Init+0x324>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00d      	beq.n	80017ce <HAL_GPIO_Init+0x212>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4b      	ldr	r2, [pc, #300]	; (80018e4 <HAL_GPIO_Init+0x328>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x20e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4a      	ldr	r2, [pc, #296]	; (80018e8 <HAL_GPIO_Init+0x32c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_GPIO_Init+0x20a>
 80017c2:	2307      	movs	r3, #7
 80017c4:	e00e      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017c6:	2308      	movs	r3, #8
 80017c8:	e00c      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017ca:	2306      	movs	r3, #6
 80017cc:	e00a      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017ce:	2305      	movs	r3, #5
 80017d0:	e008      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017d2:	2304      	movs	r3, #4
 80017d4:	e006      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017d6:	2303      	movs	r3, #3
 80017d8:	e004      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017da:	2302      	movs	r3, #2
 80017dc:	e002      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017e2:	2300      	movs	r3, #0
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	f002 0203 	and.w	r2, r2, #3
 80017ea:	0092      	lsls	r2, r2, #2
 80017ec:	4093      	lsls	r3, r2
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f4:	4934      	ldr	r1, [pc, #208]	; (80018c8 <HAL_GPIO_Init+0x30c>)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	3302      	adds	r3, #2
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001802:	4b3a      	ldr	r3, [pc, #232]	; (80018ec <HAL_GPIO_Init+0x330>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001826:	4a31      	ldr	r2, [pc, #196]	; (80018ec <HAL_GPIO_Init+0x330>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800182c:	4b2f      	ldr	r3, [pc, #188]	; (80018ec <HAL_GPIO_Init+0x330>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001850:	4a26      	ldr	r2, [pc, #152]	; (80018ec <HAL_GPIO_Init+0x330>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001856:	4b25      	ldr	r3, [pc, #148]	; (80018ec <HAL_GPIO_Init+0x330>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800187a:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <HAL_GPIO_Init+0x330>)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001880:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <HAL_GPIO_Init+0x330>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a4:	4a11      	ldr	r2, [pc, #68]	; (80018ec <HAL_GPIO_Init+0x330>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3301      	adds	r3, #1
 80018ae:	61fb      	str	r3, [r7, #28]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	2b0f      	cmp	r3, #15
 80018b4:	f67f ae90 	bls.w	80015d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b8:	bf00      	nop
 80018ba:	3724      	adds	r7, #36	; 0x24
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40013800 	.word	0x40013800
 80018cc:	40020000 	.word	0x40020000
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40020800 	.word	0x40020800
 80018d8:	40020c00 	.word	0x40020c00
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40021400 	.word	0x40021400
 80018e4:	40021800 	.word	0x40021800
 80018e8:	40021c00 	.word	0x40021c00
 80018ec:	40013c00 	.word	0x40013c00

080018f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
 80018fc:	4613      	mov	r3, r2
 80018fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001900:	787b      	ldrb	r3, [r7, #1]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001906:	887a      	ldrh	r2, [r7, #2]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800190c:	e003      	b.n	8001916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800190e:	887b      	ldrh	r3, [r7, #2]
 8001910:	041a      	lsls	r2, r3, #16
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	619a      	str	r2, [r3, #24]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001930:	695a      	ldr	r2, [r3, #20]
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	4013      	ands	r3, r2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d006      	beq.n	8001948 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001940:	88fb      	ldrh	r3, [r7, #6]
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f806 	bl	8001954 <HAL_GPIO_EXTI_Callback>
  }
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40013c00 	.word	0x40013c00

08001954 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e25b      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d075      	beq.n	8001a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800198a:	4ba3      	ldr	r3, [pc, #652]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b04      	cmp	r3, #4
 8001994:	d00c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001996:	4ba0      	ldr	r3, [pc, #640]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d112      	bne.n	80019c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a2:	4b9d      	ldr	r3, [pc, #628]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ae:	d10b      	bne.n	80019c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	4b99      	ldr	r3, [pc, #612]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d05b      	beq.n	8001a74 <HAL_RCC_OscConfig+0x108>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d157      	bne.n	8001a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e236      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d0:	d106      	bne.n	80019e0 <HAL_RCC_OscConfig+0x74>
 80019d2:	4b91      	ldr	r3, [pc, #580]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a90      	ldr	r2, [pc, #576]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e01d      	b.n	8001a1c <HAL_RCC_OscConfig+0xb0>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x98>
 80019ea:	4b8b      	ldr	r3, [pc, #556]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a8a      	ldr	r2, [pc, #552]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b88      	ldr	r3, [pc, #544]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a87      	ldr	r2, [pc, #540]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e00b      	b.n	8001a1c <HAL_RCC_OscConfig+0xb0>
 8001a04:	4b84      	ldr	r3, [pc, #528]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a83      	ldr	r2, [pc, #524]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	4b81      	ldr	r3, [pc, #516]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a80      	ldr	r2, [pc, #512]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d013      	beq.n	8001a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7ff fc8a 	bl	800133c <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7ff fc86 	bl	800133c <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	; 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e1fb      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	4b76      	ldr	r3, [pc, #472]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0xc0>
 8001a4a:	e014      	b.n	8001a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fc76 	bl	800133c <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff fc72 	bl	800133c <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	; 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e1e7      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a66:	4b6c      	ldr	r3, [pc, #432]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0xe8>
 8001a72:	e000      	b.n	8001a76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d063      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a82:	4b65      	ldr	r3, [pc, #404]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00b      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8e:	4b62      	ldr	r3, [pc, #392]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d11c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a9a:	4b5f      	ldr	r3, [pc, #380]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d116      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa6:	4b5c      	ldr	r3, [pc, #368]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <HAL_RCC_OscConfig+0x152>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e1bb      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abe:	4b56      	ldr	r3, [pc, #344]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4952      	ldr	r1, [pc, #328]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad2:	e03a      	b.n	8001b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d020      	beq.n	8001b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001adc:	4b4f      	ldr	r3, [pc, #316]	; (8001c1c <HAL_RCC_OscConfig+0x2b0>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fc2b 	bl	800133c <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aea:	f7ff fc27 	bl	800133c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e19c      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b08:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4940      	ldr	r1, [pc, #256]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
 8001b1c:	e015      	b.n	8001b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1e:	4b3f      	ldr	r3, [pc, #252]	; (8001c1c <HAL_RCC_OscConfig+0x2b0>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fc0a 	bl	800133c <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fc06 	bl	800133c <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e17b      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d030      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d016      	beq.n	8001b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5e:	4b30      	ldr	r3, [pc, #192]	; (8001c20 <HAL_RCC_OscConfig+0x2b4>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff fbea 	bl	800133c <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fbe6 	bl	800133c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e15b      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x200>
 8001b8a:	e015      	b.n	8001bb8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_RCC_OscConfig+0x2b4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7ff fbd3 	bl	800133c <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b9a:	f7ff fbcf 	bl	800133c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e144      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80a0 	beq.w	8001d06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_OscConfig+0x2b8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d121      	bne.n	8001c46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_RCC_OscConfig+0x2b8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_RCC_OscConfig+0x2b8>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fb95 	bl	800133c <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c14:	e011      	b.n	8001c3a <HAL_RCC_OscConfig+0x2ce>
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	42470000 	.word	0x42470000
 8001c20:	42470e80 	.word	0x42470e80
 8001c24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c28:	f7ff fb88 	bl	800133c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e0fd      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3a:	4b81      	ldr	r3, [pc, #516]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d106      	bne.n	8001c5c <HAL_RCC_OscConfig+0x2f0>
 8001c4e:	4b7d      	ldr	r3, [pc, #500]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c52:	4a7c      	ldr	r2, [pc, #496]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5a:	e01c      	b.n	8001c96 <HAL_RCC_OscConfig+0x32a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d10c      	bne.n	8001c7e <HAL_RCC_OscConfig+0x312>
 8001c64:	4b77      	ldr	r3, [pc, #476]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c68:	4a76      	ldr	r2, [pc, #472]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c70:	4b74      	ldr	r3, [pc, #464]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c74:	4a73      	ldr	r2, [pc, #460]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7c:	e00b      	b.n	8001c96 <HAL_RCC_OscConfig+0x32a>
 8001c7e:	4b71      	ldr	r3, [pc, #452]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	4a70      	ldr	r2, [pc, #448]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8a:	4b6e      	ldr	r3, [pc, #440]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8e:	4a6d      	ldr	r2, [pc, #436]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d015      	beq.n	8001cca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9e:	f7ff fb4d 	bl	800133c <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7ff fb49 	bl	800133c <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e0bc      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbc:	4b61      	ldr	r3, [pc, #388]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0ee      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x33a>
 8001cc8:	e014      	b.n	8001cf4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cca:	f7ff fb37 	bl	800133c <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd2:	f7ff fb33 	bl	800133c <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e0a6      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce8:	4b56      	ldr	r3, [pc, #344]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ee      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d105      	bne.n	8001d06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cfa:	4b52      	ldr	r3, [pc, #328]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	4a51      	ldr	r2, [pc, #324]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8092 	beq.w	8001e34 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d10:	4b4c      	ldr	r3, [pc, #304]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d05c      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d141      	bne.n	8001da8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d24:	4b48      	ldr	r3, [pc, #288]	; (8001e48 <HAL_RCC_OscConfig+0x4dc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7ff fb07 	bl	800133c <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d32:	f7ff fb03 	bl	800133c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e078      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d44:	4b3f      	ldr	r3, [pc, #252]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69da      	ldr	r2, [r3, #28]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	019b      	lsls	r3, r3, #6
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	085b      	lsrs	r3, r3, #1
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	041b      	lsls	r3, r3, #16
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	061b      	lsls	r3, r3, #24
 8001d74:	4933      	ldr	r1, [pc, #204]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d7a:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <HAL_RCC_OscConfig+0x4dc>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff fadc 	bl	800133c <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d88:	f7ff fad8 	bl	800133c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e04d      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x41c>
 8001da6:	e045      	b.n	8001e34 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da8:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <HAL_RCC_OscConfig+0x4dc>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7ff fac5 	bl	800133c <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db6:	f7ff fac1 	bl	800133c <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e036      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f0      	bne.n	8001db6 <HAL_RCC_OscConfig+0x44a>
 8001dd4:	e02e      	b.n	8001e34 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e029      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001de2:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d11c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d115      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d10d      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d106      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40007000 	.word	0x40007000
 8001e44:	40023800 	.word	0x40023800
 8001e48:	42470060 	.word	0x42470060

08001e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0cc      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e60:	4b68      	ldr	r3, [pc, #416]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d90c      	bls.n	8001e88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b65      	ldr	r3, [pc, #404]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b63      	ldr	r3, [pc, #396]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0b8      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d020      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea0:	4b59      	ldr	r3, [pc, #356]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4a58      	ldr	r2, [pc, #352]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eb8:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	4a52      	ldr	r2, [pc, #328]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ec2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec4:	4b50      	ldr	r3, [pc, #320]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	494d      	ldr	r1, [pc, #308]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d044      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d119      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e07f      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d003      	beq.n	8001f0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0a:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d109      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e06f      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1a:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e067      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2a:	4b37      	ldr	r3, [pc, #220]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f023 0203 	bic.w	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4934      	ldr	r1, [pc, #208]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f3c:	f7ff f9fe 	bl	800133c <HAL_GetTick>
 8001f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	e00a      	b.n	8001f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f44:	f7ff f9fa 	bl	800133c <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e04f      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5a:	4b2b      	ldr	r3, [pc, #172]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 020c 	and.w	r2, r3, #12
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d1eb      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b25      	ldr	r3, [pc, #148]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d20c      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b22      	ldr	r3, [pc, #136]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e032      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4916      	ldr	r1, [pc, #88]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	490e      	ldr	r1, [pc, #56]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fd2:	f000 f821 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001fd6:	4601      	mov	r1, r0
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	5cd3      	ldrb	r3, [r2, r3]
 8001fe6:	fa21 f303 	lsr.w	r3, r1, r3
 8001fea:	4a09      	ldr	r2, [pc, #36]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff f95e 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023c00 	.word	0x40023c00
 8002008:	40023800 	.word	0x40023800
 800200c:	0800422c 	.word	0x0800422c
 8002010:	20000000 	.word	0x20000000
 8002014:	20000004 	.word	0x20000004

08002018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	2300      	movs	r3, #0
 8002028:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800202e:	4b63      	ldr	r3, [pc, #396]	; (80021bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b04      	cmp	r3, #4
 8002038:	d007      	beq.n	800204a <HAL_RCC_GetSysClockFreq+0x32>
 800203a:	2b08      	cmp	r3, #8
 800203c:	d008      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x38>
 800203e:	2b00      	cmp	r3, #0
 8002040:	f040 80b4 	bne.w	80021ac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002044:	4b5e      	ldr	r3, [pc, #376]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002046:	60bb      	str	r3, [r7, #8]
       break;
 8002048:	e0b3      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800204a:	4b5e      	ldr	r3, [pc, #376]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800204c:	60bb      	str	r3, [r7, #8]
      break;
 800204e:	e0b0      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002050:	4b5a      	ldr	r3, [pc, #360]	; (80021bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002058:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800205a:	4b58      	ldr	r3, [pc, #352]	; (80021bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d04a      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002066:	4b55      	ldr	r3, [pc, #340]	; (80021bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	099b      	lsrs	r3, r3, #6
 800206c:	f04f 0400 	mov.w	r4, #0
 8002070:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	ea03 0501 	and.w	r5, r3, r1
 800207c:	ea04 0602 	and.w	r6, r4, r2
 8002080:	4629      	mov	r1, r5
 8002082:	4632      	mov	r2, r6
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	f04f 0400 	mov.w	r4, #0
 800208c:	0154      	lsls	r4, r2, #5
 800208e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002092:	014b      	lsls	r3, r1, #5
 8002094:	4619      	mov	r1, r3
 8002096:	4622      	mov	r2, r4
 8002098:	1b49      	subs	r1, r1, r5
 800209a:	eb62 0206 	sbc.w	r2, r2, r6
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	f04f 0400 	mov.w	r4, #0
 80020a6:	0194      	lsls	r4, r2, #6
 80020a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020ac:	018b      	lsls	r3, r1, #6
 80020ae:	1a5b      	subs	r3, r3, r1
 80020b0:	eb64 0402 	sbc.w	r4, r4, r2
 80020b4:	f04f 0100 	mov.w	r1, #0
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	00e2      	lsls	r2, r4, #3
 80020be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020c2:	00d9      	lsls	r1, r3, #3
 80020c4:	460b      	mov	r3, r1
 80020c6:	4614      	mov	r4, r2
 80020c8:	195b      	adds	r3, r3, r5
 80020ca:	eb44 0406 	adc.w	r4, r4, r6
 80020ce:	f04f 0100 	mov.w	r1, #0
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	0262      	lsls	r2, r4, #9
 80020d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80020dc:	0259      	lsls	r1, r3, #9
 80020de:	460b      	mov	r3, r1
 80020e0:	4614      	mov	r4, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	4621      	mov	r1, r4
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f04f 0400 	mov.w	r4, #0
 80020ec:	461a      	mov	r2, r3
 80020ee:	4623      	mov	r3, r4
 80020f0:	f7fe fc58 	bl	80009a4 <__aeabi_uldivmod>
 80020f4:	4603      	mov	r3, r0
 80020f6:	460c      	mov	r4, r1
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	e049      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020fc:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	099b      	lsrs	r3, r3, #6
 8002102:	f04f 0400 	mov.w	r4, #0
 8002106:	f240 11ff 	movw	r1, #511	; 0x1ff
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	ea03 0501 	and.w	r5, r3, r1
 8002112:	ea04 0602 	and.w	r6, r4, r2
 8002116:	4629      	mov	r1, r5
 8002118:	4632      	mov	r2, r6
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	f04f 0400 	mov.w	r4, #0
 8002122:	0154      	lsls	r4, r2, #5
 8002124:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002128:	014b      	lsls	r3, r1, #5
 800212a:	4619      	mov	r1, r3
 800212c:	4622      	mov	r2, r4
 800212e:	1b49      	subs	r1, r1, r5
 8002130:	eb62 0206 	sbc.w	r2, r2, r6
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	f04f 0400 	mov.w	r4, #0
 800213c:	0194      	lsls	r4, r2, #6
 800213e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002142:	018b      	lsls	r3, r1, #6
 8002144:	1a5b      	subs	r3, r3, r1
 8002146:	eb64 0402 	sbc.w	r4, r4, r2
 800214a:	f04f 0100 	mov.w	r1, #0
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	00e2      	lsls	r2, r4, #3
 8002154:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002158:	00d9      	lsls	r1, r3, #3
 800215a:	460b      	mov	r3, r1
 800215c:	4614      	mov	r4, r2
 800215e:	195b      	adds	r3, r3, r5
 8002160:	eb44 0406 	adc.w	r4, r4, r6
 8002164:	f04f 0100 	mov.w	r1, #0
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	02a2      	lsls	r2, r4, #10
 800216e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002172:	0299      	lsls	r1, r3, #10
 8002174:	460b      	mov	r3, r1
 8002176:	4614      	mov	r4, r2
 8002178:	4618      	mov	r0, r3
 800217a:	4621      	mov	r1, r4
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f04f 0400 	mov.w	r4, #0
 8002182:	461a      	mov	r2, r3
 8002184:	4623      	mov	r3, r4
 8002186:	f7fe fc0d 	bl	80009a4 <__aeabi_uldivmod>
 800218a:	4603      	mov	r3, r0
 800218c:	460c      	mov	r4, r1
 800218e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002190:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	0c1b      	lsrs	r3, r3, #16
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	3301      	adds	r3, #1
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a8:	60bb      	str	r3, [r7, #8]
      break;
 80021aa:	e002      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021ac:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021ae:	60bb      	str	r3, [r7, #8]
      break;
 80021b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b2:	68bb      	ldr	r3, [r7, #8]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021bc:	40023800 	.word	0x40023800
 80021c0:	00f42400 	.word	0x00f42400
 80021c4:	007a1200 	.word	0x007a1200

080021c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e056      	b.n	8002288 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d106      	bne.n	80021fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7fe fee5 	bl	8000fc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2202      	movs	r2, #2
 80021fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002210:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	ea42 0103 	orr.w	r1, r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	0c1b      	lsrs	r3, r3, #16
 8002258:	f003 0104 	and.w	r1, r3, #4
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	69da      	ldr	r2, [r3, #28]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002276:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <LCD_Reset>:
***********************************************************************************************************************/
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_Reset(void){
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	LCD_RST_1;
 8002294:	2201      	movs	r2, #1
 8002296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800229a:	480d      	ldr	r0, [pc, #52]	; (80022d0 <LCD_Reset+0x40>)
 800229c:	f7ff fb28 	bl	80018f0 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 80022a0:	2064      	movs	r0, #100	; 0x64
 80022a2:	f001 faab 	bl	80037fc <Driver_Delay_ms>
	LCD_RST_0;
 80022a6:	2200      	movs	r2, #0
 80022a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ac:	4808      	ldr	r0, [pc, #32]	; (80022d0 <LCD_Reset+0x40>)
 80022ae:	f7ff fb1f 	bl	80018f0 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 80022b2:	2064      	movs	r0, #100	; 0x64
 80022b4:	f001 faa2 	bl	80037fc <Driver_Delay_ms>
	LCD_RST_1;
 80022b8:	2201      	movs	r2, #1
 80022ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022be:	4804      	ldr	r0, [pc, #16]	; (80022d0 <LCD_Reset+0x40>)
 80022c0:	f7ff fb16 	bl	80018f0 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 80022c4:	2064      	movs	r0, #100	; 0x64
 80022c6:	f001 fa99 	bl	80037fc <Driver_Delay_ms>
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40020000 	.word	0x40020000

080022d4 <LCD_WriteReg>:

/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_WriteReg(uint8_t Reg){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
	LCD_DC_0;
 80022de:	2200      	movs	r2, #0
 80022e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022e4:	480a      	ldr	r0, [pc, #40]	; (8002310 <LCD_WriteReg+0x3c>)
 80022e6:	f7ff fb03 	bl	80018f0 <HAL_GPIO_WritePin>
	LCD_CS_0;
 80022ea:	2200      	movs	r2, #0
 80022ec:	2140      	movs	r1, #64	; 0x40
 80022ee:	4809      	ldr	r0, [pc, #36]	; (8002314 <LCD_WriteReg+0x40>)
 80022f0:	f7ff fafe 	bl	80018f0 <HAL_GPIO_WritePin>
	SPI_Write_Byte(Reg);
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f001 fa46 	bl	8003788 <SPI_Write_Byte>
	LCD_CS_1;
 80022fc:	2201      	movs	r2, #1
 80022fe:	2140      	movs	r1, #64	; 0x40
 8002300:	4804      	ldr	r0, [pc, #16]	; (8002314 <LCD_WriteReg+0x40>)
 8002302:	f7ff faf5 	bl	80018f0 <HAL_GPIO_WritePin>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40020000 	.word	0x40020000
 8002314:	40020400 	.word	0x40020400

08002318 <LCD_WriteData_8Bit>:

static void LCD_WriteData_8Bit(uint8_t Data){
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
	LCD_DC_1;
 8002322:	2201      	movs	r2, #1
 8002324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002328:	480a      	ldr	r0, [pc, #40]	; (8002354 <LCD_WriteData_8Bit+0x3c>)
 800232a:	f7ff fae1 	bl	80018f0 <HAL_GPIO_WritePin>
	LCD_CS_0;
 800232e:	2200      	movs	r2, #0
 8002330:	2140      	movs	r1, #64	; 0x40
 8002332:	4809      	ldr	r0, [pc, #36]	; (8002358 <LCD_WriteData_8Bit+0x40>)
 8002334:	f7ff fadc 	bl	80018f0 <HAL_GPIO_WritePin>
	SPI_Write_Byte(Data);
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	4618      	mov	r0, r3
 800233c:	f001 fa24 	bl	8003788 <SPI_Write_Byte>
	LCD_CS_1;
 8002340:	2201      	movs	r2, #1
 8002342:	2140      	movs	r1, #64	; 0x40
 8002344:	4804      	ldr	r0, [pc, #16]	; (8002358 <LCD_WriteData_8Bit+0x40>)
 8002346:	f7ff fad3 	bl	80018f0 <HAL_GPIO_WritePin>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40020000 	.word	0x40020000
 8002358:	40020400 	.word	0x40020400

0800235c <LCD_WriteData_NLen16Bit>:
	SPI_Write_Byte(Data >> 8);
	SPI_Write_Byte(Data & 0XFF);
	LCD_CS_1;
}

static void LCD_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen){
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	LCD_DC_1;
 8002368:	2201      	movs	r2, #1
 800236a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800236e:	4813      	ldr	r0, [pc, #76]	; (80023bc <LCD_WriteData_NLen16Bit+0x60>)
 8002370:	f7ff fabe 	bl	80018f0 <HAL_GPIO_WritePin>
	LCD_CS_0;
 8002374:	2200      	movs	r2, #0
 8002376:	2140      	movs	r1, #64	; 0x40
 8002378:	4811      	ldr	r0, [pc, #68]	; (80023c0 <LCD_WriteData_NLen16Bit+0x64>)
 800237a:	f7ff fab9 	bl	80018f0 <HAL_GPIO_WritePin>
	for(i = 0; i < DataLen; i++){
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	e00e      	b.n	80023a2 <LCD_WriteData_NLen16Bit+0x46>
		SPI_Write_Byte( (uint8_t)(Data >> 8) );
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	0a1b      	lsrs	r3, r3, #8
 8002388:	b29b      	uxth	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	4618      	mov	r0, r3
 800238e:	f001 f9fb 	bl	8003788 <SPI_Write_Byte>
		SPI_Write_Byte( (uint8_t)(Data & 0XFF) );
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	4618      	mov	r0, r3
 8002398:	f001 f9f6 	bl	8003788 <SPI_Write_Byte>
	for(i = 0; i < DataLen; i++){
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	3301      	adds	r3, #1
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d3ec      	bcc.n	8002384 <LCD_WriteData_NLen16Bit+0x28>
	}	
	LCD_CS_1;
 80023aa:	2201      	movs	r2, #1
 80023ac:	2140      	movs	r1, #64	; 0x40
 80023ae:	4804      	ldr	r0, [pc, #16]	; (80023c0 <LCD_WriteData_NLen16Bit+0x64>)
 80023b0:	f7ff fa9e 	bl	80018f0 <HAL_GPIO_WritePin>
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40020000 	.word	0x40020000
 80023c0:	40020400 	.word	0x40020400

080023c4 <LCD_InitReg>:

/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_InitReg(void){	
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	//ST7735R Frame Rate
	LCD_WriteReg(0xB1); 
 80023c8:	20b1      	movs	r0, #177	; 0xb1
 80023ca:	f7ff ff83 	bl	80022d4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 80023ce:	2001      	movs	r0, #1
 80023d0:	f7ff ffa2 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 80023d4:	202c      	movs	r0, #44	; 0x2c
 80023d6:	f7ff ff9f 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 80023da:	202d      	movs	r0, #45	; 0x2d
 80023dc:	f7ff ff9c 	bl	8002318 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xB2); 
 80023e0:	20b2      	movs	r0, #178	; 0xb2
 80023e2:	f7ff ff77 	bl	80022d4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 80023e6:	2001      	movs	r0, #1
 80023e8:	f7ff ff96 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 80023ec:	202c      	movs	r0, #44	; 0x2c
 80023ee:	f7ff ff93 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 80023f2:	202d      	movs	r0, #45	; 0x2d
 80023f4:	f7ff ff90 	bl	8002318 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xB3); 
 80023f8:	20b3      	movs	r0, #179	; 0xb3
 80023fa:	f7ff ff6b 	bl	80022d4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 80023fe:	2001      	movs	r0, #1
 8002400:	f7ff ff8a 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 8002404:	202c      	movs	r0, #44	; 0x2c
 8002406:	f7ff ff87 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 800240a:	202d      	movs	r0, #45	; 0x2d
 800240c:	f7ff ff84 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x01); 
 8002410:	2001      	movs	r0, #1
 8002412:	f7ff ff81 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 8002416:	202c      	movs	r0, #44	; 0x2c
 8002418:	f7ff ff7e 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 800241c:	202d      	movs	r0, #45	; 0x2d
 800241e:	f7ff ff7b 	bl	8002318 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xB4); //Column inversion 
 8002422:	20b4      	movs	r0, #180	; 0xb4
 8002424:	f7ff ff56 	bl	80022d4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x07); 
 8002428:	2007      	movs	r0, #7
 800242a:	f7ff ff75 	bl	8002318 <LCD_WriteData_8Bit>
	
	//ST7735R Power Sequence
	LCD_WriteReg(0xC0); 
 800242e:	20c0      	movs	r0, #192	; 0xc0
 8002430:	f7ff ff50 	bl	80022d4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0xA2); 
 8002434:	20a2      	movs	r0, #162	; 0xa2
 8002436:	f7ff ff6f 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x02); 
 800243a:	2002      	movs	r0, #2
 800243c:	f7ff ff6c 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x84); 
 8002440:	2084      	movs	r0, #132	; 0x84
 8002442:	f7ff ff69 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteReg(0xC1); 
 8002446:	20c1      	movs	r0, #193	; 0xc1
 8002448:	f7ff ff44 	bl	80022d4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0xC5); 
 800244c:	20c5      	movs	r0, #197	; 0xc5
 800244e:	f7ff ff63 	bl	8002318 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xC2); 
 8002452:	20c2      	movs	r0, #194	; 0xc2
 8002454:	f7ff ff3e 	bl	80022d4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0A); 
 8002458:	200a      	movs	r0, #10
 800245a:	f7ff ff5d 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 
 800245e:	2000      	movs	r0, #0
 8002460:	f7ff ff5a 	bl	8002318 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xC3); 
 8002464:	20c3      	movs	r0, #195	; 0xc3
 8002466:	f7ff ff35 	bl	80022d4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x8A); 
 800246a:	208a      	movs	r0, #138	; 0x8a
 800246c:	f7ff ff54 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2A); 
 8002470:	202a      	movs	r0, #42	; 0x2a
 8002472:	f7ff ff51 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteReg(0xC4); 
 8002476:	20c4      	movs	r0, #196	; 0xc4
 8002478:	f7ff ff2c 	bl	80022d4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x8A); 
 800247c:	208a      	movs	r0, #138	; 0x8a
 800247e:	f7ff ff4b 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0xEE); 
 8002482:	20ee      	movs	r0, #238	; 0xee
 8002484:	f7ff ff48 	bl	8002318 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xC5); //VCOM 
 8002488:	20c5      	movs	r0, #197	; 0xc5
 800248a:	f7ff ff23 	bl	80022d4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0E); 
 800248e:	200e      	movs	r0, #14
 8002490:	f7ff ff42 	bl	8002318 <LCD_WriteData_8Bit>
	
	//ST7735R Gamma Sequence
	LCD_WriteReg(0xe0); 
 8002494:	20e0      	movs	r0, #224	; 0xe0
 8002496:	f7ff ff1d 	bl	80022d4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0f); 
 800249a:	200f      	movs	r0, #15
 800249c:	f7ff ff3c 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1a); 
 80024a0:	201a      	movs	r0, #26
 80024a2:	f7ff ff39 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x0f); 
 80024a6:	200f      	movs	r0, #15
 80024a8:	f7ff ff36 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x18); 
 80024ac:	2018      	movs	r0, #24
 80024ae:	f7ff ff33 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2f); 
 80024b2:	202f      	movs	r0, #47	; 0x2f
 80024b4:	f7ff ff30 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x28); 
 80024b8:	2028      	movs	r0, #40	; 0x28
 80024ba:	f7ff ff2d 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x20); 
 80024be:	2020      	movs	r0, #32
 80024c0:	f7ff ff2a 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x22); 
 80024c4:	2022      	movs	r0, #34	; 0x22
 80024c6:	f7ff ff27 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1f); 
 80024ca:	201f      	movs	r0, #31
 80024cc:	f7ff ff24 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1b); 
 80024d0:	201b      	movs	r0, #27
 80024d2:	f7ff ff21 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x23); 
 80024d6:	2023      	movs	r0, #35	; 0x23
 80024d8:	f7ff ff1e 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x37); 
 80024dc:	2037      	movs	r0, #55	; 0x37
 80024de:	f7ff ff1b 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 	
 80024e2:	2000      	movs	r0, #0
 80024e4:	f7ff ff18 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x07); 
 80024e8:	2007      	movs	r0, #7
 80024ea:	f7ff ff15 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x02); 
 80024ee:	2002      	movs	r0, #2
 80024f0:	f7ff ff12 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x10); 
 80024f4:	2010      	movs	r0, #16
 80024f6:	f7ff ff0f 	bl	8002318 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xe1); 
 80024fa:	20e1      	movs	r0, #225	; 0xe1
 80024fc:	f7ff feea 	bl	80022d4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0f); 
 8002500:	200f      	movs	r0, #15
 8002502:	f7ff ff09 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1b); 
 8002506:	201b      	movs	r0, #27
 8002508:	f7ff ff06 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x0f); 
 800250c:	200f      	movs	r0, #15
 800250e:	f7ff ff03 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x17); 
 8002512:	2017      	movs	r0, #23
 8002514:	f7ff ff00 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x33); 
 8002518:	2033      	movs	r0, #51	; 0x33
 800251a:	f7ff fefd 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2c); 
 800251e:	202c      	movs	r0, #44	; 0x2c
 8002520:	f7ff fefa 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x29); 
 8002524:	2029      	movs	r0, #41	; 0x29
 8002526:	f7ff fef7 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2e); 
 800252a:	202e      	movs	r0, #46	; 0x2e
 800252c:	f7ff fef4 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x30); 
 8002530:	2030      	movs	r0, #48	; 0x30
 8002532:	f7ff fef1 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x30); 
 8002536:	2030      	movs	r0, #48	; 0x30
 8002538:	f7ff feee 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x39); 
 800253c:	2039      	movs	r0, #57	; 0x39
 800253e:	f7ff feeb 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x3f); 
 8002542:	203f      	movs	r0, #63	; 0x3f
 8002544:	f7ff fee8 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 
 8002548:	2000      	movs	r0, #0
 800254a:	f7ff fee5 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x07); 
 800254e:	2007      	movs	r0, #7
 8002550:	f7ff fee2 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x03); 
 8002554:	2003      	movs	r0, #3
 8002556:	f7ff fedf 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x10);  
 800255a:	2010      	movs	r0, #16
 800255c:	f7ff fedc 	bl	8002318 <LCD_WriteData_8Bit>
		
	LCD_WriteReg(0xF0); //Enable test command  
 8002560:	20f0      	movs	r0, #240	; 0xf0
 8002562:	f7ff feb7 	bl	80022d4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 8002566:	2001      	movs	r0, #1
 8002568:	f7ff fed6 	bl	8002318 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xF6); //Disable ram power save mode 
 800256c:	20f6      	movs	r0, #246	; 0xf6
 800256e:	f7ff feb1 	bl	80022d4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x00); 
 8002572:	2000      	movs	r0, #0
 8002574:	f7ff fed0 	bl	8002318 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0x3A); //65k mode 
 8002578:	203a      	movs	r0, #58	; 0x3a
 800257a:	f7ff feab 	bl	80022d4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x05); 
 800257e:	2005      	movs	r0, #5
 8002580:	f7ff feca 	bl	8002318 <LCD_WriteData_8Bit>
		
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}

08002588 <LCD_SetGramScanWay>:
function:	Set the display scan and color transfer modes
parameter: 
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_SetGramScanWay(LCD_SCAN_DIR Scan_dir){		
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
	//Get the screen scan direction
	sLCD_DIS.LCD_Scan_Dir = Scan_dir;
 8002592:	4a34      	ldr	r2, [pc, #208]	; (8002664 <LCD_SetGramScanWay+0xdc>)
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	7113      	strb	r3, [r2, #4]
	
	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U){
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <LCD_SetGramScanWay+0x28>
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d005      	beq.n	80025b0 <LCD_SetGramScanWay+0x28>
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d002      	beq.n	80025b0 <LCD_SetGramScanWay+0x28>
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d10c      	bne.n	80025ca <LCD_SetGramScanWay+0x42>
		sLCD_DIS.LCD_Dis_Column	= LCD_HEIGHT ;
 80025b0:	4b2c      	ldr	r3, [pc, #176]	; (8002664 <LCD_SetGramScanWay+0xdc>)
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	801a      	strh	r2, [r3, #0]
		sLCD_DIS.LCD_Dis_Page = LCD_WIDTH ;		
 80025b6:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <LCD_SetGramScanWay+0xdc>)
 80025b8:	22a0      	movs	r2, #160	; 0xa0
 80025ba:	805a      	strh	r2, [r3, #2]
		sLCD_DIS.LCD_X_Adjust = LCD_X;
 80025bc:	4b29      	ldr	r3, [pc, #164]	; (8002664 <LCD_SetGramScanWay+0xdc>)
 80025be:	2202      	movs	r2, #2
 80025c0:	80da      	strh	r2, [r3, #6]
		sLCD_DIS.LCD_Y_Adjust = LCD_Y;
 80025c2:	4b28      	ldr	r3, [pc, #160]	; (8002664 <LCD_SetGramScanWay+0xdc>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	811a      	strh	r2, [r3, #8]
 80025c8:	e00b      	b.n	80025e2 <LCD_SetGramScanWay+0x5a>
	}else{
		sLCD_DIS.LCD_Dis_Column	= LCD_WIDTH ;
 80025ca:	4b26      	ldr	r3, [pc, #152]	; (8002664 <LCD_SetGramScanWay+0xdc>)
 80025cc:	22a0      	movs	r2, #160	; 0xa0
 80025ce:	801a      	strh	r2, [r3, #0]
		sLCD_DIS.LCD_Dis_Page = LCD_HEIGHT ;	
 80025d0:	4b24      	ldr	r3, [pc, #144]	; (8002664 <LCD_SetGramScanWay+0xdc>)
 80025d2:	2280      	movs	r2, #128	; 0x80
 80025d4:	805a      	strh	r2, [r3, #2]
		sLCD_DIS.LCD_X_Adjust = LCD_Y;
 80025d6:	4b23      	ldr	r3, [pc, #140]	; (8002664 <LCD_SetGramScanWay+0xdc>)
 80025d8:	2201      	movs	r2, #1
 80025da:	80da      	strh	r2, [r3, #6]
		sLCD_DIS.LCD_Y_Adjust = LCD_X;
 80025dc:	4b21      	ldr	r3, [pc, #132]	; (8002664 <LCD_SetGramScanWay+0xdc>)
 80025de:	2202      	movs	r2, #2
 80025e0:	811a      	strh	r2, [r3, #8]
	}
	
	// Gets the scan direction of GRAM
	uint16_t MemoryAccessReg_Data=0;  //0x36	
 80025e2:	2300      	movs	r3, #0
 80025e4:	81fb      	strh	r3, [r7, #14]
	switch (Scan_dir){				
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	2b07      	cmp	r3, #7
 80025ea:	d82b      	bhi.n	8002644 <LCD_SetGramScanWay+0xbc>
 80025ec:	a201      	add	r2, pc, #4	; (adr r2, 80025f4 <LCD_SetGramScanWay+0x6c>)
 80025ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f2:	bf00      	nop
 80025f4:	08002615 	.word	0x08002615
 80025f8:	0800261b 	.word	0x0800261b
 80025fc:	08002621 	.word	0x08002621
 8002600:	08002627 	.word	0x08002627
 8002604:	0800262d 	.word	0x0800262d
 8002608:	08002633 	.word	0x08002633
 800260c:	08002639 	.word	0x08002639
 8002610:	0800263f 	.word	0x0800263f
		case L2R_U2D:
			MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 8002614:	2300      	movs	r3, #0
 8002616:	81fb      	strh	r3, [r7, #14]
			break;
 8002618:	e014      	b.n	8002644 <LCD_SetGramScanWay+0xbc>
		case L2R_D2U:
			MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	81fb      	strh	r3, [r7, #14]
			break;
 800261e:	e011      	b.n	8002644 <LCD_SetGramScanWay+0xbc>
		case R2L_U2D://	0X4
			MemoryAccessReg_Data = 0x40 | 0x00;
 8002620:	2340      	movs	r3, #64	; 0x40
 8002622:	81fb      	strh	r3, [r7, #14]
			break;
 8002624:	e00e      	b.n	8002644 <LCD_SetGramScanWay+0xbc>
		case R2L_D2U://	0XC
			MemoryAccessReg_Data = 0x40 | 0x80;
 8002626:	23c0      	movs	r3, #192	; 0xc0
 8002628:	81fb      	strh	r3, [r7, #14]
			break;
 800262a:	e00b      	b.n	8002644 <LCD_SetGramScanWay+0xbc>
		case U2D_L2R://0X2
			MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 800262c:	2320      	movs	r3, #32
 800262e:	81fb      	strh	r3, [r7, #14]
			break;
 8002630:	e008      	b.n	8002644 <LCD_SetGramScanWay+0xbc>
		case U2D_R2L://0X6
			MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 8002632:	2360      	movs	r3, #96	; 0x60
 8002634:	81fb      	strh	r3, [r7, #14]
			break;
 8002636:	e005      	b.n	8002644 <LCD_SetGramScanWay+0xbc>
		case D2U_L2R://0XA
			MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 8002638:	23a0      	movs	r3, #160	; 0xa0
 800263a:	81fb      	strh	r3, [r7, #14]
			break;
 800263c:	e002      	b.n	8002644 <LCD_SetGramScanWay+0xbc>
		case D2U_R2L://0XE
			MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 800263e:	23e0      	movs	r3, #224	; 0xe0
 8002640:	81fb      	strh	r3, [r7, #14]
			break;
 8002642:	bf00      	nop
	}
	

	// Set the read / write scan direction of the frame memory
	LCD_WriteReg(0x36); //MX, MY, RGB mode 	
 8002644:	2036      	movs	r0, #54	; 0x36
 8002646:	f7ff fe45 	bl	80022d4 <LCD_WriteReg>
#if defined(LCD_1IN44)
	LCD_WriteData_8Bit( MemoryAccessReg_Data | 0x08);	//0x08 set RGB
#elif defined(LCD_1IN8)
	LCD_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 800264a:	89fb      	ldrh	r3, [r7, #14]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f023 0308 	bic.w	r3, r3, #8
 8002652:	b2db      	uxtb	r3, r3
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fe5f 	bl	8002318 <LCD_WriteData_8Bit>
#endif
	
}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000104 	.word	0x20000104

08002668 <LCD_Init>:

/********************************************************************************
function:	
			initialization
********************************************************************************/
void LCD_Init( LCD_SCAN_DIR Lcd_ScanDir ){	
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]
	//Turn on the backlight
	LCD_BL_1;
 8002672:	2201      	movs	r2, #1
 8002674:	2180      	movs	r1, #128	; 0x80
 8002676:	480f      	ldr	r0, [pc, #60]	; (80026b4 <LCD_Init+0x4c>)
 8002678:	f7ff f93a 	bl	80018f0 <HAL_GPIO_WritePin>
	
	//Hardware reset
	LCD_Reset(); 
 800267c:	f7ff fe08 	bl	8002290 <LCD_Reset>
	
	//Set the initialization register
	LCD_InitReg();
 8002680:	f7ff fea0 	bl	80023c4 <LCD_InitReg>
	
	//Set the display scan and color transfer modes	
	LCD_SetGramScanWay( Lcd_ScanDir );
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff7e 	bl	8002588 <LCD_SetGramScanWay>
	Driver_Delay_ms(200); 
 800268c:	20c8      	movs	r0, #200	; 0xc8
 800268e:	f001 f8b5 	bl	80037fc <Driver_Delay_ms>
	
	//sleep out
	LCD_WriteReg(0x11);
 8002692:	2011      	movs	r0, #17
 8002694:	f7ff fe1e 	bl	80022d4 <LCD_WriteReg>
	Driver_Delay_ms(120);
 8002698:	2078      	movs	r0, #120	; 0x78
 800269a:	f001 f8af 	bl	80037fc <Driver_Delay_ms>
	
	//Turn on the LCD display
	LCD_WriteReg(0x29);	
 800269e:	2029      	movs	r0, #41	; 0x29
 80026a0:	f7ff fe18 	bl	80022d4 <LCD_WriteReg>

	//clear
	LCD_Clear(WHITE);	
 80026a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026a8:	f000 f8d8 	bl	800285c <LCD_Clear>
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40020800 	.word	0x40020800

080026b8 <LCD_SetWindows>:
		Xstart 	:   X direction Start coordinates
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend ){
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4604      	mov	r4, r0
 80026c0:	4608      	mov	r0, r1
 80026c2:	4611      	mov	r1, r2
 80026c4:	461a      	mov	r2, r3
 80026c6:	4623      	mov	r3, r4
 80026c8:	80fb      	strh	r3, [r7, #6]
 80026ca:	4603      	mov	r3, r0
 80026cc:	80bb      	strh	r3, [r7, #4]
 80026ce:	460b      	mov	r3, r1
 80026d0:	807b      	strh	r3, [r7, #2]
 80026d2:	4613      	mov	r3, r2
 80026d4:	803b      	strh	r3, [r7, #0]

	//set the X coordinates
	LCD_WriteReg ( 0x2A ); 				
 80026d6:	202a      	movs	r0, #42	; 0x2a
 80026d8:	f7ff fdfc 	bl	80022d4 <LCD_WriteReg>
	LCD_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 80026dc:	2000      	movs	r0, #0
 80026de:	f7ff fe1b 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (Xstart & 0xff) + sLCD_DIS.LCD_X_Adjust);			//Set the horizontal starting point to the low octet
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <LCD_SetWindows+0xa8>)
 80026e8:	88db      	ldrh	r3, [r3, #6]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fe11 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7ff fe0e 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_DIS.LCD_X_Adjust);	//Set the horizontal end to the low octet
 80026fc:	887b      	ldrh	r3, [r7, #2]
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	4b17      	ldr	r3, [pc, #92]	; (8002760 <LCD_SetWindows+0xa8>)
 8002702:	88db      	ldrh	r3, [r3, #6]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	4413      	add	r3, r2
 8002708:	b2db      	uxtb	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fe02 	bl	8002318 <LCD_WriteData_8Bit>

	//set the Y coordinates
	LCD_WriteReg ( 0x2B );
 8002714:	202b      	movs	r0, #43	; 0x2b
 8002716:	f7ff fddd 	bl	80022d4 <LCD_WriteReg>
	LCD_WriteData_8Bit ( 0x00 );
 800271a:	2000      	movs	r0, #0
 800271c:	f7ff fdfc 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (Ystart & 0xff) + sLCD_DIS.LCD_Y_Adjust);
 8002720:	88bb      	ldrh	r3, [r7, #4]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <LCD_SetWindows+0xa8>)
 8002726:	891b      	ldrh	r3, [r3, #8]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	4413      	add	r3, r2
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fdf2 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( 0x00 );
 8002734:	2000      	movs	r0, #0
 8002736:	f7ff fdef 	bl	8002318 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_DIS.LCD_Y_Adjust);
 800273a:	883b      	ldrh	r3, [r7, #0]
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <LCD_SetWindows+0xa8>)
 8002740:	891b      	ldrh	r3, [r3, #8]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	4413      	add	r3, r2
 8002746:	b2db      	uxtb	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b2db      	uxtb	r3, r3
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fde3 	bl	8002318 <LCD_WriteData_8Bit>
		
	LCD_WriteReg(0x2C);	
 8002752:	202c      	movs	r0, #44	; 0x2c
 8002754:	f7ff fdbe 	bl	80022d4 <LCD_WriteReg>
	
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bd90      	pop	{r4, r7, pc}
 8002760:	20000104 	.word	0x20000104

08002764 <LCD_SetCursor>:
function:	Set the display point (Xpoint, Ypoint)
parameter: 
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_SetCursor ( POINT Xpoint, POINT Ypoint ){
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	460a      	mov	r2, r1
 800276e:	80fb      	strh	r3, [r7, #6]
 8002770:	4613      	mov	r3, r2
 8002772:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 8002774:	88bb      	ldrh	r3, [r7, #4]
 8002776:	88fa      	ldrh	r2, [r7, #6]
 8002778:	88b9      	ldrh	r1, [r7, #4]
 800277a:	88f8      	ldrh	r0, [r7, #6]
 800277c:	f7ff ff9c 	bl	80026b8 <LCD_SetWindows>
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <LCD_SetColor>:
function:	Set show color
parameter: 
		Color  :   Set show color
********************************************************************************/
//static void LCD_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint){		
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	80fb      	strh	r3, [r7, #6]
 8002792:	460b      	mov	r3, r1
 8002794:	80bb      	strh	r3, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	807b      	strh	r3, [r7, #2]
	LCD_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint); 
 800279a:	88bb      	ldrh	r3, [r7, #4]
 800279c:	887a      	ldrh	r2, [r7, #2]
 800279e:	fb02 f203 	mul.w	r2, r2, r3
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fdd8 	bl	800235c <LCD_WriteData_NLen16Bit>
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <LCD_SetPointlColor>:
parameter: 
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_SetPointlColor ( POINT Xpoint, POINT Ypoint, COLOR Color ){	
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	80fb      	strh	r3, [r7, #6]
 80027be:	460b      	mov	r3, r1
 80027c0:	80bb      	strh	r3, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	807b      	strh	r3, [r7, #2]
	if ( ( Xpoint <= sLCD_DIS.LCD_Dis_Column ) && ( Ypoint <= sLCD_DIS.LCD_Dis_Page ) ){		
 80027c6:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <LCD_SetPointlColor+0x48>)
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	88fa      	ldrh	r2, [r7, #6]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d810      	bhi.n	80027f2 <LCD_SetPointlColor+0x3e>
 80027d0:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <LCD_SetPointlColor+0x48>)
 80027d2:	885b      	ldrh	r3, [r3, #2]
 80027d4:	88ba      	ldrh	r2, [r7, #4]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d80b      	bhi.n	80027f2 <LCD_SetPointlColor+0x3e>
		LCD_SetCursor (Xpoint, Ypoint);		
 80027da:	88ba      	ldrh	r2, [r7, #4]
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ffbf 	bl	8002764 <LCD_SetCursor>
		LCD_SetColor ( Color , 1 , 1);
 80027e6:	887b      	ldrh	r3, [r7, #2]
 80027e8:	2201      	movs	r2, #1
 80027ea:	2101      	movs	r1, #1
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ffcb 	bl	8002788 <LCD_SetColor>
	}
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000104 	.word	0x20000104

08002800 <LCD_SetArealColor>:
		Ystart :   Start point y coordinate
		Xend   :   End point coordinates
		Yend   :   End point coordinates
		Color  :   Set the color
********************************************************************************/
void LCD_SetArealColor (POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,	COLOR  Color){	
 8002800:	b590      	push	{r4, r7, lr}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4604      	mov	r4, r0
 8002808:	4608      	mov	r0, r1
 800280a:	4611      	mov	r1, r2
 800280c:	461a      	mov	r2, r3
 800280e:	4623      	mov	r3, r4
 8002810:	80fb      	strh	r3, [r7, #6]
 8002812:	4603      	mov	r3, r0
 8002814:	80bb      	strh	r3, [r7, #4]
 8002816:	460b      	mov	r3, r1
 8002818:	807b      	strh	r3, [r7, #2]
 800281a:	4613      	mov	r3, r2
 800281c:	803b      	strh	r3, [r7, #0]
	if((Xend > Xstart) && (Yend > Ystart)){			
 800281e:	887a      	ldrh	r2, [r7, #2]
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	429a      	cmp	r2, r3
 8002824:	d915      	bls.n	8002852 <LCD_SetArealColor+0x52>
 8002826:	883a      	ldrh	r2, [r7, #0]
 8002828:	88bb      	ldrh	r3, [r7, #4]
 800282a:	429a      	cmp	r2, r3
 800282c:	d911      	bls.n	8002852 <LCD_SetArealColor+0x52>
		LCD_SetWindows( Xstart , Ystart , Xend , Yend  );
 800282e:	883b      	ldrh	r3, [r7, #0]
 8002830:	887a      	ldrh	r2, [r7, #2]
 8002832:	88b9      	ldrh	r1, [r7, #4]
 8002834:	88f8      	ldrh	r0, [r7, #6]
 8002836:	f7ff ff3f 	bl	80026b8 <LCD_SetWindows>
		LCD_SetColor ( Color ,Xend - Xstart , Yend - Ystart );
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	b299      	uxth	r1, r3
 8002842:	883a      	ldrh	r2, [r7, #0]
 8002844:	88bb      	ldrh	r3, [r7, #4]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	b29a      	uxth	r2, r3
 800284a:	8b3b      	ldrh	r3, [r7, #24]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff9b 	bl	8002788 <LCD_SetColor>
	}
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bd90      	pop	{r4, r7, pc}
	...

0800285c <LCD_Clear>:

/********************************************************************************
function:	
			Clear screen 
********************************************************************************/
void LCD_Clear(COLOR  Color){
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af02      	add	r7, sp, #8
 8002862:	4603      	mov	r3, r0
 8002864:	80fb      	strh	r3, [r7, #6]

	LCD_SetArealColor(0,0, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page  , Color);	
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <LCD_Clear+0x28>)
 8002868:	881a      	ldrh	r2, [r3, #0]
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <LCD_Clear+0x28>)
 800286c:	8859      	ldrh	r1, [r3, #2]
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	460b      	mov	r3, r1
 8002874:	2100      	movs	r1, #0
 8002876:	2000      	movs	r0, #0
 8002878:	f7ff ffc2 	bl	8002800 <LCD_SetArealColor>

}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000104 	.word	0x20000104

08002888 <LCD_DrawPoint>:
			Dot_Pixel	:	point size
********************************************************************************/
void LCD_DrawPoint(	POINT Xpoint, POINT Ypoint, 
					COLOR Color, 
					DOT_PIXEL Dot_Pixel,
					DOT_STYLE DOT_STYLE){		
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	4604      	mov	r4, r0
 8002890:	4608      	mov	r0, r1
 8002892:	4611      	mov	r1, r2
 8002894:	461a      	mov	r2, r3
 8002896:	4623      	mov	r3, r4
 8002898:	80fb      	strh	r3, [r7, #6]
 800289a:	4603      	mov	r3, r0
 800289c:	80bb      	strh	r3, [r7, #4]
 800289e:	460b      	mov	r3, r1
 80028a0:	807b      	strh	r3, [r7, #2]
 80028a2:	4613      	mov	r3, r2
 80028a4:	707b      	strb	r3, [r7, #1]
						
	if ( Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page ) {
 80028a6:	4b33      	ldr	r3, [pc, #204]	; (8002974 <LCD_DrawPoint+0xec>)
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	88fa      	ldrh	r2, [r7, #6]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d85c      	bhi.n	800296a <LCD_DrawPoint+0xe2>
 80028b0:	4b30      	ldr	r3, [pc, #192]	; (8002974 <LCD_DrawPoint+0xec>)
 80028b2:	885b      	ldrh	r3, [r3, #2]
 80028b4:	88ba      	ldrh	r2, [r7, #4]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d857      	bhi.n	800296a <LCD_DrawPoint+0xe2>
		return;
	}
	
	uint16_t XDir_Num ,YDir_Num;
	if(DOT_STYLE == DOT_FILL_AROUND){
 80028ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d12c      	bne.n	800291c <LCD_DrawPoint+0x94>
		for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1 ; XDir_Num++){
 80028c2:	2300      	movs	r3, #0
 80028c4:	81fb      	strh	r3, [r7, #14]
 80028c6:	e022      	b.n	800290e <LCD_DrawPoint+0x86>
			for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1 ; YDir_Num++){
 80028c8:	2300      	movs	r3, #0
 80028ca:	81bb      	strh	r3, [r7, #12]
 80028cc:	e016      	b.n	80028fc <LCD_DrawPoint+0x74>
				LCD_SetPointlColor( Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 80028ce:	88fa      	ldrh	r2, [r7, #6]
 80028d0:	89fb      	ldrh	r3, [r7, #14]
 80028d2:	4413      	add	r3, r2
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	787b      	ldrb	r3, [r7, #1]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	b298      	uxth	r0, r3
 80028de:	88ba      	ldrh	r2, [r7, #4]
 80028e0:	89bb      	ldrh	r3, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	787b      	ldrb	r3, [r7, #1]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	4619      	mov	r1, r3
 80028f2:	f7ff ff5f 	bl	80027b4 <LCD_SetPointlColor>
			for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1 ; YDir_Num++){
 80028f6:	89bb      	ldrh	r3, [r7, #12]
 80028f8:	3301      	adds	r3, #1
 80028fa:	81bb      	strh	r3, [r7, #12]
 80028fc:	89ba      	ldrh	r2, [r7, #12]
 80028fe:	787b      	ldrb	r3, [r7, #1]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	3b01      	subs	r3, #1
 8002904:	429a      	cmp	r2, r3
 8002906:	dbe2      	blt.n	80028ce <LCD_DrawPoint+0x46>
		for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1 ; XDir_Num++){
 8002908:	89fb      	ldrh	r3, [r7, #14]
 800290a:	3301      	adds	r3, #1
 800290c:	81fb      	strh	r3, [r7, #14]
 800290e:	89fa      	ldrh	r2, [r7, #14]
 8002910:	787b      	ldrb	r3, [r7, #1]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	3b01      	subs	r3, #1
 8002916:	429a      	cmp	r2, r3
 8002918:	dbd6      	blt.n	80028c8 <LCD_DrawPoint+0x40>
 800291a:	e027      	b.n	800296c <LCD_DrawPoint+0xe4>
			}
		}
	}else{
		for(XDir_Num = 0; XDir_Num <  Dot_Pixel ; XDir_Num++){
 800291c:	2300      	movs	r3, #0
 800291e:	81fb      	strh	r3, [r7, #14]
 8002920:	e01d      	b.n	800295e <LCD_DrawPoint+0xd6>
			for(YDir_Num = 0; YDir_Num <  Dot_Pixel ; YDir_Num++){
 8002922:	2300      	movs	r3, #0
 8002924:	81bb      	strh	r3, [r7, #12]
 8002926:	e012      	b.n	800294e <LCD_DrawPoint+0xc6>
				LCD_SetPointlColor( Xpoint + XDir_Num - 1 , Ypoint + YDir_Num -1 , Color);
 8002928:	88fa      	ldrh	r2, [r7, #6]
 800292a:	89fb      	ldrh	r3, [r7, #14]
 800292c:	4413      	add	r3, r2
 800292e:	b29b      	uxth	r3, r3
 8002930:	3b01      	subs	r3, #1
 8002932:	b298      	uxth	r0, r3
 8002934:	88ba      	ldrh	r2, [r7, #4]
 8002936:	89bb      	ldrh	r3, [r7, #12]
 8002938:	4413      	add	r3, r2
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29b      	uxth	r3, r3
 8002940:	887a      	ldrh	r2, [r7, #2]
 8002942:	4619      	mov	r1, r3
 8002944:	f7ff ff36 	bl	80027b4 <LCD_SetPointlColor>
			for(YDir_Num = 0; YDir_Num <  Dot_Pixel ; YDir_Num++){
 8002948:	89bb      	ldrh	r3, [r7, #12]
 800294a:	3301      	adds	r3, #1
 800294c:	81bb      	strh	r3, [r7, #12]
 800294e:	787b      	ldrb	r3, [r7, #1]
 8002950:	b29b      	uxth	r3, r3
 8002952:	89ba      	ldrh	r2, [r7, #12]
 8002954:	429a      	cmp	r2, r3
 8002956:	d3e7      	bcc.n	8002928 <LCD_DrawPoint+0xa0>
		for(XDir_Num = 0; XDir_Num <  Dot_Pixel ; XDir_Num++){
 8002958:	89fb      	ldrh	r3, [r7, #14]
 800295a:	3301      	adds	r3, #1
 800295c:	81fb      	strh	r3, [r7, #14]
 800295e:	787b      	ldrb	r3, [r7, #1]
 8002960:	b29b      	uxth	r3, r3
 8002962:	89fa      	ldrh	r2, [r7, #14]
 8002964:	429a      	cmp	r2, r3
 8002966:	d3dc      	bcc.n	8002922 <LCD_DrawPoint+0x9a>
 8002968:	e000      	b.n	800296c <LCD_DrawPoint+0xe4>
		return;
 800296a:	bf00      	nop
			}
		}
	}	
}
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	bd90      	pop	{r4, r7, pc}
 8002972:	bf00      	nop
 8002974:	20000104 	.word	0x20000104

08002978 <LCD_DrawLine>:
********************************************************************************/
void LCD_DrawLine ( POINT Xstart, POINT Ystart, 
					POINT Xend, POINT Yend, 
					COLOR Color,
					LINE_STYLE Line_Style,
					DOT_PIXEL Dot_Pixel){
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b08d      	sub	sp, #52	; 0x34
 800297c:	af02      	add	r7, sp, #8
 800297e:	4604      	mov	r4, r0
 8002980:	4608      	mov	r0, r1
 8002982:	4611      	mov	r1, r2
 8002984:	461a      	mov	r2, r3
 8002986:	4623      	mov	r3, r4
 8002988:	80fb      	strh	r3, [r7, #6]
 800298a:	4603      	mov	r3, r0
 800298c:	80bb      	strh	r3, [r7, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	807b      	strh	r3, [r7, #2]
 8002992:	4613      	mov	r3, r2
 8002994:	803b      	strh	r3, [r7, #0]
						
	if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page || Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8002996:	4b4f      	ldr	r3, [pc, #316]	; (8002ad4 <LCD_DrawLine+0x15c>)
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	88fa      	ldrh	r2, [r7, #6]
 800299c:	429a      	cmp	r2, r3
 800299e:	f200 8091 	bhi.w	8002ac4 <LCD_DrawLine+0x14c>
 80029a2:	4b4c      	ldr	r3, [pc, #304]	; (8002ad4 <LCD_DrawLine+0x15c>)
 80029a4:	885b      	ldrh	r3, [r3, #2]
 80029a6:	88ba      	ldrh	r2, [r7, #4]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	f200 808b 	bhi.w	8002ac4 <LCD_DrawLine+0x14c>
 80029ae:	4b49      	ldr	r3, [pc, #292]	; (8002ad4 <LCD_DrawLine+0x15c>)
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	f200 8085 	bhi.w	8002ac4 <LCD_DrawLine+0x14c>
 80029ba:	4b46      	ldr	r3, [pc, #280]	; (8002ad4 <LCD_DrawLine+0x15c>)
 80029bc:	885b      	ldrh	r3, [r3, #2]
 80029be:	883a      	ldrh	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d87f      	bhi.n	8002ac4 <LCD_DrawLine+0x14c>
		return;
	}	
	
	POINT Xpoint = Xstart; 
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	84fb      	strh	r3, [r7, #38]	; 0x26
	POINT Ypoint = Ystart; 
 80029c8:	88bb      	ldrh	r3, [r7, #4]
 80029ca:	84bb      	strh	r3, [r7, #36]	; 0x24
	int32_t dx = (int32_t)Xend - (int32_t)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 80029cc:	887a      	ldrh	r2, [r7, #2]
 80029ce:	88fb      	ldrh	r3, [r7, #6]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	bfb8      	it	lt
 80029d6:	425b      	neglt	r3, r3
 80029d8:	61bb      	str	r3, [r7, #24]
	int32_t dy = (int32_t)Yend - (int32_t)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 80029da:	883a      	ldrh	r2, [r7, #0]
 80029dc:	88bb      	ldrh	r3, [r7, #4]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bfb8      	it	lt
 80029e4:	425b      	neglt	r3, r3
 80029e6:	425b      	negs	r3, r3
 80029e8:	617b      	str	r3, [r7, #20]
	
	// Increment direction, 1 is positive, -1 is counter;
	int32_t XAddway = Xstart < Xend ? 1 : -1;
 80029ea:	88fa      	ldrh	r2, [r7, #6]
 80029ec:	887b      	ldrh	r3, [r7, #2]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d201      	bcs.n	80029f6 <LCD_DrawLine+0x7e>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e001      	b.n	80029fa <LCD_DrawLine+0x82>
 80029f6:	f04f 33ff 	mov.w	r3, #4294967295
 80029fa:	613b      	str	r3, [r7, #16]
	int32_t YAddway = Ystart < Yend ? 1 : -1;
 80029fc:	88ba      	ldrh	r2, [r7, #4]
 80029fe:	883b      	ldrh	r3, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d201      	bcs.n	8002a08 <LCD_DrawLine+0x90>
 8002a04:	2301      	movs	r3, #1
 8002a06:	e001      	b.n	8002a0c <LCD_DrawLine+0x94>
 8002a08:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0c:	60fb      	str	r3, [r7, #12]
	
	//Cumulative error
	int32_t Esp = dx + dy;
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	4413      	add	r3, r2
 8002a14:	623b      	str	r3, [r7, #32]
	int8_t Line_Style_Temp = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	77fb      	strb	r3, [r7, #31]

	for (;;){
		Line_Style_Temp++;
 8002a1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	3301      	adds	r3, #1
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	77fb      	strb	r3, [r7, #31]
		//Painted dotted line, 2 point is really virtual
		if(Line_Style == LINE_DOTTED && Line_Style_Temp %3 == 0){
 8002a26:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d11b      	bne.n	8002a66 <LCD_DrawLine+0xee>
 8002a2e:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8002a32:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <LCD_DrawLine+0x160>)
 8002a34:	fb83 3102 	smull	r3, r1, r3, r2
 8002a38:	17d3      	asrs	r3, r2, #31
 8002a3a:	1ac9      	subs	r1, r1, r3
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	440b      	add	r3, r1
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	b25b      	sxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10d      	bne.n	8002a66 <LCD_DrawLine+0xee>
			LCD_DrawPoint( Xpoint, Ypoint, LCD_BACKGROUND, Dot_Pixel, DOT_STYLE_DFT);
 8002a4a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002a4e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002a50:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002a52:	2301      	movs	r3, #1
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	4613      	mov	r3, r2
 8002a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a5c:	f7ff ff14 	bl	8002888 <LCD_DrawPoint>
			Line_Style_Temp = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	77fb      	strb	r3, [r7, #31]
 8002a64:	e009      	b.n	8002a7a <LCD_DrawLine+0x102>
		}else{
			LCD_DrawPoint( Xpoint, Ypoint, Color, Dot_Pixel, DOT_STYLE_DFT);
 8002a66:	f897 4040 	ldrb.w	r4, [r7, #64]	; 0x40
 8002a6a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002a6c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002a6e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002a70:	2301      	movs	r3, #1
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	4623      	mov	r3, r4
 8002a76:	f7ff ff07 	bl	8002888 <LCD_DrawPoint>
		}	
        if (2 * Esp >= dy) {
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	dc0c      	bgt.n	8002a9e <LCD_DrawLine+0x126>
			if (Xpoint == Xend) break;			
 8002a84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d01d      	beq.n	8002ac8 <LCD_DrawLine+0x150>
            Esp += dy; 
 8002a8c:	6a3a      	ldr	r2, [r7, #32]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	4413      	add	r3, r2
 8002a92:	623b      	str	r3, [r7, #32]
			Xpoint += XAddway;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a9a:	4413      	add	r3, r2
 8002a9c:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	dbb8      	blt.n	8002a1a <LCD_DrawLine+0xa2>
			if (Ypoint == Yend) break;	
 8002aa8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002aaa:	883b      	ldrh	r3, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d00d      	beq.n	8002acc <LCD_DrawLine+0x154>
            Esp += dx; 
 8002ab0:	6a3a      	ldr	r2, [r7, #32]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	623b      	str	r3, [r7, #32]
			Ypoint += YAddway;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002abe:	4413      	add	r3, r2
 8002ac0:	84bb      	strh	r3, [r7, #36]	; 0x24
		Line_Style_Temp++;
 8002ac2:	e7aa      	b.n	8002a1a <LCD_DrawLine+0xa2>
		return;
 8002ac4:	bf00      	nop
 8002ac6:	e002      	b.n	8002ace <LCD_DrawLine+0x156>
			if (Xpoint == Xend) break;			
 8002ac8:	bf00      	nop
 8002aca:	e000      	b.n	8002ace <LCD_DrawLine+0x156>
			if (Ypoint == Yend) break;	
 8002acc:	bf00      	nop
        }
	}
}   
 8002ace:	372c      	adds	r7, #44	; 0x2c
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd90      	pop	{r4, r7, pc}
 8002ad4:	20000104 	.word	0x20000104
 8002ad8:	55555556 	.word	0x55555556

08002adc <LCD_DrawRectangle>:
********************************************************************************/
void LCD_DrawRectangle ( 	POINT Xstart, POINT Ystart, 
							POINT Xend, POINT Yend, 
							COLOR Color, 
							DRAW_FILL Filled,
							DOT_PIXEL Dot_Pixel ){
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af04      	add	r7, sp, #16
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	4608      	mov	r0, r1
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4623      	mov	r3, r4
 8002aec:	80fb      	strh	r3, [r7, #6]
 8002aee:	4603      	mov	r3, r0
 8002af0:	80bb      	strh	r3, [r7, #4]
 8002af2:	460b      	mov	r3, r1
 8002af4:	807b      	strh	r3, [r7, #2]
 8002af6:	4613      	mov	r3, r2
 8002af8:	803b      	strh	r3, [r7, #0]
					
	if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page || Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8002afa:	4b2f      	ldr	r3, [pc, #188]	; (8002bb8 <LCD_DrawRectangle+0xdc>)
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	88fa      	ldrh	r2, [r7, #6]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d854      	bhi.n	8002bae <LCD_DrawRectangle+0xd2>
 8002b04:	4b2c      	ldr	r3, [pc, #176]	; (8002bb8 <LCD_DrawRectangle+0xdc>)
 8002b06:	885b      	ldrh	r3, [r3, #2]
 8002b08:	88ba      	ldrh	r2, [r7, #4]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d84f      	bhi.n	8002bae <LCD_DrawRectangle+0xd2>
 8002b0e:	4b2a      	ldr	r3, [pc, #168]	; (8002bb8 <LCD_DrawRectangle+0xdc>)
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	887a      	ldrh	r2, [r7, #2]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d84a      	bhi.n	8002bae <LCD_DrawRectangle+0xd2>
 8002b18:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <LCD_DrawRectangle+0xdc>)
 8002b1a:	885b      	ldrh	r3, [r3, #2]
 8002b1c:	883a      	ldrh	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d845      	bhi.n	8002bae <LCD_DrawRectangle+0xd2>
		return;
	}	
	
	if ( Filled ){
 8002b22:	7f3b      	ldrb	r3, [r7, #28]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d009      	beq.n	8002b3c <LCD_DrawRectangle+0x60>
		LCD_SetArealColor( Xstart, Ystart, Xend, Yend, Color);
 8002b28:	883c      	ldrh	r4, [r7, #0]
 8002b2a:	887a      	ldrh	r2, [r7, #2]
 8002b2c:	88b9      	ldrh	r1, [r7, #4]
 8002b2e:	88f8      	ldrh	r0, [r7, #6]
 8002b30:	8b3b      	ldrh	r3, [r7, #24]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	4623      	mov	r3, r4
 8002b36:	f7ff fe63 	bl	8002800 <LCD_SetArealColor>
 8002b3a:	e039      	b.n	8002bb0 <LCD_DrawRectangle+0xd4>
	}else{
		LCD_DrawLine ( Xstart, Ystart, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 8002b3c:	88bc      	ldrh	r4, [r7, #4]
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	88b9      	ldrh	r1, [r7, #4]
 8002b42:	88f8      	ldrh	r0, [r7, #6]
 8002b44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b48:	9302      	str	r3, [sp, #8]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	9301      	str	r3, [sp, #4]
 8002b4e:	8b3b      	ldrh	r3, [r7, #24]
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	4623      	mov	r3, r4
 8002b54:	f7ff ff10 	bl	8002978 <LCD_DrawLine>
		LCD_DrawLine ( Xstart, Ystart, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 8002b58:	883c      	ldrh	r4, [r7, #0]
 8002b5a:	88fa      	ldrh	r2, [r7, #6]
 8002b5c:	88b9      	ldrh	r1, [r7, #4]
 8002b5e:	88f8      	ldrh	r0, [r7, #6]
 8002b60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b64:	9302      	str	r3, [sp, #8]
 8002b66:	2300      	movs	r3, #0
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	8b3b      	ldrh	r3, [r7, #24]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	4623      	mov	r3, r4
 8002b70:	f7ff ff02 	bl	8002978 <LCD_DrawLine>
		LCD_DrawLine ( Xend, Yend, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 8002b74:	88bc      	ldrh	r4, [r7, #4]
 8002b76:	887a      	ldrh	r2, [r7, #2]
 8002b78:	8839      	ldrh	r1, [r7, #0]
 8002b7a:	8878      	ldrh	r0, [r7, #2]
 8002b7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b80:	9302      	str	r3, [sp, #8]
 8002b82:	2300      	movs	r3, #0
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	8b3b      	ldrh	r3, [r7, #24]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	4623      	mov	r3, r4
 8002b8c:	f7ff fef4 	bl	8002978 <LCD_DrawLine>
		LCD_DrawLine ( Xend, Yend, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);		
 8002b90:	883c      	ldrh	r4, [r7, #0]
 8002b92:	88fa      	ldrh	r2, [r7, #6]
 8002b94:	8839      	ldrh	r1, [r7, #0]
 8002b96:	8878      	ldrh	r0, [r7, #2]
 8002b98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b9c:	9302      	str	r3, [sp, #8]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	8b3b      	ldrh	r3, [r7, #24]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	4623      	mov	r3, r4
 8002ba8:	f7ff fee6 	bl	8002978 <LCD_DrawLine>
 8002bac:	e000      	b.n	8002bb0 <LCD_DrawRectangle+0xd4>
		return;
 8002bae:	bf00      	nop
	}
}
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd90      	pop	{r4, r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000104 	.word	0x20000104

08002bbc <LCD_DrawCircle>:
			Filled : Whether it is filled: 1 filling 0��Do not
********************************************************************************/
void LCD_DrawCircle ( 	POINT X_Center, POINT Y_Center, LENGTH Radius, 
						COLOR Color, 
						DRAW_FILL  Draw_Fill ,
						DOT_PIXEL Dot_Pixel ){
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4623      	mov	r3, r4
 8002bcc:	80fb      	strh	r3, [r7, #6]
 8002bce:	4603      	mov	r3, r0
 8002bd0:	80bb      	strh	r3, [r7, #4]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	807b      	strh	r3, [r7, #2]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	803b      	strh	r3, [r7, #0]
							
	if (X_Center > sLCD_DIS.LCD_Dis_Column || Y_Center >= sLCD_DIS.LCD_Dis_Page) {
 8002bda:	4ba5      	ldr	r3, [pc, #660]	; (8002e70 <LCD_DrawCircle+0x2b4>)
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	88fa      	ldrh	r2, [r7, #6]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	f200 8169 	bhi.w	8002eb8 <LCD_DrawCircle+0x2fc>
 8002be6:	4ba2      	ldr	r3, [pc, #648]	; (8002e70 <LCD_DrawCircle+0x2b4>)
 8002be8:	885b      	ldrh	r3, [r3, #2]
 8002bea:	88ba      	ldrh	r2, [r7, #4]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	f080 8163 	bcs.w	8002eb8 <LCD_DrawCircle+0x2fc>
		return;
	}						
	
	//Draw a circle from (0, R) as a starting point
	int16_t XCurrent, YCurrent;
	XCurrent = 0; 
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	81fb      	strh	r3, [r7, #14]
	YCurrent = Radius;	
 8002bf6:	887b      	ldrh	r3, [r7, #2]
 8002bf8:	81bb      	strh	r3, [r7, #12]
	
	//Cumulative error,judge the next point of the logo
	int16_t Esp = 3 - ( Radius << 1 );
 8002bfa:	887b      	ldrh	r3, [r7, #2]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f1c3 0303 	rsb	r3, r3, #3
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	817b      	strh	r3, [r7, #10]
	
	int16_t sCountY;
	if ( Draw_Fill ){
 8002c08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 814b 	beq.w	8002ea8 <LCD_DrawCircle+0x2ec>
		while ( XCurrent <= YCurrent ){ //Realistic circles			
 8002c12:	e096      	b.n	8002d42 <LCD_DrawCircle+0x186>
			for ( sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {                      
 8002c14:	89fb      	ldrh	r3, [r7, #14]
 8002c16:	813b      	strh	r3, [r7, #8]
 8002c18:	e065      	b.n	8002ce6 <LCD_DrawCircle+0x12a>
				LCD_SetPointlColor ( X_Center + XCurrent, Y_Center + sCountY,   Color );           //1
 8002c1a:	89fa      	ldrh	r2, [r7, #14]
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	4413      	add	r3, r2
 8002c20:	b298      	uxth	r0, r3
 8002c22:	893a      	ldrh	r2, [r7, #8]
 8002c24:	88bb      	ldrh	r3, [r7, #4]
 8002c26:	4413      	add	r3, r2
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	883a      	ldrh	r2, [r7, #0]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f7ff fdc1 	bl	80027b4 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - XCurrent, Y_Center + sCountY,   Color );           //2       
 8002c32:	89fb      	ldrh	r3, [r7, #14]
 8002c34:	88fa      	ldrh	r2, [r7, #6]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	b298      	uxth	r0, r3
 8002c3a:	893a      	ldrh	r2, [r7, #8]
 8002c3c:	88bb      	ldrh	r3, [r7, #4]
 8002c3e:	4413      	add	r3, r2
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	883a      	ldrh	r2, [r7, #0]
 8002c44:	4619      	mov	r1, r3
 8002c46:	f7ff fdb5 	bl	80027b4 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - sCountY,   Y_Center + XCurrent, Color );           //3
 8002c4a:	893b      	ldrh	r3, [r7, #8]
 8002c4c:	88fa      	ldrh	r2, [r7, #6]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	b298      	uxth	r0, r3
 8002c52:	89fa      	ldrh	r2, [r7, #14]
 8002c54:	88bb      	ldrh	r3, [r7, #4]
 8002c56:	4413      	add	r3, r2
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	883a      	ldrh	r2, [r7, #0]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f7ff fda9 	bl	80027b4 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - sCountY,   Y_Center - XCurrent, Color );           //4
 8002c62:	893b      	ldrh	r3, [r7, #8]
 8002c64:	88fa      	ldrh	r2, [r7, #6]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	b298      	uxth	r0, r3
 8002c6a:	89fb      	ldrh	r3, [r7, #14]
 8002c6c:	88ba      	ldrh	r2, [r7, #4]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	883a      	ldrh	r2, [r7, #0]
 8002c74:	4619      	mov	r1, r3
 8002c76:	f7ff fd9d 	bl	80027b4 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - XCurrent, Y_Center - sCountY,   Color );           //5    
 8002c7a:	89fb      	ldrh	r3, [r7, #14]
 8002c7c:	88fa      	ldrh	r2, [r7, #6]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	b298      	uxth	r0, r3
 8002c82:	893b      	ldrh	r3, [r7, #8]
 8002c84:	88ba      	ldrh	r2, [r7, #4]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	883a      	ldrh	r2, [r7, #0]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f7ff fd91 	bl	80027b4 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center + XCurrent, Y_Center - sCountY,   Color );           //6
 8002c92:	89fa      	ldrh	r2, [r7, #14]
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	4413      	add	r3, r2
 8002c98:	b298      	uxth	r0, r3
 8002c9a:	893b      	ldrh	r3, [r7, #8]
 8002c9c:	88ba      	ldrh	r2, [r7, #4]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	883a      	ldrh	r2, [r7, #0]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f7ff fd85 	bl	80027b4 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center + sCountY,   Y_Center - XCurrent, Color );           //7 	
 8002caa:	893a      	ldrh	r2, [r7, #8]
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	4413      	add	r3, r2
 8002cb0:	b298      	uxth	r0, r3
 8002cb2:	89fb      	ldrh	r3, [r7, #14]
 8002cb4:	88ba      	ldrh	r2, [r7, #4]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	883a      	ldrh	r2, [r7, #0]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f7ff fd79 	bl	80027b4 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center + sCountY,   Y_Center + XCurrent, Color );           //0				
 8002cc2:	893a      	ldrh	r2, [r7, #8]
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	b298      	uxth	r0, r3
 8002cca:	89fa      	ldrh	r2, [r7, #14]
 8002ccc:	88bb      	ldrh	r3, [r7, #4]
 8002cce:	4413      	add	r3, r2
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	883a      	ldrh	r2, [r7, #0]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f7ff fd6d 	bl	80027b4 <LCD_SetPointlColor>
			for ( sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {                      
 8002cda:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	813b      	strh	r3, [r7, #8]
 8002ce6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002cea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	dd93      	ble.n	8002c1a <LCD_DrawCircle+0x5e>
			}
			if ( Esp < 0 ) 
 8002cf2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	da09      	bge.n	8002d0e <LCD_DrawCircle+0x152>
				Esp += 4 * XCurrent + 6;	  
 8002cfa:	89fb      	ldrh	r3, [r7, #14]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	897b      	ldrh	r3, [r7, #10]
 8002d02:	4413      	add	r3, r2
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	3306      	adds	r3, #6
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	817b      	strh	r3, [r7, #10]
 8002d0c:	e013      	b.n	8002d36 <LCD_DrawCircle+0x17a>
			else{
				Esp += 10 + 4 * ( XCurrent - YCurrent );   
 8002d0e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002d12:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	897b      	ldrh	r3, [r7, #10]
 8002d20:	4413      	add	r3, r2
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	330a      	adds	r3, #10
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	817b      	strh	r3, [r7, #10]
				YCurrent --;
 8002d2a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	81bb      	strh	r3, [r7, #12]
			}
			XCurrent ++;
 8002d36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	81fb      	strh	r3, [r7, #14]
		while ( XCurrent <= YCurrent ){ //Realistic circles			
 8002d42:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002d46:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	f77f af62 	ble.w	8002c14 <LCD_DrawCircle+0x58>
 8002d50:	e0b3      	b.n	8002eba <LCD_DrawCircle+0x2fe>
		}
	}else{ //Draw a hollow circle  
		while ( XCurrent <= YCurrent ){ 	
			LCD_DrawPoint ( X_Center + XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //1
 8002d52:	89fa      	ldrh	r2, [r7, #14]
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	4413      	add	r3, r2
 8002d58:	b298      	uxth	r0, r3
 8002d5a:	89ba      	ldrh	r2, [r7, #12]
 8002d5c:	88bb      	ldrh	r3, [r7, #4]
 8002d5e:	4413      	add	r3, r2
 8002d60:	b299      	uxth	r1, r3
 8002d62:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8002d66:	883a      	ldrh	r2, [r7, #0]
 8002d68:	2301      	movs	r3, #1
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	4623      	mov	r3, r4
 8002d6e:	f7ff fd8b 	bl	8002888 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //2      
 8002d72:	89fb      	ldrh	r3, [r7, #14]
 8002d74:	88fa      	ldrh	r2, [r7, #6]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	b298      	uxth	r0, r3
 8002d7a:	89ba      	ldrh	r2, [r7, #12]
 8002d7c:	88bb      	ldrh	r3, [r7, #4]
 8002d7e:	4413      	add	r3, r2
 8002d80:	b299      	uxth	r1, r3
 8002d82:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8002d86:	883a      	ldrh	r2, [r7, #0]
 8002d88:	2301      	movs	r3, #1
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	4623      	mov	r3, r4
 8002d8e:	f7ff fd7b 	bl	8002888 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //3
 8002d92:	89bb      	ldrh	r3, [r7, #12]
 8002d94:	88fa      	ldrh	r2, [r7, #6]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	b298      	uxth	r0, r3
 8002d9a:	89fa      	ldrh	r2, [r7, #14]
 8002d9c:	88bb      	ldrh	r3, [r7, #4]
 8002d9e:	4413      	add	r3, r2
 8002da0:	b299      	uxth	r1, r3
 8002da2:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8002da6:	883a      	ldrh	r2, [r7, #0]
 8002da8:	2301      	movs	r3, #1
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	4623      	mov	r3, r4
 8002dae:	f7ff fd6b 	bl	8002888 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //4
 8002db2:	89bb      	ldrh	r3, [r7, #12]
 8002db4:	88fa      	ldrh	r2, [r7, #6]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	b298      	uxth	r0, r3
 8002dba:	89fb      	ldrh	r3, [r7, #14]
 8002dbc:	88ba      	ldrh	r2, [r7, #4]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	b299      	uxth	r1, r3
 8002dc2:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8002dc6:	883a      	ldrh	r2, [r7, #0]
 8002dc8:	2301      	movs	r3, #1
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	4623      	mov	r3, r4
 8002dce:	f7ff fd5b 	bl	8002888 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //5       
 8002dd2:	89fb      	ldrh	r3, [r7, #14]
 8002dd4:	88fa      	ldrh	r2, [r7, #6]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	b298      	uxth	r0, r3
 8002dda:	89bb      	ldrh	r3, [r7, #12]
 8002ddc:	88ba      	ldrh	r2, [r7, #4]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	b299      	uxth	r1, r3
 8002de2:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8002de6:	883a      	ldrh	r2, [r7, #0]
 8002de8:	2301      	movs	r3, #1
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	4623      	mov	r3, r4
 8002dee:	f7ff fd4b 	bl	8002888 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center + XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //6
 8002df2:	89fa      	ldrh	r2, [r7, #14]
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	4413      	add	r3, r2
 8002df8:	b298      	uxth	r0, r3
 8002dfa:	89bb      	ldrh	r3, [r7, #12]
 8002dfc:	88ba      	ldrh	r2, [r7, #4]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	b299      	uxth	r1, r3
 8002e02:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8002e06:	883a      	ldrh	r2, [r7, #0]
 8002e08:	2301      	movs	r3, #1
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	4623      	mov	r3, r4
 8002e0e:	f7ff fd3b 	bl	8002888 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center + YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //7 
 8002e12:	89ba      	ldrh	r2, [r7, #12]
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	4413      	add	r3, r2
 8002e18:	b298      	uxth	r0, r3
 8002e1a:	89fb      	ldrh	r3, [r7, #14]
 8002e1c:	88ba      	ldrh	r2, [r7, #4]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	b299      	uxth	r1, r3
 8002e22:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8002e26:	883a      	ldrh	r2, [r7, #0]
 8002e28:	2301      	movs	r3, #1
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	4623      	mov	r3, r4
 8002e2e:	f7ff fd2b 	bl	8002888 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center + YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //0
 8002e32:	89ba      	ldrh	r2, [r7, #12]
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	4413      	add	r3, r2
 8002e38:	b298      	uxth	r0, r3
 8002e3a:	89fa      	ldrh	r2, [r7, #14]
 8002e3c:	88bb      	ldrh	r3, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	b299      	uxth	r1, r3
 8002e42:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8002e46:	883a      	ldrh	r2, [r7, #0]
 8002e48:	2301      	movs	r3, #1
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	4623      	mov	r3, r4
 8002e4e:	f7ff fd1b 	bl	8002888 <LCD_DrawPoint>
			
			if ( Esp < 0 ) 
 8002e52:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	da0c      	bge.n	8002e74 <LCD_DrawCircle+0x2b8>
				Esp += 4 * XCurrent + 6;	  
 8002e5a:	89fb      	ldrh	r3, [r7, #14]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	897b      	ldrh	r3, [r7, #10]
 8002e62:	4413      	add	r3, r2
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3306      	adds	r3, #6
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	817b      	strh	r3, [r7, #10]
 8002e6c:	e016      	b.n	8002e9c <LCD_DrawCircle+0x2e0>
 8002e6e:	bf00      	nop
 8002e70:	20000104 	.word	0x20000104
			else{
				Esp += 10 + 4 * ( XCurrent - YCurrent );   
 8002e74:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002e78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	897b      	ldrh	r3, [r7, #10]
 8002e86:	4413      	add	r3, r2
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	330a      	adds	r3, #10
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	817b      	strh	r3, [r7, #10]
				YCurrent --;
 8002e90:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	81bb      	strh	r3, [r7, #12]
			}
			XCurrent ++;
 8002e9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	81fb      	strh	r3, [r7, #14]
		while ( XCurrent <= YCurrent ){ 	
 8002ea8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002eac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	f77f af4e 	ble.w	8002d52 <LCD_DrawCircle+0x196>
 8002eb6:	e000      	b.n	8002eba <LCD_DrawCircle+0x2fe>
		return;
 8002eb8:	bf00      	nop
		}
	}
}
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd90      	pop	{r4, r7, pc}

08002ec0 <LCD_DisplayChar>:
			Font  ��A structure pointer that displays a character size
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
void LCD_DisplayChar( 	POINT Xpoint, POINT Ypoint, const char Acsii_Char,
						sFONT* Font, COLOR Color_Background,	COLOR Color_Foreground ){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	4603      	mov	r3, r0
 8002eca:	81fb      	strh	r3, [r7, #14]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	81bb      	strh	r3, [r7, #12]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	72fb      	strb	r3, [r7, #11]
	POINT Page, Column;
	
	if (Xpoint >= sLCD_DIS.LCD_Dis_Column || Ypoint >= sLCD_DIS.LCD_Dis_Page) {
 8002ed4:	4b4d      	ldr	r3, [pc, #308]	; (800300c <LCD_DisplayChar+0x14c>)
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	89fa      	ldrh	r2, [r7, #14]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	f080 8091 	bcs.w	8003002 <LCD_DisplayChar+0x142>
 8002ee0:	4b4a      	ldr	r3, [pc, #296]	; (800300c <LCD_DisplayChar+0x14c>)
 8002ee2:	885b      	ldrh	r3, [r3, #2]
 8002ee4:	89ba      	ldrh	r2, [r7, #12]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	f080 808b 	bcs.w	8003002 <LCD_DisplayChar+0x142>
		return;
	}
	
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8002eec:	7afb      	ldrb	r3, [r7, #11]
 8002eee:	3b20      	subs	r3, #32
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	88d2      	ldrh	r2, [r2, #6]
 8002ef4:	fb02 f303 	mul.w	r3, r2, r3
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	8892      	ldrh	r2, [r2, #4]
 8002efc:	08d2      	lsrs	r2, r2, #3
 8002efe:	b292      	uxth	r2, r2
 8002f00:	4611      	mov	r1, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	8892      	ldrh	r2, [r2, #4]
 8002f06:	f002 0207 	and.w	r2, r2, #7
 8002f0a:	b292      	uxth	r2, r2
 8002f0c:	2a00      	cmp	r2, #0
 8002f0e:	bf14      	ite	ne
 8002f10:	2201      	movne	r2, #1
 8002f12:	2200      	moveq	r2, #0
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	440a      	add	r2, r1
 8002f18:	fb02 f303 	mul.w	r3, r2, r3
 8002f1c:	617b      	str	r3, [r7, #20]
	const unsigned char* ptr = &Font->table[Char_Offset];
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	4413      	add	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]

	for ( Page = 0; Page < Font->Height; Page ++ ){
 8002f28:	2300      	movs	r3, #0
 8002f2a:	83fb      	strh	r3, [r7, #30]
 8002f2c:	e063      	b.n	8002ff6 <LCD_DisplayChar+0x136>
		for ( Column = 0; Column < Font->Width; Column ++ ){
 8002f2e:	2300      	movs	r3, #0
 8002f30:	83bb      	strh	r3, [r7, #28]
 8002f32:	e04e      	b.n	8002fd2 <LCD_DisplayChar+0x112>
			
			//To determine whether the font background color and screen background color is consistent
			if (FONT_BACKGROUND == Color_Background){//this process is to speed up the scan
 8002f34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d118      	bne.n	8002f70 <LCD_DisplayChar+0xb0>
				if (*ptr & (0x80 >> (Column % 8)))
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	4619      	mov	r1, r3
 8002f44:	8bbb      	ldrh	r3, [r7, #28]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	2280      	movs	r2, #128	; 0x80
 8002f4c:	fa42 f303 	asr.w	r3, r2, r3
 8002f50:	400b      	ands	r3, r1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d031      	beq.n	8002fba <LCD_DisplayChar+0xfa>
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Foreground );
 8002f56:	89fa      	ldrh	r2, [r7, #14]
 8002f58:	8bbb      	ldrh	r3, [r7, #28]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	b298      	uxth	r0, r3
 8002f5e:	89ba      	ldrh	r2, [r7, #12]
 8002f60:	8bfb      	ldrh	r3, [r7, #30]
 8002f62:	4413      	add	r3, r2
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f7ff fc23 	bl	80027b4 <LCD_SetPointlColor>
 8002f6e:	e024      	b.n	8002fba <LCD_DisplayChar+0xfa>
			}else{
				if (*ptr & (0x80 >> (Column % 8))){
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	4619      	mov	r1, r3
 8002f76:	8bbb      	ldrh	r3, [r7, #28]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	2280      	movs	r2, #128	; 0x80
 8002f7e:	fa42 f303 	asr.w	r3, r2, r3
 8002f82:	400b      	ands	r3, r1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00c      	beq.n	8002fa2 <LCD_DisplayChar+0xe2>
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Foreground );
 8002f88:	89fa      	ldrh	r2, [r7, #14]
 8002f8a:	8bbb      	ldrh	r3, [r7, #28]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	b298      	uxth	r0, r3
 8002f90:	89ba      	ldrh	r2, [r7, #12]
 8002f92:	8bfb      	ldrh	r3, [r7, #30]
 8002f94:	4413      	add	r3, r2
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	f7ff fc0a 	bl	80027b4 <LCD_SetPointlColor>
 8002fa0:	e00b      	b.n	8002fba <LCD_DisplayChar+0xfa>
				}else{
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Background );
 8002fa2:	89fa      	ldrh	r2, [r7, #14]
 8002fa4:	8bbb      	ldrh	r3, [r7, #28]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	b298      	uxth	r0, r3
 8002faa:	89ba      	ldrh	r2, [r7, #12]
 8002fac:	8bfb      	ldrh	r3, [r7, #30]
 8002fae:	4413      	add	r3, r2
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	f7ff fbfd 	bl	80027b4 <LCD_SetPointlColor>
				}
			}
			//One pixel is 8 bits
            if (Column % 8 == 7) {
 8002fba:	8bbb      	ldrh	r3, [r7, #28]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b07      	cmp	r3, #7
 8002fc4:	d102      	bne.n	8002fcc <LCD_DisplayChar+0x10c>
                ptr++;
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	61bb      	str	r3, [r7, #24]
		for ( Column = 0; Column < Font->Width; Column ++ ){
 8002fcc:	8bbb      	ldrh	r3, [r7, #28]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	83bb      	strh	r3, [r7, #28]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	889b      	ldrh	r3, [r3, #4]
 8002fd6:	8bba      	ldrh	r2, [r7, #28]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d3ab      	bcc.n	8002f34 <LCD_DisplayChar+0x74>
            }	
		}/* Write a line */
		if (Font->Width % 8 != 0) {
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	889b      	ldrh	r3, [r3, #4]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <LCD_DisplayChar+0x130>
				ptr++;
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	3301      	adds	r3, #1
 8002fee:	61bb      	str	r3, [r7, #24]
	for ( Page = 0; Page < Font->Height; Page ++ ){
 8002ff0:	8bfb      	ldrh	r3, [r7, #30]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	83fb      	strh	r3, [r7, #30]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	88db      	ldrh	r3, [r3, #6]
 8002ffa:	8bfa      	ldrh	r2, [r7, #30]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d396      	bcc.n	8002f2e <LCD_DisplayChar+0x6e>
 8003000:	e000      	b.n	8003004 <LCD_DisplayChar+0x144>
		return;
 8003002:	bf00      	nop
		}
	}/* Write all */
}
 8003004:	3720      	adds	r7, #32
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000104 	.word	0x20000104

08003010 <LCD_DisplayString>:
			Font  ��A structure pointer that displays a character size
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
void LCD_DisplayString (	POINT Xstart, POINT Ystart, const char * pString, 
							sFONT* Font,COLOR Color_Background, COLOR Color_Foreground ){
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af02      	add	r7, sp, #8
 8003016:	60ba      	str	r2, [r7, #8]
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	4603      	mov	r3, r0
 800301c:	81fb      	strh	r3, [r7, #14]
 800301e:	460b      	mov	r3, r1
 8003020:	81bb      	strh	r3, [r7, #12]
	POINT Xpoint = Xstart;
 8003022:	89fb      	ldrh	r3, [r7, #14]
 8003024:	82fb      	strh	r3, [r7, #22]
	POINT Ypoint = Ystart;
 8003026:	89bb      	ldrh	r3, [r7, #12]
 8003028:	82bb      	strh	r3, [r7, #20]

	if (Xstart >= sLCD_DIS.LCD_Dis_Column || Ystart >= sLCD_DIS.LCD_Dis_Page) {
 800302a:	4b21      	ldr	r3, [pc, #132]	; (80030b0 <LCD_DisplayString+0xa0>)
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	89fa      	ldrh	r2, [r7, #14]
 8003030:	429a      	cmp	r2, r3
 8003032:	d238      	bcs.n	80030a6 <LCD_DisplayString+0x96>
 8003034:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <LCD_DisplayString+0xa0>)
 8003036:	885b      	ldrh	r3, [r3, #2]
 8003038:	89ba      	ldrh	r2, [r7, #12]
 800303a:	429a      	cmp	r2, r3
 800303c:	d233      	bcs.n	80030a6 <LCD_DisplayString+0x96>
		return;
	}
		
	while ( * pString != '\0')
 800303e:	e02d      	b.n	800309c <LCD_DisplayString+0x8c>
	{
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the height of the character
		if ( ( Xpoint + Font->Width ) > sLCD_DIS.LCD_Dis_Column ){
 8003040:	8afb      	ldrh	r3, [r7, #22]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	8892      	ldrh	r2, [r2, #4]
 8003046:	4413      	add	r3, r2
 8003048:	4a19      	ldr	r2, [pc, #100]	; (80030b0 <LCD_DisplayString+0xa0>)
 800304a:	8812      	ldrh	r2, [r2, #0]
 800304c:	4293      	cmp	r3, r2
 800304e:	dd06      	ble.n	800305e <LCD_DisplayString+0x4e>
			Xpoint = Xstart;
 8003050:	89fb      	ldrh	r3, [r7, #14]
 8003052:	82fb      	strh	r3, [r7, #22]
			Ypoint += Font->Height;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	88da      	ldrh	r2, [r3, #6]
 8003058:	8abb      	ldrh	r3, [r7, #20]
 800305a:	4413      	add	r3, r2
 800305c:	82bb      	strh	r3, [r7, #20]
		}
		
		// If the Y direction is full, reposition to (Xstart, Ystart)
		if ( ( Ypoint  + Font->Height ) > sLCD_DIS.LCD_Dis_Page ){
 800305e:	8abb      	ldrh	r3, [r7, #20]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	88d2      	ldrh	r2, [r2, #6]
 8003064:	4413      	add	r3, r2
 8003066:	4a12      	ldr	r2, [pc, #72]	; (80030b0 <LCD_DisplayString+0xa0>)
 8003068:	8852      	ldrh	r2, [r2, #2]
 800306a:	4293      	cmp	r3, r2
 800306c:	dd03      	ble.n	8003076 <LCD_DisplayString+0x66>
			Xpoint = Xstart;
 800306e:	89fb      	ldrh	r3, [r7, #14]
 8003070:	82fb      	strh	r3, [r7, #22]
			Ypoint = Ystart;
 8003072:	89bb      	ldrh	r3, [r7, #12]
 8003074:	82bb      	strh	r3, [r7, #20]
		}		
		LCD_DisplayChar ( Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground );
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	781a      	ldrb	r2, [r3, #0]
 800307a:	8ab9      	ldrh	r1, [r7, #20]
 800307c:	8af8      	ldrh	r0, [r7, #22]
 800307e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003080:	9301      	str	r3, [sp, #4]
 8003082:	8c3b      	ldrh	r3, [r7, #32]
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f7ff ff1a 	bl	8002ec0 <LCD_DisplayChar>
		
		//The next character of the address
		pString ++;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	3301      	adds	r3, #1
 8003090:	60bb      	str	r3, [r7, #8]
		
		//The next word of the abscissa increases the font of the broadband
		Xpoint += Font->Width;	
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	889a      	ldrh	r2, [r3, #4]
 8003096:	8afb      	ldrh	r3, [r7, #22]
 8003098:	4413      	add	r3, r2
 800309a:	82fb      	strh	r3, [r7, #22]
	while ( * pString != '\0')
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1cd      	bne.n	8003040 <LCD_DisplayString+0x30>
 80030a4:	e000      	b.n	80030a8 <LCD_DisplayString+0x98>
		return;
 80030a6:	bf00      	nop
	}
}
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000104 	.word	0x20000104

080030b4 <LCD_DisplayNum>:
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
#define  ARRAY_LEN 255
void LCD_DisplayNum(	POINT Xpoint, POINT Ypoint, int32_t Nummber, 
						sFONT* Font,COLOR Color_Background, COLOR Color_Foreground ){
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80030ba:	af02      	add	r7, sp, #8
 80030bc:	4604      	mov	r4, r0
 80030be:	4608      	mov	r0, r1
 80030c0:	f107 0108 	add.w	r1, r7, #8
 80030c4:	600a      	str	r2, [r1, #0]
 80030c6:	1d3a      	adds	r2, r7, #4
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	f107 030e 	add.w	r3, r7, #14
 80030ce:	4622      	mov	r2, r4
 80030d0:	801a      	strh	r2, [r3, #0]
 80030d2:	f107 030c 	add.w	r3, r7, #12
 80030d6:	4602      	mov	r2, r0
 80030d8:	801a      	strh	r2, [r3, #0]
		
	int16_t Num_Bit = 0, Str_Bit = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80030e0:	2300      	movs	r3, #0
 80030e2:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
	uint8_t Str_Array[ARRAY_LEN] = {0},Num_Array[ARRAY_LEN] = {0};
 80030e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80030ea:	4618      	mov	r0, r3
 80030ec:	23ff      	movs	r3, #255	; 0xff
 80030ee:	461a      	mov	r2, r3
 80030f0:	2100      	movs	r1, #0
 80030f2:	f000 fbb9 	bl	8003868 <memset>
 80030f6:	f107 0310 	add.w	r3, r7, #16
 80030fa:	4618      	mov	r0, r3
 80030fc:	23ff      	movs	r3, #255	; 0xff
 80030fe:	461a      	mov	r2, r3
 8003100:	2100      	movs	r1, #0
 8003102:	f000 fbb1 	bl	8003868 <memset>
	uint8_t *pStr = Str_Array;
 8003106:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800310a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	
	if (Xpoint >= sLCD_DIS.LCD_Dis_Column || Ypoint >= sLCD_DIS.LCD_Dis_Page) {
 800310e:	4b39      	ldr	r3, [pc, #228]	; (80031f4 <LCD_DisplayNum+0x140>)
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	f107 020e 	add.w	r2, r7, #14
 8003116:	8812      	ldrh	r2, [r2, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d266      	bcs.n	80031ea <LCD_DisplayNum+0x136>
 800311c:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <LCD_DisplayNum+0x140>)
 800311e:	885b      	ldrh	r3, [r3, #2]
 8003120:	f107 020c 	add.w	r2, r7, #12
 8003124:	8812      	ldrh	r2, [r2, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d25f      	bcs.n	80031ea <LCD_DisplayNum+0x136>
		return;
	}
	
	//Converts a number to a string
	while(Nummber){
 800312a:	e028      	b.n	800317e <LCD_DisplayNum+0xca>
		Num_Array[Num_Bit] = Nummber % 10 + '0';
 800312c:	f107 0308 	add.w	r3, r7, #8
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	4b31      	ldr	r3, [pc, #196]	; (80031f8 <LCD_DisplayNum+0x144>)
 8003134:	fb83 1302 	smull	r1, r3, r3, r2
 8003138:	1099      	asrs	r1, r3, #2
 800313a:	17d3      	asrs	r3, r2, #31
 800313c:	1ac9      	subs	r1, r1, r3
 800313e:	460b      	mov	r3, r1
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	1ad1      	subs	r1, r2, r3
 8003148:	b2ca      	uxtb	r2, r1
 800314a:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800314e:	3230      	adds	r2, #48	; 0x30
 8003150:	b2d1      	uxtb	r1, r2
 8003152:	f107 0210 	add.w	r2, r7, #16
 8003156:	54d1      	strb	r1, [r2, r3]
		Num_Bit++;
 8003158:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800315c:	b29b      	uxth	r3, r3
 800315e:	3301      	adds	r3, #1
 8003160:	b29b      	uxth	r3, r3
 8003162:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
		Nummber /= 10;
 8003166:	f107 0208 	add.w	r2, r7, #8
 800316a:	f107 0308 	add.w	r3, r7, #8
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4921      	ldr	r1, [pc, #132]	; (80031f8 <LCD_DisplayNum+0x144>)
 8003172:	fb81 0103 	smull	r0, r1, r1, r3
 8003176:	1089      	asrs	r1, r1, #2
 8003178:	17db      	asrs	r3, r3, #31
 800317a:	1acb      	subs	r3, r1, r3
 800317c:	6013      	str	r3, [r2, #0]
	while(Nummber){
 800317e:	f107 0308 	add.w	r3, r7, #8
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1d1      	bne.n	800312c <LCD_DisplayNum+0x78>
    }
	
	//The string is inverted
	while( Num_Bit > 0){
 8003188:	e018      	b.n	80031bc <LCD_DisplayNum+0x108>
		Str_Array[Str_Bit] = Num_Array[Num_Bit -1];
 800318a:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800318e:	1e5a      	subs	r2, r3, #1
 8003190:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8003194:	f107 0110 	add.w	r1, r7, #16
 8003198:	5c89      	ldrb	r1, [r1, r2]
 800319a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800319e:	54d1      	strb	r1, [r2, r3]
		Str_Bit ++;
 80031a0:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3301      	adds	r3, #1
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
		Num_Bit --;
 80031ae:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
	while( Num_Bit > 0){
 80031bc:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	dce2      	bgt.n	800318a <LCD_DisplayNum+0xd6>
	}
	
	//show
	LCD_DisplayString( Xpoint, Ypoint,  (const char*)pStr, Font, Color_Background, Color_Foreground );
 80031c4:	1d3b      	adds	r3, r7, #4
 80031c6:	f107 020c 	add.w	r2, r7, #12
 80031ca:	8811      	ldrh	r1, [r2, #0]
 80031cc:	f107 020e 	add.w	r2, r7, #14
 80031d0:	8810      	ldrh	r0, [r2, #0]
 80031d2:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 80031d6:	9201      	str	r2, [sp, #4]
 80031d8:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 80031dc:	9200      	str	r2, [sp, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80031e4:	f7ff ff14 	bl	8003010 <LCD_DisplayString>
 80031e8:	e000      	b.n	80031ec <LCD_DisplayNum+0x138>
		return;
 80031ea:	bf00      	nop
}
 80031ec:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd90      	pop	{r4, r7, pc}
 80031f4:	20000104 	.word	0x20000104
 80031f8:	66666667 	.word	0x66666667

080031fc <LCD_Show>:


void LCD_Show(void)
{
 80031fc:	b5b0      	push	{r4, r5, r7, lr}
 80031fe:	b090      	sub	sp, #64	; 0x40
 8003200:	af04      	add	r7, sp, #16
	if(sLCD_DIS.LCD_Dis_Column <= sLCD_DIS.LCD_Dis_Page){//Horizontal screen display
 8003202:	4ba7      	ldr	r3, [pc, #668]	; (80034a0 <LCD_Show+0x2a4>)
 8003204:	881a      	ldrh	r2, [r3, #0]
 8003206:	4ba6      	ldr	r3, [pc, #664]	; (80034a0 <LCD_Show+0x2a4>)
 8003208:	885b      	ldrh	r3, [r3, #2]
 800320a:	429a      	cmp	r2, r3
 800320c:	f200 8164 	bhi.w	80034d8 <LCD_Show+0x2dc>

		printf("LCD Draw Line \r\n");
 8003210:	48a4      	ldr	r0, [pc, #656]	; (80034a4 <LCD_Show+0x2a8>)
 8003212:	f000 fb8d 	bl	8003930 <puts>
		LCD_DrawLine(0, 10, sLCD_DIS.LCD_Dis_Column, 10, RED,LINE_SOLID, DOT_PIXEL_2X2);
 8003216:	4ba2      	ldr	r3, [pc, #648]	; (80034a0 <LCD_Show+0x2a4>)
 8003218:	881a      	ldrh	r2, [r3, #0]
 800321a:	2302      	movs	r3, #2
 800321c:	9302      	str	r3, [sp, #8]
 800321e:	2300      	movs	r3, #0
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	230a      	movs	r3, #10
 800322a:	210a      	movs	r1, #10
 800322c:	2000      	movs	r0, #0
 800322e:	f7ff fba3 	bl	8002978 <LCD_DrawLine>
		LCD_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 10, sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page - 10, RED,LINE_SOLID, DOT_PIXEL_2X2);	
 8003232:	4b9b      	ldr	r3, [pc, #620]	; (80034a0 <LCD_Show+0x2a4>)
 8003234:	885b      	ldrh	r3, [r3, #2]
 8003236:	3b0a      	subs	r3, #10
 8003238:	b299      	uxth	r1, r3
 800323a:	4b99      	ldr	r3, [pc, #612]	; (80034a0 <LCD_Show+0x2a4>)
 800323c:	881a      	ldrh	r2, [r3, #0]
 800323e:	4b98      	ldr	r3, [pc, #608]	; (80034a0 <LCD_Show+0x2a4>)
 8003240:	885b      	ldrh	r3, [r3, #2]
 8003242:	3b0a      	subs	r3, #10
 8003244:	b298      	uxth	r0, r3
 8003246:	2302      	movs	r3, #2
 8003248:	9302      	str	r3, [sp, #8]
 800324a:	2300      	movs	r3, #0
 800324c:	9301      	str	r3, [sp, #4]
 800324e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	4603      	mov	r3, r0
 8003256:	2000      	movs	r0, #0
 8003258:	f7ff fb8e 	bl	8002978 <LCD_DrawLine>
		LCD_DrawLine(0, 20, sLCD_DIS.LCD_Dis_Column, 20, RED,LINE_DOTTED, DOT_PIXEL_DFT);
 800325c:	4b90      	ldr	r3, [pc, #576]	; (80034a0 <LCD_Show+0x2a4>)
 800325e:	881a      	ldrh	r2, [r3, #0]
 8003260:	2301      	movs	r3, #1
 8003262:	9302      	str	r3, [sp, #8]
 8003264:	2301      	movs	r3, #1
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	2314      	movs	r3, #20
 8003270:	2114      	movs	r1, #20
 8003272:	2000      	movs	r0, #0
 8003274:	f7ff fb80 	bl	8002978 <LCD_DrawLine>
		LCD_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 20, sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page - 20, RED,LINE_DOTTED, DOT_PIXEL_DFT);
 8003278:	4b89      	ldr	r3, [pc, #548]	; (80034a0 <LCD_Show+0x2a4>)
 800327a:	885b      	ldrh	r3, [r3, #2]
 800327c:	3b14      	subs	r3, #20
 800327e:	b299      	uxth	r1, r3
 8003280:	4b87      	ldr	r3, [pc, #540]	; (80034a0 <LCD_Show+0x2a4>)
 8003282:	881a      	ldrh	r2, [r3, #0]
 8003284:	4b86      	ldr	r3, [pc, #536]	; (80034a0 <LCD_Show+0x2a4>)
 8003286:	885b      	ldrh	r3, [r3, #2]
 8003288:	3b14      	subs	r3, #20
 800328a:	b298      	uxth	r0, r3
 800328c:	2301      	movs	r3, #1
 800328e:	9302      	str	r3, [sp, #8]
 8003290:	2301      	movs	r3, #1
 8003292:	9301      	str	r3, [sp, #4]
 8003294:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	4603      	mov	r3, r0
 800329c:	2000      	movs	r0, #0
 800329e:	f7ff fb6b 	bl	8002978 <LCD_DrawLine>

		printf("LCD Draw Rectangle \r\n");
 80032a2:	4881      	ldr	r0, [pc, #516]	; (80034a8 <LCD_Show+0x2ac>)
 80032a4:	f000 fb44 	bl	8003930 <puts>
		LCD_DrawRectangle(0,0,sLCD_DIS.LCD_Dis_Column,8,BLUE, DRAW_FULL, DOT_PIXEL_1X1);
 80032a8:	4b7d      	ldr	r3, [pc, #500]	; (80034a0 <LCD_Show+0x2a4>)
 80032aa:	881a      	ldrh	r2, [r3, #0]
 80032ac:	2301      	movs	r3, #1
 80032ae:	9302      	str	r3, [sp, #8]
 80032b0:	2301      	movs	r3, #1
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	231f      	movs	r3, #31
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	2308      	movs	r3, #8
 80032ba:	2100      	movs	r1, #0
 80032bc:	2000      	movs	r0, #0
 80032be:	f7ff fc0d 	bl	8002adc <LCD_DrawRectangle>
		LCD_DrawRectangle(0,sLCD_DIS.LCD_Dis_Page - 10,sLCD_DIS.LCD_Dis_Column,sLCD_DIS.LCD_Dis_Page,BLUE, DRAW_FULL, DOT_PIXEL_1X1);
 80032c2:	4b77      	ldr	r3, [pc, #476]	; (80034a0 <LCD_Show+0x2a4>)
 80032c4:	885b      	ldrh	r3, [r3, #2]
 80032c6:	3b0a      	subs	r3, #10
 80032c8:	b299      	uxth	r1, r3
 80032ca:	4b75      	ldr	r3, [pc, #468]	; (80034a0 <LCD_Show+0x2a4>)
 80032cc:	881a      	ldrh	r2, [r3, #0]
 80032ce:	4b74      	ldr	r3, [pc, #464]	; (80034a0 <LCD_Show+0x2a4>)
 80032d0:	8858      	ldrh	r0, [r3, #2]
 80032d2:	2301      	movs	r3, #1
 80032d4:	9302      	str	r3, [sp, #8]
 80032d6:	2301      	movs	r3, #1
 80032d8:	9301      	str	r3, [sp, #4]
 80032da:	231f      	movs	r3, #31
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	4603      	mov	r3, r0
 80032e0:	2000      	movs	r0, #0
 80032e2:	f7ff fbfb 	bl	8002adc <LCD_DrawRectangle>
		LCD_DrawRectangle(1,1,sLCD_DIS.LCD_Dis_Column,sLCD_DIS.LCD_Dis_Page,RED,DRAW_EMPTY,DOT_PIXEL_2X2);
 80032e6:	4b6e      	ldr	r3, [pc, #440]	; (80034a0 <LCD_Show+0x2a4>)
 80032e8:	881a      	ldrh	r2, [r3, #0]
 80032ea:	4b6d      	ldr	r3, [pc, #436]	; (80034a0 <LCD_Show+0x2a4>)
 80032ec:	8859      	ldrh	r1, [r3, #2]
 80032ee:	2302      	movs	r3, #2
 80032f0:	9302      	str	r3, [sp, #8]
 80032f2:	2300      	movs	r3, #0
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	460b      	mov	r3, r1
 80032fe:	2101      	movs	r1, #1
 8003300:	2001      	movs	r0, #1
 8003302:	f7ff fbeb 	bl	8002adc <LCD_DrawRectangle>
		
		printf("LCD Draw Olympic Rings\r\n");
 8003306:	4869      	ldr	r0, [pc, #420]	; (80034ac <LCD_Show+0x2b0>)
 8003308:	f000 fb12 	bl	8003930 <puts>
		uint16_t Cx1 = 40, Cy1 = 85, Cr = 12;
 800330c:	2328      	movs	r3, #40	; 0x28
 800330e:	833b      	strh	r3, [r7, #24]
 8003310:	2355      	movs	r3, #85	; 0x55
 8003312:	82fb      	strh	r3, [r7, #22]
 8003314:	230c      	movs	r3, #12
 8003316:	82bb      	strh	r3, [r7, #20]
		uint16_t Cx2 = Cx1 + (2.5 * Cr), Cy2 = Cy1;
 8003318:	8b3b      	ldrh	r3, [r7, #24]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd f8a6 	bl	800046c <__aeabi_i2d>
 8003320:	4604      	mov	r4, r0
 8003322:	460d      	mov	r5, r1
 8003324:	8abb      	ldrh	r3, [r7, #20]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd f8a0 	bl	800046c <__aeabi_i2d>
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	4b5f      	ldr	r3, [pc, #380]	; (80034b0 <LCD_Show+0x2b4>)
 8003332:	f7fd f905 	bl	8000540 <__aeabi_dmul>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4620      	mov	r0, r4
 800333c:	4629      	mov	r1, r5
 800333e:	f7fc ff49 	bl	80001d4 <__adddf3>
 8003342:	4603      	mov	r3, r0
 8003344:	460c      	mov	r4, r1
 8003346:	4618      	mov	r0, r3
 8003348:	4621      	mov	r1, r4
 800334a:	f7fd fb0b 	bl	8000964 <__aeabi_d2uiz>
 800334e:	4603      	mov	r3, r0
 8003350:	827b      	strh	r3, [r7, #18]
 8003352:	8afb      	ldrh	r3, [r7, #22]
 8003354:	823b      	strh	r3, [r7, #16]
		uint16_t Cx3 = Cx1 + (5 * Cr), Cy3 = Cy1;
 8003356:	8abb      	ldrh	r3, [r7, #20]
 8003358:	461a      	mov	r2, r3
 800335a:	0092      	lsls	r2, r2, #2
 800335c:	4413      	add	r3, r2
 800335e:	b29a      	uxth	r2, r3
 8003360:	8b3b      	ldrh	r3, [r7, #24]
 8003362:	4413      	add	r3, r2
 8003364:	81fb      	strh	r3, [r7, #14]
 8003366:	8afb      	ldrh	r3, [r7, #22]
 8003368:	81bb      	strh	r3, [r7, #12]
		uint16_t Cx4 = ( Cx1 + Cx2 )/2, Cy4 = Cy1 + Cr;
 800336a:	8b3a      	ldrh	r2, [r7, #24]
 800336c:	8a7b      	ldrh	r3, [r7, #18]
 800336e:	4413      	add	r3, r2
 8003370:	0fda      	lsrs	r2, r3, #31
 8003372:	4413      	add	r3, r2
 8003374:	105b      	asrs	r3, r3, #1
 8003376:	817b      	strh	r3, [r7, #10]
 8003378:	8afa      	ldrh	r2, [r7, #22]
 800337a:	8abb      	ldrh	r3, [r7, #20]
 800337c:	4413      	add	r3, r2
 800337e:	813b      	strh	r3, [r7, #8]
		uint16_t Cx5 = ( Cx2 + Cx3 )/2, Cy5 = Cy1 + Cr;
 8003380:	8a7a      	ldrh	r2, [r7, #18]
 8003382:	89fb      	ldrh	r3, [r7, #14]
 8003384:	4413      	add	r3, r2
 8003386:	0fda      	lsrs	r2, r3, #31
 8003388:	4413      	add	r3, r2
 800338a:	105b      	asrs	r3, r3, #1
 800338c:	80fb      	strh	r3, [r7, #6]
 800338e:	8afa      	ldrh	r2, [r7, #22]
 8003390:	8abb      	ldrh	r3, [r7, #20]
 8003392:	4413      	add	r3, r2
 8003394:	80bb      	strh	r3, [r7, #4]

		LCD_DrawCircle( Cx1, Cy1, Cr, BLUE, DRAW_EMPTY, DOT_PIXEL_DFT);
 8003396:	8aba      	ldrh	r2, [r7, #20]
 8003398:	8af9      	ldrh	r1, [r7, #22]
 800339a:	8b38      	ldrh	r0, [r7, #24]
 800339c:	2301      	movs	r3, #1
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	2300      	movs	r3, #0
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	231f      	movs	r3, #31
 80033a6:	f7ff fc09 	bl	8002bbc <LCD_DrawCircle>
		LCD_DrawCircle( Cx2, Cy2, Cr, BLACK, DRAW_EMPTY, DOT_PIXEL_DFT);
 80033aa:	8aba      	ldrh	r2, [r7, #20]
 80033ac:	8a39      	ldrh	r1, [r7, #16]
 80033ae:	8a78      	ldrh	r0, [r7, #18]
 80033b0:	2301      	movs	r3, #1
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	2300      	movs	r3, #0
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	2300      	movs	r3, #0
 80033ba:	f7ff fbff 	bl	8002bbc <LCD_DrawCircle>
		LCD_DrawCircle( Cx3, Cy3, Cr, RED, DRAW_EMPTY, DOT_PIXEL_DFT);
 80033be:	8aba      	ldrh	r2, [r7, #20]
 80033c0:	89b9      	ldrh	r1, [r7, #12]
 80033c2:	89f8      	ldrh	r0, [r7, #14]
 80033c4:	2301      	movs	r3, #1
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	2300      	movs	r3, #0
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033d0:	f7ff fbf4 	bl	8002bbc <LCD_DrawCircle>
		LCD_DrawCircle( Cx4, Cy4, Cr, YELLOW, DRAW_EMPTY, DOT_PIXEL_DFT);
 80033d4:	8aba      	ldrh	r2, [r7, #20]
 80033d6:	8939      	ldrh	r1, [r7, #8]
 80033d8:	8978      	ldrh	r0, [r7, #10]
 80033da:	2301      	movs	r3, #1
 80033dc:	9301      	str	r3, [sp, #4]
 80033de:	2300      	movs	r3, #0
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80033e6:	f7ff fbe9 	bl	8002bbc <LCD_DrawCircle>
		LCD_DrawCircle( Cx5, Cy5, Cr, GREEN, DRAW_EMPTY, DOT_PIXEL_DFT);
 80033ea:	8aba      	ldrh	r2, [r7, #20]
 80033ec:	88b9      	ldrh	r1, [r7, #4]
 80033ee:	88f8      	ldrh	r0, [r7, #6]
 80033f0:	2301      	movs	r3, #1
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	2300      	movs	r3, #0
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033fc:	f7ff fbde 	bl	8002bbc <LCD_DrawCircle>

		printf("LCD Draw Realistic circles\r\n");
 8003400:	482c      	ldr	r0, [pc, #176]	; (80034b4 <LCD_Show+0x2b8>)
 8003402:	f000 fa95 	bl	8003930 <puts>
		LCD_DrawCircle(15, 110, 10, BRRED, DRAW_FULL, DOT_PIXEL_DFT);
 8003406:	2301      	movs	r3, #1
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	2301      	movs	r3, #1
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8003412:	220a      	movs	r2, #10
 8003414:	216e      	movs	r1, #110	; 0x6e
 8003416:	200f      	movs	r0, #15
 8003418:	f7ff fbd0 	bl	8002bbc <LCD_DrawCircle>
		LCD_DrawCircle(sLCD_DIS.LCD_Dis_Column - 15, 110, 10, BRRED, DRAW_FULL, DOT_PIXEL_DFT);
 800341c:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <LCD_Show+0x2a4>)
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	3b0f      	subs	r3, #15
 8003422:	b298      	uxth	r0, r3
 8003424:	2301      	movs	r3, #1
 8003426:	9301      	str	r3, [sp, #4]
 8003428:	2301      	movs	r3, #1
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8003430:	220a      	movs	r2, #10
 8003432:	216e      	movs	r1, #110	; 0x6e
 8003434:	f7ff fbc2 	bl	8002bbc <LCD_DrawCircle>

		printf("LCD Display String \r\n");
 8003438:	481f      	ldr	r0, [pc, #124]	; (80034b8 <LCD_Show+0x2bc>)
 800343a:	f000 fa79 	bl	8003930 <puts>
		LCD_DisplayString(35,20,"WaveShare",&Font12,LCD_BACKGROUND,BLUE);
 800343e:	231f      	movs	r3, #31
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	4b1c      	ldr	r3, [pc, #112]	; (80034bc <LCD_Show+0x2c0>)
 800344a:	4a1d      	ldr	r2, [pc, #116]	; (80034c0 <LCD_Show+0x2c4>)
 800344c:	2114      	movs	r1, #20
 800344e:	2023      	movs	r0, #35	; 0x23
 8003450:	f7ff fdde 	bl	8003010 <LCD_DisplayString>
		LCD_DisplayString(32,33,"Electronic",&Font12,LCD_BACKGROUND,BLUE);
 8003454:	231f      	movs	r3, #31
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	4b17      	ldr	r3, [pc, #92]	; (80034bc <LCD_Show+0x2c0>)
 8003460:	4a18      	ldr	r2, [pc, #96]	; (80034c4 <LCD_Show+0x2c8>)
 8003462:	2121      	movs	r1, #33	; 0x21
 8003464:	2020      	movs	r0, #32
 8003466:	f7ff fdd3 	bl	8003010 <LCD_DisplayString>
		LCD_DisplayString(28,45,"1.8inch TFTLCD",&Font8,RED,GRED);
 800346a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <LCD_Show+0x2cc>)
 8003478:	4a14      	ldr	r2, [pc, #80]	; (80034cc <LCD_Show+0x2d0>)
 800347a:	212d      	movs	r1, #45	; 0x2d
 800347c:	201c      	movs	r0, #28
 800347e:	f7ff fdc7 	bl	8003010 <LCD_DisplayString>

		printf("LCD Display Nummber \r\n");
 8003482:	4813      	ldr	r0, [pc, #76]	; (80034d0 <LCD_Show+0x2d4>)
 8003484:	f000 fa54 	bl	8003930 <puts>
		LCD_DisplayNum(28,55,1234567890,&Font12,LCD_BACKGROUND,BLUE);
 8003488:	231f      	movs	r3, #31
 800348a:	9301      	str	r3, [sp, #4]
 800348c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <LCD_Show+0x2c0>)
 8003494:	4a0f      	ldr	r2, [pc, #60]	; (80034d4 <LCD_Show+0x2d8>)
 8003496:	2137      	movs	r1, #55	; 0x37
 8003498:	201c      	movs	r0, #28
 800349a:	f7ff fe0b 	bl	80030b4 <LCD_DisplayNum>

		printf("LCD Display Nummber \r\n");
		LCD_DisplayNum(35,50,1234567890,&Font12,LCD_BACKGROUND,BLUE);

	}
}
 800349e:	e157      	b.n	8003750 <LCD_Show+0x554>
 80034a0:	20000104 	.word	0x20000104
 80034a4:	08004160 	.word	0x08004160
 80034a8:	08004170 	.word	0x08004170
 80034ac:	08004188 	.word	0x08004188
 80034b0:	40040000 	.word	0x40040000
 80034b4:	080041a0 	.word	0x080041a0
 80034b8:	080041bc 	.word	0x080041bc
 80034bc:	2000000c 	.word	0x2000000c
 80034c0:	080041d4 	.word	0x080041d4
 80034c4:	080041e0 	.word	0x080041e0
 80034c8:	20000014 	.word	0x20000014
 80034cc:	080041ec 	.word	0x080041ec
 80034d0:	080041fc 	.word	0x080041fc
 80034d4:	499602d2 	.word	0x499602d2
		printf("LCD Draw Line \r\n");
 80034d8:	489f      	ldr	r0, [pc, #636]	; (8003758 <LCD_Show+0x55c>)
 80034da:	f000 fa29 	bl	8003930 <puts>
		LCD_DrawLine(0, 10, sLCD_DIS.LCD_Dis_Column, 10, RED,LINE_SOLID, DOT_PIXEL_2X2);
 80034de:	4b9f      	ldr	r3, [pc, #636]	; (800375c <LCD_Show+0x560>)
 80034e0:	881a      	ldrh	r2, [r3, #0]
 80034e2:	2302      	movs	r3, #2
 80034e4:	9302      	str	r3, [sp, #8]
 80034e6:	2300      	movs	r3, #0
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	230a      	movs	r3, #10
 80034f2:	210a      	movs	r1, #10
 80034f4:	2000      	movs	r0, #0
 80034f6:	f7ff fa3f 	bl	8002978 <LCD_DrawLine>
		LCD_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 10, sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page - 10, RED,LINE_SOLID, DOT_PIXEL_2X2);	
 80034fa:	4b98      	ldr	r3, [pc, #608]	; (800375c <LCD_Show+0x560>)
 80034fc:	885b      	ldrh	r3, [r3, #2]
 80034fe:	3b0a      	subs	r3, #10
 8003500:	b299      	uxth	r1, r3
 8003502:	4b96      	ldr	r3, [pc, #600]	; (800375c <LCD_Show+0x560>)
 8003504:	881a      	ldrh	r2, [r3, #0]
 8003506:	4b95      	ldr	r3, [pc, #596]	; (800375c <LCD_Show+0x560>)
 8003508:	885b      	ldrh	r3, [r3, #2]
 800350a:	3b0a      	subs	r3, #10
 800350c:	b298      	uxth	r0, r3
 800350e:	2302      	movs	r3, #2
 8003510:	9302      	str	r3, [sp, #8]
 8003512:	2300      	movs	r3, #0
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	4603      	mov	r3, r0
 800351e:	2000      	movs	r0, #0
 8003520:	f7ff fa2a 	bl	8002978 <LCD_DrawLine>
		LCD_DrawLine(0, 20, sLCD_DIS.LCD_Dis_Column, 20, RED,LINE_DOTTED, DOT_PIXEL_DFT);
 8003524:	4b8d      	ldr	r3, [pc, #564]	; (800375c <LCD_Show+0x560>)
 8003526:	881a      	ldrh	r2, [r3, #0]
 8003528:	2301      	movs	r3, #1
 800352a:	9302      	str	r3, [sp, #8]
 800352c:	2301      	movs	r3, #1
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	2314      	movs	r3, #20
 8003538:	2114      	movs	r1, #20
 800353a:	2000      	movs	r0, #0
 800353c:	f7ff fa1c 	bl	8002978 <LCD_DrawLine>
		LCD_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 20, sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page - 20, RED,LINE_DOTTED, DOT_PIXEL_DFT);
 8003540:	4b86      	ldr	r3, [pc, #536]	; (800375c <LCD_Show+0x560>)
 8003542:	885b      	ldrh	r3, [r3, #2]
 8003544:	3b14      	subs	r3, #20
 8003546:	b299      	uxth	r1, r3
 8003548:	4b84      	ldr	r3, [pc, #528]	; (800375c <LCD_Show+0x560>)
 800354a:	881a      	ldrh	r2, [r3, #0]
 800354c:	4b83      	ldr	r3, [pc, #524]	; (800375c <LCD_Show+0x560>)
 800354e:	885b      	ldrh	r3, [r3, #2]
 8003550:	3b14      	subs	r3, #20
 8003552:	b298      	uxth	r0, r3
 8003554:	2301      	movs	r3, #1
 8003556:	9302      	str	r3, [sp, #8]
 8003558:	2301      	movs	r3, #1
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	4603      	mov	r3, r0
 8003564:	2000      	movs	r0, #0
 8003566:	f7ff fa07 	bl	8002978 <LCD_DrawLine>
		printf("LCD Draw Rectangle \r\n");
 800356a:	487d      	ldr	r0, [pc, #500]	; (8003760 <LCD_Show+0x564>)
 800356c:	f000 f9e0 	bl	8003930 <puts>
		LCD_DrawRectangle(0,0,sLCD_DIS.LCD_Dis_Column,8,BLUE, DRAW_FULL, DOT_PIXEL_1X1);
 8003570:	4b7a      	ldr	r3, [pc, #488]	; (800375c <LCD_Show+0x560>)
 8003572:	881a      	ldrh	r2, [r3, #0]
 8003574:	2301      	movs	r3, #1
 8003576:	9302      	str	r3, [sp, #8]
 8003578:	2301      	movs	r3, #1
 800357a:	9301      	str	r3, [sp, #4]
 800357c:	231f      	movs	r3, #31
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	2308      	movs	r3, #8
 8003582:	2100      	movs	r1, #0
 8003584:	2000      	movs	r0, #0
 8003586:	f7ff faa9 	bl	8002adc <LCD_DrawRectangle>
		LCD_DrawRectangle(0,sLCD_DIS.LCD_Dis_Page - 10,sLCD_DIS.LCD_Dis_Column,sLCD_DIS.LCD_Dis_Page,BLUE, DRAW_FULL, DOT_PIXEL_1X1);
 800358a:	4b74      	ldr	r3, [pc, #464]	; (800375c <LCD_Show+0x560>)
 800358c:	885b      	ldrh	r3, [r3, #2]
 800358e:	3b0a      	subs	r3, #10
 8003590:	b299      	uxth	r1, r3
 8003592:	4b72      	ldr	r3, [pc, #456]	; (800375c <LCD_Show+0x560>)
 8003594:	881a      	ldrh	r2, [r3, #0]
 8003596:	4b71      	ldr	r3, [pc, #452]	; (800375c <LCD_Show+0x560>)
 8003598:	8858      	ldrh	r0, [r3, #2]
 800359a:	2301      	movs	r3, #1
 800359c:	9302      	str	r3, [sp, #8]
 800359e:	2301      	movs	r3, #1
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	231f      	movs	r3, #31
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	4603      	mov	r3, r0
 80035a8:	2000      	movs	r0, #0
 80035aa:	f7ff fa97 	bl	8002adc <LCD_DrawRectangle>
		LCD_DrawRectangle(1,1,sLCD_DIS.LCD_Dis_Column,sLCD_DIS.LCD_Dis_Page,RED,DRAW_EMPTY,DOT_PIXEL_2X2);
 80035ae:	4b6b      	ldr	r3, [pc, #428]	; (800375c <LCD_Show+0x560>)
 80035b0:	881a      	ldrh	r2, [r3, #0]
 80035b2:	4b6a      	ldr	r3, [pc, #424]	; (800375c <LCD_Show+0x560>)
 80035b4:	8859      	ldrh	r1, [r3, #2]
 80035b6:	2302      	movs	r3, #2
 80035b8:	9302      	str	r3, [sp, #8]
 80035ba:	2300      	movs	r3, #0
 80035bc:	9301      	str	r3, [sp, #4]
 80035be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	460b      	mov	r3, r1
 80035c6:	2101      	movs	r1, #1
 80035c8:	2001      	movs	r0, #1
 80035ca:	f7ff fa87 	bl	8002adc <LCD_DrawRectangle>
		printf("LCD Draw Olympic Rings\r\n");
 80035ce:	4865      	ldr	r0, [pc, #404]	; (8003764 <LCD_Show+0x568>)
 80035d0:	f000 f9ae 	bl	8003930 <puts>
		uint16_t Cx1 = 45, Cy1 = 80, Cr = 12;
 80035d4:	232d      	movs	r3, #45	; 0x2d
 80035d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80035d8:	2350      	movs	r3, #80	; 0x50
 80035da:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80035dc:	230c      	movs	r3, #12
 80035de:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t Cx2 = Cx1 + (2.5 * Cr), Cy2 = Cy1;
 80035e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fc ff42 	bl	800046c <__aeabi_i2d>
 80035e8:	4604      	mov	r4, r0
 80035ea:	460d      	mov	r5, r1
 80035ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fc ff3c 	bl	800046c <__aeabi_i2d>
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	4b5b      	ldr	r3, [pc, #364]	; (8003768 <LCD_Show+0x56c>)
 80035fa:	f7fc ffa1 	bl	8000540 <__aeabi_dmul>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4620      	mov	r0, r4
 8003604:	4629      	mov	r1, r5
 8003606:	f7fc fde5 	bl	80001d4 <__adddf3>
 800360a:	4603      	mov	r3, r0
 800360c:	460c      	mov	r4, r1
 800360e:	4618      	mov	r0, r3
 8003610:	4621      	mov	r1, r4
 8003612:	f7fd f9a7 	bl	8000964 <__aeabi_d2uiz>
 8003616:	4603      	mov	r3, r0
 8003618:	853b      	strh	r3, [r7, #40]	; 0x28
 800361a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800361c:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t Cx3 = Cx1 + (5 * Cr), Cy3 = Cy1;
 800361e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003620:	461a      	mov	r2, r3
 8003622:	0092      	lsls	r2, r2, #2
 8003624:	4413      	add	r3, r2
 8003626:	b29a      	uxth	r2, r3
 8003628:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800362a:	4413      	add	r3, r2
 800362c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800362e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003630:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t Cx4 = ( Cx1 + Cx2 )/2, Cy4 = Cy1 + Cr;
 8003632:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003634:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003636:	4413      	add	r3, r2
 8003638:	0fda      	lsrs	r2, r3, #31
 800363a:	4413      	add	r3, r2
 800363c:	105b      	asrs	r3, r3, #1
 800363e:	843b      	strh	r3, [r7, #32]
 8003640:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003642:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003644:	4413      	add	r3, r2
 8003646:	83fb      	strh	r3, [r7, #30]
		uint16_t Cx5 = ( Cx2 + Cx3 )/2, Cy5 = Cy1 + Cr;
 8003648:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800364a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800364c:	4413      	add	r3, r2
 800364e:	0fda      	lsrs	r2, r3, #31
 8003650:	4413      	add	r3, r2
 8003652:	105b      	asrs	r3, r3, #1
 8003654:	83bb      	strh	r3, [r7, #28]
 8003656:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003658:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800365a:	4413      	add	r3, r2
 800365c:	837b      	strh	r3, [r7, #26]
		LCD_DrawCircle( Cx1, Cy1, Cr, BLUE, DRAW_EMPTY, DOT_PIXEL_DFT);
 800365e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003660:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8003662:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 8003664:	2301      	movs	r3, #1
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	2300      	movs	r3, #0
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	231f      	movs	r3, #31
 800366e:	f7ff faa5 	bl	8002bbc <LCD_DrawCircle>
		LCD_DrawCircle( Cx2, Cy2, Cr, BLACK, DRAW_EMPTY, DOT_PIXEL_DFT);
 8003672:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003674:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8003676:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 8003678:	2301      	movs	r3, #1
 800367a:	9301      	str	r3, [sp, #4]
 800367c:	2300      	movs	r3, #0
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	2300      	movs	r3, #0
 8003682:	f7ff fa9b 	bl	8002bbc <LCD_DrawCircle>
		LCD_DrawCircle( Cx3, Cy3, Cr, RED, DRAW_EMPTY, DOT_PIXEL_DFT);
 8003686:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003688:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800368a:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800368c:	2301      	movs	r3, #1
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	2300      	movs	r3, #0
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003698:	f7ff fa90 	bl	8002bbc <LCD_DrawCircle>
		LCD_DrawCircle( Cx4, Cy4, Cr, YELLOW, DRAW_EMPTY, DOT_PIXEL_DFT);
 800369c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800369e:	8bf9      	ldrh	r1, [r7, #30]
 80036a0:	8c38      	ldrh	r0, [r7, #32]
 80036a2:	2301      	movs	r3, #1
 80036a4:	9301      	str	r3, [sp, #4]
 80036a6:	2300      	movs	r3, #0
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80036ae:	f7ff fa85 	bl	8002bbc <LCD_DrawCircle>
		LCD_DrawCircle( Cx5, Cy5, Cr, GREEN, DRAW_EMPTY, DOT_PIXEL_DFT);
 80036b2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80036b4:	8b79      	ldrh	r1, [r7, #26]
 80036b6:	8bb8      	ldrh	r0, [r7, #28]
 80036b8:	2301      	movs	r3, #1
 80036ba:	9301      	str	r3, [sp, #4]
 80036bc:	2300      	movs	r3, #0
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036c4:	f7ff fa7a 	bl	8002bbc <LCD_DrawCircle>
		printf("LCD Draw Realistic circles\r\n");
 80036c8:	4828      	ldr	r0, [pc, #160]	; (800376c <LCD_Show+0x570>)
 80036ca:	f000 f931 	bl	8003930 <puts>
		LCD_DrawCircle(15, 90, 10, BRRED, DRAW_FULL, DOT_PIXEL_DFT);
 80036ce:	2301      	movs	r3, #1
 80036d0:	9301      	str	r3, [sp, #4]
 80036d2:	2301      	movs	r3, #1
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	f64f 4307 	movw	r3, #64519	; 0xfc07
 80036da:	220a      	movs	r2, #10
 80036dc:	215a      	movs	r1, #90	; 0x5a
 80036de:	200f      	movs	r0, #15
 80036e0:	f7ff fa6c 	bl	8002bbc <LCD_DrawCircle>
		LCD_DrawCircle(sLCD_DIS.LCD_Dis_Column - 15, 90, 10, BRRED, DRAW_FULL, DOT_PIXEL_DFT);
 80036e4:	4b1d      	ldr	r3, [pc, #116]	; (800375c <LCD_Show+0x560>)
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	3b0f      	subs	r3, #15
 80036ea:	b298      	uxth	r0, r3
 80036ec:	2301      	movs	r3, #1
 80036ee:	9301      	str	r3, [sp, #4]
 80036f0:	2301      	movs	r3, #1
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	f64f 4307 	movw	r3, #64519	; 0xfc07
 80036f8:	220a      	movs	r2, #10
 80036fa:	215a      	movs	r1, #90	; 0x5a
 80036fc:	f7ff fa5e 	bl	8002bbc <LCD_DrawCircle>
		printf("LCD Display String \r\n");
 8003700:	481b      	ldr	r0, [pc, #108]	; (8003770 <LCD_Show+0x574>)
 8003702:	f000 f915 	bl	8003930 <puts>
		LCD_DisplayString(10,20,"WaveShare Electronic",&Font12,LCD_BACKGROUND,BLUE);
 8003706:	231f      	movs	r3, #31
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	4b18      	ldr	r3, [pc, #96]	; (8003774 <LCD_Show+0x578>)
 8003712:	4a19      	ldr	r2, [pc, #100]	; (8003778 <LCD_Show+0x57c>)
 8003714:	2114      	movs	r1, #20
 8003716:	200a      	movs	r0, #10
 8003718:	f7ff fc7a 	bl	8003010 <LCD_DisplayString>
		LCD_DisplayString(35,35,"1.8inch TFTLCD",&Font12,RED,GRED);
 800371c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	4b12      	ldr	r3, [pc, #72]	; (8003774 <LCD_Show+0x578>)
 800372a:	4a14      	ldr	r2, [pc, #80]	; (800377c <LCD_Show+0x580>)
 800372c:	2123      	movs	r1, #35	; 0x23
 800372e:	2023      	movs	r0, #35	; 0x23
 8003730:	f7ff fc6e 	bl	8003010 <LCD_DisplayString>
		printf("LCD Display Nummber \r\n");
 8003734:	4812      	ldr	r0, [pc, #72]	; (8003780 <LCD_Show+0x584>)
 8003736:	f000 f8fb 	bl	8003930 <puts>
		LCD_DisplayNum(35,50,1234567890,&Font12,LCD_BACKGROUND,BLUE);
 800373a:	231f      	movs	r3, #31
 800373c:	9301      	str	r3, [sp, #4]
 800373e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <LCD_Show+0x578>)
 8003746:	4a0f      	ldr	r2, [pc, #60]	; (8003784 <LCD_Show+0x588>)
 8003748:	2132      	movs	r1, #50	; 0x32
 800374a:	2023      	movs	r0, #35	; 0x23
 800374c:	f7ff fcb2 	bl	80030b4 <LCD_DisplayNum>
}
 8003750:	bf00      	nop
 8003752:	3730      	adds	r7, #48	; 0x30
 8003754:	46bd      	mov	sp, r7
 8003756:	bdb0      	pop	{r4, r5, r7, pc}
 8003758:	08004160 	.word	0x08004160
 800375c:	20000104 	.word	0x20000104
 8003760:	08004170 	.word	0x08004170
 8003764:	08004188 	.word	0x08004188
 8003768:	40040000 	.word	0x40040000
 800376c:	080041a0 	.word	0x080041a0
 8003770:	080041bc 	.word	0x080041bc
 8003774:	2000000c 	.word	0x2000000c
 8003778:	08004214 	.word	0x08004214
 800377c:	080041ec 	.word	0x080041ec
 8003780:	080041fc 	.word	0x080041fc
 8003784:	499602d2 	.word	0x499602d2

08003788 <SPI_Write_Byte>:
/*********************************************


*********************************************/	
 uint8_t SPI_Write_Byte(uint8_t value)                                    
{    
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
		Driver_Delay_us(10);
		value = (value << 1); 	
	}
#else
	
    __HAL_SPI_ENABLE(&hspi1);
 8003792:	4b17      	ldr	r3, [pc, #92]	; (80037f0 <SPI_Write_Byte+0x68>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <SPI_Write_Byte+0x68>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a0:	601a      	str	r2, [r3, #0]
	SPI1->CR2 |= (1)<<12;
 80037a2:	4b14      	ldr	r3, [pc, #80]	; (80037f4 <SPI_Write_Byte+0x6c>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4a13      	ldr	r2, [pc, #76]	; (80037f4 <SPI_Write_Byte+0x6c>)
 80037a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037ac:	6053      	str	r3, [r2, #4]
	
	while((SPI1->SR & (1<<1)) == 0)
 80037ae:	bf00      	nop
 80037b0:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <SPI_Write_Byte+0x6c>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f9      	beq.n	80037b0 <SPI_Write_Byte+0x28>
		;
        
        *((__IO uint8_t *)(&SPI1->DR)) = value;
 80037bc:	4a0e      	ldr	r2, [pc, #56]	; (80037f8 <SPI_Write_Byte+0x70>)
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	7013      	strb	r3, [r2, #0]
        
        while(SPI1->SR & (1<<7)) ; //Wait for not busy
 80037c2:	bf00      	nop
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <SPI_Write_Byte+0x6c>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1f9      	bne.n	80037c4 <SPI_Write_Byte+0x3c>

        while((SPI1->SR & (1<<0)) == 0) ; // Wait for the receiving area to be empty
 80037d0:	bf00      	nop
 80037d2:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <SPI_Write_Byte+0x6c>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f9      	beq.n	80037d2 <SPI_Write_Byte+0x4a>
        
        return *((__IO uint8_t *)(&SPI1->DR));
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <SPI_Write_Byte+0x70>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	b2db      	uxtb	r3, r3

#endif
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	200000a8 	.word	0x200000a8
 80037f4:	40013000 	.word	0x40013000
 80037f8:	4001300c 	.word	0x4001300c

080037fc <Driver_Delay_ms>:
/*********************************************


*********************************************/	
void Driver_Delay_ms(uint32_t xms)	
{	
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7fd fda5 	bl	8001354 <HAL_Delay>
}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <__errno>:
 8003814:	4b01      	ldr	r3, [pc, #4]	; (800381c <__errno+0x8>)
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	2000001c 	.word	0x2000001c

08003820 <__libc_init_array>:
 8003820:	b570      	push	{r4, r5, r6, lr}
 8003822:	4e0d      	ldr	r6, [pc, #52]	; (8003858 <__libc_init_array+0x38>)
 8003824:	4c0d      	ldr	r4, [pc, #52]	; (800385c <__libc_init_array+0x3c>)
 8003826:	1ba4      	subs	r4, r4, r6
 8003828:	10a4      	asrs	r4, r4, #2
 800382a:	2500      	movs	r5, #0
 800382c:	42a5      	cmp	r5, r4
 800382e:	d109      	bne.n	8003844 <__libc_init_array+0x24>
 8003830:	4e0b      	ldr	r6, [pc, #44]	; (8003860 <__libc_init_array+0x40>)
 8003832:	4c0c      	ldr	r4, [pc, #48]	; (8003864 <__libc_init_array+0x44>)
 8003834:	f000 fc88 	bl	8004148 <_init>
 8003838:	1ba4      	subs	r4, r4, r6
 800383a:	10a4      	asrs	r4, r4, #2
 800383c:	2500      	movs	r5, #0
 800383e:	42a5      	cmp	r5, r4
 8003840:	d105      	bne.n	800384e <__libc_init_array+0x2e>
 8003842:	bd70      	pop	{r4, r5, r6, pc}
 8003844:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003848:	4798      	blx	r3
 800384a:	3501      	adds	r5, #1
 800384c:	e7ee      	b.n	800382c <__libc_init_array+0xc>
 800384e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003852:	4798      	blx	r3
 8003854:	3501      	adds	r5, #1
 8003856:	e7f2      	b.n	800383e <__libc_init_array+0x1e>
 8003858:	08004a14 	.word	0x08004a14
 800385c:	08004a14 	.word	0x08004a14
 8003860:	08004a14 	.word	0x08004a14
 8003864:	08004a18 	.word	0x08004a18

08003868 <memset>:
 8003868:	4402      	add	r2, r0
 800386a:	4603      	mov	r3, r0
 800386c:	4293      	cmp	r3, r2
 800386e:	d100      	bne.n	8003872 <memset+0xa>
 8003870:	4770      	bx	lr
 8003872:	f803 1b01 	strb.w	r1, [r3], #1
 8003876:	e7f9      	b.n	800386c <memset+0x4>

08003878 <_puts_r>:
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	460e      	mov	r6, r1
 800387c:	4605      	mov	r5, r0
 800387e:	b118      	cbz	r0, 8003888 <_puts_r+0x10>
 8003880:	6983      	ldr	r3, [r0, #24]
 8003882:	b90b      	cbnz	r3, 8003888 <_puts_r+0x10>
 8003884:	f000 fa0c 	bl	8003ca0 <__sinit>
 8003888:	69ab      	ldr	r3, [r5, #24]
 800388a:	68ac      	ldr	r4, [r5, #8]
 800388c:	b913      	cbnz	r3, 8003894 <_puts_r+0x1c>
 800388e:	4628      	mov	r0, r5
 8003890:	f000 fa06 	bl	8003ca0 <__sinit>
 8003894:	4b23      	ldr	r3, [pc, #140]	; (8003924 <_puts_r+0xac>)
 8003896:	429c      	cmp	r4, r3
 8003898:	d117      	bne.n	80038ca <_puts_r+0x52>
 800389a:	686c      	ldr	r4, [r5, #4]
 800389c:	89a3      	ldrh	r3, [r4, #12]
 800389e:	071b      	lsls	r3, r3, #28
 80038a0:	d51d      	bpl.n	80038de <_puts_r+0x66>
 80038a2:	6923      	ldr	r3, [r4, #16]
 80038a4:	b1db      	cbz	r3, 80038de <_puts_r+0x66>
 80038a6:	3e01      	subs	r6, #1
 80038a8:	68a3      	ldr	r3, [r4, #8]
 80038aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80038ae:	3b01      	subs	r3, #1
 80038b0:	60a3      	str	r3, [r4, #8]
 80038b2:	b9e9      	cbnz	r1, 80038f0 <_puts_r+0x78>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	da2e      	bge.n	8003916 <_puts_r+0x9e>
 80038b8:	4622      	mov	r2, r4
 80038ba:	210a      	movs	r1, #10
 80038bc:	4628      	mov	r0, r5
 80038be:	f000 f83f 	bl	8003940 <__swbuf_r>
 80038c2:	3001      	adds	r0, #1
 80038c4:	d011      	beq.n	80038ea <_puts_r+0x72>
 80038c6:	200a      	movs	r0, #10
 80038c8:	e011      	b.n	80038ee <_puts_r+0x76>
 80038ca:	4b17      	ldr	r3, [pc, #92]	; (8003928 <_puts_r+0xb0>)
 80038cc:	429c      	cmp	r4, r3
 80038ce:	d101      	bne.n	80038d4 <_puts_r+0x5c>
 80038d0:	68ac      	ldr	r4, [r5, #8]
 80038d2:	e7e3      	b.n	800389c <_puts_r+0x24>
 80038d4:	4b15      	ldr	r3, [pc, #84]	; (800392c <_puts_r+0xb4>)
 80038d6:	429c      	cmp	r4, r3
 80038d8:	bf08      	it	eq
 80038da:	68ec      	ldreq	r4, [r5, #12]
 80038dc:	e7de      	b.n	800389c <_puts_r+0x24>
 80038de:	4621      	mov	r1, r4
 80038e0:	4628      	mov	r0, r5
 80038e2:	f000 f87f 	bl	80039e4 <__swsetup_r>
 80038e6:	2800      	cmp	r0, #0
 80038e8:	d0dd      	beq.n	80038a6 <_puts_r+0x2e>
 80038ea:	f04f 30ff 	mov.w	r0, #4294967295
 80038ee:	bd70      	pop	{r4, r5, r6, pc}
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	da04      	bge.n	80038fe <_puts_r+0x86>
 80038f4:	69a2      	ldr	r2, [r4, #24]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	dc06      	bgt.n	8003908 <_puts_r+0x90>
 80038fa:	290a      	cmp	r1, #10
 80038fc:	d004      	beq.n	8003908 <_puts_r+0x90>
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	6022      	str	r2, [r4, #0]
 8003904:	7019      	strb	r1, [r3, #0]
 8003906:	e7cf      	b.n	80038a8 <_puts_r+0x30>
 8003908:	4622      	mov	r2, r4
 800390a:	4628      	mov	r0, r5
 800390c:	f000 f818 	bl	8003940 <__swbuf_r>
 8003910:	3001      	adds	r0, #1
 8003912:	d1c9      	bne.n	80038a8 <_puts_r+0x30>
 8003914:	e7e9      	b.n	80038ea <_puts_r+0x72>
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	200a      	movs	r0, #10
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	6022      	str	r2, [r4, #0]
 800391e:	7018      	strb	r0, [r3, #0]
 8003920:	e7e5      	b.n	80038ee <_puts_r+0x76>
 8003922:	bf00      	nop
 8003924:	080049cc 	.word	0x080049cc
 8003928:	080049ec 	.word	0x080049ec
 800392c:	080049ac 	.word	0x080049ac

08003930 <puts>:
 8003930:	4b02      	ldr	r3, [pc, #8]	; (800393c <puts+0xc>)
 8003932:	4601      	mov	r1, r0
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	f7ff bf9f 	b.w	8003878 <_puts_r>
 800393a:	bf00      	nop
 800393c:	2000001c 	.word	0x2000001c

08003940 <__swbuf_r>:
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003942:	460e      	mov	r6, r1
 8003944:	4614      	mov	r4, r2
 8003946:	4605      	mov	r5, r0
 8003948:	b118      	cbz	r0, 8003952 <__swbuf_r+0x12>
 800394a:	6983      	ldr	r3, [r0, #24]
 800394c:	b90b      	cbnz	r3, 8003952 <__swbuf_r+0x12>
 800394e:	f000 f9a7 	bl	8003ca0 <__sinit>
 8003952:	4b21      	ldr	r3, [pc, #132]	; (80039d8 <__swbuf_r+0x98>)
 8003954:	429c      	cmp	r4, r3
 8003956:	d12a      	bne.n	80039ae <__swbuf_r+0x6e>
 8003958:	686c      	ldr	r4, [r5, #4]
 800395a:	69a3      	ldr	r3, [r4, #24]
 800395c:	60a3      	str	r3, [r4, #8]
 800395e:	89a3      	ldrh	r3, [r4, #12]
 8003960:	071a      	lsls	r2, r3, #28
 8003962:	d52e      	bpl.n	80039c2 <__swbuf_r+0x82>
 8003964:	6923      	ldr	r3, [r4, #16]
 8003966:	b363      	cbz	r3, 80039c2 <__swbuf_r+0x82>
 8003968:	6923      	ldr	r3, [r4, #16]
 800396a:	6820      	ldr	r0, [r4, #0]
 800396c:	1ac0      	subs	r0, r0, r3
 800396e:	6963      	ldr	r3, [r4, #20]
 8003970:	b2f6      	uxtb	r6, r6
 8003972:	4283      	cmp	r3, r0
 8003974:	4637      	mov	r7, r6
 8003976:	dc04      	bgt.n	8003982 <__swbuf_r+0x42>
 8003978:	4621      	mov	r1, r4
 800397a:	4628      	mov	r0, r5
 800397c:	f000 f926 	bl	8003bcc <_fflush_r>
 8003980:	bb28      	cbnz	r0, 80039ce <__swbuf_r+0x8e>
 8003982:	68a3      	ldr	r3, [r4, #8]
 8003984:	3b01      	subs	r3, #1
 8003986:	60a3      	str	r3, [r4, #8]
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	6022      	str	r2, [r4, #0]
 800398e:	701e      	strb	r6, [r3, #0]
 8003990:	6963      	ldr	r3, [r4, #20]
 8003992:	3001      	adds	r0, #1
 8003994:	4283      	cmp	r3, r0
 8003996:	d004      	beq.n	80039a2 <__swbuf_r+0x62>
 8003998:	89a3      	ldrh	r3, [r4, #12]
 800399a:	07db      	lsls	r3, r3, #31
 800399c:	d519      	bpl.n	80039d2 <__swbuf_r+0x92>
 800399e:	2e0a      	cmp	r6, #10
 80039a0:	d117      	bne.n	80039d2 <__swbuf_r+0x92>
 80039a2:	4621      	mov	r1, r4
 80039a4:	4628      	mov	r0, r5
 80039a6:	f000 f911 	bl	8003bcc <_fflush_r>
 80039aa:	b190      	cbz	r0, 80039d2 <__swbuf_r+0x92>
 80039ac:	e00f      	b.n	80039ce <__swbuf_r+0x8e>
 80039ae:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <__swbuf_r+0x9c>)
 80039b0:	429c      	cmp	r4, r3
 80039b2:	d101      	bne.n	80039b8 <__swbuf_r+0x78>
 80039b4:	68ac      	ldr	r4, [r5, #8]
 80039b6:	e7d0      	b.n	800395a <__swbuf_r+0x1a>
 80039b8:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <__swbuf_r+0xa0>)
 80039ba:	429c      	cmp	r4, r3
 80039bc:	bf08      	it	eq
 80039be:	68ec      	ldreq	r4, [r5, #12]
 80039c0:	e7cb      	b.n	800395a <__swbuf_r+0x1a>
 80039c2:	4621      	mov	r1, r4
 80039c4:	4628      	mov	r0, r5
 80039c6:	f000 f80d 	bl	80039e4 <__swsetup_r>
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d0cc      	beq.n	8003968 <__swbuf_r+0x28>
 80039ce:	f04f 37ff 	mov.w	r7, #4294967295
 80039d2:	4638      	mov	r0, r7
 80039d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039d6:	bf00      	nop
 80039d8:	080049cc 	.word	0x080049cc
 80039dc:	080049ec 	.word	0x080049ec
 80039e0:	080049ac 	.word	0x080049ac

080039e4 <__swsetup_r>:
 80039e4:	4b32      	ldr	r3, [pc, #200]	; (8003ab0 <__swsetup_r+0xcc>)
 80039e6:	b570      	push	{r4, r5, r6, lr}
 80039e8:	681d      	ldr	r5, [r3, #0]
 80039ea:	4606      	mov	r6, r0
 80039ec:	460c      	mov	r4, r1
 80039ee:	b125      	cbz	r5, 80039fa <__swsetup_r+0x16>
 80039f0:	69ab      	ldr	r3, [r5, #24]
 80039f2:	b913      	cbnz	r3, 80039fa <__swsetup_r+0x16>
 80039f4:	4628      	mov	r0, r5
 80039f6:	f000 f953 	bl	8003ca0 <__sinit>
 80039fa:	4b2e      	ldr	r3, [pc, #184]	; (8003ab4 <__swsetup_r+0xd0>)
 80039fc:	429c      	cmp	r4, r3
 80039fe:	d10f      	bne.n	8003a20 <__swsetup_r+0x3c>
 8003a00:	686c      	ldr	r4, [r5, #4]
 8003a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	0715      	lsls	r5, r2, #28
 8003a0a:	d42c      	bmi.n	8003a66 <__swsetup_r+0x82>
 8003a0c:	06d0      	lsls	r0, r2, #27
 8003a0e:	d411      	bmi.n	8003a34 <__swsetup_r+0x50>
 8003a10:	2209      	movs	r2, #9
 8003a12:	6032      	str	r2, [r6, #0]
 8003a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a18:	81a3      	strh	r3, [r4, #12]
 8003a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1e:	e03e      	b.n	8003a9e <__swsetup_r+0xba>
 8003a20:	4b25      	ldr	r3, [pc, #148]	; (8003ab8 <__swsetup_r+0xd4>)
 8003a22:	429c      	cmp	r4, r3
 8003a24:	d101      	bne.n	8003a2a <__swsetup_r+0x46>
 8003a26:	68ac      	ldr	r4, [r5, #8]
 8003a28:	e7eb      	b.n	8003a02 <__swsetup_r+0x1e>
 8003a2a:	4b24      	ldr	r3, [pc, #144]	; (8003abc <__swsetup_r+0xd8>)
 8003a2c:	429c      	cmp	r4, r3
 8003a2e:	bf08      	it	eq
 8003a30:	68ec      	ldreq	r4, [r5, #12]
 8003a32:	e7e6      	b.n	8003a02 <__swsetup_r+0x1e>
 8003a34:	0751      	lsls	r1, r2, #29
 8003a36:	d512      	bpl.n	8003a5e <__swsetup_r+0x7a>
 8003a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a3a:	b141      	cbz	r1, 8003a4e <__swsetup_r+0x6a>
 8003a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a40:	4299      	cmp	r1, r3
 8003a42:	d002      	beq.n	8003a4a <__swsetup_r+0x66>
 8003a44:	4630      	mov	r0, r6
 8003a46:	f000 fa19 	bl	8003e7c <_free_r>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	6363      	str	r3, [r4, #52]	; 0x34
 8003a4e:	89a3      	ldrh	r3, [r4, #12]
 8003a50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a54:	81a3      	strh	r3, [r4, #12]
 8003a56:	2300      	movs	r3, #0
 8003a58:	6063      	str	r3, [r4, #4]
 8003a5a:	6923      	ldr	r3, [r4, #16]
 8003a5c:	6023      	str	r3, [r4, #0]
 8003a5e:	89a3      	ldrh	r3, [r4, #12]
 8003a60:	f043 0308 	orr.w	r3, r3, #8
 8003a64:	81a3      	strh	r3, [r4, #12]
 8003a66:	6923      	ldr	r3, [r4, #16]
 8003a68:	b94b      	cbnz	r3, 8003a7e <__swsetup_r+0x9a>
 8003a6a:	89a3      	ldrh	r3, [r4, #12]
 8003a6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a74:	d003      	beq.n	8003a7e <__swsetup_r+0x9a>
 8003a76:	4621      	mov	r1, r4
 8003a78:	4630      	mov	r0, r6
 8003a7a:	f000 f9bf 	bl	8003dfc <__smakebuf_r>
 8003a7e:	89a2      	ldrh	r2, [r4, #12]
 8003a80:	f012 0301 	ands.w	r3, r2, #1
 8003a84:	d00c      	beq.n	8003aa0 <__swsetup_r+0xbc>
 8003a86:	2300      	movs	r3, #0
 8003a88:	60a3      	str	r3, [r4, #8]
 8003a8a:	6963      	ldr	r3, [r4, #20]
 8003a8c:	425b      	negs	r3, r3
 8003a8e:	61a3      	str	r3, [r4, #24]
 8003a90:	6923      	ldr	r3, [r4, #16]
 8003a92:	b953      	cbnz	r3, 8003aaa <__swsetup_r+0xc6>
 8003a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a98:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003a9c:	d1ba      	bne.n	8003a14 <__swsetup_r+0x30>
 8003a9e:	bd70      	pop	{r4, r5, r6, pc}
 8003aa0:	0792      	lsls	r2, r2, #30
 8003aa2:	bf58      	it	pl
 8003aa4:	6963      	ldrpl	r3, [r4, #20]
 8003aa6:	60a3      	str	r3, [r4, #8]
 8003aa8:	e7f2      	b.n	8003a90 <__swsetup_r+0xac>
 8003aaa:	2000      	movs	r0, #0
 8003aac:	e7f7      	b.n	8003a9e <__swsetup_r+0xba>
 8003aae:	bf00      	nop
 8003ab0:	2000001c 	.word	0x2000001c
 8003ab4:	080049cc 	.word	0x080049cc
 8003ab8:	080049ec 	.word	0x080049ec
 8003abc:	080049ac 	.word	0x080049ac

08003ac0 <__sflush_r>:
 8003ac0:	898a      	ldrh	r2, [r1, #12]
 8003ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ac6:	4605      	mov	r5, r0
 8003ac8:	0710      	lsls	r0, r2, #28
 8003aca:	460c      	mov	r4, r1
 8003acc:	d458      	bmi.n	8003b80 <__sflush_r+0xc0>
 8003ace:	684b      	ldr	r3, [r1, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	dc05      	bgt.n	8003ae0 <__sflush_r+0x20>
 8003ad4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	dc02      	bgt.n	8003ae0 <__sflush_r+0x20>
 8003ada:	2000      	movs	r0, #0
 8003adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ae2:	2e00      	cmp	r6, #0
 8003ae4:	d0f9      	beq.n	8003ada <__sflush_r+0x1a>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003aec:	682f      	ldr	r7, [r5, #0]
 8003aee:	6a21      	ldr	r1, [r4, #32]
 8003af0:	602b      	str	r3, [r5, #0]
 8003af2:	d032      	beq.n	8003b5a <__sflush_r+0x9a>
 8003af4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003af6:	89a3      	ldrh	r3, [r4, #12]
 8003af8:	075a      	lsls	r2, r3, #29
 8003afa:	d505      	bpl.n	8003b08 <__sflush_r+0x48>
 8003afc:	6863      	ldr	r3, [r4, #4]
 8003afe:	1ac0      	subs	r0, r0, r3
 8003b00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b02:	b10b      	cbz	r3, 8003b08 <__sflush_r+0x48>
 8003b04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b06:	1ac0      	subs	r0, r0, r3
 8003b08:	2300      	movs	r3, #0
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b0e:	6a21      	ldr	r1, [r4, #32]
 8003b10:	4628      	mov	r0, r5
 8003b12:	47b0      	blx	r6
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	89a3      	ldrh	r3, [r4, #12]
 8003b18:	d106      	bne.n	8003b28 <__sflush_r+0x68>
 8003b1a:	6829      	ldr	r1, [r5, #0]
 8003b1c:	291d      	cmp	r1, #29
 8003b1e:	d848      	bhi.n	8003bb2 <__sflush_r+0xf2>
 8003b20:	4a29      	ldr	r2, [pc, #164]	; (8003bc8 <__sflush_r+0x108>)
 8003b22:	40ca      	lsrs	r2, r1
 8003b24:	07d6      	lsls	r6, r2, #31
 8003b26:	d544      	bpl.n	8003bb2 <__sflush_r+0xf2>
 8003b28:	2200      	movs	r2, #0
 8003b2a:	6062      	str	r2, [r4, #4]
 8003b2c:	04d9      	lsls	r1, r3, #19
 8003b2e:	6922      	ldr	r2, [r4, #16]
 8003b30:	6022      	str	r2, [r4, #0]
 8003b32:	d504      	bpl.n	8003b3e <__sflush_r+0x7e>
 8003b34:	1c42      	adds	r2, r0, #1
 8003b36:	d101      	bne.n	8003b3c <__sflush_r+0x7c>
 8003b38:	682b      	ldr	r3, [r5, #0]
 8003b3a:	b903      	cbnz	r3, 8003b3e <__sflush_r+0x7e>
 8003b3c:	6560      	str	r0, [r4, #84]	; 0x54
 8003b3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b40:	602f      	str	r7, [r5, #0]
 8003b42:	2900      	cmp	r1, #0
 8003b44:	d0c9      	beq.n	8003ada <__sflush_r+0x1a>
 8003b46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b4a:	4299      	cmp	r1, r3
 8003b4c:	d002      	beq.n	8003b54 <__sflush_r+0x94>
 8003b4e:	4628      	mov	r0, r5
 8003b50:	f000 f994 	bl	8003e7c <_free_r>
 8003b54:	2000      	movs	r0, #0
 8003b56:	6360      	str	r0, [r4, #52]	; 0x34
 8003b58:	e7c0      	b.n	8003adc <__sflush_r+0x1c>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	47b0      	blx	r6
 8003b60:	1c41      	adds	r1, r0, #1
 8003b62:	d1c8      	bne.n	8003af6 <__sflush_r+0x36>
 8003b64:	682b      	ldr	r3, [r5, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0c5      	beq.n	8003af6 <__sflush_r+0x36>
 8003b6a:	2b1d      	cmp	r3, #29
 8003b6c:	d001      	beq.n	8003b72 <__sflush_r+0xb2>
 8003b6e:	2b16      	cmp	r3, #22
 8003b70:	d101      	bne.n	8003b76 <__sflush_r+0xb6>
 8003b72:	602f      	str	r7, [r5, #0]
 8003b74:	e7b1      	b.n	8003ada <__sflush_r+0x1a>
 8003b76:	89a3      	ldrh	r3, [r4, #12]
 8003b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b7c:	81a3      	strh	r3, [r4, #12]
 8003b7e:	e7ad      	b.n	8003adc <__sflush_r+0x1c>
 8003b80:	690f      	ldr	r7, [r1, #16]
 8003b82:	2f00      	cmp	r7, #0
 8003b84:	d0a9      	beq.n	8003ada <__sflush_r+0x1a>
 8003b86:	0793      	lsls	r3, r2, #30
 8003b88:	680e      	ldr	r6, [r1, #0]
 8003b8a:	bf08      	it	eq
 8003b8c:	694b      	ldreq	r3, [r1, #20]
 8003b8e:	600f      	str	r7, [r1, #0]
 8003b90:	bf18      	it	ne
 8003b92:	2300      	movne	r3, #0
 8003b94:	eba6 0807 	sub.w	r8, r6, r7
 8003b98:	608b      	str	r3, [r1, #8]
 8003b9a:	f1b8 0f00 	cmp.w	r8, #0
 8003b9e:	dd9c      	ble.n	8003ada <__sflush_r+0x1a>
 8003ba0:	4643      	mov	r3, r8
 8003ba2:	463a      	mov	r2, r7
 8003ba4:	6a21      	ldr	r1, [r4, #32]
 8003ba6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ba8:	4628      	mov	r0, r5
 8003baa:	47b0      	blx	r6
 8003bac:	2800      	cmp	r0, #0
 8003bae:	dc06      	bgt.n	8003bbe <__sflush_r+0xfe>
 8003bb0:	89a3      	ldrh	r3, [r4, #12]
 8003bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bb6:	81a3      	strh	r3, [r4, #12]
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbc:	e78e      	b.n	8003adc <__sflush_r+0x1c>
 8003bbe:	4407      	add	r7, r0
 8003bc0:	eba8 0800 	sub.w	r8, r8, r0
 8003bc4:	e7e9      	b.n	8003b9a <__sflush_r+0xda>
 8003bc6:	bf00      	nop
 8003bc8:	20400001 	.word	0x20400001

08003bcc <_fflush_r>:
 8003bcc:	b538      	push	{r3, r4, r5, lr}
 8003bce:	690b      	ldr	r3, [r1, #16]
 8003bd0:	4605      	mov	r5, r0
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	b1db      	cbz	r3, 8003c0e <_fflush_r+0x42>
 8003bd6:	b118      	cbz	r0, 8003be0 <_fflush_r+0x14>
 8003bd8:	6983      	ldr	r3, [r0, #24]
 8003bda:	b90b      	cbnz	r3, 8003be0 <_fflush_r+0x14>
 8003bdc:	f000 f860 	bl	8003ca0 <__sinit>
 8003be0:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <_fflush_r+0x48>)
 8003be2:	429c      	cmp	r4, r3
 8003be4:	d109      	bne.n	8003bfa <_fflush_r+0x2e>
 8003be6:	686c      	ldr	r4, [r5, #4]
 8003be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bec:	b17b      	cbz	r3, 8003c0e <_fflush_r+0x42>
 8003bee:	4621      	mov	r1, r4
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bf6:	f7ff bf63 	b.w	8003ac0 <__sflush_r>
 8003bfa:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <_fflush_r+0x4c>)
 8003bfc:	429c      	cmp	r4, r3
 8003bfe:	d101      	bne.n	8003c04 <_fflush_r+0x38>
 8003c00:	68ac      	ldr	r4, [r5, #8]
 8003c02:	e7f1      	b.n	8003be8 <_fflush_r+0x1c>
 8003c04:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <_fflush_r+0x50>)
 8003c06:	429c      	cmp	r4, r3
 8003c08:	bf08      	it	eq
 8003c0a:	68ec      	ldreq	r4, [r5, #12]
 8003c0c:	e7ec      	b.n	8003be8 <_fflush_r+0x1c>
 8003c0e:	2000      	movs	r0, #0
 8003c10:	bd38      	pop	{r3, r4, r5, pc}
 8003c12:	bf00      	nop
 8003c14:	080049cc 	.word	0x080049cc
 8003c18:	080049ec 	.word	0x080049ec
 8003c1c:	080049ac 	.word	0x080049ac

08003c20 <std>:
 8003c20:	2300      	movs	r3, #0
 8003c22:	b510      	push	{r4, lr}
 8003c24:	4604      	mov	r4, r0
 8003c26:	e9c0 3300 	strd	r3, r3, [r0]
 8003c2a:	6083      	str	r3, [r0, #8]
 8003c2c:	8181      	strh	r1, [r0, #12]
 8003c2e:	6643      	str	r3, [r0, #100]	; 0x64
 8003c30:	81c2      	strh	r2, [r0, #14]
 8003c32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c36:	6183      	str	r3, [r0, #24]
 8003c38:	4619      	mov	r1, r3
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	305c      	adds	r0, #92	; 0x5c
 8003c3e:	f7ff fe13 	bl	8003868 <memset>
 8003c42:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <std+0x38>)
 8003c44:	6263      	str	r3, [r4, #36]	; 0x24
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <std+0x3c>)
 8003c48:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <std+0x40>)
 8003c4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c4e:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <std+0x44>)
 8003c50:	6224      	str	r4, [r4, #32]
 8003c52:	6323      	str	r3, [r4, #48]	; 0x30
 8003c54:	bd10      	pop	{r4, pc}
 8003c56:	bf00      	nop
 8003c58:	08003fed 	.word	0x08003fed
 8003c5c:	0800400f 	.word	0x0800400f
 8003c60:	08004047 	.word	0x08004047
 8003c64:	0800406b 	.word	0x0800406b

08003c68 <_cleanup_r>:
 8003c68:	4901      	ldr	r1, [pc, #4]	; (8003c70 <_cleanup_r+0x8>)
 8003c6a:	f000 b885 	b.w	8003d78 <_fwalk_reent>
 8003c6e:	bf00      	nop
 8003c70:	08003bcd 	.word	0x08003bcd

08003c74 <__sfmoreglue>:
 8003c74:	b570      	push	{r4, r5, r6, lr}
 8003c76:	1e4a      	subs	r2, r1, #1
 8003c78:	2568      	movs	r5, #104	; 0x68
 8003c7a:	4355      	muls	r5, r2
 8003c7c:	460e      	mov	r6, r1
 8003c7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c82:	f000 f949 	bl	8003f18 <_malloc_r>
 8003c86:	4604      	mov	r4, r0
 8003c88:	b140      	cbz	r0, 8003c9c <__sfmoreglue+0x28>
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	e9c0 1600 	strd	r1, r6, [r0]
 8003c90:	300c      	adds	r0, #12
 8003c92:	60a0      	str	r0, [r4, #8]
 8003c94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c98:	f7ff fde6 	bl	8003868 <memset>
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	bd70      	pop	{r4, r5, r6, pc}

08003ca0 <__sinit>:
 8003ca0:	6983      	ldr	r3, [r0, #24]
 8003ca2:	b510      	push	{r4, lr}
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	bb33      	cbnz	r3, 8003cf6 <__sinit+0x56>
 8003ca8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003cac:	6503      	str	r3, [r0, #80]	; 0x50
 8003cae:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <__sinit+0x58>)
 8003cb0:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <__sinit+0x5c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6282      	str	r2, [r0, #40]	; 0x28
 8003cb6:	4298      	cmp	r0, r3
 8003cb8:	bf04      	itt	eq
 8003cba:	2301      	moveq	r3, #1
 8003cbc:	6183      	streq	r3, [r0, #24]
 8003cbe:	f000 f81f 	bl	8003d00 <__sfp>
 8003cc2:	6060      	str	r0, [r4, #4]
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f000 f81b 	bl	8003d00 <__sfp>
 8003cca:	60a0      	str	r0, [r4, #8]
 8003ccc:	4620      	mov	r0, r4
 8003cce:	f000 f817 	bl	8003d00 <__sfp>
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	60e0      	str	r0, [r4, #12]
 8003cd6:	2104      	movs	r1, #4
 8003cd8:	6860      	ldr	r0, [r4, #4]
 8003cda:	f7ff ffa1 	bl	8003c20 <std>
 8003cde:	2201      	movs	r2, #1
 8003ce0:	2109      	movs	r1, #9
 8003ce2:	68a0      	ldr	r0, [r4, #8]
 8003ce4:	f7ff ff9c 	bl	8003c20 <std>
 8003ce8:	2202      	movs	r2, #2
 8003cea:	2112      	movs	r1, #18
 8003cec:	68e0      	ldr	r0, [r4, #12]
 8003cee:	f7ff ff97 	bl	8003c20 <std>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	61a3      	str	r3, [r4, #24]
 8003cf6:	bd10      	pop	{r4, pc}
 8003cf8:	080049a8 	.word	0x080049a8
 8003cfc:	08003c69 	.word	0x08003c69

08003d00 <__sfp>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <__sfp+0x70>)
 8003d04:	681e      	ldr	r6, [r3, #0]
 8003d06:	69b3      	ldr	r3, [r6, #24]
 8003d08:	4607      	mov	r7, r0
 8003d0a:	b913      	cbnz	r3, 8003d12 <__sfp+0x12>
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	f7ff ffc7 	bl	8003ca0 <__sinit>
 8003d12:	3648      	adds	r6, #72	; 0x48
 8003d14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	d503      	bpl.n	8003d24 <__sfp+0x24>
 8003d1c:	6833      	ldr	r3, [r6, #0]
 8003d1e:	b133      	cbz	r3, 8003d2e <__sfp+0x2e>
 8003d20:	6836      	ldr	r6, [r6, #0]
 8003d22:	e7f7      	b.n	8003d14 <__sfp+0x14>
 8003d24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d28:	b16d      	cbz	r5, 8003d46 <__sfp+0x46>
 8003d2a:	3468      	adds	r4, #104	; 0x68
 8003d2c:	e7f4      	b.n	8003d18 <__sfp+0x18>
 8003d2e:	2104      	movs	r1, #4
 8003d30:	4638      	mov	r0, r7
 8003d32:	f7ff ff9f 	bl	8003c74 <__sfmoreglue>
 8003d36:	6030      	str	r0, [r6, #0]
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	d1f1      	bne.n	8003d20 <__sfp+0x20>
 8003d3c:	230c      	movs	r3, #12
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4604      	mov	r4, r0
 8003d42:	4620      	mov	r0, r4
 8003d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d46:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <__sfp+0x74>)
 8003d48:	6665      	str	r5, [r4, #100]	; 0x64
 8003d4a:	e9c4 5500 	strd	r5, r5, [r4]
 8003d4e:	60a5      	str	r5, [r4, #8]
 8003d50:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003d54:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003d58:	2208      	movs	r2, #8
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d60:	f7ff fd82 	bl	8003868 <memset>
 8003d64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d6c:	e7e9      	b.n	8003d42 <__sfp+0x42>
 8003d6e:	bf00      	nop
 8003d70:	080049a8 	.word	0x080049a8
 8003d74:	ffff0001 	.word	0xffff0001

08003d78 <_fwalk_reent>:
 8003d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d7c:	4680      	mov	r8, r0
 8003d7e:	4689      	mov	r9, r1
 8003d80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d84:	2600      	movs	r6, #0
 8003d86:	b914      	cbnz	r4, 8003d8e <_fwalk_reent+0x16>
 8003d88:	4630      	mov	r0, r6
 8003d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d8e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003d92:	3f01      	subs	r7, #1
 8003d94:	d501      	bpl.n	8003d9a <_fwalk_reent+0x22>
 8003d96:	6824      	ldr	r4, [r4, #0]
 8003d98:	e7f5      	b.n	8003d86 <_fwalk_reent+0xe>
 8003d9a:	89ab      	ldrh	r3, [r5, #12]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d907      	bls.n	8003db0 <_fwalk_reent+0x38>
 8003da0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003da4:	3301      	adds	r3, #1
 8003da6:	d003      	beq.n	8003db0 <_fwalk_reent+0x38>
 8003da8:	4629      	mov	r1, r5
 8003daa:	4640      	mov	r0, r8
 8003dac:	47c8      	blx	r9
 8003dae:	4306      	orrs	r6, r0
 8003db0:	3568      	adds	r5, #104	; 0x68
 8003db2:	e7ee      	b.n	8003d92 <_fwalk_reent+0x1a>

08003db4 <__swhatbuf_r>:
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	460e      	mov	r6, r1
 8003db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dbc:	2900      	cmp	r1, #0
 8003dbe:	b096      	sub	sp, #88	; 0x58
 8003dc0:	4614      	mov	r4, r2
 8003dc2:	461d      	mov	r5, r3
 8003dc4:	da07      	bge.n	8003dd6 <__swhatbuf_r+0x22>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	602b      	str	r3, [r5, #0]
 8003dca:	89b3      	ldrh	r3, [r6, #12]
 8003dcc:	061a      	lsls	r2, r3, #24
 8003dce:	d410      	bmi.n	8003df2 <__swhatbuf_r+0x3e>
 8003dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dd4:	e00e      	b.n	8003df4 <__swhatbuf_r+0x40>
 8003dd6:	466a      	mov	r2, sp
 8003dd8:	f000 f96e 	bl	80040b8 <_fstat_r>
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	dbf2      	blt.n	8003dc6 <__swhatbuf_r+0x12>
 8003de0:	9a01      	ldr	r2, [sp, #4]
 8003de2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003de6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003dea:	425a      	negs	r2, r3
 8003dec:	415a      	adcs	r2, r3
 8003dee:	602a      	str	r2, [r5, #0]
 8003df0:	e7ee      	b.n	8003dd0 <__swhatbuf_r+0x1c>
 8003df2:	2340      	movs	r3, #64	; 0x40
 8003df4:	2000      	movs	r0, #0
 8003df6:	6023      	str	r3, [r4, #0]
 8003df8:	b016      	add	sp, #88	; 0x58
 8003dfa:	bd70      	pop	{r4, r5, r6, pc}

08003dfc <__smakebuf_r>:
 8003dfc:	898b      	ldrh	r3, [r1, #12]
 8003dfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e00:	079d      	lsls	r5, r3, #30
 8003e02:	4606      	mov	r6, r0
 8003e04:	460c      	mov	r4, r1
 8003e06:	d507      	bpl.n	8003e18 <__smakebuf_r+0x1c>
 8003e08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	6123      	str	r3, [r4, #16]
 8003e10:	2301      	movs	r3, #1
 8003e12:	6163      	str	r3, [r4, #20]
 8003e14:	b002      	add	sp, #8
 8003e16:	bd70      	pop	{r4, r5, r6, pc}
 8003e18:	ab01      	add	r3, sp, #4
 8003e1a:	466a      	mov	r2, sp
 8003e1c:	f7ff ffca 	bl	8003db4 <__swhatbuf_r>
 8003e20:	9900      	ldr	r1, [sp, #0]
 8003e22:	4605      	mov	r5, r0
 8003e24:	4630      	mov	r0, r6
 8003e26:	f000 f877 	bl	8003f18 <_malloc_r>
 8003e2a:	b948      	cbnz	r0, 8003e40 <__smakebuf_r+0x44>
 8003e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e30:	059a      	lsls	r2, r3, #22
 8003e32:	d4ef      	bmi.n	8003e14 <__smakebuf_r+0x18>
 8003e34:	f023 0303 	bic.w	r3, r3, #3
 8003e38:	f043 0302 	orr.w	r3, r3, #2
 8003e3c:	81a3      	strh	r3, [r4, #12]
 8003e3e:	e7e3      	b.n	8003e08 <__smakebuf_r+0xc>
 8003e40:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <__smakebuf_r+0x7c>)
 8003e42:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e44:	89a3      	ldrh	r3, [r4, #12]
 8003e46:	6020      	str	r0, [r4, #0]
 8003e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e4c:	81a3      	strh	r3, [r4, #12]
 8003e4e:	9b00      	ldr	r3, [sp, #0]
 8003e50:	6163      	str	r3, [r4, #20]
 8003e52:	9b01      	ldr	r3, [sp, #4]
 8003e54:	6120      	str	r0, [r4, #16]
 8003e56:	b15b      	cbz	r3, 8003e70 <__smakebuf_r+0x74>
 8003e58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e5c:	4630      	mov	r0, r6
 8003e5e:	f000 f93d 	bl	80040dc <_isatty_r>
 8003e62:	b128      	cbz	r0, 8003e70 <__smakebuf_r+0x74>
 8003e64:	89a3      	ldrh	r3, [r4, #12]
 8003e66:	f023 0303 	bic.w	r3, r3, #3
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	81a3      	strh	r3, [r4, #12]
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	431d      	orrs	r5, r3
 8003e74:	81a5      	strh	r5, [r4, #12]
 8003e76:	e7cd      	b.n	8003e14 <__smakebuf_r+0x18>
 8003e78:	08003c69 	.word	0x08003c69

08003e7c <_free_r>:
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	4605      	mov	r5, r0
 8003e80:	2900      	cmp	r1, #0
 8003e82:	d045      	beq.n	8003f10 <_free_r+0x94>
 8003e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e88:	1f0c      	subs	r4, r1, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	bfb8      	it	lt
 8003e8e:	18e4      	addlt	r4, r4, r3
 8003e90:	f000 f946 	bl	8004120 <__malloc_lock>
 8003e94:	4a1f      	ldr	r2, [pc, #124]	; (8003f14 <_free_r+0x98>)
 8003e96:	6813      	ldr	r3, [r2, #0]
 8003e98:	4610      	mov	r0, r2
 8003e9a:	b933      	cbnz	r3, 8003eaa <_free_r+0x2e>
 8003e9c:	6063      	str	r3, [r4, #4]
 8003e9e:	6014      	str	r4, [r2, #0]
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ea6:	f000 b93c 	b.w	8004122 <__malloc_unlock>
 8003eaa:	42a3      	cmp	r3, r4
 8003eac:	d90c      	bls.n	8003ec8 <_free_r+0x4c>
 8003eae:	6821      	ldr	r1, [r4, #0]
 8003eb0:	1862      	adds	r2, r4, r1
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	bf04      	itt	eq
 8003eb6:	681a      	ldreq	r2, [r3, #0]
 8003eb8:	685b      	ldreq	r3, [r3, #4]
 8003eba:	6063      	str	r3, [r4, #4]
 8003ebc:	bf04      	itt	eq
 8003ebe:	1852      	addeq	r2, r2, r1
 8003ec0:	6022      	streq	r2, [r4, #0]
 8003ec2:	6004      	str	r4, [r0, #0]
 8003ec4:	e7ec      	b.n	8003ea0 <_free_r+0x24>
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	b10a      	cbz	r2, 8003ed0 <_free_r+0x54>
 8003ecc:	42a2      	cmp	r2, r4
 8003ece:	d9fa      	bls.n	8003ec6 <_free_r+0x4a>
 8003ed0:	6819      	ldr	r1, [r3, #0]
 8003ed2:	1858      	adds	r0, r3, r1
 8003ed4:	42a0      	cmp	r0, r4
 8003ed6:	d10b      	bne.n	8003ef0 <_free_r+0x74>
 8003ed8:	6820      	ldr	r0, [r4, #0]
 8003eda:	4401      	add	r1, r0
 8003edc:	1858      	adds	r0, r3, r1
 8003ede:	4282      	cmp	r2, r0
 8003ee0:	6019      	str	r1, [r3, #0]
 8003ee2:	d1dd      	bne.n	8003ea0 <_free_r+0x24>
 8003ee4:	6810      	ldr	r0, [r2, #0]
 8003ee6:	6852      	ldr	r2, [r2, #4]
 8003ee8:	605a      	str	r2, [r3, #4]
 8003eea:	4401      	add	r1, r0
 8003eec:	6019      	str	r1, [r3, #0]
 8003eee:	e7d7      	b.n	8003ea0 <_free_r+0x24>
 8003ef0:	d902      	bls.n	8003ef8 <_free_r+0x7c>
 8003ef2:	230c      	movs	r3, #12
 8003ef4:	602b      	str	r3, [r5, #0]
 8003ef6:	e7d3      	b.n	8003ea0 <_free_r+0x24>
 8003ef8:	6820      	ldr	r0, [r4, #0]
 8003efa:	1821      	adds	r1, r4, r0
 8003efc:	428a      	cmp	r2, r1
 8003efe:	bf04      	itt	eq
 8003f00:	6811      	ldreq	r1, [r2, #0]
 8003f02:	6852      	ldreq	r2, [r2, #4]
 8003f04:	6062      	str	r2, [r4, #4]
 8003f06:	bf04      	itt	eq
 8003f08:	1809      	addeq	r1, r1, r0
 8003f0a:	6021      	streq	r1, [r4, #0]
 8003f0c:	605c      	str	r4, [r3, #4]
 8003f0e:	e7c7      	b.n	8003ea0 <_free_r+0x24>
 8003f10:	bd38      	pop	{r3, r4, r5, pc}
 8003f12:	bf00      	nop
 8003f14:	200000a0 	.word	0x200000a0

08003f18 <_malloc_r>:
 8003f18:	b570      	push	{r4, r5, r6, lr}
 8003f1a:	1ccd      	adds	r5, r1, #3
 8003f1c:	f025 0503 	bic.w	r5, r5, #3
 8003f20:	3508      	adds	r5, #8
 8003f22:	2d0c      	cmp	r5, #12
 8003f24:	bf38      	it	cc
 8003f26:	250c      	movcc	r5, #12
 8003f28:	2d00      	cmp	r5, #0
 8003f2a:	4606      	mov	r6, r0
 8003f2c:	db01      	blt.n	8003f32 <_malloc_r+0x1a>
 8003f2e:	42a9      	cmp	r1, r5
 8003f30:	d903      	bls.n	8003f3a <_malloc_r+0x22>
 8003f32:	230c      	movs	r3, #12
 8003f34:	6033      	str	r3, [r6, #0]
 8003f36:	2000      	movs	r0, #0
 8003f38:	bd70      	pop	{r4, r5, r6, pc}
 8003f3a:	f000 f8f1 	bl	8004120 <__malloc_lock>
 8003f3e:	4a21      	ldr	r2, [pc, #132]	; (8003fc4 <_malloc_r+0xac>)
 8003f40:	6814      	ldr	r4, [r2, #0]
 8003f42:	4621      	mov	r1, r4
 8003f44:	b991      	cbnz	r1, 8003f6c <_malloc_r+0x54>
 8003f46:	4c20      	ldr	r4, [pc, #128]	; (8003fc8 <_malloc_r+0xb0>)
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	b91b      	cbnz	r3, 8003f54 <_malloc_r+0x3c>
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f000 f83d 	bl	8003fcc <_sbrk_r>
 8003f52:	6020      	str	r0, [r4, #0]
 8003f54:	4629      	mov	r1, r5
 8003f56:	4630      	mov	r0, r6
 8003f58:	f000 f838 	bl	8003fcc <_sbrk_r>
 8003f5c:	1c43      	adds	r3, r0, #1
 8003f5e:	d124      	bne.n	8003faa <_malloc_r+0x92>
 8003f60:	230c      	movs	r3, #12
 8003f62:	6033      	str	r3, [r6, #0]
 8003f64:	4630      	mov	r0, r6
 8003f66:	f000 f8dc 	bl	8004122 <__malloc_unlock>
 8003f6a:	e7e4      	b.n	8003f36 <_malloc_r+0x1e>
 8003f6c:	680b      	ldr	r3, [r1, #0]
 8003f6e:	1b5b      	subs	r3, r3, r5
 8003f70:	d418      	bmi.n	8003fa4 <_malloc_r+0x8c>
 8003f72:	2b0b      	cmp	r3, #11
 8003f74:	d90f      	bls.n	8003f96 <_malloc_r+0x7e>
 8003f76:	600b      	str	r3, [r1, #0]
 8003f78:	50cd      	str	r5, [r1, r3]
 8003f7a:	18cc      	adds	r4, r1, r3
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	f000 f8d0 	bl	8004122 <__malloc_unlock>
 8003f82:	f104 000b 	add.w	r0, r4, #11
 8003f86:	1d23      	adds	r3, r4, #4
 8003f88:	f020 0007 	bic.w	r0, r0, #7
 8003f8c:	1ac3      	subs	r3, r0, r3
 8003f8e:	d0d3      	beq.n	8003f38 <_malloc_r+0x20>
 8003f90:	425a      	negs	r2, r3
 8003f92:	50e2      	str	r2, [r4, r3]
 8003f94:	e7d0      	b.n	8003f38 <_malloc_r+0x20>
 8003f96:	428c      	cmp	r4, r1
 8003f98:	684b      	ldr	r3, [r1, #4]
 8003f9a:	bf16      	itet	ne
 8003f9c:	6063      	strne	r3, [r4, #4]
 8003f9e:	6013      	streq	r3, [r2, #0]
 8003fa0:	460c      	movne	r4, r1
 8003fa2:	e7eb      	b.n	8003f7c <_malloc_r+0x64>
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	6849      	ldr	r1, [r1, #4]
 8003fa8:	e7cc      	b.n	8003f44 <_malloc_r+0x2c>
 8003faa:	1cc4      	adds	r4, r0, #3
 8003fac:	f024 0403 	bic.w	r4, r4, #3
 8003fb0:	42a0      	cmp	r0, r4
 8003fb2:	d005      	beq.n	8003fc0 <_malloc_r+0xa8>
 8003fb4:	1a21      	subs	r1, r4, r0
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	f000 f808 	bl	8003fcc <_sbrk_r>
 8003fbc:	3001      	adds	r0, #1
 8003fbe:	d0cf      	beq.n	8003f60 <_malloc_r+0x48>
 8003fc0:	6025      	str	r5, [r4, #0]
 8003fc2:	e7db      	b.n	8003f7c <_malloc_r+0x64>
 8003fc4:	200000a0 	.word	0x200000a0
 8003fc8:	200000a4 	.word	0x200000a4

08003fcc <_sbrk_r>:
 8003fcc:	b538      	push	{r3, r4, r5, lr}
 8003fce:	4c06      	ldr	r4, [pc, #24]	; (8003fe8 <_sbrk_r+0x1c>)
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	4605      	mov	r5, r0
 8003fd4:	4608      	mov	r0, r1
 8003fd6:	6023      	str	r3, [r4, #0]
 8003fd8:	f7fd f8de 	bl	8001198 <_sbrk>
 8003fdc:	1c43      	adds	r3, r0, #1
 8003fde:	d102      	bne.n	8003fe6 <_sbrk_r+0x1a>
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	b103      	cbz	r3, 8003fe6 <_sbrk_r+0x1a>
 8003fe4:	602b      	str	r3, [r5, #0]
 8003fe6:	bd38      	pop	{r3, r4, r5, pc}
 8003fe8:	20000110 	.word	0x20000110

08003fec <__sread>:
 8003fec:	b510      	push	{r4, lr}
 8003fee:	460c      	mov	r4, r1
 8003ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ff4:	f000 f896 	bl	8004124 <_read_r>
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	bfab      	itete	ge
 8003ffc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ffe:	89a3      	ldrhlt	r3, [r4, #12]
 8004000:	181b      	addge	r3, r3, r0
 8004002:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004006:	bfac      	ite	ge
 8004008:	6563      	strge	r3, [r4, #84]	; 0x54
 800400a:	81a3      	strhlt	r3, [r4, #12]
 800400c:	bd10      	pop	{r4, pc}

0800400e <__swrite>:
 800400e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004012:	461f      	mov	r7, r3
 8004014:	898b      	ldrh	r3, [r1, #12]
 8004016:	05db      	lsls	r3, r3, #23
 8004018:	4605      	mov	r5, r0
 800401a:	460c      	mov	r4, r1
 800401c:	4616      	mov	r6, r2
 800401e:	d505      	bpl.n	800402c <__swrite+0x1e>
 8004020:	2302      	movs	r3, #2
 8004022:	2200      	movs	r2, #0
 8004024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004028:	f000 f868 	bl	80040fc <_lseek_r>
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004032:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004036:	81a3      	strh	r3, [r4, #12]
 8004038:	4632      	mov	r2, r6
 800403a:	463b      	mov	r3, r7
 800403c:	4628      	mov	r0, r5
 800403e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004042:	f000 b817 	b.w	8004074 <_write_r>

08004046 <__sseek>:
 8004046:	b510      	push	{r4, lr}
 8004048:	460c      	mov	r4, r1
 800404a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800404e:	f000 f855 	bl	80040fc <_lseek_r>
 8004052:	1c43      	adds	r3, r0, #1
 8004054:	89a3      	ldrh	r3, [r4, #12]
 8004056:	bf15      	itete	ne
 8004058:	6560      	strne	r0, [r4, #84]	; 0x54
 800405a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800405e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004062:	81a3      	strheq	r3, [r4, #12]
 8004064:	bf18      	it	ne
 8004066:	81a3      	strhne	r3, [r4, #12]
 8004068:	bd10      	pop	{r4, pc}

0800406a <__sclose>:
 800406a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800406e:	f000 b813 	b.w	8004098 <_close_r>
	...

08004074 <_write_r>:
 8004074:	b538      	push	{r3, r4, r5, lr}
 8004076:	4c07      	ldr	r4, [pc, #28]	; (8004094 <_write_r+0x20>)
 8004078:	4605      	mov	r5, r0
 800407a:	4608      	mov	r0, r1
 800407c:	4611      	mov	r1, r2
 800407e:	2200      	movs	r2, #0
 8004080:	6022      	str	r2, [r4, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	f7fd f838 	bl	80010f8 <_write>
 8004088:	1c43      	adds	r3, r0, #1
 800408a:	d102      	bne.n	8004092 <_write_r+0x1e>
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	b103      	cbz	r3, 8004092 <_write_r+0x1e>
 8004090:	602b      	str	r3, [r5, #0]
 8004092:	bd38      	pop	{r3, r4, r5, pc}
 8004094:	20000110 	.word	0x20000110

08004098 <_close_r>:
 8004098:	b538      	push	{r3, r4, r5, lr}
 800409a:	4c06      	ldr	r4, [pc, #24]	; (80040b4 <_close_r+0x1c>)
 800409c:	2300      	movs	r3, #0
 800409e:	4605      	mov	r5, r0
 80040a0:	4608      	mov	r0, r1
 80040a2:	6023      	str	r3, [r4, #0]
 80040a4:	f7fd f844 	bl	8001130 <_close>
 80040a8:	1c43      	adds	r3, r0, #1
 80040aa:	d102      	bne.n	80040b2 <_close_r+0x1a>
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	b103      	cbz	r3, 80040b2 <_close_r+0x1a>
 80040b0:	602b      	str	r3, [r5, #0]
 80040b2:	bd38      	pop	{r3, r4, r5, pc}
 80040b4:	20000110 	.word	0x20000110

080040b8 <_fstat_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	4c07      	ldr	r4, [pc, #28]	; (80040d8 <_fstat_r+0x20>)
 80040bc:	2300      	movs	r3, #0
 80040be:	4605      	mov	r5, r0
 80040c0:	4608      	mov	r0, r1
 80040c2:	4611      	mov	r1, r2
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	f7fd f83f 	bl	8001148 <_fstat>
 80040ca:	1c43      	adds	r3, r0, #1
 80040cc:	d102      	bne.n	80040d4 <_fstat_r+0x1c>
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	b103      	cbz	r3, 80040d4 <_fstat_r+0x1c>
 80040d2:	602b      	str	r3, [r5, #0]
 80040d4:	bd38      	pop	{r3, r4, r5, pc}
 80040d6:	bf00      	nop
 80040d8:	20000110 	.word	0x20000110

080040dc <_isatty_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	4c06      	ldr	r4, [pc, #24]	; (80040f8 <_isatty_r+0x1c>)
 80040e0:	2300      	movs	r3, #0
 80040e2:	4605      	mov	r5, r0
 80040e4:	4608      	mov	r0, r1
 80040e6:	6023      	str	r3, [r4, #0]
 80040e8:	f7fd f83e 	bl	8001168 <_isatty>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d102      	bne.n	80040f6 <_isatty_r+0x1a>
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	b103      	cbz	r3, 80040f6 <_isatty_r+0x1a>
 80040f4:	602b      	str	r3, [r5, #0]
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
 80040f8:	20000110 	.word	0x20000110

080040fc <_lseek_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	4c07      	ldr	r4, [pc, #28]	; (800411c <_lseek_r+0x20>)
 8004100:	4605      	mov	r5, r0
 8004102:	4608      	mov	r0, r1
 8004104:	4611      	mov	r1, r2
 8004106:	2200      	movs	r2, #0
 8004108:	6022      	str	r2, [r4, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	f7fd f837 	bl	800117e <_lseek>
 8004110:	1c43      	adds	r3, r0, #1
 8004112:	d102      	bne.n	800411a <_lseek_r+0x1e>
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	b103      	cbz	r3, 800411a <_lseek_r+0x1e>
 8004118:	602b      	str	r3, [r5, #0]
 800411a:	bd38      	pop	{r3, r4, r5, pc}
 800411c:	20000110 	.word	0x20000110

08004120 <__malloc_lock>:
 8004120:	4770      	bx	lr

08004122 <__malloc_unlock>:
 8004122:	4770      	bx	lr

08004124 <_read_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4c07      	ldr	r4, [pc, #28]	; (8004144 <_read_r+0x20>)
 8004128:	4605      	mov	r5, r0
 800412a:	4608      	mov	r0, r1
 800412c:	4611      	mov	r1, r2
 800412e:	2200      	movs	r2, #0
 8004130:	6022      	str	r2, [r4, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	f7fc ffc3 	bl	80010be <_read>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_read_r+0x1e>
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	b103      	cbz	r3, 8004142 <_read_r+0x1e>
 8004140:	602b      	str	r3, [r5, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	20000110 	.word	0x20000110

08004148 <_init>:
 8004148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414a:	bf00      	nop
 800414c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414e:	bc08      	pop	{r3}
 8004150:	469e      	mov	lr, r3
 8004152:	4770      	bx	lr

08004154 <_fini>:
 8004154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004156:	bf00      	nop
 8004158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800415a:	bc08      	pop	{r3}
 800415c:	469e      	mov	lr, r3
 800415e:	4770      	bx	lr
