
ptm-machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c90  08002c90  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08002c90  08002c90  00012c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c98  08002c98  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c98  08002c98  00012c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c9c  08002c9c  00012c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000014  08002cb4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08002cb4  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7c1  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018c6  00000000  00000000  0002a805  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000748  00000000  00000000  0002c0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000668  00000000  00000000  0002c818  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000210d5  00000000  00000000  0002ce80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000074b8  00000000  00000000  0004df55  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2161  00000000  00000000  0005540d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011756e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bc0  00000000  00000000  001175ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002748 	.word	0x08002748

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08002748 	.word	0x08002748

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <startingScreen>:
*/
/**
 * starting menu
 * state 00
 */
void startingScreen(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af02      	add	r7, sp, #8
	LCD_DisplayString(10,20,"Pour juice",&Font12,LCD_BACKGROUND,BLUE);
 80004ce:	231f      	movs	r3, #31
 80004d0:	9301      	str	r3, [sp, #4]
 80004d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	4b35      	ldr	r3, [pc, #212]	; (80005b0 <startingScreen+0xe8>)
 80004da:	4a36      	ldr	r2, [pc, #216]	; (80005b4 <startingScreen+0xec>)
 80004dc:	2114      	movs	r1, #20
 80004de:	200a      	movs	r0, #10
 80004e0:	f000 fe10 	bl	8001104 <LCD_DisplayString>
	LCD_DisplayString(10,40,"Pour water",&Font12,LCD_BACKGROUND,BLUE);
 80004e4:	231f      	movs	r3, #31
 80004e6:	9301      	str	r3, [sp, #4]
 80004e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	4b30      	ldr	r3, [pc, #192]	; (80005b0 <startingScreen+0xe8>)
 80004f0:	4a31      	ldr	r2, [pc, #196]	; (80005b8 <startingScreen+0xf0>)
 80004f2:	2128      	movs	r1, #40	; 0x28
 80004f4:	200a      	movs	r0, #10
 80004f6:	f000 fe05 	bl	8001104 <LCD_DisplayString>
	LCD_DisplayString(10,60,"Mix",&Font12,LCD_BACKGROUND,BLUE);
 80004fa:	231f      	movs	r3, #31
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <startingScreen+0xe8>)
 8000506:	4a2d      	ldr	r2, [pc, #180]	; (80005bc <startingScreen+0xf4>)
 8000508:	213c      	movs	r1, #60	; 0x3c
 800050a:	200a      	movs	r0, #10
 800050c:	f000 fdfa 	bl	8001104 <LCD_DisplayString>
	LCD_DisplayString(10,80,"Settings",&Font12,LCD_BACKGROUND,BLUE);
 8000510:	231f      	movs	r3, #31
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	4b25      	ldr	r3, [pc, #148]	; (80005b0 <startingScreen+0xe8>)
 800051c:	4a28      	ldr	r2, [pc, #160]	; (80005c0 <startingScreen+0xf8>)
 800051e:	2150      	movs	r1, #80	; 0x50
 8000520:	200a      	movs	r0, #10
 8000522:	f000 fdef 	bl	8001104 <LCD_DisplayString>
	LCD_DisplayString(10,100,"Programist",&Font12,LCD_BACKGROUND,BLUE);
 8000526:	231f      	movs	r3, #31
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <startingScreen+0xe8>)
 8000532:	4a24      	ldr	r2, [pc, #144]	; (80005c4 <startingScreen+0xfc>)
 8000534:	2164      	movs	r1, #100	; 0x64
 8000536:	200a      	movs	r0, #10
 8000538:	f000 fde4 	bl	8001104 <LCD_DisplayString>
	LCD_DrawCircle(100, 20, 5 , RED, DRAW_EMPTY, DOT_PIXEL_DFT);
 800053c:	2301      	movs	r3, #1
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	2300      	movs	r3, #0
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000548:	2205      	movs	r2, #5
 800054a:	2114      	movs	r1, #20
 800054c:	2064      	movs	r0, #100	; 0x64
 800054e:	f000 fbaf 	bl	8000cb0 <LCD_DrawCircle>
	LCD_DrawCircle(100, 40, 5 , RED, DRAW_FULL, DOT_PIXEL_DFT);
 8000552:	2301      	movs	r3, #1
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800055e:	2205      	movs	r2, #5
 8000560:	2128      	movs	r1, #40	; 0x28
 8000562:	2064      	movs	r0, #100	; 0x64
 8000564:	f000 fba4 	bl	8000cb0 <LCD_DrawCircle>
	LCD_DrawCircle(100, 60, 5 , RED, DRAW_EMPTY, DOT_PIXEL_DFT);
 8000568:	2301      	movs	r3, #1
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2300      	movs	r3, #0
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000574:	2205      	movs	r2, #5
 8000576:	213c      	movs	r1, #60	; 0x3c
 8000578:	2064      	movs	r0, #100	; 0x64
 800057a:	f000 fb99 	bl	8000cb0 <LCD_DrawCircle>
	LCD_DrawCircle(100, 80, 5 , RED, DRAW_EMPTY, DOT_PIXEL_DFT);
 800057e:	2301      	movs	r3, #1
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2300      	movs	r3, #0
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800058a:	2205      	movs	r2, #5
 800058c:	2150      	movs	r1, #80	; 0x50
 800058e:	2064      	movs	r0, #100	; 0x64
 8000590:	f000 fb8e 	bl	8000cb0 <LCD_DrawCircle>
	LCD_DrawCircle(100, 100, 5 , RED, DRAW_EMPTY, DOT_PIXEL_DFT);
 8000594:	2301      	movs	r3, #1
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	2300      	movs	r3, #0
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80005a0:	2205      	movs	r2, #5
 80005a2:	2164      	movs	r1, #100	; 0x64
 80005a4:	2064      	movs	r0, #100	; 0x64
 80005a6:	f000 fb83 	bl	8000cb0 <LCD_DrawCircle>
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000000 	.word	0x20000000
 80005b4:	08002760 	.word	0x08002760
 80005b8:	0800276c 	.word	0x0800276c
 80005bc:	08002778 	.word	0x08002778
 80005c0:	0800277c 	.word	0x0800277c
 80005c4:	08002788 	.word	0x08002788

080005c8 <LCD_Reset>:
***********************************************************************************************************************/
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_Reset(void){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	LCD_RST_1;
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d2:	480d      	ldr	r0, [pc, #52]	; (8000608 <LCD_Reset+0x40>)
 80005d4:	f001 fbbc 	bl	8001d50 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 80005d8:	2064      	movs	r0, #100	; 0x64
 80005da:	f000 fe1f 	bl	800121c <Driver_Delay_ms>
	LCD_RST_0;
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e4:	4808      	ldr	r0, [pc, #32]	; (8000608 <LCD_Reset+0x40>)
 80005e6:	f001 fbb3 	bl	8001d50 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 80005ea:	2064      	movs	r0, #100	; 0x64
 80005ec:	f000 fe16 	bl	800121c <Driver_Delay_ms>
	LCD_RST_1;
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f6:	4804      	ldr	r0, [pc, #16]	; (8000608 <LCD_Reset+0x40>)
 80005f8:	f001 fbaa 	bl	8001d50 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 80005fc:	2064      	movs	r0, #100	; 0x64
 80005fe:	f000 fe0d 	bl	800121c <Driver_Delay_ms>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40020000 	.word	0x40020000

0800060c <LCD_WriteReg>:

/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_WriteReg(uint8_t Reg){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	LCD_DC_0;
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061c:	480a      	ldr	r0, [pc, #40]	; (8000648 <LCD_WriteReg+0x3c>)
 800061e:	f001 fb97 	bl	8001d50 <HAL_GPIO_WritePin>
	LCD_CS_0;
 8000622:	2200      	movs	r2, #0
 8000624:	2140      	movs	r1, #64	; 0x40
 8000626:	4809      	ldr	r0, [pc, #36]	; (800064c <LCD_WriteReg+0x40>)
 8000628:	f001 fb92 	bl	8001d50 <HAL_GPIO_WritePin>
	SPI_Write_Byte(Reg);
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fdba 	bl	80011a8 <SPI_Write_Byte>
	LCD_CS_1;
 8000634:	2201      	movs	r2, #1
 8000636:	2140      	movs	r1, #64	; 0x40
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <LCD_WriteReg+0x40>)
 800063a:	f001 fb89 	bl	8001d50 <HAL_GPIO_WritePin>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40020000 	.word	0x40020000
 800064c:	40020400 	.word	0x40020400

08000650 <LCD_WriteData_8Bit>:

static void LCD_WriteData_8Bit(uint8_t Data){
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	LCD_DC_1;
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000660:	480a      	ldr	r0, [pc, #40]	; (800068c <LCD_WriteData_8Bit+0x3c>)
 8000662:	f001 fb75 	bl	8001d50 <HAL_GPIO_WritePin>
	LCD_CS_0;
 8000666:	2200      	movs	r2, #0
 8000668:	2140      	movs	r1, #64	; 0x40
 800066a:	4809      	ldr	r0, [pc, #36]	; (8000690 <LCD_WriteData_8Bit+0x40>)
 800066c:	f001 fb70 	bl	8001d50 <HAL_GPIO_WritePin>
	SPI_Write_Byte(Data);
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fd98 	bl	80011a8 <SPI_Write_Byte>
	LCD_CS_1;
 8000678:	2201      	movs	r2, #1
 800067a:	2140      	movs	r1, #64	; 0x40
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <LCD_WriteData_8Bit+0x40>)
 800067e:	f001 fb67 	bl	8001d50 <HAL_GPIO_WritePin>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40020000 	.word	0x40020000
 8000690:	40020400 	.word	0x40020400

08000694 <LCD_WriteData_NLen16Bit>:
	SPI_Write_Byte(Data >> 8);
	SPI_Write_Byte(Data & 0XFF);
	LCD_CS_1;
}

static void LCD_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen){
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	LCD_DC_1;
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a6:	4813      	ldr	r0, [pc, #76]	; (80006f4 <LCD_WriteData_NLen16Bit+0x60>)
 80006a8:	f001 fb52 	bl	8001d50 <HAL_GPIO_WritePin>
	LCD_CS_0;
 80006ac:	2200      	movs	r2, #0
 80006ae:	2140      	movs	r1, #64	; 0x40
 80006b0:	4811      	ldr	r0, [pc, #68]	; (80006f8 <LCD_WriteData_NLen16Bit+0x64>)
 80006b2:	f001 fb4d 	bl	8001d50 <HAL_GPIO_WritePin>
	for(i = 0; i < DataLen; i++){
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	e00e      	b.n	80006da <LCD_WriteData_NLen16Bit+0x46>
		SPI_Write_Byte( (uint8_t)(Data >> 8) );
 80006bc:	88fb      	ldrh	r3, [r7, #6]
 80006be:	0a1b      	lsrs	r3, r3, #8
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fd6f 	bl	80011a8 <SPI_Write_Byte>
		SPI_Write_Byte( (uint8_t)(Data & 0XFF) );
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fd6a 	bl	80011a8 <SPI_Write_Byte>
	for(i = 0; i < DataLen; i++){
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d3ec      	bcc.n	80006bc <LCD_WriteData_NLen16Bit+0x28>
	}	
	LCD_CS_1;
 80006e2:	2201      	movs	r2, #1
 80006e4:	2140      	movs	r1, #64	; 0x40
 80006e6:	4804      	ldr	r0, [pc, #16]	; (80006f8 <LCD_WriteData_NLen16Bit+0x64>)
 80006e8:	f001 fb32 	bl	8001d50 <HAL_GPIO_WritePin>
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40020000 	.word	0x40020000
 80006f8:	40020400 	.word	0x40020400

080006fc <LCD_InitReg>:

/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_InitReg(void){	
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	//ST7735R Frame Rate
	LCD_WriteReg(0xB1); 
 8000700:	20b1      	movs	r0, #177	; 0xb1
 8000702:	f7ff ff83 	bl	800060c <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 8000706:	2001      	movs	r0, #1
 8000708:	f7ff ffa2 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 800070c:	202c      	movs	r0, #44	; 0x2c
 800070e:	f7ff ff9f 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 8000712:	202d      	movs	r0, #45	; 0x2d
 8000714:	f7ff ff9c 	bl	8000650 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xB2); 
 8000718:	20b2      	movs	r0, #178	; 0xb2
 800071a:	f7ff ff77 	bl	800060c <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff ff96 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 8000724:	202c      	movs	r0, #44	; 0x2c
 8000726:	f7ff ff93 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 800072a:	202d      	movs	r0, #45	; 0x2d
 800072c:	f7ff ff90 	bl	8000650 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xB3); 
 8000730:	20b3      	movs	r0, #179	; 0xb3
 8000732:	f7ff ff6b 	bl	800060c <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 8000736:	2001      	movs	r0, #1
 8000738:	f7ff ff8a 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 800073c:	202c      	movs	r0, #44	; 0x2c
 800073e:	f7ff ff87 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 8000742:	202d      	movs	r0, #45	; 0x2d
 8000744:	f7ff ff84 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x01); 
 8000748:	2001      	movs	r0, #1
 800074a:	f7ff ff81 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 800074e:	202c      	movs	r0, #44	; 0x2c
 8000750:	f7ff ff7e 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 8000754:	202d      	movs	r0, #45	; 0x2d
 8000756:	f7ff ff7b 	bl	8000650 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xB4); //Column inversion 
 800075a:	20b4      	movs	r0, #180	; 0xb4
 800075c:	f7ff ff56 	bl	800060c <LCD_WriteReg>
	LCD_WriteData_8Bit(0x07); 
 8000760:	2007      	movs	r0, #7
 8000762:	f7ff ff75 	bl	8000650 <LCD_WriteData_8Bit>
	
	//ST7735R Power Sequence
	LCD_WriteReg(0xC0); 
 8000766:	20c0      	movs	r0, #192	; 0xc0
 8000768:	f7ff ff50 	bl	800060c <LCD_WriteReg>
	LCD_WriteData_8Bit(0xA2); 
 800076c:	20a2      	movs	r0, #162	; 0xa2
 800076e:	f7ff ff6f 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x02); 
 8000772:	2002      	movs	r0, #2
 8000774:	f7ff ff6c 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x84); 
 8000778:	2084      	movs	r0, #132	; 0x84
 800077a:	f7ff ff69 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteReg(0xC1); 
 800077e:	20c1      	movs	r0, #193	; 0xc1
 8000780:	f7ff ff44 	bl	800060c <LCD_WriteReg>
	LCD_WriteData_8Bit(0xC5); 
 8000784:	20c5      	movs	r0, #197	; 0xc5
 8000786:	f7ff ff63 	bl	8000650 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xC2); 
 800078a:	20c2      	movs	r0, #194	; 0xc2
 800078c:	f7ff ff3e 	bl	800060c <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0A); 
 8000790:	200a      	movs	r0, #10
 8000792:	f7ff ff5d 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 
 8000796:	2000      	movs	r0, #0
 8000798:	f7ff ff5a 	bl	8000650 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xC3); 
 800079c:	20c3      	movs	r0, #195	; 0xc3
 800079e:	f7ff ff35 	bl	800060c <LCD_WriteReg>
	LCD_WriteData_8Bit(0x8A); 
 80007a2:	208a      	movs	r0, #138	; 0x8a
 80007a4:	f7ff ff54 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2A); 
 80007a8:	202a      	movs	r0, #42	; 0x2a
 80007aa:	f7ff ff51 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteReg(0xC4); 
 80007ae:	20c4      	movs	r0, #196	; 0xc4
 80007b0:	f7ff ff2c 	bl	800060c <LCD_WriteReg>
	LCD_WriteData_8Bit(0x8A); 
 80007b4:	208a      	movs	r0, #138	; 0x8a
 80007b6:	f7ff ff4b 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0xEE); 
 80007ba:	20ee      	movs	r0, #238	; 0xee
 80007bc:	f7ff ff48 	bl	8000650 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xC5); //VCOM 
 80007c0:	20c5      	movs	r0, #197	; 0xc5
 80007c2:	f7ff ff23 	bl	800060c <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0E); 
 80007c6:	200e      	movs	r0, #14
 80007c8:	f7ff ff42 	bl	8000650 <LCD_WriteData_8Bit>
	
	//ST7735R Gamma Sequence
	LCD_WriteReg(0xe0); 
 80007cc:	20e0      	movs	r0, #224	; 0xe0
 80007ce:	f7ff ff1d 	bl	800060c <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0f); 
 80007d2:	200f      	movs	r0, #15
 80007d4:	f7ff ff3c 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1a); 
 80007d8:	201a      	movs	r0, #26
 80007da:	f7ff ff39 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x0f); 
 80007de:	200f      	movs	r0, #15
 80007e0:	f7ff ff36 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x18); 
 80007e4:	2018      	movs	r0, #24
 80007e6:	f7ff ff33 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2f); 
 80007ea:	202f      	movs	r0, #47	; 0x2f
 80007ec:	f7ff ff30 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x28); 
 80007f0:	2028      	movs	r0, #40	; 0x28
 80007f2:	f7ff ff2d 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x20); 
 80007f6:	2020      	movs	r0, #32
 80007f8:	f7ff ff2a 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x22); 
 80007fc:	2022      	movs	r0, #34	; 0x22
 80007fe:	f7ff ff27 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1f); 
 8000802:	201f      	movs	r0, #31
 8000804:	f7ff ff24 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1b); 
 8000808:	201b      	movs	r0, #27
 800080a:	f7ff ff21 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x23); 
 800080e:	2023      	movs	r0, #35	; 0x23
 8000810:	f7ff ff1e 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x37); 
 8000814:	2037      	movs	r0, #55	; 0x37
 8000816:	f7ff ff1b 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 	
 800081a:	2000      	movs	r0, #0
 800081c:	f7ff ff18 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x07); 
 8000820:	2007      	movs	r0, #7
 8000822:	f7ff ff15 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x02); 
 8000826:	2002      	movs	r0, #2
 8000828:	f7ff ff12 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x10); 
 800082c:	2010      	movs	r0, #16
 800082e:	f7ff ff0f 	bl	8000650 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xe1); 
 8000832:	20e1      	movs	r0, #225	; 0xe1
 8000834:	f7ff feea 	bl	800060c <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0f); 
 8000838:	200f      	movs	r0, #15
 800083a:	f7ff ff09 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1b); 
 800083e:	201b      	movs	r0, #27
 8000840:	f7ff ff06 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x0f); 
 8000844:	200f      	movs	r0, #15
 8000846:	f7ff ff03 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x17); 
 800084a:	2017      	movs	r0, #23
 800084c:	f7ff ff00 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x33); 
 8000850:	2033      	movs	r0, #51	; 0x33
 8000852:	f7ff fefd 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2c); 
 8000856:	202c      	movs	r0, #44	; 0x2c
 8000858:	f7ff fefa 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x29); 
 800085c:	2029      	movs	r0, #41	; 0x29
 800085e:	f7ff fef7 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2e); 
 8000862:	202e      	movs	r0, #46	; 0x2e
 8000864:	f7ff fef4 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x30); 
 8000868:	2030      	movs	r0, #48	; 0x30
 800086a:	f7ff fef1 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x30); 
 800086e:	2030      	movs	r0, #48	; 0x30
 8000870:	f7ff feee 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x39); 
 8000874:	2039      	movs	r0, #57	; 0x39
 8000876:	f7ff feeb 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x3f); 
 800087a:	203f      	movs	r0, #63	; 0x3f
 800087c:	f7ff fee8 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff fee5 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x07); 
 8000886:	2007      	movs	r0, #7
 8000888:	f7ff fee2 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x03); 
 800088c:	2003      	movs	r0, #3
 800088e:	f7ff fedf 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x10);  
 8000892:	2010      	movs	r0, #16
 8000894:	f7ff fedc 	bl	8000650 <LCD_WriteData_8Bit>
		
	LCD_WriteReg(0xF0); //Enable test command  
 8000898:	20f0      	movs	r0, #240	; 0xf0
 800089a:	f7ff feb7 	bl	800060c <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 800089e:	2001      	movs	r0, #1
 80008a0:	f7ff fed6 	bl	8000650 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xF6); //Disable ram power save mode 
 80008a4:	20f6      	movs	r0, #246	; 0xf6
 80008a6:	f7ff feb1 	bl	800060c <LCD_WriteReg>
	LCD_WriteData_8Bit(0x00); 
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff fed0 	bl	8000650 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0x3A); //65k mode 
 80008b0:	203a      	movs	r0, #58	; 0x3a
 80008b2:	f7ff feab 	bl	800060c <LCD_WriteReg>
	LCD_WriteData_8Bit(0x05); 
 80008b6:	2005      	movs	r0, #5
 80008b8:	f7ff feca 	bl	8000650 <LCD_WriteData_8Bit>
		
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}

080008c0 <LCD_SetGramScanWay>:
function:	Set the display scan and color transfer modes
parameter: 
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_SetGramScanWay(LCD_SCAN_DIR Scan_dir){		
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	//Get the screen scan direction
	sLCD_DIS.LCD_Scan_Dir = Scan_dir;
 80008ca:	4a34      	ldr	r2, [pc, #208]	; (800099c <LCD_SetGramScanWay+0xdc>)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	7113      	strb	r3, [r2, #4]
	
	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U){
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d008      	beq.n	80008e8 <LCD_SetGramScanWay+0x28>
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d005      	beq.n	80008e8 <LCD_SetGramScanWay+0x28>
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d002      	beq.n	80008e8 <LCD_SetGramScanWay+0x28>
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	d10c      	bne.n	8000902 <LCD_SetGramScanWay+0x42>
		sLCD_DIS.LCD_Dis_Column	= LCD_HEIGHT ;
 80008e8:	4b2c      	ldr	r3, [pc, #176]	; (800099c <LCD_SetGramScanWay+0xdc>)
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	801a      	strh	r2, [r3, #0]
		sLCD_DIS.LCD_Dis_Page = LCD_WIDTH ;		
 80008ee:	4b2b      	ldr	r3, [pc, #172]	; (800099c <LCD_SetGramScanWay+0xdc>)
 80008f0:	22a0      	movs	r2, #160	; 0xa0
 80008f2:	805a      	strh	r2, [r3, #2]
		sLCD_DIS.LCD_X_Adjust = LCD_X;
 80008f4:	4b29      	ldr	r3, [pc, #164]	; (800099c <LCD_SetGramScanWay+0xdc>)
 80008f6:	2202      	movs	r2, #2
 80008f8:	80da      	strh	r2, [r3, #6]
		sLCD_DIS.LCD_Y_Adjust = LCD_Y;
 80008fa:	4b28      	ldr	r3, [pc, #160]	; (800099c <LCD_SetGramScanWay+0xdc>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	811a      	strh	r2, [r3, #8]
 8000900:	e00b      	b.n	800091a <LCD_SetGramScanWay+0x5a>
	}else{
		sLCD_DIS.LCD_Dis_Column	= LCD_WIDTH ;
 8000902:	4b26      	ldr	r3, [pc, #152]	; (800099c <LCD_SetGramScanWay+0xdc>)
 8000904:	22a0      	movs	r2, #160	; 0xa0
 8000906:	801a      	strh	r2, [r3, #0]
		sLCD_DIS.LCD_Dis_Page = LCD_HEIGHT ;	
 8000908:	4b24      	ldr	r3, [pc, #144]	; (800099c <LCD_SetGramScanWay+0xdc>)
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	805a      	strh	r2, [r3, #2]
		sLCD_DIS.LCD_X_Adjust = LCD_Y;
 800090e:	4b23      	ldr	r3, [pc, #140]	; (800099c <LCD_SetGramScanWay+0xdc>)
 8000910:	2201      	movs	r2, #1
 8000912:	80da      	strh	r2, [r3, #6]
		sLCD_DIS.LCD_Y_Adjust = LCD_X;
 8000914:	4b21      	ldr	r3, [pc, #132]	; (800099c <LCD_SetGramScanWay+0xdc>)
 8000916:	2202      	movs	r2, #2
 8000918:	811a      	strh	r2, [r3, #8]
	}
	
	// Gets the scan direction of GRAM
	uint16_t MemoryAccessReg_Data=0;  //0x36	
 800091a:	2300      	movs	r3, #0
 800091c:	81fb      	strh	r3, [r7, #14]
	switch (Scan_dir){				
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b07      	cmp	r3, #7
 8000922:	d82b      	bhi.n	800097c <LCD_SetGramScanWay+0xbc>
 8000924:	a201      	add	r2, pc, #4	; (adr r2, 800092c <LCD_SetGramScanWay+0x6c>)
 8000926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092a:	bf00      	nop
 800092c:	0800094d 	.word	0x0800094d
 8000930:	08000953 	.word	0x08000953
 8000934:	08000959 	.word	0x08000959
 8000938:	0800095f 	.word	0x0800095f
 800093c:	08000965 	.word	0x08000965
 8000940:	0800096b 	.word	0x0800096b
 8000944:	08000971 	.word	0x08000971
 8000948:	08000977 	.word	0x08000977
		case L2R_U2D:
			MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 800094c:	2300      	movs	r3, #0
 800094e:	81fb      	strh	r3, [r7, #14]
			break;
 8000950:	e014      	b.n	800097c <LCD_SetGramScanWay+0xbc>
		case L2R_D2U:
			MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	81fb      	strh	r3, [r7, #14]
			break;
 8000956:	e011      	b.n	800097c <LCD_SetGramScanWay+0xbc>
		case R2L_U2D://	0X4
			MemoryAccessReg_Data = 0x40 | 0x00;
 8000958:	2340      	movs	r3, #64	; 0x40
 800095a:	81fb      	strh	r3, [r7, #14]
			break;
 800095c:	e00e      	b.n	800097c <LCD_SetGramScanWay+0xbc>
		case R2L_D2U://	0XC
			MemoryAccessReg_Data = 0x40 | 0x80;
 800095e:	23c0      	movs	r3, #192	; 0xc0
 8000960:	81fb      	strh	r3, [r7, #14]
			break;
 8000962:	e00b      	b.n	800097c <LCD_SetGramScanWay+0xbc>
		case U2D_L2R://0X2
			MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 8000964:	2320      	movs	r3, #32
 8000966:	81fb      	strh	r3, [r7, #14]
			break;
 8000968:	e008      	b.n	800097c <LCD_SetGramScanWay+0xbc>
		case U2D_R2L://0X6
			MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 800096a:	2360      	movs	r3, #96	; 0x60
 800096c:	81fb      	strh	r3, [r7, #14]
			break;
 800096e:	e005      	b.n	800097c <LCD_SetGramScanWay+0xbc>
		case D2U_L2R://0XA
			MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 8000970:	23a0      	movs	r3, #160	; 0xa0
 8000972:	81fb      	strh	r3, [r7, #14]
			break;
 8000974:	e002      	b.n	800097c <LCD_SetGramScanWay+0xbc>
		case D2U_R2L://0XE
			MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 8000976:	23e0      	movs	r3, #224	; 0xe0
 8000978:	81fb      	strh	r3, [r7, #14]
			break;
 800097a:	bf00      	nop
	}
	

	// Set the read / write scan direction of the frame memory
	LCD_WriteReg(0x36); //MX, MY, RGB mode 	
 800097c:	2036      	movs	r0, #54	; 0x36
 800097e:	f7ff fe45 	bl	800060c <LCD_WriteReg>
#if defined(LCD_1IN44)
	LCD_WriteData_8Bit( MemoryAccessReg_Data | 0x08);	//0x08 set RGB
#elif defined(LCD_1IN8)
	LCD_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 8000982:	89fb      	ldrh	r3, [r7, #14]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	f023 0308 	bic.w	r3, r3, #8
 800098a:	b2db      	uxtb	r3, r3
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fe5f 	bl	8000650 <LCD_WriteData_8Bit>
#endif
	
}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000088 	.word	0x20000088

080009a0 <LCD_Init>:

/********************************************************************************
function:	
			initialization
********************************************************************************/
void LCD_Init( LCD_SCAN_DIR Lcd_ScanDir ){	
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
	//Turn on the backlight
	LCD_BL_1;
 80009aa:	2201      	movs	r2, #1
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	480f      	ldr	r0, [pc, #60]	; (80009ec <LCD_Init+0x4c>)
 80009b0:	f001 f9ce 	bl	8001d50 <HAL_GPIO_WritePin>
	
	//Hardware reset
	LCD_Reset(); 
 80009b4:	f7ff fe08 	bl	80005c8 <LCD_Reset>
	
	//Set the initialization register
	LCD_InitReg();
 80009b8:	f7ff fea0 	bl	80006fc <LCD_InitReg>
	
	//Set the display scan and color transfer modes	
	LCD_SetGramScanWay( Lcd_ScanDir );
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ff7e 	bl	80008c0 <LCD_SetGramScanWay>
	Driver_Delay_ms(200); 
 80009c4:	20c8      	movs	r0, #200	; 0xc8
 80009c6:	f000 fc29 	bl	800121c <Driver_Delay_ms>
	
	//sleep out
	LCD_WriteReg(0x11);
 80009ca:	2011      	movs	r0, #17
 80009cc:	f7ff fe1e 	bl	800060c <LCD_WriteReg>
	Driver_Delay_ms(120);
 80009d0:	2078      	movs	r0, #120	; 0x78
 80009d2:	f000 fc23 	bl	800121c <Driver_Delay_ms>
	
	//Turn on the LCD display
	LCD_WriteReg(0x29);	
 80009d6:	2029      	movs	r0, #41	; 0x29
 80009d8:	f7ff fe18 	bl	800060c <LCD_WriteReg>

	//clear
	LCD_Clear(WHITE);	
 80009dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80009e0:	f000 f8d8 	bl	8000b94 <LCD_Clear>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40020800 	.word	0x40020800

080009f0 <LCD_SetWindows>:
		Xstart 	:   X direction Start coordinates
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend ){
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4604      	mov	r4, r0
 80009f8:	4608      	mov	r0, r1
 80009fa:	4611      	mov	r1, r2
 80009fc:	461a      	mov	r2, r3
 80009fe:	4623      	mov	r3, r4
 8000a00:	80fb      	strh	r3, [r7, #6]
 8000a02:	4603      	mov	r3, r0
 8000a04:	80bb      	strh	r3, [r7, #4]
 8000a06:	460b      	mov	r3, r1
 8000a08:	807b      	strh	r3, [r7, #2]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	803b      	strh	r3, [r7, #0]

	//set the X coordinates
	LCD_WriteReg ( 0x2A ); 				
 8000a0e:	202a      	movs	r0, #42	; 0x2a
 8000a10:	f7ff fdfc 	bl	800060c <LCD_WriteReg>
	LCD_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff fe1b 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (Xstart & 0xff) + sLCD_DIS.LCD_X_Adjust);			//Set the horizontal starting point to the low octet
 8000a1a:	88fb      	ldrh	r3, [r7, #6]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <LCD_SetWindows+0xa8>)
 8000a20:	88db      	ldrh	r3, [r3, #6]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4413      	add	r3, r2
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fe11 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff fe0e 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_DIS.LCD_X_Adjust);	//Set the horizontal end to the low octet
 8000a34:	887b      	ldrh	r3, [r7, #2]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <LCD_SetWindows+0xa8>)
 8000a3a:	88db      	ldrh	r3, [r3, #6]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	4413      	add	r3, r2
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	3b01      	subs	r3, #1
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fe02 	bl	8000650 <LCD_WriteData_8Bit>

	//set the Y coordinates
	LCD_WriteReg ( 0x2B );
 8000a4c:	202b      	movs	r0, #43	; 0x2b
 8000a4e:	f7ff fddd 	bl	800060c <LCD_WriteReg>
	LCD_WriteData_8Bit ( 0x00 );
 8000a52:	2000      	movs	r0, #0
 8000a54:	f7ff fdfc 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (Ystart & 0xff) + sLCD_DIS.LCD_Y_Adjust);
 8000a58:	88bb      	ldrh	r3, [r7, #4]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <LCD_SetWindows+0xa8>)
 8000a5e:	891b      	ldrh	r3, [r3, #8]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	4413      	add	r3, r2
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fdf2 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( 0x00 );
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff fdef 	bl	8000650 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_DIS.LCD_Y_Adjust);
 8000a72:	883b      	ldrh	r3, [r7, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <LCD_SetWindows+0xa8>)
 8000a78:	891b      	ldrh	r3, [r3, #8]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	4413      	add	r3, r2
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	3b01      	subs	r3, #1
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fde3 	bl	8000650 <LCD_WriteData_8Bit>
		
	LCD_WriteReg(0x2C);	
 8000a8a:	202c      	movs	r0, #44	; 0x2c
 8000a8c:	f7ff fdbe 	bl	800060c <LCD_WriteReg>
	
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	20000088 	.word	0x20000088

08000a9c <LCD_SetCursor>:
function:	Set the display point (Xpoint, Ypoint)
parameter: 
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_SetCursor ( POINT Xpoint, POINT Ypoint ){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	460a      	mov	r2, r1
 8000aa6:	80fb      	strh	r3, [r7, #6]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 8000aac:	88bb      	ldrh	r3, [r7, #4]
 8000aae:	88fa      	ldrh	r2, [r7, #6]
 8000ab0:	88b9      	ldrh	r1, [r7, #4]
 8000ab2:	88f8      	ldrh	r0, [r7, #6]
 8000ab4:	f7ff ff9c 	bl	80009f0 <LCD_SetWindows>
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <LCD_SetColor>:
function:	Set show color
parameter: 
		Color  :   Set show color
********************************************************************************/
//static void LCD_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint){		
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80fb      	strh	r3, [r7, #6]
 8000aca:	460b      	mov	r3, r1
 8000acc:	80bb      	strh	r3, [r7, #4]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	807b      	strh	r3, [r7, #2]
	LCD_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint); 
 8000ad2:	88bb      	ldrh	r3, [r7, #4]
 8000ad4:	887a      	ldrh	r2, [r7, #2]
 8000ad6:	fb02 f203 	mul.w	r2, r2, r3
 8000ada:	88fb      	ldrh	r3, [r7, #6]
 8000adc:	4611      	mov	r1, r2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fdd8 	bl	8000694 <LCD_WriteData_NLen16Bit>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <LCD_SetPointlColor>:
parameter: 
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_SetPointlColor ( POINT Xpoint, POINT Ypoint, COLOR Color ){	
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	80fb      	strh	r3, [r7, #6]
 8000af6:	460b      	mov	r3, r1
 8000af8:	80bb      	strh	r3, [r7, #4]
 8000afa:	4613      	mov	r3, r2
 8000afc:	807b      	strh	r3, [r7, #2]
	if ( ( Xpoint <= sLCD_DIS.LCD_Dis_Column ) && ( Ypoint <= sLCD_DIS.LCD_Dis_Page ) ){		
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <LCD_SetPointlColor+0x48>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	88fa      	ldrh	r2, [r7, #6]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d810      	bhi.n	8000b2a <LCD_SetPointlColor+0x3e>
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <LCD_SetPointlColor+0x48>)
 8000b0a:	885b      	ldrh	r3, [r3, #2]
 8000b0c:	88ba      	ldrh	r2, [r7, #4]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d80b      	bhi.n	8000b2a <LCD_SetPointlColor+0x3e>
		LCD_SetCursor (Xpoint, Ypoint);		
 8000b12:	88ba      	ldrh	r2, [r7, #4]
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	4611      	mov	r1, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ffbf 	bl	8000a9c <LCD_SetCursor>
		LCD_SetColor ( Color , 1 , 1);
 8000b1e:	887b      	ldrh	r3, [r7, #2]
 8000b20:	2201      	movs	r2, #1
 8000b22:	2101      	movs	r1, #1
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ffcb 	bl	8000ac0 <LCD_SetColor>
	}
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000088 	.word	0x20000088

08000b38 <LCD_SetArealColor>:
		Ystart :   Start point y coordinate
		Xend   :   End point coordinates
		Yend   :   End point coordinates
		Color  :   Set the color
********************************************************************************/
void LCD_SetArealColor (POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,	COLOR  Color){	
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4604      	mov	r4, r0
 8000b40:	4608      	mov	r0, r1
 8000b42:	4611      	mov	r1, r2
 8000b44:	461a      	mov	r2, r3
 8000b46:	4623      	mov	r3, r4
 8000b48:	80fb      	strh	r3, [r7, #6]
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80bb      	strh	r3, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	807b      	strh	r3, [r7, #2]
 8000b52:	4613      	mov	r3, r2
 8000b54:	803b      	strh	r3, [r7, #0]
	if((Xend > Xstart) && (Yend > Ystart)){			
 8000b56:	887a      	ldrh	r2, [r7, #2]
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d915      	bls.n	8000b8a <LCD_SetArealColor+0x52>
 8000b5e:	883a      	ldrh	r2, [r7, #0]
 8000b60:	88bb      	ldrh	r3, [r7, #4]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d911      	bls.n	8000b8a <LCD_SetArealColor+0x52>
		LCD_SetWindows( Xstart , Ystart , Xend , Yend  );
 8000b66:	883b      	ldrh	r3, [r7, #0]
 8000b68:	887a      	ldrh	r2, [r7, #2]
 8000b6a:	88b9      	ldrh	r1, [r7, #4]
 8000b6c:	88f8      	ldrh	r0, [r7, #6]
 8000b6e:	f7ff ff3f 	bl	80009f0 <LCD_SetWindows>
		LCD_SetColor ( Color ,Xend - Xstart , Yend - Ystart );
 8000b72:	887a      	ldrh	r2, [r7, #2]
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	b299      	uxth	r1, r3
 8000b7a:	883a      	ldrh	r2, [r7, #0]
 8000b7c:	88bb      	ldrh	r3, [r7, #4]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	8b3b      	ldrh	r3, [r7, #24]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff9b 	bl	8000ac0 <LCD_SetColor>
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd90      	pop	{r4, r7, pc}
	...

08000b94 <LCD_Clear>:

/********************************************************************************
function:	
			Clear screen 
********************************************************************************/
void LCD_Clear(COLOR  Color){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af02      	add	r7, sp, #8
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]

	LCD_SetArealColor(0,0, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page  , Color);	
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <LCD_Clear+0x28>)
 8000ba0:	881a      	ldrh	r2, [r3, #0]
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <LCD_Clear+0x28>)
 8000ba4:	8859      	ldrh	r1, [r3, #2]
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	460b      	mov	r3, r1
 8000bac:	2100      	movs	r1, #0
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff ffc2 	bl	8000b38 <LCD_SetArealColor>

}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000088 	.word	0x20000088

08000bc0 <LCD_DrawPoint>:
			Dot_Pixel	:	point size
********************************************************************************/
void LCD_DrawPoint(	POINT Xpoint, POINT Ypoint, 
					COLOR Color, 
					DOT_PIXEL Dot_Pixel,
					DOT_STYLE DOT_STYLE){		
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	4608      	mov	r0, r1
 8000bca:	4611      	mov	r1, r2
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4623      	mov	r3, r4
 8000bd0:	80fb      	strh	r3, [r7, #6]
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80bb      	strh	r3, [r7, #4]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	807b      	strh	r3, [r7, #2]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	707b      	strb	r3, [r7, #1]
						
	if ( Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page ) {
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <LCD_DrawPoint+0xec>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	88fa      	ldrh	r2, [r7, #6]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d85c      	bhi.n	8000ca2 <LCD_DrawPoint+0xe2>
 8000be8:	4b30      	ldr	r3, [pc, #192]	; (8000cac <LCD_DrawPoint+0xec>)
 8000bea:	885b      	ldrh	r3, [r3, #2]
 8000bec:	88ba      	ldrh	r2, [r7, #4]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d857      	bhi.n	8000ca2 <LCD_DrawPoint+0xe2>
		return;
	}
	
	uint16_t XDir_Num ,YDir_Num;
	if(DOT_STYLE == DOT_FILL_AROUND){
 8000bf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d12c      	bne.n	8000c54 <LCD_DrawPoint+0x94>
		for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1 ; XDir_Num++){
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	81fb      	strh	r3, [r7, #14]
 8000bfe:	e022      	b.n	8000c46 <LCD_DrawPoint+0x86>
			for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1 ; YDir_Num++){
 8000c00:	2300      	movs	r3, #0
 8000c02:	81bb      	strh	r3, [r7, #12]
 8000c04:	e016      	b.n	8000c34 <LCD_DrawPoint+0x74>
				LCD_SetPointlColor( Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8000c06:	88fa      	ldrh	r2, [r7, #6]
 8000c08:	89fb      	ldrh	r3, [r7, #14]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	787b      	ldrb	r3, [r7, #1]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	b298      	uxth	r0, r3
 8000c16:	88ba      	ldrh	r2, [r7, #4]
 8000c18:	89bb      	ldrh	r3, [r7, #12]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	787b      	ldrb	r3, [r7, #1]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	887a      	ldrh	r2, [r7, #2]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f7ff ff5f 	bl	8000aec <LCD_SetPointlColor>
			for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1 ; YDir_Num++){
 8000c2e:	89bb      	ldrh	r3, [r7, #12]
 8000c30:	3301      	adds	r3, #1
 8000c32:	81bb      	strh	r3, [r7, #12]
 8000c34:	89ba      	ldrh	r2, [r7, #12]
 8000c36:	787b      	ldrb	r3, [r7, #1]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	dbe2      	blt.n	8000c06 <LCD_DrawPoint+0x46>
		for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1 ; XDir_Num++){
 8000c40:	89fb      	ldrh	r3, [r7, #14]
 8000c42:	3301      	adds	r3, #1
 8000c44:	81fb      	strh	r3, [r7, #14]
 8000c46:	89fa      	ldrh	r2, [r7, #14]
 8000c48:	787b      	ldrb	r3, [r7, #1]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	dbd6      	blt.n	8000c00 <LCD_DrawPoint+0x40>
 8000c52:	e027      	b.n	8000ca4 <LCD_DrawPoint+0xe4>
			}
		}
	}else{
		for(XDir_Num = 0; XDir_Num <  Dot_Pixel ; XDir_Num++){
 8000c54:	2300      	movs	r3, #0
 8000c56:	81fb      	strh	r3, [r7, #14]
 8000c58:	e01d      	b.n	8000c96 <LCD_DrawPoint+0xd6>
			for(YDir_Num = 0; YDir_Num <  Dot_Pixel ; YDir_Num++){
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	81bb      	strh	r3, [r7, #12]
 8000c5e:	e012      	b.n	8000c86 <LCD_DrawPoint+0xc6>
				LCD_SetPointlColor( Xpoint + XDir_Num - 1 , Ypoint + YDir_Num -1 , Color);
 8000c60:	88fa      	ldrh	r2, [r7, #6]
 8000c62:	89fb      	ldrh	r3, [r7, #14]
 8000c64:	4413      	add	r3, r2
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	b298      	uxth	r0, r3
 8000c6c:	88ba      	ldrh	r2, [r7, #4]
 8000c6e:	89bb      	ldrh	r3, [r7, #12]
 8000c70:	4413      	add	r3, r2
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	3b01      	subs	r3, #1
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	887a      	ldrh	r2, [r7, #2]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f7ff ff36 	bl	8000aec <LCD_SetPointlColor>
			for(YDir_Num = 0; YDir_Num <  Dot_Pixel ; YDir_Num++){
 8000c80:	89bb      	ldrh	r3, [r7, #12]
 8000c82:	3301      	adds	r3, #1
 8000c84:	81bb      	strh	r3, [r7, #12]
 8000c86:	787b      	ldrb	r3, [r7, #1]
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	89ba      	ldrh	r2, [r7, #12]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d3e7      	bcc.n	8000c60 <LCD_DrawPoint+0xa0>
		for(XDir_Num = 0; XDir_Num <  Dot_Pixel ; XDir_Num++){
 8000c90:	89fb      	ldrh	r3, [r7, #14]
 8000c92:	3301      	adds	r3, #1
 8000c94:	81fb      	strh	r3, [r7, #14]
 8000c96:	787b      	ldrb	r3, [r7, #1]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	89fa      	ldrh	r2, [r7, #14]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d3dc      	bcc.n	8000c5a <LCD_DrawPoint+0x9a>
 8000ca0:	e000      	b.n	8000ca4 <LCD_DrawPoint+0xe4>
		return;
 8000ca2:	bf00      	nop
			}
		}
	}	
}
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd90      	pop	{r4, r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000088 	.word	0x20000088

08000cb0 <LCD_DrawCircle>:
			Filled : Whether it is filled: 1 filling 0��Do not
********************************************************************************/
void LCD_DrawCircle ( 	POINT X_Center, POINT Y_Center, LENGTH Radius, 
						COLOR Color, 
						DRAW_FILL  Draw_Fill ,
						DOT_PIXEL Dot_Pixel ){
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af02      	add	r7, sp, #8
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	4608      	mov	r0, r1
 8000cba:	4611      	mov	r1, r2
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4623      	mov	r3, r4
 8000cc0:	80fb      	strh	r3, [r7, #6]
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80bb      	strh	r3, [r7, #4]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	807b      	strh	r3, [r7, #2]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	803b      	strh	r3, [r7, #0]
							
	if (X_Center > sLCD_DIS.LCD_Dis_Column || Y_Center >= sLCD_DIS.LCD_Dis_Page) {
 8000cce:	4ba5      	ldr	r3, [pc, #660]	; (8000f64 <LCD_DrawCircle+0x2b4>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	88fa      	ldrh	r2, [r7, #6]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f200 8169 	bhi.w	8000fac <LCD_DrawCircle+0x2fc>
 8000cda:	4ba2      	ldr	r3, [pc, #648]	; (8000f64 <LCD_DrawCircle+0x2b4>)
 8000cdc:	885b      	ldrh	r3, [r3, #2]
 8000cde:	88ba      	ldrh	r2, [r7, #4]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f080 8163 	bcs.w	8000fac <LCD_DrawCircle+0x2fc>
		return;
	}						
	
	//Draw a circle from (0, R) as a starting point
	int16_t XCurrent, YCurrent;
	XCurrent = 0; 
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	81fb      	strh	r3, [r7, #14]
	YCurrent = Radius;	
 8000cea:	887b      	ldrh	r3, [r7, #2]
 8000cec:	81bb      	strh	r3, [r7, #12]
	
	//Cumulative error,judge the next point of the logo
	int16_t Esp = 3 - ( Radius << 1 );
 8000cee:	887b      	ldrh	r3, [r7, #2]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	f1c3 0303 	rsb	r3, r3, #3
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	817b      	strh	r3, [r7, #10]
	
	int16_t sCountY;
	if ( Draw_Fill ){
 8000cfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f000 814b 	beq.w	8000f9c <LCD_DrawCircle+0x2ec>
		while ( XCurrent <= YCurrent ){ //Realistic circles			
 8000d06:	e096      	b.n	8000e36 <LCD_DrawCircle+0x186>
			for ( sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {                      
 8000d08:	89fb      	ldrh	r3, [r7, #14]
 8000d0a:	813b      	strh	r3, [r7, #8]
 8000d0c:	e065      	b.n	8000dda <LCD_DrawCircle+0x12a>
				LCD_SetPointlColor ( X_Center + XCurrent, Y_Center + sCountY,   Color );           //1
 8000d0e:	89fa      	ldrh	r2, [r7, #14]
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	4413      	add	r3, r2
 8000d14:	b298      	uxth	r0, r3
 8000d16:	893a      	ldrh	r2, [r7, #8]
 8000d18:	88bb      	ldrh	r3, [r7, #4]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	883a      	ldrh	r2, [r7, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f7ff fee3 	bl	8000aec <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - XCurrent, Y_Center + sCountY,   Color );           //2       
 8000d26:	89fb      	ldrh	r3, [r7, #14]
 8000d28:	88fa      	ldrh	r2, [r7, #6]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	b298      	uxth	r0, r3
 8000d2e:	893a      	ldrh	r2, [r7, #8]
 8000d30:	88bb      	ldrh	r3, [r7, #4]
 8000d32:	4413      	add	r3, r2
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	883a      	ldrh	r2, [r7, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f7ff fed7 	bl	8000aec <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - sCountY,   Y_Center + XCurrent, Color );           //3
 8000d3e:	893b      	ldrh	r3, [r7, #8]
 8000d40:	88fa      	ldrh	r2, [r7, #6]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	b298      	uxth	r0, r3
 8000d46:	89fa      	ldrh	r2, [r7, #14]
 8000d48:	88bb      	ldrh	r3, [r7, #4]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	883a      	ldrh	r2, [r7, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f7ff fecb 	bl	8000aec <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - sCountY,   Y_Center - XCurrent, Color );           //4
 8000d56:	893b      	ldrh	r3, [r7, #8]
 8000d58:	88fa      	ldrh	r2, [r7, #6]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	b298      	uxth	r0, r3
 8000d5e:	89fb      	ldrh	r3, [r7, #14]
 8000d60:	88ba      	ldrh	r2, [r7, #4]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	883a      	ldrh	r2, [r7, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f7ff febf 	bl	8000aec <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - XCurrent, Y_Center - sCountY,   Color );           //5    
 8000d6e:	89fb      	ldrh	r3, [r7, #14]
 8000d70:	88fa      	ldrh	r2, [r7, #6]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	b298      	uxth	r0, r3
 8000d76:	893b      	ldrh	r3, [r7, #8]
 8000d78:	88ba      	ldrh	r2, [r7, #4]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	883a      	ldrh	r2, [r7, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f7ff feb3 	bl	8000aec <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center + XCurrent, Y_Center - sCountY,   Color );           //6
 8000d86:	89fa      	ldrh	r2, [r7, #14]
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	b298      	uxth	r0, r3
 8000d8e:	893b      	ldrh	r3, [r7, #8]
 8000d90:	88ba      	ldrh	r2, [r7, #4]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	883a      	ldrh	r2, [r7, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f7ff fea7 	bl	8000aec <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center + sCountY,   Y_Center - XCurrent, Color );           //7 	
 8000d9e:	893a      	ldrh	r2, [r7, #8]
 8000da0:	88fb      	ldrh	r3, [r7, #6]
 8000da2:	4413      	add	r3, r2
 8000da4:	b298      	uxth	r0, r3
 8000da6:	89fb      	ldrh	r3, [r7, #14]
 8000da8:	88ba      	ldrh	r2, [r7, #4]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	883a      	ldrh	r2, [r7, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f7ff fe9b 	bl	8000aec <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center + sCountY,   Y_Center + XCurrent, Color );           //0				
 8000db6:	893a      	ldrh	r2, [r7, #8]
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	4413      	add	r3, r2
 8000dbc:	b298      	uxth	r0, r3
 8000dbe:	89fa      	ldrh	r2, [r7, #14]
 8000dc0:	88bb      	ldrh	r3, [r7, #4]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	883a      	ldrh	r2, [r7, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f7ff fe8f 	bl	8000aec <LCD_SetPointlColor>
			for ( sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {                      
 8000dce:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	813b      	strh	r3, [r7, #8]
 8000dda:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000dde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	dd93      	ble.n	8000d0e <LCD_DrawCircle+0x5e>
			}
			if ( Esp < 0 ) 
 8000de6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	da09      	bge.n	8000e02 <LCD_DrawCircle+0x152>
				Esp += 4 * XCurrent + 6;	  
 8000dee:	89fb      	ldrh	r3, [r7, #14]
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	897b      	ldrh	r3, [r7, #10]
 8000df6:	4413      	add	r3, r2
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	3306      	adds	r3, #6
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	817b      	strh	r3, [r7, #10]
 8000e00:	e013      	b.n	8000e2a <LCD_DrawCircle+0x17a>
			else{
				Esp += 10 + 4 * ( XCurrent - YCurrent );   
 8000e02:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000e06:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	897b      	ldrh	r3, [r7, #10]
 8000e14:	4413      	add	r3, r2
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	330a      	adds	r3, #10
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	817b      	strh	r3, [r7, #10]
				YCurrent --;
 8000e1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	3b01      	subs	r3, #1
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	81bb      	strh	r3, [r7, #12]
			}
			XCurrent ++;
 8000e2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	3301      	adds	r3, #1
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	81fb      	strh	r3, [r7, #14]
		while ( XCurrent <= YCurrent ){ //Realistic circles			
 8000e36:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000e3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	f77f af62 	ble.w	8000d08 <LCD_DrawCircle+0x58>
 8000e44:	e0b3      	b.n	8000fae <LCD_DrawCircle+0x2fe>
		}
	}else{ //Draw a hollow circle  
		while ( XCurrent <= YCurrent ){ 	
			LCD_DrawPoint ( X_Center + XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //1
 8000e46:	89fa      	ldrh	r2, [r7, #14]
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	b298      	uxth	r0, r3
 8000e4e:	89ba      	ldrh	r2, [r7, #12]
 8000e50:	88bb      	ldrh	r3, [r7, #4]
 8000e52:	4413      	add	r3, r2
 8000e54:	b299      	uxth	r1, r3
 8000e56:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8000e5a:	883a      	ldrh	r2, [r7, #0]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	4623      	mov	r3, r4
 8000e62:	f7ff fead 	bl	8000bc0 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //2      
 8000e66:	89fb      	ldrh	r3, [r7, #14]
 8000e68:	88fa      	ldrh	r2, [r7, #6]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	b298      	uxth	r0, r3
 8000e6e:	89ba      	ldrh	r2, [r7, #12]
 8000e70:	88bb      	ldrh	r3, [r7, #4]
 8000e72:	4413      	add	r3, r2
 8000e74:	b299      	uxth	r1, r3
 8000e76:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8000e7a:	883a      	ldrh	r2, [r7, #0]
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	4623      	mov	r3, r4
 8000e82:	f7ff fe9d 	bl	8000bc0 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //3
 8000e86:	89bb      	ldrh	r3, [r7, #12]
 8000e88:	88fa      	ldrh	r2, [r7, #6]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	b298      	uxth	r0, r3
 8000e8e:	89fa      	ldrh	r2, [r7, #14]
 8000e90:	88bb      	ldrh	r3, [r7, #4]
 8000e92:	4413      	add	r3, r2
 8000e94:	b299      	uxth	r1, r3
 8000e96:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8000e9a:	883a      	ldrh	r2, [r7, #0]
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	4623      	mov	r3, r4
 8000ea2:	f7ff fe8d 	bl	8000bc0 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //4
 8000ea6:	89bb      	ldrh	r3, [r7, #12]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	b298      	uxth	r0, r3
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	88ba      	ldrh	r2, [r7, #4]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	b299      	uxth	r1, r3
 8000eb6:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8000eba:	883a      	ldrh	r2, [r7, #0]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	4623      	mov	r3, r4
 8000ec2:	f7ff fe7d 	bl	8000bc0 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //5       
 8000ec6:	89fb      	ldrh	r3, [r7, #14]
 8000ec8:	88fa      	ldrh	r2, [r7, #6]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	b298      	uxth	r0, r3
 8000ece:	89bb      	ldrh	r3, [r7, #12]
 8000ed0:	88ba      	ldrh	r2, [r7, #4]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	b299      	uxth	r1, r3
 8000ed6:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8000eda:	883a      	ldrh	r2, [r7, #0]
 8000edc:	2301      	movs	r3, #1
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	4623      	mov	r3, r4
 8000ee2:	f7ff fe6d 	bl	8000bc0 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center + XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //6
 8000ee6:	89fa      	ldrh	r2, [r7, #14]
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	4413      	add	r3, r2
 8000eec:	b298      	uxth	r0, r3
 8000eee:	89bb      	ldrh	r3, [r7, #12]
 8000ef0:	88ba      	ldrh	r2, [r7, #4]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	b299      	uxth	r1, r3
 8000ef6:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8000efa:	883a      	ldrh	r2, [r7, #0]
 8000efc:	2301      	movs	r3, #1
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	4623      	mov	r3, r4
 8000f02:	f7ff fe5d 	bl	8000bc0 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center + YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //7 
 8000f06:	89ba      	ldrh	r2, [r7, #12]
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b298      	uxth	r0, r3
 8000f0e:	89fb      	ldrh	r3, [r7, #14]
 8000f10:	88ba      	ldrh	r2, [r7, #4]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	b299      	uxth	r1, r3
 8000f16:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8000f1a:	883a      	ldrh	r2, [r7, #0]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	4623      	mov	r3, r4
 8000f22:	f7ff fe4d 	bl	8000bc0 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center + YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //0
 8000f26:	89ba      	ldrh	r2, [r7, #12]
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b298      	uxth	r0, r3
 8000f2e:	89fa      	ldrh	r2, [r7, #14]
 8000f30:	88bb      	ldrh	r3, [r7, #4]
 8000f32:	4413      	add	r3, r2
 8000f34:	b299      	uxth	r1, r3
 8000f36:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8000f3a:	883a      	ldrh	r2, [r7, #0]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	4623      	mov	r3, r4
 8000f42:	f7ff fe3d 	bl	8000bc0 <LCD_DrawPoint>
			
			if ( Esp < 0 ) 
 8000f46:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	da0c      	bge.n	8000f68 <LCD_DrawCircle+0x2b8>
				Esp += 4 * XCurrent + 6;	  
 8000f4e:	89fb      	ldrh	r3, [r7, #14]
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	897b      	ldrh	r3, [r7, #10]
 8000f56:	4413      	add	r3, r2
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	3306      	adds	r3, #6
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	817b      	strh	r3, [r7, #10]
 8000f60:	e016      	b.n	8000f90 <LCD_DrawCircle+0x2e0>
 8000f62:	bf00      	nop
 8000f64:	20000088 	.word	0x20000088
			else{
				Esp += 10 + 4 * ( XCurrent - YCurrent );   
 8000f68:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000f6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	897b      	ldrh	r3, [r7, #10]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	330a      	adds	r3, #10
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	817b      	strh	r3, [r7, #10]
				YCurrent --;
 8000f84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	81bb      	strh	r3, [r7, #12]
			}
			XCurrent ++;
 8000f90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	3301      	adds	r3, #1
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	81fb      	strh	r3, [r7, #14]
		while ( XCurrent <= YCurrent ){ 	
 8000f9c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000fa0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	f77f af4e 	ble.w	8000e46 <LCD_DrawCircle+0x196>
 8000faa:	e000      	b.n	8000fae <LCD_DrawCircle+0x2fe>
		return;
 8000fac:	bf00      	nop
		}
	}
}
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd90      	pop	{r4, r7, pc}

08000fb4 <LCD_DisplayChar>:
			Font  ��A structure pointer that displays a character size
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
void LCD_DisplayChar( 	POINT Xpoint, POINT Ypoint, const char Acsii_Char,
						sFONT* Font, COLOR Color_Background,	COLOR Color_Foreground ){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	81fb      	strh	r3, [r7, #14]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	81bb      	strh	r3, [r7, #12]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	72fb      	strb	r3, [r7, #11]
	POINT Page, Column;
	
	if (Xpoint >= sLCD_DIS.LCD_Dis_Column || Ypoint >= sLCD_DIS.LCD_Dis_Page) {
 8000fc8:	4b4d      	ldr	r3, [pc, #308]	; (8001100 <LCD_DisplayChar+0x14c>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	89fa      	ldrh	r2, [r7, #14]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	f080 8091 	bcs.w	80010f6 <LCD_DisplayChar+0x142>
 8000fd4:	4b4a      	ldr	r3, [pc, #296]	; (8001100 <LCD_DisplayChar+0x14c>)
 8000fd6:	885b      	ldrh	r3, [r3, #2]
 8000fd8:	89ba      	ldrh	r2, [r7, #12]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	f080 808b 	bcs.w	80010f6 <LCD_DisplayChar+0x142>
		return;
	}
	
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000fe0:	7afb      	ldrb	r3, [r7, #11]
 8000fe2:	3b20      	subs	r3, #32
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	88d2      	ldrh	r2, [r2, #6]
 8000fe8:	fb02 f303 	mul.w	r3, r2, r3
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	8892      	ldrh	r2, [r2, #4]
 8000ff0:	08d2      	lsrs	r2, r2, #3
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	8892      	ldrh	r2, [r2, #4]
 8000ffa:	f002 0207 	and.w	r2, r2, #7
 8000ffe:	b292      	uxth	r2, r2
 8001000:	2a00      	cmp	r2, #0
 8001002:	bf14      	ite	ne
 8001004:	2201      	movne	r2, #1
 8001006:	2200      	moveq	r2, #0
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440a      	add	r2, r1
 800100c:	fb02 f303 	mul.w	r3, r2, r3
 8001010:	617b      	str	r3, [r7, #20]
	const unsigned char* ptr = &Font->table[Char_Offset];
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	4413      	add	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]

	for ( Page = 0; Page < Font->Height; Page ++ ){
 800101c:	2300      	movs	r3, #0
 800101e:	83fb      	strh	r3, [r7, #30]
 8001020:	e063      	b.n	80010ea <LCD_DisplayChar+0x136>
		for ( Column = 0; Column < Font->Width; Column ++ ){
 8001022:	2300      	movs	r3, #0
 8001024:	83bb      	strh	r3, [r7, #28]
 8001026:	e04e      	b.n	80010c6 <LCD_DisplayChar+0x112>
			
			//To determine whether the font background color and screen background color is consistent
			if (FONT_BACKGROUND == Color_Background){//this process is to speed up the scan
 8001028:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800102a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800102e:	4293      	cmp	r3, r2
 8001030:	d118      	bne.n	8001064 <LCD_DisplayChar+0xb0>
				if (*ptr & (0x80 >> (Column % 8)))
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	4619      	mov	r1, r3
 8001038:	8bbb      	ldrh	r3, [r7, #28]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	2280      	movs	r2, #128	; 0x80
 8001040:	fa42 f303 	asr.w	r3, r2, r3
 8001044:	400b      	ands	r3, r1
 8001046:	2b00      	cmp	r3, #0
 8001048:	d031      	beq.n	80010ae <LCD_DisplayChar+0xfa>
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Foreground );
 800104a:	89fa      	ldrh	r2, [r7, #14]
 800104c:	8bbb      	ldrh	r3, [r7, #28]
 800104e:	4413      	add	r3, r2
 8001050:	b298      	uxth	r0, r3
 8001052:	89ba      	ldrh	r2, [r7, #12]
 8001054:	8bfb      	ldrh	r3, [r7, #30]
 8001056:	4413      	add	r3, r2
 8001058:	b29b      	uxth	r3, r3
 800105a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fd45 	bl	8000aec <LCD_SetPointlColor>
 8001062:	e024      	b.n	80010ae <LCD_DisplayChar+0xfa>
			}else{
				if (*ptr & (0x80 >> (Column % 8))){
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	8bbb      	ldrh	r3, [r7, #28]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	fa42 f303 	asr.w	r3, r2, r3
 8001076:	400b      	ands	r3, r1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00c      	beq.n	8001096 <LCD_DisplayChar+0xe2>
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Foreground );
 800107c:	89fa      	ldrh	r2, [r7, #14]
 800107e:	8bbb      	ldrh	r3, [r7, #28]
 8001080:	4413      	add	r3, r2
 8001082:	b298      	uxth	r0, r3
 8001084:	89ba      	ldrh	r2, [r7, #12]
 8001086:	8bfb      	ldrh	r3, [r7, #30]
 8001088:	4413      	add	r3, r2
 800108a:	b29b      	uxth	r3, r3
 800108c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fd2c 	bl	8000aec <LCD_SetPointlColor>
 8001094:	e00b      	b.n	80010ae <LCD_DisplayChar+0xfa>
				}else{
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Background );
 8001096:	89fa      	ldrh	r2, [r7, #14]
 8001098:	8bbb      	ldrh	r3, [r7, #28]
 800109a:	4413      	add	r3, r2
 800109c:	b298      	uxth	r0, r3
 800109e:	89ba      	ldrh	r2, [r7, #12]
 80010a0:	8bfb      	ldrh	r3, [r7, #30]
 80010a2:	4413      	add	r3, r2
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80010a8:	4619      	mov	r1, r3
 80010aa:	f7ff fd1f 	bl	8000aec <LCD_SetPointlColor>
				}
			}
			//One pixel is 8 bits
            if (Column % 8 == 7) {
 80010ae:	8bbb      	ldrh	r3, [r7, #28]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	2b07      	cmp	r3, #7
 80010b8:	d102      	bne.n	80010c0 <LCD_DisplayChar+0x10c>
                ptr++;
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	3301      	adds	r3, #1
 80010be:	61bb      	str	r3, [r7, #24]
		for ( Column = 0; Column < Font->Width; Column ++ ){
 80010c0:	8bbb      	ldrh	r3, [r7, #28]
 80010c2:	3301      	adds	r3, #1
 80010c4:	83bb      	strh	r3, [r7, #28]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	889b      	ldrh	r3, [r3, #4]
 80010ca:	8bba      	ldrh	r2, [r7, #28]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d3ab      	bcc.n	8001028 <LCD_DisplayChar+0x74>
            }	
		}/* Write a line */
		if (Font->Width % 8 != 0) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	889b      	ldrh	r3, [r3, #4]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	b29b      	uxth	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <LCD_DisplayChar+0x130>
				ptr++;
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	3301      	adds	r3, #1
 80010e2:	61bb      	str	r3, [r7, #24]
	for ( Page = 0; Page < Font->Height; Page ++ ){
 80010e4:	8bfb      	ldrh	r3, [r7, #30]
 80010e6:	3301      	adds	r3, #1
 80010e8:	83fb      	strh	r3, [r7, #30]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	88db      	ldrh	r3, [r3, #6]
 80010ee:	8bfa      	ldrh	r2, [r7, #30]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d396      	bcc.n	8001022 <LCD_DisplayChar+0x6e>
 80010f4:	e000      	b.n	80010f8 <LCD_DisplayChar+0x144>
		return;
 80010f6:	bf00      	nop
		}
	}/* Write all */
}
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000088 	.word	0x20000088

08001104 <LCD_DisplayString>:
			Font  ��A structure pointer that displays a character size
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
void LCD_DisplayString (	POINT Xstart, POINT Ystart, const char * pString, 
							sFONT* Font,COLOR Color_Background, COLOR Color_Foreground ){
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af02      	add	r7, sp, #8
 800110a:	60ba      	str	r2, [r7, #8]
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4603      	mov	r3, r0
 8001110:	81fb      	strh	r3, [r7, #14]
 8001112:	460b      	mov	r3, r1
 8001114:	81bb      	strh	r3, [r7, #12]
	POINT Xpoint = Xstart;
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	82fb      	strh	r3, [r7, #22]
	POINT Ypoint = Ystart;
 800111a:	89bb      	ldrh	r3, [r7, #12]
 800111c:	82bb      	strh	r3, [r7, #20]

	if (Xstart >= sLCD_DIS.LCD_Dis_Column || Ystart >= sLCD_DIS.LCD_Dis_Page) {
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <LCD_DisplayString+0xa0>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	89fa      	ldrh	r2, [r7, #14]
 8001124:	429a      	cmp	r2, r3
 8001126:	d238      	bcs.n	800119a <LCD_DisplayString+0x96>
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <LCD_DisplayString+0xa0>)
 800112a:	885b      	ldrh	r3, [r3, #2]
 800112c:	89ba      	ldrh	r2, [r7, #12]
 800112e:	429a      	cmp	r2, r3
 8001130:	d233      	bcs.n	800119a <LCD_DisplayString+0x96>
		return;
	}
		
	while ( * pString != '\0')
 8001132:	e02d      	b.n	8001190 <LCD_DisplayString+0x8c>
	{
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the height of the character
		if ( ( Xpoint + Font->Width ) > sLCD_DIS.LCD_Dis_Column ){
 8001134:	8afb      	ldrh	r3, [r7, #22]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	8892      	ldrh	r2, [r2, #4]
 800113a:	4413      	add	r3, r2
 800113c:	4a19      	ldr	r2, [pc, #100]	; (80011a4 <LCD_DisplayString+0xa0>)
 800113e:	8812      	ldrh	r2, [r2, #0]
 8001140:	4293      	cmp	r3, r2
 8001142:	dd06      	ble.n	8001152 <LCD_DisplayString+0x4e>
			Xpoint = Xstart;
 8001144:	89fb      	ldrh	r3, [r7, #14]
 8001146:	82fb      	strh	r3, [r7, #22]
			Ypoint += Font->Height;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	88da      	ldrh	r2, [r3, #6]
 800114c:	8abb      	ldrh	r3, [r7, #20]
 800114e:	4413      	add	r3, r2
 8001150:	82bb      	strh	r3, [r7, #20]
		}
		
		// If the Y direction is full, reposition to (Xstart, Ystart)
		if ( ( Ypoint  + Font->Height ) > sLCD_DIS.LCD_Dis_Page ){
 8001152:	8abb      	ldrh	r3, [r7, #20]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	88d2      	ldrh	r2, [r2, #6]
 8001158:	4413      	add	r3, r2
 800115a:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <LCD_DisplayString+0xa0>)
 800115c:	8852      	ldrh	r2, [r2, #2]
 800115e:	4293      	cmp	r3, r2
 8001160:	dd03      	ble.n	800116a <LCD_DisplayString+0x66>
			Xpoint = Xstart;
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	82fb      	strh	r3, [r7, #22]
			Ypoint = Ystart;
 8001166:	89bb      	ldrh	r3, [r7, #12]
 8001168:	82bb      	strh	r3, [r7, #20]
		}		
		LCD_DisplayChar ( Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground );
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	8ab9      	ldrh	r1, [r7, #20]
 8001170:	8af8      	ldrh	r0, [r7, #22]
 8001172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	8c3b      	ldrh	r3, [r7, #32]
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f7ff ff1a 	bl	8000fb4 <LCD_DisplayChar>
		
		//The next character of the address
		pString ++;
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	3301      	adds	r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
		
		//The next word of the abscissa increases the font of the broadband
		Xpoint += Font->Width;	
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	889a      	ldrh	r2, [r3, #4]
 800118a:	8afb      	ldrh	r3, [r7, #22]
 800118c:	4413      	add	r3, r2
 800118e:	82fb      	strh	r3, [r7, #22]
	while ( * pString != '\0')
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1cd      	bne.n	8001134 <LCD_DisplayString+0x30>
 8001198:	e000      	b.n	800119c <LCD_DisplayString+0x98>
		return;
 800119a:	bf00      	nop
	}
}
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000088 	.word	0x20000088

080011a8 <SPI_Write_Byte>:
/*********************************************


*********************************************/	
 uint8_t SPI_Write_Byte(uint8_t value)                                    
{    
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
		Driver_Delay_us(10);
		value = (value << 1); 	
	}
#else
	
    __HAL_SPI_ENABLE(&hspi1);
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <SPI_Write_Byte+0x68>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <SPI_Write_Byte+0x68>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011c0:	601a      	str	r2, [r3, #0]
	SPI1->CR2 |= (1)<<12;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <SPI_Write_Byte+0x6c>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	4a13      	ldr	r2, [pc, #76]	; (8001214 <SPI_Write_Byte+0x6c>)
 80011c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011cc:	6053      	str	r3, [r2, #4]
	
	while((SPI1->SR & (1<<1)) == 0)
 80011ce:	bf00      	nop
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <SPI_Write_Byte+0x6c>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0f9      	beq.n	80011d0 <SPI_Write_Byte+0x28>
		;
        
        *((__IO uint8_t *)(&SPI1->DR)) = value;
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <SPI_Write_Byte+0x70>)
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	7013      	strb	r3, [r2, #0]
        
        while(SPI1->SR & (1<<7)) ; //Wait for not busy
 80011e2:	bf00      	nop
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <SPI_Write_Byte+0x6c>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f9      	bne.n	80011e4 <SPI_Write_Byte+0x3c>

        while((SPI1->SR & (1<<0)) == 0) ; // Wait for the receiving area to be empty
 80011f0:	bf00      	nop
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <SPI_Write_Byte+0x6c>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f9      	beq.n	80011f2 <SPI_Write_Byte+0x4a>
        
        return *((__IO uint8_t *)(&SPI1->DR));
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <SPI_Write_Byte+0x70>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3

#endif
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	20000030 	.word	0x20000030
 8001214:	40013000 	.word	0x40013000
 8001218:	4001300c 	.word	0x4001300c

0800121c <Driver_Delay_ms>:
/*********************************************


*********************************************/	
void Driver_Delay_ms(uint32_t xms)	
{	
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 fac5 	bl	80017b4 <HAL_Delay>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void init() {
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
	// Initialize
	LCD_SCAN_DIR Lcd_ScanDir = SCAN_DIR_DFT;
 8001238:	2300      	movs	r3, #0
 800123a:	71fb      	strb	r3, [r7, #7]
	LCD_Init( Lcd_ScanDir );
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fbae 	bl	80009a0 <LCD_Init>

	// Run LCD test
	//LCD_Show();
	startingScreen();
 8001244:	f7ff f940 	bl	80004c8 <startingScreen>
	//setCupFillScreen();
	//movedCupErrorScreen();
	//emptyTankScreen();
	//programistScreen();

	Driver_Delay_ms(1000);
 8001248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800124c:	f7ff ffe6 	bl	800121c <Driver_Delay_ms>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125c:	f000 fa38 	bl	80016d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001260:	f000 f808 	bl	8001274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001264:	f000 f8a6 	bl	80013b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001268:	f000 f86e 	bl	8001348 <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  init();
 800126c:	f7ff ffe1 	bl	8001232 <init>
   while (1)
 8001270:	e7fe      	b.n	8001270 <main+0x18>
	...

08001274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b094      	sub	sp, #80	; 0x50
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	2230      	movs	r2, #48	; 0x30
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fa58 	bl	8002738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <SystemClock_Config+0xcc>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	4a27      	ldr	r2, [pc, #156]	; (8001340 <SystemClock_Config+0xcc>)
 80012a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a6:	6413      	str	r3, [r2, #64]	; 0x40
 80012a8:	4b25      	ldr	r3, [pc, #148]	; (8001340 <SystemClock_Config+0xcc>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <SystemClock_Config+0xd0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a21      	ldr	r2, [pc, #132]	; (8001344 <SystemClock_Config+0xd0>)
 80012be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <SystemClock_Config+0xd0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d0:	2301      	movs	r3, #1
 80012d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012da:	2302      	movs	r3, #2
 80012dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012e4:	2304      	movs	r3, #4
 80012e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012e8:	23a8      	movs	r3, #168	; 0xa8
 80012ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f0:	2304      	movs	r3, #4
 80012f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f4:	f107 0320 	add.w	r3, r7, #32
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 fd67 	bl	8001dcc <HAL_RCC_OscConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001304:	f000 f8f6 	bl	80014f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001308:	230f      	movs	r3, #15
 800130a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130c:	2302      	movs	r3, #2
 800130e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001314:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001318:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800131a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2105      	movs	r1, #5
 8001326:	4618      	mov	r0, r3
 8001328:	f000 ffc0 	bl	80022ac <HAL_RCC_ClockConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001332:	f000 f8df 	bl	80014f4 <Error_Handler>
  }
}
 8001336:	bf00      	nop
 8001338:	3750      	adds	r7, #80	; 0x50
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40007000 	.word	0x40007000

08001348 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_SPI1_Init+0x64>)
 800134e:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <MX_SPI1_Init+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_SPI1_Init+0x64>)
 8001354:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001358:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_SPI1_Init+0x64>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_SPI1_Init+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_SPI1_Init+0x64>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_SPI1_Init+0x64>)
 800136e:	2200      	movs	r2, #0
 8001370:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_SPI1_Init+0x64>)
 8001374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001378:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_SPI1_Init+0x64>)
 800137c:	2210      	movs	r2, #16
 800137e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <MX_SPI1_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_SPI1_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <MX_SPI1_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_SPI1_Init+0x64>)
 8001394:	220a      	movs	r2, #10
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_SPI1_Init+0x64>)
 800139a:	f001 f945 	bl	8002628 <HAL_SPI_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013a4:	f000 f8a6 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000030 	.word	0x20000030
 80013b0:	40013000 	.word	0x40013000

080013b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b44      	ldr	r3, [pc, #272]	; (80014e0 <MX_GPIO_Init+0x12c>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a43      	ldr	r2, [pc, #268]	; (80014e0 <MX_GPIO_Init+0x12c>)
 80013d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <MX_GPIO_Init+0x12c>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <MX_GPIO_Init+0x12c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a3c      	ldr	r2, [pc, #240]	; (80014e0 <MX_GPIO_Init+0x12c>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <MX_GPIO_Init+0x12c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <MX_GPIO_Init+0x12c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a35      	ldr	r2, [pc, #212]	; (80014e0 <MX_GPIO_Init+0x12c>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <MX_GPIO_Init+0x12c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <MX_GPIO_Init+0x12c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a2e      	ldr	r2, [pc, #184]	; (80014e0 <MX_GPIO_Init+0x12c>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <MX_GPIO_Init+0x12c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	4829      	ldr	r0, [pc, #164]	; (80014e4 <MX_GPIO_Init+0x130>)
 8001440:	f000 fc86 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 7140 	mov.w	r1, #768	; 0x300
 800144a:	4827      	ldr	r0, [pc, #156]	; (80014e8 <MX_GPIO_Init+0x134>)
 800144c:	f000 fc80 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	2140      	movs	r1, #64	; 0x40
 8001454:	4825      	ldr	r0, [pc, #148]	; (80014ec <MX_GPIO_Init+0x138>)
 8001456:	f000 fc7b 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800145a:	2301      	movs	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <MX_GPIO_Init+0x13c>)
 8001460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	481e      	ldr	r0, [pc, #120]	; (80014e8 <MX_GPIO_Init+0x134>)
 800146e:	f000 fad5 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4816      	ldr	r0, [pc, #88]	; (80014e4 <MX_GPIO_Init+0x130>)
 800148a:	f000 fac7 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800148e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001494:	2301      	movs	r3, #1
 8001496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	4810      	ldr	r0, [pc, #64]	; (80014e8 <MX_GPIO_Init+0x134>)
 80014a8:	f000 fab8 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014ac:	2340      	movs	r3, #64	; 0x40
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	480a      	ldr	r0, [pc, #40]	; (80014ec <MX_GPIO_Init+0x138>)
 80014c4:	f000 faaa 	bl	8001a1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	2006      	movs	r0, #6
 80014ce:	f000 fa6e 	bl	80019ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014d2:	2006      	movs	r0, #6
 80014d4:	f000 fa87 	bl	80019e6 <HAL_NVIC_EnableIRQ>

}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	10210000 	.word	0x10210000

080014f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_MspInit+0x4c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <HAL_MspInit+0x4c>)
 8001514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001518:	6453      	str	r3, [r2, #68]	; 0x44
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_MspInit+0x4c>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a08      	ldr	r2, [pc, #32]	; (8001550 <HAL_MspInit+0x4c>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_MspInit+0x4c>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800

08001554 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_SPI_MspInit+0x84>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d12b      	bne.n	80015ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_SPI_MspInit+0x88>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <HAL_SPI_MspInit+0x88>)
 8001580:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_SPI_MspInit+0x88>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_SPI_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a10      	ldr	r2, [pc, #64]	; (80015dc <HAL_SPI_MspInit+0x88>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_SPI_MspInit+0x88>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015ae:	23a0      	movs	r3, #160	; 0xa0
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015be:	2305      	movs	r3, #5
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <HAL_SPI_MspInit+0x8c>)
 80015ca:	f000 fa27 	bl	8001a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40013000 	.word	0x40013000
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020000 	.word	0x40020000

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <HardFault_Handler+0x4>

080015f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <MemManage_Handler+0x4>

080015fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <BusFault_Handler+0x4>

08001604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler+0x4>

0800160a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001638:	f000 f89c 	bl	8001774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}

08001640 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001644:	2001      	movs	r0, #1
 8001646:	f000 fb9d 	bl	8001d84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <SystemInit+0x28>)
 8001656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800165a:	4a07      	ldr	r2, [pc, #28]	; (8001678 <SystemInit+0x28>)
 800165c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <SystemInit+0x28>)
 8001666:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800166a:	609a      	str	r2, [r3, #8]
#endif
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800167c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001680:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001682:	e003      	b.n	800168c <LoopCopyDataInit>

08001684 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001686:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001688:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800168a:	3104      	adds	r1, #4

0800168c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800168c:	480b      	ldr	r0, [pc, #44]	; (80016bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001690:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001692:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001694:	d3f6      	bcc.n	8001684 <CopyDataInit>
  ldr  r2, =_sbss
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001698:	e002      	b.n	80016a0 <LoopFillZerobss>

0800169a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800169a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800169c:	f842 3b04 	str.w	r3, [r2], #4

080016a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016a4:	d3f9      	bcc.n	800169a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016a6:	f7ff ffd3 	bl	8001650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016aa:	f001 f821 	bl	80026f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ae:	f7ff fdd3 	bl	8001258 <main>
  bx  lr    
 80016b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016b8:	08002ca0 	.word	0x08002ca0
  ldr  r0, =_sdata
 80016bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016c0:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80016c4:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 80016c8:	20000098 	.word	0x20000098

080016cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016cc:	e7fe      	b.n	80016cc <ADC_IRQHandler>
	...

080016d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_Init+0x40>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0d      	ldr	r2, [pc, #52]	; (8001710 <HAL_Init+0x40>)
 80016da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <HAL_Init+0x40>)
 80016e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_Init+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a07      	ldr	r2, [pc, #28]	; (8001710 <HAL_Init+0x40>)
 80016f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f000 f94d 	bl	8001998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fe:	2000      	movs	r0, #0
 8001700:	f000 f808 	bl	8001714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001704:	f7ff fefe 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023c00 	.word	0x40023c00

08001714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_InitTick+0x54>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_InitTick+0x58>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172a:	fbb3 f3f1 	udiv	r3, r3, r1
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f965 	bl	8001a02 <HAL_SYSTICK_Config>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e00e      	b.n	8001760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d80a      	bhi.n	800175e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001748:	2200      	movs	r2, #0
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	f000 f92d 	bl	80019ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001754:	4a06      	ldr	r2, [pc, #24]	; (8001770 <HAL_InitTick+0x5c>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	e000      	b.n	8001760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000008 	.word	0x20000008
 800176c:	20000010 	.word	0x20000010
 8001770:	2000000c 	.word	0x2000000c

08001774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_IncTick+0x20>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_IncTick+0x24>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4413      	add	r3, r2
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <HAL_IncTick+0x24>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000010 	.word	0x20000010
 8001798:	20000094 	.word	0x20000094

0800179c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return uwTick;
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <HAL_GetTick+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000094 	.word	0x20000094

080017b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff ffee 	bl	800179c <HAL_GetTick>
 80017c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017cc:	d005      	beq.n	80017da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_Delay+0x40>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017da:	bf00      	nop
 80017dc:	f7ff ffde 	bl	800179c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d8f7      	bhi.n	80017dc <HAL_Delay+0x28>
  {
  }
}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000010 	.word	0x20000010

080017f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001814:	4013      	ands	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182a:	4a04      	ldr	r2, [pc, #16]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	60d3      	str	r3, [r2, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <__NVIC_GetPriorityGrouping+0x18>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	f003 0307 	and.w	r3, r3, #7
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	2b00      	cmp	r3, #0
 800186c:	db0b      	blt.n	8001886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	f003 021f 	and.w	r2, r3, #31
 8001874:	4907      	ldr	r1, [pc, #28]	; (8001894 <__NVIC_EnableIRQ+0x38>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	2001      	movs	r0, #1
 800187e:	fa00 f202 	lsl.w	r2, r0, r2
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000e100 	.word	0xe000e100

08001898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	db0a      	blt.n	80018c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	490c      	ldr	r1, [pc, #48]	; (80018e4 <__NVIC_SetPriority+0x4c>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	0112      	lsls	r2, r2, #4
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	440b      	add	r3, r1
 80018bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c0:	e00a      	b.n	80018d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4908      	ldr	r1, [pc, #32]	; (80018e8 <__NVIC_SetPriority+0x50>)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	3b04      	subs	r3, #4
 80018d0:	0112      	lsls	r2, r2, #4
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	440b      	add	r3, r1
 80018d6:	761a      	strb	r2, [r3, #24]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000e100 	.word	0xe000e100
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	; 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f1c3 0307 	rsb	r3, r3, #7
 8001906:	2b04      	cmp	r3, #4
 8001908:	bf28      	it	cs
 800190a:	2304      	movcs	r3, #4
 800190c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3304      	adds	r3, #4
 8001912:	2b06      	cmp	r3, #6
 8001914:	d902      	bls.n	800191c <NVIC_EncodePriority+0x30>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3b03      	subs	r3, #3
 800191a:	e000      	b.n	800191e <NVIC_EncodePriority+0x32>
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	401a      	ands	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001934:	f04f 31ff 	mov.w	r1, #4294967295
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	43d9      	mvns	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	4313      	orrs	r3, r2
         );
}
 8001946:	4618      	mov	r0, r3
 8001948:	3724      	adds	r7, #36	; 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001964:	d301      	bcc.n	800196a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001966:	2301      	movs	r3, #1
 8001968:	e00f      	b.n	800198a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <SysTick_Config+0x40>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001972:	210f      	movs	r1, #15
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	f7ff ff8e 	bl	8001898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <SysTick_Config+0x40>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001982:	4b04      	ldr	r3, [pc, #16]	; (8001994 <SysTick_Config+0x40>)
 8001984:	2207      	movs	r2, #7
 8001986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	e000e010 	.word	0xe000e010

08001998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ff29 	bl	80017f8 <__NVIC_SetPriorityGrouping>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c0:	f7ff ff3e 	bl	8001840 <__NVIC_GetPriorityGrouping>
 80019c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	6978      	ldr	r0, [r7, #20]
 80019cc:	f7ff ff8e 	bl	80018ec <NVIC_EncodePriority>
 80019d0:	4602      	mov	r2, r0
 80019d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff5d 	bl	8001898 <__NVIC_SetPriority>
}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff31 	bl	800185c <__NVIC_EnableIRQ>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffa2 	bl	8001954 <SysTick_Config>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	e16b      	b.n	8001d10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	f040 815a 	bne.w	8001d0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d00b      	beq.n	8001a76 <HAL_GPIO_Init+0x5a>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d007      	beq.n	8001a76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a6a:	2b11      	cmp	r3, #17
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b12      	cmp	r3, #18
 8001a74:	d130      	bne.n	8001ad8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2203      	movs	r2, #3
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 0201 	and.w	r2, r3, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0xfc>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b12      	cmp	r3, #18
 8001b16:	d123      	bne.n	8001b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	08da      	lsrs	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3208      	adds	r2, #8
 8001b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	08da      	lsrs	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3208      	adds	r2, #8
 8001b5a:	69b9      	ldr	r1, [r7, #24]
 8001b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0203 	and.w	r2, r3, #3
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 80b4 	beq.w	8001d0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b5f      	ldr	r3, [pc, #380]	; (8001d24 <HAL_GPIO_Init+0x308>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	4a5e      	ldr	r2, [pc, #376]	; (8001d24 <HAL_GPIO_Init+0x308>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb2:	4b5c      	ldr	r3, [pc, #368]	; (8001d24 <HAL_GPIO_Init+0x308>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bbe:	4a5a      	ldr	r2, [pc, #360]	; (8001d28 <HAL_GPIO_Init+0x30c>)
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a51      	ldr	r2, [pc, #324]	; (8001d2c <HAL_GPIO_Init+0x310>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d02b      	beq.n	8001c42 <HAL_GPIO_Init+0x226>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a50      	ldr	r2, [pc, #320]	; (8001d30 <HAL_GPIO_Init+0x314>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d025      	beq.n	8001c3e <HAL_GPIO_Init+0x222>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4f      	ldr	r2, [pc, #316]	; (8001d34 <HAL_GPIO_Init+0x318>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01f      	beq.n	8001c3a <HAL_GPIO_Init+0x21e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4e      	ldr	r2, [pc, #312]	; (8001d38 <HAL_GPIO_Init+0x31c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d019      	beq.n	8001c36 <HAL_GPIO_Init+0x21a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4d      	ldr	r2, [pc, #308]	; (8001d3c <HAL_GPIO_Init+0x320>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0x216>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4c      	ldr	r2, [pc, #304]	; (8001d40 <HAL_GPIO_Init+0x324>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00d      	beq.n	8001c2e <HAL_GPIO_Init+0x212>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4b      	ldr	r2, [pc, #300]	; (8001d44 <HAL_GPIO_Init+0x328>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <HAL_GPIO_Init+0x20e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4a      	ldr	r2, [pc, #296]	; (8001d48 <HAL_GPIO_Init+0x32c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_GPIO_Init+0x20a>
 8001c22:	2307      	movs	r3, #7
 8001c24:	e00e      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c26:	2308      	movs	r3, #8
 8001c28:	e00c      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c2a:	2306      	movs	r3, #6
 8001c2c:	e00a      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c2e:	2305      	movs	r3, #5
 8001c30:	e008      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c32:	2304      	movs	r3, #4
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c36:	2303      	movs	r3, #3
 8001c38:	e004      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e002      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c42:	2300      	movs	r3, #0
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	f002 0203 	and.w	r2, r2, #3
 8001c4a:	0092      	lsls	r2, r2, #2
 8001c4c:	4093      	lsls	r3, r2
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c54:	4934      	ldr	r1, [pc, #208]	; (8001d28 <HAL_GPIO_Init+0x30c>)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c62:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_GPIO_Init+0x330>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c86:	4a31      	ldr	r2, [pc, #196]	; (8001d4c <HAL_GPIO_Init+0x330>)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c8c:	4b2f      	ldr	r3, [pc, #188]	; (8001d4c <HAL_GPIO_Init+0x330>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cb0:	4a26      	ldr	r2, [pc, #152]	; (8001d4c <HAL_GPIO_Init+0x330>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb6:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <HAL_GPIO_Init+0x330>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cda:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <HAL_GPIO_Init+0x330>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <HAL_GPIO_Init+0x330>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d04:	4a11      	ldr	r2, [pc, #68]	; (8001d4c <HAL_GPIO_Init+0x330>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	2b0f      	cmp	r3, #15
 8001d14:	f67f ae90 	bls.w	8001a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d18:	bf00      	nop
 8001d1a:	3724      	adds	r7, #36	; 0x24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40013800 	.word	0x40013800
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40020400 	.word	0x40020400
 8001d34:	40020800 	.word	0x40020800
 8001d38:	40020c00 	.word	0x40020c00
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40021400 	.word	0x40021400
 8001d44:	40021800 	.word	0x40021800
 8001d48:	40021c00 	.word	0x40021c00
 8001d4c:	40013c00 	.word	0x40013c00

08001d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d60:	787b      	ldrb	r3, [r7, #1]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d6c:	e003      	b.n	8001d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	041a      	lsls	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	619a      	str	r2, [r3, #24]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d006      	beq.n	8001da8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d9a:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f806 	bl	8001db4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40013c00 	.word	0x40013c00

08001db4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e25b      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d075      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dea:	4ba3      	ldr	r3, [pc, #652]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d00c      	beq.n	8001e10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df6:	4ba0      	ldr	r3, [pc, #640]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d112      	bne.n	8001e28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e02:	4b9d      	ldr	r3, [pc, #628]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e0e:	d10b      	bne.n	8001e28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	4b99      	ldr	r3, [pc, #612]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d05b      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x108>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d157      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e236      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e30:	d106      	bne.n	8001e40 <HAL_RCC_OscConfig+0x74>
 8001e32:	4b91      	ldr	r3, [pc, #580]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a90      	ldr	r2, [pc, #576]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e01d      	b.n	8001e7c <HAL_RCC_OscConfig+0xb0>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x98>
 8001e4a:	4b8b      	ldr	r3, [pc, #556]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a8a      	ldr	r2, [pc, #552]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b88      	ldr	r3, [pc, #544]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a87      	ldr	r2, [pc, #540]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e00b      	b.n	8001e7c <HAL_RCC_OscConfig+0xb0>
 8001e64:	4b84      	ldr	r3, [pc, #528]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a83      	ldr	r2, [pc, #524]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b81      	ldr	r3, [pc, #516]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a80      	ldr	r2, [pc, #512]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7ff fc8a 	bl	800179c <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7ff fc86 	bl	800179c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e1fb      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	4b76      	ldr	r3, [pc, #472]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0xc0>
 8001eaa:	e014      	b.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fc76 	bl	800179c <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7ff fc72 	bl	800179c <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	; 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e1e7      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec6:	4b6c      	ldr	r3, [pc, #432]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xe8>
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d063      	beq.n	8001faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ee2:	4b65      	ldr	r3, [pc, #404]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eee:	4b62      	ldr	r3, [pc, #392]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d11c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efa:	4b5f      	ldr	r3, [pc, #380]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d116      	bne.n	8001f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	4b5c      	ldr	r3, [pc, #368]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <HAL_RCC_OscConfig+0x152>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d001      	beq.n	8001f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e1bb      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1e:	4b56      	ldr	r3, [pc, #344]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4952      	ldr	r1, [pc, #328]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	e03a      	b.n	8001faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f3c:	4b4f      	ldr	r3, [pc, #316]	; (800207c <HAL_RCC_OscConfig+0x2b0>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7ff fc2b 	bl	800179c <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f4a:	f7ff fc27 	bl	800179c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e19c      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	4b46      	ldr	r3, [pc, #280]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f68:	4b43      	ldr	r3, [pc, #268]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4940      	ldr	r1, [pc, #256]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]
 8001f7c:	e015      	b.n	8001faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7e:	4b3f      	ldr	r3, [pc, #252]	; (800207c <HAL_RCC_OscConfig+0x2b0>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff fc0a 	bl	800179c <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8c:	f7ff fc06 	bl	800179c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e17b      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	4b36      	ldr	r3, [pc, #216]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d030      	beq.n	8002018 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d016      	beq.n	8001fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fbe:	4b30      	ldr	r3, [pc, #192]	; (8002080 <HAL_RCC_OscConfig+0x2b4>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7ff fbea 	bl	800179c <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7ff fbe6 	bl	800179c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e15b      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x200>
 8001fea:	e015      	b.n	8002018 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fec:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_RCC_OscConfig+0x2b4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff fbd3 	bl	800179c <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7ff fbcf 	bl	800179c <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e144      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 800200e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f0      	bne.n	8001ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80a0 	beq.w	8002166 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10f      	bne.n	8002056 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002044:	6413      	str	r3, [r2, #64]	; 0x40
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002052:	2301      	movs	r3, #1
 8002054:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_RCC_OscConfig+0x2b8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d121      	bne.n	80020a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <HAL_RCC_OscConfig+0x2b8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a07      	ldr	r2, [pc, #28]	; (8002084 <HAL_RCC_OscConfig+0x2b8>)
 8002068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206e:	f7ff fb95 	bl	800179c <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002074:	e011      	b.n	800209a <HAL_RCC_OscConfig+0x2ce>
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	42470000 	.word	0x42470000
 8002080:	42470e80 	.word	0x42470e80
 8002084:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002088:	f7ff fb88 	bl	800179c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e0fd      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	4b81      	ldr	r3, [pc, #516]	; (80022a0 <HAL_RCC_OscConfig+0x4d4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d106      	bne.n	80020bc <HAL_RCC_OscConfig+0x2f0>
 80020ae:	4b7d      	ldr	r3, [pc, #500]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b2:	4a7c      	ldr	r2, [pc, #496]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ba:	e01c      	b.n	80020f6 <HAL_RCC_OscConfig+0x32a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b05      	cmp	r3, #5
 80020c2:	d10c      	bne.n	80020de <HAL_RCC_OscConfig+0x312>
 80020c4:	4b77      	ldr	r3, [pc, #476]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c8:	4a76      	ldr	r2, [pc, #472]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020ca:	f043 0304 	orr.w	r3, r3, #4
 80020ce:	6713      	str	r3, [r2, #112]	; 0x70
 80020d0:	4b74      	ldr	r3, [pc, #464]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d4:	4a73      	ldr	r2, [pc, #460]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6713      	str	r3, [r2, #112]	; 0x70
 80020dc:	e00b      	b.n	80020f6 <HAL_RCC_OscConfig+0x32a>
 80020de:	4b71      	ldr	r3, [pc, #452]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	4a70      	ldr	r2, [pc, #448]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ea:	4b6e      	ldr	r3, [pc, #440]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	4a6d      	ldr	r2, [pc, #436]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020f0:	f023 0304 	bic.w	r3, r3, #4
 80020f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d015      	beq.n	800212a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fe:	f7ff fb4d 	bl	800179c <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002104:	e00a      	b.n	800211c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7ff fb49 	bl	800179c <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	; 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0bc      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211c:	4b61      	ldr	r3, [pc, #388]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0ee      	beq.n	8002106 <HAL_RCC_OscConfig+0x33a>
 8002128:	e014      	b.n	8002154 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212a:	f7ff fb37 	bl	800179c <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7ff fb33 	bl	800179c <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e0a6      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002148:	4b56      	ldr	r3, [pc, #344]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 800214a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1ee      	bne.n	8002132 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d105      	bne.n	8002166 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4b52      	ldr	r3, [pc, #328]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a51      	ldr	r2, [pc, #324]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 8002160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8092 	beq.w	8002294 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002170:	4b4c      	ldr	r3, [pc, #304]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b08      	cmp	r3, #8
 800217a:	d05c      	beq.n	8002236 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d141      	bne.n	8002208 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002184:	4b48      	ldr	r3, [pc, #288]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218a:	f7ff fb07 	bl	800179c <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002192:	f7ff fb03 	bl	800179c <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e078      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a4:	4b3f      	ldr	r3, [pc, #252]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69da      	ldr	r2, [r3, #28]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	019b      	lsls	r3, r3, #6
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	085b      	lsrs	r3, r3, #1
 80021c8:	3b01      	subs	r3, #1
 80021ca:	041b      	lsls	r3, r3, #16
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d2:	061b      	lsls	r3, r3, #24
 80021d4:	4933      	ldr	r1, [pc, #204]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021da:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 80021dc:	2201      	movs	r2, #1
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff fadc 	bl	800179c <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e8:	f7ff fad8 	bl	800179c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e04d      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fa:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x41c>
 8002206:	e045      	b.n	8002294 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220e:	f7ff fac5 	bl	800179c <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002216:	f7ff fac1 	bl	800179c <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e036      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002228:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f0      	bne.n	8002216 <HAL_RCC_OscConfig+0x44a>
 8002234:	e02e      	b.n	8002294 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e029      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002242:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	429a      	cmp	r2, r3
 8002254:	d11c      	bne.n	8002290 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d115      	bne.n	8002290 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800226a:	4013      	ands	r3, r2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002270:	4293      	cmp	r3, r2
 8002272:	d10d      	bne.n	8002290 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800227e:	429a      	cmp	r2, r3
 8002280:	d106      	bne.n	8002290 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40007000 	.word	0x40007000
 80022a4:	40023800 	.word	0x40023800
 80022a8:	42470060 	.word	0x42470060

080022ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0cc      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b68      	ldr	r3, [pc, #416]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d90c      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b65      	ldr	r3, [pc, #404]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b63      	ldr	r3, [pc, #396]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0b8      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002300:	4b59      	ldr	r3, [pc, #356]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4a58      	ldr	r2, [pc, #352]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800230a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002318:	4b53      	ldr	r3, [pc, #332]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	4a52      	ldr	r2, [pc, #328]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002322:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002324:	4b50      	ldr	r3, [pc, #320]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	494d      	ldr	r1, [pc, #308]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d044      	beq.n	80023cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4b47      	ldr	r3, [pc, #284]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d119      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e07f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d003      	beq.n	800236a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002366:	2b03      	cmp	r3, #3
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236a:	4b3f      	ldr	r3, [pc, #252]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e06f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237a:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e067      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238a:	4b37      	ldr	r3, [pc, #220]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f023 0203 	bic.w	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4934      	ldr	r1, [pc, #208]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800239c:	f7ff f9fe 	bl	800179c <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a4:	f7ff f9fa 	bl	800179c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e04f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 020c 	and.w	r2, r3, #12
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d1eb      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023cc:	4b25      	ldr	r3, [pc, #148]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d20c      	bcs.n	80023f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b22      	ldr	r3, [pc, #136]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e032      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4916      	ldr	r1, [pc, #88]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800241e:	4b12      	ldr	r3, [pc, #72]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	490e      	ldr	r1, [pc, #56]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002432:	f000 f821 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8002436:	4601      	mov	r1, r0
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	4a0a      	ldr	r2, [pc, #40]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	5cd3      	ldrb	r3, [r2, r3]
 8002446:	fa21 f303 	lsr.w	r3, r1, r3
 800244a:	4a09      	ldr	r2, [pc, #36]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <HAL_RCC_ClockConfig+0x1c8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff f95e 	bl	8001714 <HAL_InitTick>

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023c00 	.word	0x40023c00
 8002468:	40023800 	.word	0x40023800
 800246c:	08002c80 	.word	0x08002c80
 8002470:	20000008 	.word	0x20000008
 8002474:	2000000c 	.word	0x2000000c

08002478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	2300      	movs	r3, #0
 8002488:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800248e:	4b63      	ldr	r3, [pc, #396]	; (800261c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b04      	cmp	r3, #4
 8002498:	d007      	beq.n	80024aa <HAL_RCC_GetSysClockFreq+0x32>
 800249a:	2b08      	cmp	r3, #8
 800249c:	d008      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0x38>
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f040 80b4 	bne.w	800260c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024a4:	4b5e      	ldr	r3, [pc, #376]	; (8002620 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024a6:	60bb      	str	r3, [r7, #8]
       break;
 80024a8:	e0b3      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024aa:	4b5e      	ldr	r3, [pc, #376]	; (8002624 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80024ac:	60bb      	str	r3, [r7, #8]
      break;
 80024ae:	e0b0      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024b0:	4b5a      	ldr	r3, [pc, #360]	; (800261c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ba:	4b58      	ldr	r3, [pc, #352]	; (800261c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d04a      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c6:	4b55      	ldr	r3, [pc, #340]	; (800261c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	099b      	lsrs	r3, r3, #6
 80024cc:	f04f 0400 	mov.w	r4, #0
 80024d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	ea03 0501 	and.w	r5, r3, r1
 80024dc:	ea04 0602 	and.w	r6, r4, r2
 80024e0:	4629      	mov	r1, r5
 80024e2:	4632      	mov	r2, r6
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	f04f 0400 	mov.w	r4, #0
 80024ec:	0154      	lsls	r4, r2, #5
 80024ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024f2:	014b      	lsls	r3, r1, #5
 80024f4:	4619      	mov	r1, r3
 80024f6:	4622      	mov	r2, r4
 80024f8:	1b49      	subs	r1, r1, r5
 80024fa:	eb62 0206 	sbc.w	r2, r2, r6
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	f04f 0400 	mov.w	r4, #0
 8002506:	0194      	lsls	r4, r2, #6
 8002508:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800250c:	018b      	lsls	r3, r1, #6
 800250e:	1a5b      	subs	r3, r3, r1
 8002510:	eb64 0402 	sbc.w	r4, r4, r2
 8002514:	f04f 0100 	mov.w	r1, #0
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	00e2      	lsls	r2, r4, #3
 800251e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002522:	00d9      	lsls	r1, r3, #3
 8002524:	460b      	mov	r3, r1
 8002526:	4614      	mov	r4, r2
 8002528:	195b      	adds	r3, r3, r5
 800252a:	eb44 0406 	adc.w	r4, r4, r6
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	0262      	lsls	r2, r4, #9
 8002538:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800253c:	0259      	lsls	r1, r3, #9
 800253e:	460b      	mov	r3, r1
 8002540:	4614      	mov	r4, r2
 8002542:	4618      	mov	r0, r3
 8002544:	4621      	mov	r1, r4
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f04f 0400 	mov.w	r4, #0
 800254c:	461a      	mov	r2, r3
 800254e:	4623      	mov	r3, r4
 8002550:	f7fd fe3a 	bl	80001c8 <__aeabi_uldivmod>
 8002554:	4603      	mov	r3, r0
 8002556:	460c      	mov	r4, r1
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	e049      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255c:	4b2f      	ldr	r3, [pc, #188]	; (800261c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	099b      	lsrs	r3, r3, #6
 8002562:	f04f 0400 	mov.w	r4, #0
 8002566:	f240 11ff 	movw	r1, #511	; 0x1ff
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	ea03 0501 	and.w	r5, r3, r1
 8002572:	ea04 0602 	and.w	r6, r4, r2
 8002576:	4629      	mov	r1, r5
 8002578:	4632      	mov	r2, r6
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	f04f 0400 	mov.w	r4, #0
 8002582:	0154      	lsls	r4, r2, #5
 8002584:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002588:	014b      	lsls	r3, r1, #5
 800258a:	4619      	mov	r1, r3
 800258c:	4622      	mov	r2, r4
 800258e:	1b49      	subs	r1, r1, r5
 8002590:	eb62 0206 	sbc.w	r2, r2, r6
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	f04f 0400 	mov.w	r4, #0
 800259c:	0194      	lsls	r4, r2, #6
 800259e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025a2:	018b      	lsls	r3, r1, #6
 80025a4:	1a5b      	subs	r3, r3, r1
 80025a6:	eb64 0402 	sbc.w	r4, r4, r2
 80025aa:	f04f 0100 	mov.w	r1, #0
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	00e2      	lsls	r2, r4, #3
 80025b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025b8:	00d9      	lsls	r1, r3, #3
 80025ba:	460b      	mov	r3, r1
 80025bc:	4614      	mov	r4, r2
 80025be:	195b      	adds	r3, r3, r5
 80025c0:	eb44 0406 	adc.w	r4, r4, r6
 80025c4:	f04f 0100 	mov.w	r1, #0
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	02a2      	lsls	r2, r4, #10
 80025ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80025d2:	0299      	lsls	r1, r3, #10
 80025d4:	460b      	mov	r3, r1
 80025d6:	4614      	mov	r4, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	4621      	mov	r1, r4
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f04f 0400 	mov.w	r4, #0
 80025e2:	461a      	mov	r2, r3
 80025e4:	4623      	mov	r3, r4
 80025e6:	f7fd fdef 	bl	80001c8 <__aeabi_uldivmod>
 80025ea:	4603      	mov	r3, r0
 80025ec:	460c      	mov	r4, r1
 80025ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025f0:	4b0a      	ldr	r3, [pc, #40]	; (800261c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	0c1b      	lsrs	r3, r3, #16
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	3301      	adds	r3, #1
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	60bb      	str	r3, [r7, #8]
      break;
 800260a:	e002      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800260c:	4b04      	ldr	r3, [pc, #16]	; (8002620 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800260e:	60bb      	str	r3, [r7, #8]
      break;
 8002610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002612:	68bb      	ldr	r3, [r7, #8]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800261c:	40023800 	.word	0x40023800
 8002620:	00f42400 	.word	0x00f42400
 8002624:	007a1200 	.word	0x007a1200

08002628 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e056      	b.n	80026e8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d106      	bne.n	800265a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7fe ff7d 	bl	8001554 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2202      	movs	r2, #2
 800265e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002670:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	ea42 0103 	orr.w	r1, r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	0c1b      	lsrs	r3, r3, #16
 80026b8:	f003 0104 	and.w	r1, r3, #4
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <__libc_init_array>:
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	4e0d      	ldr	r6, [pc, #52]	; (8002728 <__libc_init_array+0x38>)
 80026f4:	4c0d      	ldr	r4, [pc, #52]	; (800272c <__libc_init_array+0x3c>)
 80026f6:	1ba4      	subs	r4, r4, r6
 80026f8:	10a4      	asrs	r4, r4, #2
 80026fa:	2500      	movs	r5, #0
 80026fc:	42a5      	cmp	r5, r4
 80026fe:	d109      	bne.n	8002714 <__libc_init_array+0x24>
 8002700:	4e0b      	ldr	r6, [pc, #44]	; (8002730 <__libc_init_array+0x40>)
 8002702:	4c0c      	ldr	r4, [pc, #48]	; (8002734 <__libc_init_array+0x44>)
 8002704:	f000 f820 	bl	8002748 <_init>
 8002708:	1ba4      	subs	r4, r4, r6
 800270a:	10a4      	asrs	r4, r4, #2
 800270c:	2500      	movs	r5, #0
 800270e:	42a5      	cmp	r5, r4
 8002710:	d105      	bne.n	800271e <__libc_init_array+0x2e>
 8002712:	bd70      	pop	{r4, r5, r6, pc}
 8002714:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002718:	4798      	blx	r3
 800271a:	3501      	adds	r5, #1
 800271c:	e7ee      	b.n	80026fc <__libc_init_array+0xc>
 800271e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002722:	4798      	blx	r3
 8002724:	3501      	adds	r5, #1
 8002726:	e7f2      	b.n	800270e <__libc_init_array+0x1e>
 8002728:	08002c98 	.word	0x08002c98
 800272c:	08002c98 	.word	0x08002c98
 8002730:	08002c98 	.word	0x08002c98
 8002734:	08002c9c 	.word	0x08002c9c

08002738 <memset>:
 8002738:	4402      	add	r2, r0
 800273a:	4603      	mov	r3, r0
 800273c:	4293      	cmp	r3, r2
 800273e:	d100      	bne.n	8002742 <memset+0xa>
 8002740:	4770      	bx	lr
 8002742:	f803 1b01 	strb.w	r1, [r3], #1
 8002746:	e7f9      	b.n	800273c <memset+0x4>

08002748 <_init>:
 8002748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274a:	bf00      	nop
 800274c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800274e:	bc08      	pop	{r3}
 8002750:	469e      	mov	lr, r3
 8002752:	4770      	bx	lr

08002754 <_fini>:
 8002754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002756:	bf00      	nop
 8002758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275a:	bc08      	pop	{r3}
 800275c:	469e      	mov	lr, r3
 800275e:	4770      	bx	lr
