
ptm-machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dc0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a94c  08002f48  08002f48  00012f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d894  0800d894  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800d894  0800d894  0001d894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d89c  0800d89c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d89c  0800d89c  0001d89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8a0  0800d8a0  0001d8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800d8a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000024  0800d8c8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  0800d8c8  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008899  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001636  00000000  00000000  000288ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000878  00000000  00000000  00029f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00020008  00000000  00000000  0002a7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00006f0c  00000000  00000000  0004a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000c2908  00000000  00000000  000516b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00113fbc  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000007a8  00000000  00000000  00114038  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  000021d4  00000000  00000000  001147e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f30 	.word	0x08002f30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08002f30 	.word	0x08002f30

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void init() {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
    ST7735_Init();
 80004ce:	f000 fb79 	bl	8000bc4 <ST7735_Init>

    const char ready[] = "Ready!\r\n";
 80004d2:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <init+0x2c>)
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80004d8:	c303      	stmia	r3!, {r0, r1}
 80004da:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
 80004dc:	1d39      	adds	r1, r7, #4
 80004de:	f04f 33ff 	mov.w	r3, #4294967295
 80004e2:	2208      	movs	r2, #8
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <init+0x30>)
 80004e6:	f002 f898 	bl	800261a <HAL_UART_Transmit>
}
 80004ea:	bf00      	nop
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	08002f48 	.word	0x08002f48
 80004f8:	20000098 	.word	0x20000098

080004fc <loop>:

void loop() {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af04      	add	r7, sp, #16
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 8000502:	2000      	movs	r0, #0
 8000504:	f000 fce2 	bl	8000ecc <ST7735_FillScreen>

    for(int x = 0; x < ST7735_WIDTH; x++) {
 8000508:	2300      	movs	r3, #0
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	e012      	b.n	8000534 <loop+0x38>
        ST7735_DrawPixel(x, 0, ST7735_RED);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	b29b      	uxth	r3, r3
 8000512:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f000 fb6d 	bl	8000bf8 <ST7735_DrawPixel>
        ST7735_DrawPixel(x, ST7735_HEIGHT-1, ST7735_RED);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	b29b      	uxth	r3, r3
 8000522:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000526:	217f      	movs	r1, #127	; 0x7f
 8000528:	4618      	mov	r0, r3
 800052a:	f000 fb65 	bl	8000bf8 <ST7735_DrawPixel>
    for(int x = 0; x < ST7735_WIDTH; x++) {
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3301      	adds	r3, #1
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b7f      	cmp	r3, #127	; 0x7f
 8000538:	dde9      	ble.n	800050e <loop+0x12>
    }

    for(int y = 0; y < ST7735_HEIGHT; y++) {
 800053a:	2300      	movs	r3, #0
 800053c:	603b      	str	r3, [r7, #0]
 800053e:	e012      	b.n	8000566 <loop+0x6a>
        ST7735_DrawPixel(0, y, ST7735_RED);
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	b29b      	uxth	r3, r3
 8000544:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000548:	4619      	mov	r1, r3
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fb54 	bl	8000bf8 <ST7735_DrawPixel>
        ST7735_DrawPixel(ST7735_WIDTH-1, y, ST7735_RED);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	b29b      	uxth	r3, r3
 8000554:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000558:	4619      	mov	r1, r3
 800055a:	207f      	movs	r0, #127	; 0x7f
 800055c:	f000 fb4c 	bl	8000bf8 <ST7735_DrawPixel>
    for(int y = 0; y < ST7735_HEIGHT; y++) {
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	3301      	adds	r3, #1
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	2b7f      	cmp	r3, #127	; 0x7f
 800056a:	dde9      	ble.n	8000540 <loop+0x44>
    }

    HAL_Delay(3000);
 800056c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000570:	f000 fea4 	bl	80012bc <HAL_Delay>

    // Check fonts
    ST7735_FillScreen(ST7735_BLACK);
 8000574:	2000      	movs	r0, #0
 8000576:	f000 fca9 	bl	8000ecc <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "Font_7x10, red on black, lorem ipsum dolor sit amet", Font_7x10, ST7735_RED, ST7735_BLACK);
 800057a:	4b75      	ldr	r3, [pc, #468]	; (8000750 <loop+0x254>)
 800057c:	2200      	movs	r2, #0
 800057e:	9202      	str	r2, [sp, #8]
 8000580:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000584:	9201      	str	r2, [sp, #4]
 8000586:	685a      	ldr	r2, [r3, #4]
 8000588:	9200      	str	r2, [sp, #0]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a71      	ldr	r2, [pc, #452]	; (8000754 <loop+0x258>)
 800058e:	2100      	movs	r1, #0
 8000590:	2000      	movs	r0, #0
 8000592:	f000 fbdb 	bl	8000d4c <ST7735_WriteString>
    ST7735_WriteString(0, 3*10, "Font_11x18, green, lorem ipsum", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8000596:	4b70      	ldr	r3, [pc, #448]	; (8000758 <loop+0x25c>)
 8000598:	2200      	movs	r2, #0
 800059a:	9202      	str	r2, [sp, #8]
 800059c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80005a0:	9201      	str	r2, [sp, #4]
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	9200      	str	r2, [sp, #0]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a6c      	ldr	r2, [pc, #432]	; (800075c <loop+0x260>)
 80005aa:	211e      	movs	r1, #30
 80005ac:	2000      	movs	r0, #0
 80005ae:	f000 fbcd 	bl	8000d4c <ST7735_WriteString>
    ST7735_WriteString(0, 3*10+3*18, "Font_16x26", Font_16x26, ST7735_BLUE, ST7735_BLACK);
 80005b2:	4b6b      	ldr	r3, [pc, #428]	; (8000760 <loop+0x264>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	9202      	str	r2, [sp, #8]
 80005b8:	221f      	movs	r2, #31
 80005ba:	9201      	str	r2, [sp, #4]
 80005bc:	685a      	ldr	r2, [r3, #4]
 80005be:	9200      	str	r2, [sp, #0]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a68      	ldr	r2, [pc, #416]	; (8000764 <loop+0x268>)
 80005c4:	2154      	movs	r1, #84	; 0x54
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 fbc0 	bl	8000d4c <ST7735_WriteString>
    HAL_Delay(2000);
 80005cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005d0:	f000 fe74 	bl	80012bc <HAL_Delay>

    // Check colors
    ST7735_FillScreen(ST7735_BLACK);
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 fc79 	bl	8000ecc <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "BLACK", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80005da:	4b5f      	ldr	r3, [pc, #380]	; (8000758 <loop+0x25c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	9202      	str	r2, [sp, #8]
 80005e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005e4:	9201      	str	r2, [sp, #4]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	9200      	str	r2, [sp, #0]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a5e      	ldr	r2, [pc, #376]	; (8000768 <loop+0x26c>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 fbab 	bl	8000d4c <ST7735_WriteString>
    HAL_Delay(500);
 80005f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005fa:	f000 fe5f 	bl	80012bc <HAL_Delay>

    ST7735_FillScreen(ST7735_BLUE);
 80005fe:	201f      	movs	r0, #31
 8000600:	f000 fc64 	bl	8000ecc <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "BLUE", Font_11x18, ST7735_BLACK, ST7735_BLUE);
 8000604:	4b54      	ldr	r3, [pc, #336]	; (8000758 <loop+0x25c>)
 8000606:	221f      	movs	r2, #31
 8000608:	9202      	str	r2, [sp, #8]
 800060a:	2200      	movs	r2, #0
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	685a      	ldr	r2, [r3, #4]
 8000610:	9200      	str	r2, [sp, #0]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a55      	ldr	r2, [pc, #340]	; (800076c <loop+0x270>)
 8000616:	2100      	movs	r1, #0
 8000618:	2000      	movs	r0, #0
 800061a:	f000 fb97 	bl	8000d4c <ST7735_WriteString>
    HAL_Delay(500);
 800061e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000622:	f000 fe4b 	bl	80012bc <HAL_Delay>

    ST7735_FillScreen(ST7735_RED);
 8000626:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800062a:	f000 fc4f 	bl	8000ecc <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "RED", Font_11x18, ST7735_BLACK, ST7735_RED);
 800062e:	4b4a      	ldr	r3, [pc, #296]	; (8000758 <loop+0x25c>)
 8000630:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000634:	9202      	str	r2, [sp, #8]
 8000636:	2200      	movs	r2, #0
 8000638:	9201      	str	r2, [sp, #4]
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	9200      	str	r2, [sp, #0]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a4b      	ldr	r2, [pc, #300]	; (8000770 <loop+0x274>)
 8000642:	2100      	movs	r1, #0
 8000644:	2000      	movs	r0, #0
 8000646:	f000 fb81 	bl	8000d4c <ST7735_WriteString>
    HAL_Delay(500);
 800064a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800064e:	f000 fe35 	bl	80012bc <HAL_Delay>

    ST7735_FillScreen(ST7735_GREEN);
 8000652:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000656:	f000 fc39 	bl	8000ecc <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "GREEN", Font_11x18, ST7735_BLACK, ST7735_GREEN);
 800065a:	4b3f      	ldr	r3, [pc, #252]	; (8000758 <loop+0x25c>)
 800065c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000660:	9202      	str	r2, [sp, #8]
 8000662:	2200      	movs	r2, #0
 8000664:	9201      	str	r2, [sp, #4]
 8000666:	685a      	ldr	r2, [r3, #4]
 8000668:	9200      	str	r2, [sp, #0]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a41      	ldr	r2, [pc, #260]	; (8000774 <loop+0x278>)
 800066e:	2100      	movs	r1, #0
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fb6b 	bl	8000d4c <ST7735_WriteString>
    HAL_Delay(500);
 8000676:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800067a:	f000 fe1f 	bl	80012bc <HAL_Delay>

    ST7735_FillScreen(ST7735_CYAN);
 800067e:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000682:	f000 fc23 	bl	8000ecc <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "CYAN", Font_11x18, ST7735_BLACK, ST7735_CYAN);
 8000686:	4b34      	ldr	r3, [pc, #208]	; (8000758 <loop+0x25c>)
 8000688:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800068c:	9202      	str	r2, [sp, #8]
 800068e:	2200      	movs	r2, #0
 8000690:	9201      	str	r2, [sp, #4]
 8000692:	685a      	ldr	r2, [r3, #4]
 8000694:	9200      	str	r2, [sp, #0]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a37      	ldr	r2, [pc, #220]	; (8000778 <loop+0x27c>)
 800069a:	2100      	movs	r1, #0
 800069c:	2000      	movs	r0, #0
 800069e:	f000 fb55 	bl	8000d4c <ST7735_WriteString>
    HAL_Delay(500);
 80006a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006a6:	f000 fe09 	bl	80012bc <HAL_Delay>

    ST7735_FillScreen(ST7735_MAGENTA);
 80006aa:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80006ae:	f000 fc0d 	bl	8000ecc <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "MAGENTA", Font_11x18, ST7735_BLACK, ST7735_MAGENTA);
 80006b2:	4b29      	ldr	r3, [pc, #164]	; (8000758 <loop+0x25c>)
 80006b4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80006b8:	9202      	str	r2, [sp, #8]
 80006ba:	2200      	movs	r2, #0
 80006bc:	9201      	str	r2, [sp, #4]
 80006be:	685a      	ldr	r2, [r3, #4]
 80006c0:	9200      	str	r2, [sp, #0]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a2d      	ldr	r2, [pc, #180]	; (800077c <loop+0x280>)
 80006c6:	2100      	movs	r1, #0
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 fb3f 	bl	8000d4c <ST7735_WriteString>
    HAL_Delay(500);
 80006ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d2:	f000 fdf3 	bl	80012bc <HAL_Delay>

    ST7735_FillScreen(ST7735_YELLOW);
 80006d6:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80006da:	f000 fbf7 	bl	8000ecc <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "YELLOW", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <loop+0x25c>)
 80006e0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80006e4:	9202      	str	r2, [sp, #8]
 80006e6:	2200      	movs	r2, #0
 80006e8:	9201      	str	r2, [sp, #4]
 80006ea:	685a      	ldr	r2, [r3, #4]
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a23      	ldr	r2, [pc, #140]	; (8000780 <loop+0x284>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 fb29 	bl	8000d4c <ST7735_WriteString>
    HAL_Delay(500);
 80006fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006fe:	f000 fddd 	bl	80012bc <HAL_Delay>

    ST7735_FillScreen(ST7735_WHITE);
 8000702:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000706:	f000 fbe1 	bl	8000ecc <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "WHITE", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <loop+0x25c>)
 800070c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000710:	9202      	str	r2, [sp, #8]
 8000712:	2200      	movs	r2, #0
 8000714:	9201      	str	r2, [sp, #4]
 8000716:	685a      	ldr	r2, [r3, #4]
 8000718:	9200      	str	r2, [sp, #0]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a19      	ldr	r2, [pc, #100]	; (8000784 <loop+0x288>)
 800071e:	2100      	movs	r1, #0
 8000720:	2000      	movs	r0, #0
 8000722:	f000 fb13 	bl	8000d4c <ST7735_WriteString>
    HAL_Delay(500);
 8000726:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800072a:	f000 fdc7 	bl	80012bc <HAL_Delay>

#ifdef ST7735_IS_128X128
    // Display test image 128x128
    ST7735_DrawImage(0, 0, ST7735_WIDTH, ST7735_HEIGHT, (uint16_t*)test_img_128x128);
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <loop+0x28c>)
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2380      	movs	r3, #128	; 0x80
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	2100      	movs	r1, #0
 8000738:	2000      	movs	r0, #0
 800073a:	f000 fbd8 	bl	8000eee <ST7735_DrawImage>
            color565 = ((color565 & 0xFF00) >> 8) | ((color565 & 0xFF) << 8);
            ST7735_DrawPixel(x, y, color565);
        }
    }
*/
    HAL_Delay(15000);
 800073e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000742:	f000 fdbb 	bl	80012bc <HAL_Delay>
#endif // ST7735_IS_128X128

}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000000 	.word	0x20000000
 8000754:	08002f54 	.word	0x08002f54
 8000758:	20000008 	.word	0x20000008
 800075c:	08002f88 	.word	0x08002f88
 8000760:	20000010 	.word	0x20000010
 8000764:	08002fa8 	.word	0x08002fa8
 8000768:	08002fb4 	.word	0x08002fb4
 800076c:	08002fbc 	.word	0x08002fbc
 8000770:	08002fc4 	.word	0x08002fc4
 8000774:	08002fc8 	.word	0x08002fc8
 8000778:	08002fd0 	.word	0x08002fd0
 800077c:	08002fd8 	.word	0x08002fd8
 8000780:	08002fe0 	.word	0x08002fe0
 8000784:	08002fe8 	.word	0x08002fe8
 8000788:	08005804 	.word	0x08005804

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f000 fd22 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f80c 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f000 f8d4 	bl	8000944 <MX_GPIO_Init>
  MX_SPI1_Init();
 800079c:	f000 f872 	bl	8000884 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80007a0:	f000 f8a6 	bl	80008f0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init();
 80007a4:	f7ff fe90 	bl	80004c8 <init>
   while (1)
   {
     loop();
 80007a8:	f7ff fea8 	bl	80004fc <loop>
 80007ac:	e7fc      	b.n	80007a8 <main+0x1c>
	...

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2230      	movs	r2, #48	; 0x30
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f002 fbae 	bl	8002f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <SystemClock_Config+0xcc>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a27      	ldr	r2, [pc, #156]	; (800087c <SystemClock_Config+0xcc>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b25      	ldr	r3, [pc, #148]	; (800087c <SystemClock_Config+0xcc>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <SystemClock_Config+0xd0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a21      	ldr	r2, [pc, #132]	; (8000880 <SystemClock_Config+0xd0>)
 80007fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <SystemClock_Config+0xd0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080c:	2301      	movs	r3, #1
 800080e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000820:	2304      	movs	r3, #4
 8000822:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000824:	23a8      	movs	r3, #168	; 0xa8
 8000826:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000828:	2302      	movs	r3, #2
 800082a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800082c:	2304      	movs	r3, #4
 800082e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0320 	add.w	r3, r7, #32
 8000834:	4618      	mov	r0, r3
 8000836:	f000 fffd 	bl	8001834 <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000840:	f000 f8d2 	bl	80009e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	230f      	movs	r3, #15
 8000846:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000848:	2302      	movs	r3, #2
 800084a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000850:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000854:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2105      	movs	r1, #5
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fa56 	bl	8001d14 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800086e:	f000 f8bb 	bl	80009e8 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3750      	adds	r7, #80	; 0x50
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_SPI1_Init+0x64>)
 800088a:	4a18      	ldr	r2, [pc, #96]	; (80008ec <MX_SPI1_Init+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_SPI1_Init+0x64>)
 8000890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000894:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SPI1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008d0:	220a      	movs	r2, #10
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008d6:	f001 fc0f 	bl	80020f8 <HAL_SPI_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008e0:	f000 f882 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000040 	.word	0x20000040
 80008ec:	40013000 	.word	0x40013000

080008f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART2_UART_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_USART2_UART_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_USART2_UART_Init+0x4c>)
 80008fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000900:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART2_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000928:	f001 fe2a 	bl	8002580 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000932:	f000 f859 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000098 	.word	0x20000098
 8000940:	40004400 	.word	0x40004400

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <MX_GPIO_Init+0x9c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a1f      	ldr	r2, [pc, #124]	; (80009e0 <MX_GPIO_Init+0x9c>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_GPIO_Init+0x9c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_GPIO_Init+0x9c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a18      	ldr	r2, [pc, #96]	; (80009e0 <MX_GPIO_Init+0x9c>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_GPIO_Init+0x9c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_GPIO_Init+0x9c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a11      	ldr	r2, [pc, #68]	; (80009e0 <MX_GPIO_Init+0x9c>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_GPIO_Init+0x9c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009b4:	480b      	ldr	r0, [pc, #44]	; (80009e4 <MX_GPIO_Init+0xa0>)
 80009b6:	f000 ff23 	bl	8001800 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009ba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4619      	mov	r1, r3
 80009d2:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_GPIO_Init+0xa0>)
 80009d4:	f000 fd7a 	bl	80014cc <HAL_GPIO_Init>

}
 80009d8:	bf00      	nop
 80009da:	3720      	adds	r7, #32
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020400 	.word	0x40020400

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2140      	movs	r1, #64	; 0x40
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <ST7735_Select+0x14>)
 8000a02:	f000 fefd 	bl	8001800 <HAL_GPIO_WritePin>
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40020400 	.word	0x40020400

08000a10 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2140      	movs	r1, #64	; 0x40
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <ST7735_Unselect+0x14>)
 8000a1a:	f000 fef1 	bl	8001800 <HAL_GPIO_WritePin>
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40020400 	.word	0x40020400

08000a28 <ST7735_Reset>:

static void ST7735_Reset() {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2180      	movs	r1, #128	; 0x80
 8000a30:	4806      	ldr	r0, [pc, #24]	; (8000a4c <ST7735_Reset+0x24>)
 8000a32:	f000 fee5 	bl	8001800 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000a36:	2005      	movs	r0, #5
 8000a38:	f000 fc40 	bl	80012bc <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2180      	movs	r1, #128	; 0x80
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <ST7735_Reset+0x24>)
 8000a42:	f000 fedd 	bl	8001800 <HAL_GPIO_WritePin>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40020800 	.word	0x40020800

08000a50 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a60:	4806      	ldr	r0, [pc, #24]	; (8000a7c <ST7735_WriteCommand+0x2c>)
 8000a62:	f000 fecd 	bl	8001800 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000a66:	1df9      	adds	r1, r7, #7
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4804      	ldr	r0, [pc, #16]	; (8000a80 <ST7735_WriteCommand+0x30>)
 8000a70:	f001 fba6 	bl	80021c0 <HAL_SPI_Transmit>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	20000040 	.word	0x20000040

08000a84 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a94:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <ST7735_WriteData+0x30>)
 8000a96:	f000 feb3 	bl	8001800 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <ST7735_WriteData+0x34>)
 8000aa6:	f001 fb8b 	bl	80021c0 <HAL_SPI_Transmit>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	20000040 	.word	0x20000040

08000abc <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	1c5a      	adds	r2, r3, #1
 8000ac8:	607a      	str	r2, [r7, #4]
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000ace:	e034      	b.n	8000b3a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	1c5a      	adds	r2, r3, #1
 8000ad4:	607a      	str	r2, [r7, #4]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000ada:	7afb      	ldrb	r3, [r7, #11]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ffb7 	bl	8000a50 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	1c5a      	adds	r2, r3, #1
 8000ae6:	607a      	str	r2, [r7, #4]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000aec:	7abb      	ldrb	r3, [r7, #10]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af4:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000af6:	7abb      	ldrb	r3, [r7, #10]
 8000af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000afc:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000afe:	7abb      	ldrb	r3, [r7, #10]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d008      	beq.n	8000b16 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000b04:	7abb      	ldrb	r3, [r7, #10]
 8000b06:	4619      	mov	r1, r3
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ffbb 	bl	8000a84 <ST7735_WriteData>
            addr += numArgs;
 8000b0e:	7abb      	ldrb	r3, [r7, #10]
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	4413      	add	r3, r2
 8000b14:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000b16:	89bb      	ldrh	r3, [r7, #12]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d00e      	beq.n	8000b3a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	607a      	str	r2, [r7, #4]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000b26:	89bb      	ldrh	r3, [r7, #12]
 8000b28:	2bff      	cmp	r3, #255	; 0xff
 8000b2a:	d102      	bne.n	8000b32 <ST7735_ExecuteCommandList+0x76>
 8000b2c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b30:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000b32:	89bb      	ldrh	r3, [r7, #12]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 fbc1 	bl	80012bc <HAL_Delay>
    while(numCommands--) {
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	1e5a      	subs	r2, r3, #1
 8000b3e:	73fa      	strb	r2, [r7, #15]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1c5      	bne.n	8000ad0 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4604      	mov	r4, r0
 8000b54:	4608      	mov	r0, r1
 8000b56:	4611      	mov	r1, r2
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4623      	mov	r3, r4
 8000b5c:	71fb      	strb	r3, [r7, #7]
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71bb      	strb	r3, [r7, #6]
 8000b62:	460b      	mov	r3, r1
 8000b64:	717b      	strb	r3, [r7, #5]
 8000b66:	4613      	mov	r3, r2
 8000b68:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000b6a:	202a      	movs	r0, #42	; 0x2a
 8000b6c:	f7ff ff70 	bl	8000a50 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000b70:	2300      	movs	r3, #0
 8000b72:	733b      	strb	r3, [r7, #12]
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	3302      	adds	r3, #2
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	737b      	strb	r3, [r7, #13]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	73bb      	strb	r3, [r7, #14]
 8000b80:	797b      	ldrb	r3, [r7, #5]
 8000b82:	3302      	adds	r3, #2
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff78 	bl	8000a84 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000b94:	202b      	movs	r0, #43	; 0x2b
 8000b96:	f7ff ff5b 	bl	8000a50 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000b9a:	79bb      	ldrb	r3, [r7, #6]
 8000b9c:	3303      	adds	r3, #3
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000ba2:	793b      	ldrb	r3, [r7, #4]
 8000ba4:	3303      	adds	r3, #3
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff67 	bl	8000a84 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000bb6:	202c      	movs	r0, #44	; 0x2c
 8000bb8:	f7ff ff4a 	bl	8000a50 <ST7735_WriteCommand>
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd90      	pop	{r4, r7, pc}

08000bc4 <ST7735_Init>:

void ST7735_Init() {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000bc8:	f7ff ff16 	bl	80009f8 <ST7735_Select>
    ST7735_Reset();
 8000bcc:	f7ff ff2c 	bl	8000a28 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000bd0:	4806      	ldr	r0, [pc, #24]	; (8000bec <ST7735_Init+0x28>)
 8000bd2:	f7ff ff73 	bl	8000abc <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <ST7735_Init+0x2c>)
 8000bd8:	f7ff ff70 	bl	8000abc <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <ST7735_Init+0x30>)
 8000bde:	f7ff ff6d 	bl	8000abc <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000be2:	f7ff ff15 	bl	8000a10 <ST7735_Unselect>
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	0800d804 	.word	0x0800d804
 8000bf0:	0800d840 	.word	0x0800d840
 8000bf4:	0800d850 	.word	0x0800d850

08000bf8 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	80fb      	strh	r3, [r7, #6]
 8000c02:	460b      	mov	r3, r1
 8000c04:	80bb      	strh	r3, [r7, #4]
 8000c06:	4613      	mov	r3, r2
 8000c08:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	2b7f      	cmp	r3, #127	; 0x7f
 8000c0e:	d823      	bhi.n	8000c58 <ST7735_DrawPixel+0x60>
 8000c10:	88bb      	ldrh	r3, [r7, #4]
 8000c12:	2b7f      	cmp	r3, #127	; 0x7f
 8000c14:	d820      	bhi.n	8000c58 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8000c16:	f7ff feef 	bl	80009f8 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	b2d8      	uxtb	r0, r3
 8000c1e:	88bb      	ldrh	r3, [r7, #4]
 8000c20:	b2d9      	uxtb	r1, r3
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	3301      	adds	r3, #1
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	88bb      	ldrh	r3, [r7, #4]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	3301      	adds	r3, #1
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	f7ff ff8b 	bl	8000b4c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000c36:	887b      	ldrh	r3, [r7, #2]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	733b      	strb	r3, [r7, #12]
 8000c40:	887b      	ldrh	r3, [r7, #2]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff19 	bl	8000a84 <ST7735_WriteData>

    ST7735_Unselect();
 8000c52:	f7ff fedd 	bl	8000a10 <ST7735_Unselect>
 8000c56:	e000      	b.n	8000c5a <ST7735_DrawPixel+0x62>
        return;
 8000c58:	bf00      	nop
}
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000c60:	b082      	sub	sp, #8
 8000c62:	b590      	push	{r4, r7, lr}
 8000c64:	b089      	sub	sp, #36	; 0x24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	637b      	str	r3, [r7, #52]	; 0x34
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	80fb      	strh	r3, [r7, #6]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	80bb      	strh	r3, [r7, #4]
 8000c72:	4613      	mov	r3, r2
 8000c74:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	b2d8      	uxtb	r0, r3
 8000c7a:	88bb      	ldrh	r3, [r7, #4]
 8000c7c:	b2d9      	uxtb	r1, r3
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000c86:	4413      	add	r3, r2
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	b2dc      	uxtb	r4, r3
 8000c8e:	88bb      	ldrh	r3, [r7, #4]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000c96:	4413      	add	r3, r2
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	4622      	mov	r2, r4
 8000ca0:	f7ff ff54 	bl	8000b4c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
 8000ca8:	e043      	b.n	8000d32 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000cac:	78fb      	ldrb	r3, [r7, #3]
 8000cae:	3b20      	subs	r3, #32
 8000cb0:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000cb4:	fb01 f303 	mul.w	r3, r1, r3
 8000cb8:	4619      	mov	r1, r3
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	440b      	add	r3, r1
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]
 8000cca:	e029      	b.n	8000d20 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d00e      	beq.n	8000cfa <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000cdc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000cde:	0a1b      	lsrs	r3, r3, #8
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	743b      	strb	r3, [r7, #16]
 8000ce6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fec6 	bl	8000a84 <ST7735_WriteData>
 8000cf8:	e00f      	b.n	8000d1a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000cfa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000cfe:	0a1b      	lsrs	r3, r3, #8
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	733b      	strb	r3, [r7, #12]
 8000d06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	2102      	movs	r1, #2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff feb5 	bl	8000a84 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	61bb      	str	r3, [r7, #24]
 8000d20:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d24:	461a      	mov	r2, r3
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d3cf      	bcc.n	8000ccc <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	61fb      	str	r3, [r7, #28]
 8000d32:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000d36:	461a      	mov	r2, r3
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d3b5      	bcc.n	8000caa <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000d3e:	bf00      	nop
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000d48:	b002      	add	sp, #8
 8000d4a:	4770      	bx	lr

08000d4c <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af04      	add	r7, sp, #16
 8000d54:	603a      	str	r2, [r7, #0]
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	4603      	mov	r3, r0
 8000d5a:	80fb      	strh	r3, [r7, #6]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000d60:	f7ff fe4a 	bl	80009f8 <ST7735_Select>

    while(*str) {
 8000d64:	e02d      	b.n	8000dc2 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	7d3a      	ldrb	r2, [r7, #20]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d6e:	dd13      	ble.n	8000d98 <ST7735_WriteString+0x4c>
            x = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000d74:	7d7b      	ldrb	r3, [r7, #21]
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	88bb      	ldrh	r3, [r7, #4]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000d7e:	88bb      	ldrh	r3, [r7, #4]
 8000d80:	7d7a      	ldrb	r2, [r7, #21]
 8000d82:	4413      	add	r3, r2
 8000d84:	2b7f      	cmp	r3, #127	; 0x7f
 8000d86:	dc21      	bgt.n	8000dcc <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b20      	cmp	r3, #32
 8000d8e:	d103      	bne.n	8000d98 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	3301      	adds	r3, #1
 8000d94:	603b      	str	r3, [r7, #0]
                continue;
 8000d96:	e014      	b.n	8000dc2 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	781a      	ldrb	r2, [r3, #0]
 8000d9c:	88b9      	ldrh	r1, [r7, #4]
 8000d9e:	88f8      	ldrh	r0, [r7, #6]
 8000da0:	8c3b      	ldrh	r3, [r7, #32]
 8000da2:	9302      	str	r3, [sp, #8]
 8000da4:	8bbb      	ldrh	r3, [r7, #28]
 8000da6:	9301      	str	r3, [sp, #4]
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	f7ff ff57 	bl	8000c60 <ST7735_WriteChar>
        x += font.width;
 8000db2:	7d3b      	ldrb	r3, [r7, #20]
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	4413      	add	r3, r2
 8000dba:	80fb      	strh	r3, [r7, #6]
        str++;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1cd      	bne.n	8000d66 <ST7735_WriteString+0x1a>
 8000dca:	e000      	b.n	8000dce <ST7735_WriteString+0x82>
                break;
 8000dcc:	bf00      	nop
    }

    ST7735_Unselect();
 8000dce:	f7ff fe1f 	bl	8000a10 <ST7735_Unselect>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ddc:	b002      	add	sp, #8
 8000dde:	4770      	bx	lr

08000de0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4604      	mov	r4, r0
 8000de8:	4608      	mov	r0, r1
 8000dea:	4611      	mov	r1, r2
 8000dec:	461a      	mov	r2, r3
 8000dee:	4623      	mov	r3, r4
 8000df0:	80fb      	strh	r3, [r7, #6]
 8000df2:	4603      	mov	r3, r0
 8000df4:	80bb      	strh	r3, [r7, #4]
 8000df6:	460b      	mov	r3, r1
 8000df8:	807b      	strh	r3, [r7, #2]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	2b7f      	cmp	r3, #127	; 0x7f
 8000e02:	d85a      	bhi.n	8000eba <ST7735_FillRectangle+0xda>
 8000e04:	88bb      	ldrh	r3, [r7, #4]
 8000e06:	2b7f      	cmp	r3, #127	; 0x7f
 8000e08:	d857      	bhi.n	8000eba <ST7735_FillRectangle+0xda>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000e0a:	88fa      	ldrh	r2, [r7, #6]
 8000e0c:	887b      	ldrh	r3, [r7, #2]
 8000e0e:	4413      	add	r3, r2
 8000e10:	3b01      	subs	r3, #1
 8000e12:	2b7f      	cmp	r3, #127	; 0x7f
 8000e14:	dd03      	ble.n	8000e1e <ST7735_FillRectangle+0x3e>
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000e1c:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000e1e:	88ba      	ldrh	r2, [r7, #4]
 8000e20:	883b      	ldrh	r3, [r7, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	3b01      	subs	r3, #1
 8000e26:	2b7f      	cmp	r3, #127	; 0x7f
 8000e28:	dd03      	ble.n	8000e32 <ST7735_FillRectangle+0x52>
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000e30:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000e32:	f7ff fde1 	bl	80009f8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	b2d8      	uxtb	r0, r3
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	b2d9      	uxtb	r1, r3
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	887b      	ldrh	r3, [r7, #2]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	4413      	add	r3, r2
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	b2dc      	uxtb	r4, r3
 8000e4e:	88bb      	ldrh	r3, [r7, #4]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	883b      	ldrh	r3, [r7, #0]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	4413      	add	r3, r2
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4622      	mov	r2, r4
 8000e60:	f7ff fe74 	bl	8000b4c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000e64:	8c3b      	ldrh	r3, [r7, #32]
 8000e66:	0a1b      	lsrs	r3, r3, #8
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	733b      	strb	r3, [r7, #12]
 8000e6e:	8c3b      	ldrh	r3, [r7, #32]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e7a:	4812      	ldr	r0, [pc, #72]	; (8000ec4 <ST7735_FillRectangle+0xe4>)
 8000e7c:	f000 fcc0 	bl	8001800 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000e80:	883b      	ldrh	r3, [r7, #0]
 8000e82:	80bb      	strh	r3, [r7, #4]
 8000e84:	e013      	b.n	8000eae <ST7735_FillRectangle+0xce>
        for(x = w; x > 0; x--) {
 8000e86:	887b      	ldrh	r3, [r7, #2]
 8000e88:	80fb      	strh	r3, [r7, #6]
 8000e8a:	e00a      	b.n	8000ea2 <ST7735_FillRectangle+0xc2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000e8c:	f107 010c 	add.w	r1, r7, #12
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295
 8000e94:	2202      	movs	r2, #2
 8000e96:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <ST7735_FillRectangle+0xe8>)
 8000e98:	f001 f992 	bl	80021c0 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000e9c:	88fb      	ldrh	r3, [r7, #6]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	80fb      	strh	r3, [r7, #6]
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1f1      	bne.n	8000e8c <ST7735_FillRectangle+0xac>
    for(y = h; y > 0; y--) {
 8000ea8:	88bb      	ldrh	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	80bb      	strh	r3, [r7, #4]
 8000eae:	88bb      	ldrh	r3, [r7, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1e8      	bne.n	8000e86 <ST7735_FillRectangle+0xa6>
        }
    }

    ST7735_Unselect();
 8000eb4:	f7ff fdac 	bl	8000a10 <ST7735_Unselect>
 8000eb8:	e000      	b.n	8000ebc <ST7735_FillRectangle+0xdc>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000eba:	bf00      	nop
}
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd90      	pop	{r4, r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	20000040 	.word	0x20000040

08000ecc <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f7ff ff7d 	bl	8000de0 <ST7735_FillRectangle>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000eee:	b590      	push	{r4, r7, lr}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4604      	mov	r4, r0
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	4611      	mov	r1, r2
 8000efa:	461a      	mov	r2, r3
 8000efc:	4623      	mov	r3, r4
 8000efe:	80fb      	strh	r3, [r7, #6]
 8000f00:	4603      	mov	r3, r0
 8000f02:	80bb      	strh	r3, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f10:	d833      	bhi.n	8000f7a <ST7735_DrawImage+0x8c>
 8000f12:	88bb      	ldrh	r3, [r7, #4]
 8000f14:	2b7f      	cmp	r3, #127	; 0x7f
 8000f16:	d830      	bhi.n	8000f7a <ST7735_DrawImage+0x8c>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8000f18:	88fa      	ldrh	r2, [r7, #6]
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	2b7f      	cmp	r3, #127	; 0x7f
 8000f22:	dc2c      	bgt.n	8000f7e <ST7735_DrawImage+0x90>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8000f24:	88ba      	ldrh	r2, [r7, #4]
 8000f26:	883b      	ldrh	r3, [r7, #0]
 8000f28:	4413      	add	r3, r2
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f2e:	dc28      	bgt.n	8000f82 <ST7735_DrawImage+0x94>

    ST7735_Select();
 8000f30:	f7ff fd62 	bl	80009f8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	b2d8      	uxtb	r0, r3
 8000f38:	88bb      	ldrh	r3, [r7, #4]
 8000f3a:	b2d9      	uxtb	r1, r3
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	4413      	add	r3, r2
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	b2dc      	uxtb	r4, r3
 8000f4c:	88bb      	ldrh	r3, [r7, #4]
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	883b      	ldrh	r3, [r7, #0]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4413      	add	r3, r2
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	4622      	mov	r2, r4
 8000f5e:	f7ff fdf5 	bl	8000b4c <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000f62:	887b      	ldrh	r3, [r7, #2]
 8000f64:	883a      	ldrh	r2, [r7, #0]
 8000f66:	fb02 f303 	mul.w	r3, r2, r3
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	69b8      	ldr	r0, [r7, #24]
 8000f70:	f7ff fd88 	bl	8000a84 <ST7735_WriteData>
    ST7735_Unselect();
 8000f74:	f7ff fd4c 	bl	8000a10 <ST7735_Unselect>
 8000f78:	e004      	b.n	8000f84 <ST7735_DrawImage+0x96>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000f7a:	bf00      	nop
 8000f7c:	e002      	b.n	8000f84 <ST7735_DrawImage+0x96>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8000f7e:	bf00      	nop
 8000f80:	e000      	b.n	8000f84 <ST7735_DrawImage+0x96>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8000f82:	bf00      	nop
}
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd90      	pop	{r4, r7, pc}
	...

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	603b      	str	r3, [r7, #0]
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800

08000fdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a19      	ldr	r2, [pc, #100]	; (8001060 <HAL_SPI_MspInit+0x84>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d12b      	bne.n	8001056 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	4a17      	ldr	r2, [pc, #92]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001008:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800100c:	6453      	str	r3, [r2, #68]	; 0x44
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_SPI_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001036:	23a0      	movs	r3, #160	; 0xa0
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001046:	2305      	movs	r3, #5
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <HAL_SPI_MspInit+0x8c>)
 8001052:	f000 fa3b 	bl	80014cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40013000 	.word	0x40013000
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000

0800106c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a19      	ldr	r2, [pc, #100]	; (80010f0 <HAL_UART_MspInit+0x84>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d12b      	bne.n	80010e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_UART_MspInit+0x88>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	4a17      	ldr	r2, [pc, #92]	; (80010f4 <HAL_UART_MspInit+0x88>)
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	6413      	str	r3, [r2, #64]	; 0x40
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_UART_MspInit+0x88>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <HAL_UART_MspInit+0x88>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a10      	ldr	r2, [pc, #64]	; (80010f4 <HAL_UART_MspInit+0x88>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_UART_MspInit+0x88>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010c6:	230c      	movs	r3, #12
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010d6:	2307      	movs	r3, #7
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <HAL_UART_MspInit+0x8c>)
 80010e2:	f000 f9f3 	bl	80014cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	; 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40004400 	.word	0x40004400
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020000 	.word	0x40020000

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler+0x4>

08001116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <UsageFault_Handler+0x4>

08001122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001150:	f000 f894 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <SystemInit+0x28>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <SystemInit+0x28>)
 8001164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <SystemInit+0x28>)
 800116e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001172:	609a      	str	r2, [r3, #8]
#endif
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001188:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800118a:	e003      	b.n	8001194 <LoopCopyDataInit>

0800118c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800118e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001190:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001192:	3104      	adds	r1, #4

08001194 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001198:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800119a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800119c:	d3f6      	bcc.n	800118c <CopyDataInit>
  ldr  r2, =_sbss
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011a0:	e002      	b.n	80011a8 <LoopFillZerobss>

080011a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011a4:	f842 3b04 	str.w	r3, [r2], #4

080011a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011ac:	d3f9      	bcc.n	80011a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011ae:	f7ff ffd3 	bl	8001158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b2:	f001 fe91 	bl	8002ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b6:	f7ff fae9 	bl	800078c <main>
  bx  lr    
 80011ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80011c0:	0800d8a4 	.word	0x0800d8a4
  ldr  r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011c8:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 80011cc:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 80011d0:	200000dc 	.word	0x200000dc

080011d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC_IRQHandler>
	...

080011d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <HAL_Init+0x40>)
 80011e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <HAL_Init+0x40>)
 80011ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_Init+0x40>)
 80011fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001200:	2003      	movs	r0, #3
 8001202:	f000 f92f 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001206:	2000      	movs	r0, #0
 8001208:	f000 f808 	bl	800121c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800120c:	f7ff febe 	bl	8000f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023c00 	.word	0x40023c00

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_InitTick+0x54>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_InitTick+0x58>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001232:	fbb3 f3f1 	udiv	r3, r3, r1
 8001236:	fbb2 f3f3 	udiv	r3, r2, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f939 	bl	80014b2 <HAL_SYSTICK_Config>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e00e      	b.n	8001268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0f      	cmp	r3, #15
 800124e:	d80a      	bhi.n	8001266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001250:	2200      	movs	r2, #0
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f000 f90f 	bl	800147a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_InitTick+0x5c>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e000      	b.n	8001268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000018 	.word	0x20000018
 8001274:	20000020 	.word	0x20000020
 8001278:	2000001c 	.word	0x2000001c

0800127c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x20>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_IncTick+0x24>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4413      	add	r3, r2
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <HAL_IncTick+0x24>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000020 	.word	0x20000020
 80012a0:	200000d8 	.word	0x200000d8

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_GetTick+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	200000d8 	.word	0x200000d8

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff ffee 	bl	80012a4 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d005      	beq.n	80012e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_Delay+0x40>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012e2:	bf00      	nop
 80012e4:	f7ff ffde 	bl	80012a4 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d8f7      	bhi.n	80012e4 <HAL_Delay+0x28>
  {
  }
}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000020 	.word	0x20000020

08001300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800132c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001332:	4a04      	ldr	r2, [pc, #16]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	60d3      	str	r3, [r2, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001430:	d301      	bcc.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <SysTick_Config+0x40>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	210f      	movs	r1, #15
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f7ff ff8e 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <SysTick_Config+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <SysTick_Config+0x40>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff47 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff5c 	bl	8001348 <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff8e 	bl	80013b8 <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5d 	bl	8001364 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ffb0 	bl	8001420 <SysTick_Config>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b089      	sub	sp, #36	; 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	e16b      	b.n	80017c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014e8:	2201      	movs	r2, #1
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	429a      	cmp	r2, r3
 8001502:	f040 815a 	bne.w	80017ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d00b      	beq.n	8001526 <HAL_GPIO_Init+0x5a>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d007      	beq.n	8001526 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800151a:	2b11      	cmp	r3, #17
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b12      	cmp	r3, #18
 8001524:	d130      	bne.n	8001588 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800155c:	2201      	movs	r2, #1
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	f003 0201 	and.w	r2, r3, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0xfc>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b12      	cmp	r3, #18
 80015c6:	d123      	bne.n	8001610 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	08da      	lsrs	r2, r3, #3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3208      	adds	r2, #8
 80015d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	220f      	movs	r2, #15
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	691a      	ldr	r2, [r3, #16]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	08da      	lsrs	r2, r3, #3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3208      	adds	r2, #8
 800160a:	69b9      	ldr	r1, [r7, #24]
 800160c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0203 	and.w	r2, r3, #3
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80b4 	beq.w	80017ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b5f      	ldr	r3, [pc, #380]	; (80017d4 <HAL_GPIO_Init+0x308>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a5e      	ldr	r2, [pc, #376]	; (80017d4 <HAL_GPIO_Init+0x308>)
 800165c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b5c      	ldr	r3, [pc, #368]	; (80017d4 <HAL_GPIO_Init+0x308>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800166e:	4a5a      	ldr	r2, [pc, #360]	; (80017d8 <HAL_GPIO_Init+0x30c>)
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	3302      	adds	r3, #2
 8001676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	220f      	movs	r2, #15
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a51      	ldr	r2, [pc, #324]	; (80017dc <HAL_GPIO_Init+0x310>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d02b      	beq.n	80016f2 <HAL_GPIO_Init+0x226>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a50      	ldr	r2, [pc, #320]	; (80017e0 <HAL_GPIO_Init+0x314>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d025      	beq.n	80016ee <HAL_GPIO_Init+0x222>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4f      	ldr	r2, [pc, #316]	; (80017e4 <HAL_GPIO_Init+0x318>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d01f      	beq.n	80016ea <HAL_GPIO_Init+0x21e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4e      	ldr	r2, [pc, #312]	; (80017e8 <HAL_GPIO_Init+0x31c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d019      	beq.n	80016e6 <HAL_GPIO_Init+0x21a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4d      	ldr	r2, [pc, #308]	; (80017ec <HAL_GPIO_Init+0x320>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d013      	beq.n	80016e2 <HAL_GPIO_Init+0x216>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4c      	ldr	r2, [pc, #304]	; (80017f0 <HAL_GPIO_Init+0x324>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00d      	beq.n	80016de <HAL_GPIO_Init+0x212>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4b      	ldr	r2, [pc, #300]	; (80017f4 <HAL_GPIO_Init+0x328>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d007      	beq.n	80016da <HAL_GPIO_Init+0x20e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4a      	ldr	r2, [pc, #296]	; (80017f8 <HAL_GPIO_Init+0x32c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d101      	bne.n	80016d6 <HAL_GPIO_Init+0x20a>
 80016d2:	2307      	movs	r3, #7
 80016d4:	e00e      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016d6:	2308      	movs	r3, #8
 80016d8:	e00c      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016da:	2306      	movs	r3, #6
 80016dc:	e00a      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016de:	2305      	movs	r3, #5
 80016e0:	e008      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016e2:	2304      	movs	r3, #4
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016e6:	2303      	movs	r3, #3
 80016e8:	e004      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e002      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016f2:	2300      	movs	r3, #0
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	f002 0203 	and.w	r2, r2, #3
 80016fa:	0092      	lsls	r2, r2, #2
 80016fc:	4093      	lsls	r3, r2
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001704:	4934      	ldr	r1, [pc, #208]	; (80017d8 <HAL_GPIO_Init+0x30c>)
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001712:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <HAL_GPIO_Init+0x330>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001736:	4a31      	ldr	r2, [pc, #196]	; (80017fc <HAL_GPIO_Init+0x330>)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800173c:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <HAL_GPIO_Init+0x330>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001760:	4a26      	ldr	r2, [pc, #152]	; (80017fc <HAL_GPIO_Init+0x330>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001766:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_GPIO_Init+0x330>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800178a:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <HAL_GPIO_Init+0x330>)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <HAL_GPIO_Init+0x330>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b4:	4a11      	ldr	r2, [pc, #68]	; (80017fc <HAL_GPIO_Init+0x330>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3301      	adds	r3, #1
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	2b0f      	cmp	r3, #15
 80017c4:	f67f ae90 	bls.w	80014e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017c8:	bf00      	nop
 80017ca:	3724      	adds	r7, #36	; 0x24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40013800 	.word	0x40013800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40020400 	.word	0x40020400
 80017e4:	40020800 	.word	0x40020800
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40021400 	.word	0x40021400
 80017f4:	40021800 	.word	0x40021800
 80017f8:	40021c00 	.word	0x40021c00
 80017fc:	40013c00 	.word	0x40013c00

08001800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
 800180c:	4613      	mov	r3, r2
 800180e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001810:	787b      	ldrb	r3, [r7, #1]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001816:	887a      	ldrh	r2, [r7, #2]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800181c:	e003      	b.n	8001826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	041a      	lsls	r2, r3, #16
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	619a      	str	r2, [r3, #24]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e25b      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d075      	beq.n	800193e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001852:	4ba3      	ldr	r3, [pc, #652]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b04      	cmp	r3, #4
 800185c:	d00c      	beq.n	8001878 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800185e:	4ba0      	ldr	r3, [pc, #640]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001866:	2b08      	cmp	r3, #8
 8001868:	d112      	bne.n	8001890 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800186a:	4b9d      	ldr	r3, [pc, #628]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001876:	d10b      	bne.n	8001890 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001878:	4b99      	ldr	r3, [pc, #612]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d05b      	beq.n	800193c <HAL_RCC_OscConfig+0x108>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d157      	bne.n	800193c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e236      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001898:	d106      	bne.n	80018a8 <HAL_RCC_OscConfig+0x74>
 800189a:	4b91      	ldr	r3, [pc, #580]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a90      	ldr	r2, [pc, #576]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e01d      	b.n	80018e4 <HAL_RCC_OscConfig+0xb0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x98>
 80018b2:	4b8b      	ldr	r3, [pc, #556]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a8a      	ldr	r2, [pc, #552]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 80018b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b88      	ldr	r3, [pc, #544]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a87      	ldr	r2, [pc, #540]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e00b      	b.n	80018e4 <HAL_RCC_OscConfig+0xb0>
 80018cc:	4b84      	ldr	r3, [pc, #528]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a83      	ldr	r2, [pc, #524]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 80018d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b81      	ldr	r3, [pc, #516]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a80      	ldr	r2, [pc, #512]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 80018de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d013      	beq.n	8001914 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fcda 	bl	80012a4 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f4:	f7ff fcd6 	bl	80012a4 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e1fb      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	4b76      	ldr	r3, [pc, #472]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0xc0>
 8001912:	e014      	b.n	800193e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001914:	f7ff fcc6 	bl	80012a4 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800191c:	f7ff fcc2 	bl	80012a4 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b64      	cmp	r3, #100	; 0x64
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e1e7      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	4b6c      	ldr	r3, [pc, #432]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0xe8>
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d063      	beq.n	8001a12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800194a:	4b65      	ldr	r3, [pc, #404]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00b      	beq.n	800196e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001956:	4b62      	ldr	r3, [pc, #392]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800195e:	2b08      	cmp	r3, #8
 8001960:	d11c      	bne.n	800199c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001962:	4b5f      	ldr	r3, [pc, #380]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d116      	bne.n	800199c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196e:	4b5c      	ldr	r3, [pc, #368]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_RCC_OscConfig+0x152>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e1bb      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001986:	4b56      	ldr	r3, [pc, #344]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4952      	ldr	r1, [pc, #328]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	e03a      	b.n	8001a12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d020      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a4:	4b4f      	ldr	r3, [pc, #316]	; (8001ae4 <HAL_RCC_OscConfig+0x2b0>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff fc7b 	bl	80012a4 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b2:	f7ff fc77 	bl	80012a4 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e19c      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c4:	4b46      	ldr	r3, [pc, #280]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d0:	4b43      	ldr	r3, [pc, #268]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4940      	ldr	r1, [pc, #256]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]
 80019e4:	e015      	b.n	8001a12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e6:	4b3f      	ldr	r3, [pc, #252]	; (8001ae4 <HAL_RCC_OscConfig+0x2b0>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff fc5a 	bl	80012a4 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f4:	f7ff fc56 	bl	80012a4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e17b      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d030      	beq.n	8001a80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d016      	beq.n	8001a54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a26:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <HAL_RCC_OscConfig+0x2b4>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff fc3a 	bl	80012a4 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a34:	f7ff fc36 	bl	80012a4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e15b      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x200>
 8001a52:	e015      	b.n	8001a80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a54:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <HAL_RCC_OscConfig+0x2b4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fc23 	bl	80012a4 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a62:	f7ff fc1f 	bl	80012a4 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e144      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a74:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 8001a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f0      	bne.n	8001a62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80a0 	beq.w	8001bce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10f      	bne.n	8001abe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aac:	6413      	str	r3, [r2, #64]	; 0x40
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aba:	2301      	movs	r3, #1
 8001abc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_RCC_OscConfig+0x2b8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d121      	bne.n	8001b0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_RCC_OscConfig+0x2b8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a07      	ldr	r2, [pc, #28]	; (8001aec <HAL_RCC_OscConfig+0x2b8>)
 8001ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad6:	f7ff fbe5 	bl	80012a4 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	e011      	b.n	8001b02 <HAL_RCC_OscConfig+0x2ce>
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	42470000 	.word	0x42470000
 8001ae8:	42470e80 	.word	0x42470e80
 8001aec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af0:	f7ff fbd8 	bl	80012a4 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e0fd      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b02:	4b81      	ldr	r3, [pc, #516]	; (8001d08 <HAL_RCC_OscConfig+0x4d4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d106      	bne.n	8001b24 <HAL_RCC_OscConfig+0x2f0>
 8001b16:	4b7d      	ldr	r3, [pc, #500]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1a:	4a7c      	ldr	r2, [pc, #496]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6713      	str	r3, [r2, #112]	; 0x70
 8001b22:	e01c      	b.n	8001b5e <HAL_RCC_OscConfig+0x32a>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d10c      	bne.n	8001b46 <HAL_RCC_OscConfig+0x312>
 8001b2c:	4b77      	ldr	r3, [pc, #476]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b30:	4a76      	ldr	r2, [pc, #472]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6713      	str	r3, [r2, #112]	; 0x70
 8001b38:	4b74      	ldr	r3, [pc, #464]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3c:	4a73      	ldr	r2, [pc, #460]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6713      	str	r3, [r2, #112]	; 0x70
 8001b44:	e00b      	b.n	8001b5e <HAL_RCC_OscConfig+0x32a>
 8001b46:	4b71      	ldr	r3, [pc, #452]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4a:	4a70      	ldr	r2, [pc, #448]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6713      	str	r3, [r2, #112]	; 0x70
 8001b52:	4b6e      	ldr	r3, [pc, #440]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b56:	4a6d      	ldr	r2, [pc, #436]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001b58:	f023 0304 	bic.w	r3, r3, #4
 8001b5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d015      	beq.n	8001b92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b66:	f7ff fb9d 	bl	80012a4 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7ff fb99 	bl	80012a4 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e0bc      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b84:	4b61      	ldr	r3, [pc, #388]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0ee      	beq.n	8001b6e <HAL_RCC_OscConfig+0x33a>
 8001b90:	e014      	b.n	8001bbc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7ff fb87 	bl	80012a4 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b98:	e00a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7ff fb83 	bl	80012a4 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e0a6      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb0:	4b56      	ldr	r3, [pc, #344]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ee      	bne.n	8001b9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d105      	bne.n	8001bce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc2:	4b52      	ldr	r3, [pc, #328]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	4a51      	ldr	r2, [pc, #324]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 8092 	beq.w	8001cfc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bd8:	4b4c      	ldr	r3, [pc, #304]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d05c      	beq.n	8001c9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d141      	bne.n	8001c70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bec:	4b48      	ldr	r3, [pc, #288]	; (8001d10 <HAL_RCC_OscConfig+0x4dc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fb57 	bl	80012a4 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7ff fb53 	bl	80012a4 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e078      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0c:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f0      	bne.n	8001bfa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69da      	ldr	r2, [r3, #28]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	019b      	lsls	r3, r3, #6
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2e:	085b      	lsrs	r3, r3, #1
 8001c30:	3b01      	subs	r3, #1
 8001c32:	041b      	lsls	r3, r3, #16
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	061b      	lsls	r3, r3, #24
 8001c3c:	4933      	ldr	r1, [pc, #204]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c42:	4b33      	ldr	r3, [pc, #204]	; (8001d10 <HAL_RCC_OscConfig+0x4dc>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff fb2c 	bl	80012a4 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c50:	f7ff fb28 	bl	80012a4 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e04d      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c62:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0x41c>
 8001c6e:	e045      	b.n	8001cfc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c70:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <HAL_RCC_OscConfig+0x4dc>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff fb15 	bl	80012a4 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff fb11 	bl	80012a4 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e036      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c90:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f0      	bne.n	8001c7e <HAL_RCC_OscConfig+0x44a>
 8001c9c:	e02e      	b.n	8001cfc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e029      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001caa:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <HAL_RCC_OscConfig+0x4d8>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d11c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d115      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d10d      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d106      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40007000 	.word	0x40007000
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	42470060 	.word	0x42470060

08001d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0cc      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d28:	4b68      	ldr	r3, [pc, #416]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d90c      	bls.n	8001d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	4b65      	ldr	r3, [pc, #404]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b63      	ldr	r3, [pc, #396]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0b8      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d020      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d68:	4b59      	ldr	r3, [pc, #356]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	4a58      	ldr	r2, [pc, #352]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d80:	4b53      	ldr	r3, [pc, #332]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4a52      	ldr	r2, [pc, #328]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8c:	4b50      	ldr	r3, [pc, #320]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	494d      	ldr	r1, [pc, #308]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d044      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d107      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	4b47      	ldr	r3, [pc, #284]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d119      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e07f      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d003      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d107      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd2:	4b3f      	ldr	r3, [pc, #252]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d109      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e06f      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de2:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e067      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001df2:	4b37      	ldr	r3, [pc, #220]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f023 0203 	bic.w	r2, r3, #3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	4934      	ldr	r1, [pc, #208]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e04:	f7ff fa4e 	bl	80012a4 <HAL_GetTick>
 8001e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e0c:	f7ff fa4a 	bl	80012a4 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e04f      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e22:	4b2b      	ldr	r3, [pc, #172]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 020c 	and.w	r2, r3, #12
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d1eb      	bne.n	8001e0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e34:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d20c      	bcs.n	8001e5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e42:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e032      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d008      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e68:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4916      	ldr	r1, [pc, #88]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d009      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	490e      	ldr	r1, [pc, #56]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e9a:	f000 f821 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8001e9e:	4601      	mov	r1, r0
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	5cd3      	ldrb	r3, [r2, r3]
 8001eae:	fa21 f303 	lsr.w	r3, r1, r3
 8001eb2:	4a09      	ldr	r2, [pc, #36]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_RCC_ClockConfig+0x1c8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff f9ae 	bl	800121c <HAL_InitTick>

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023c00 	.word	0x40023c00
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	0800d87c 	.word	0x0800d87c
 8001ed8:	20000018 	.word	0x20000018
 8001edc:	2000001c 	.word	0x2000001c

08001ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ef6:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d007      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x32>
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d008      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x38>
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f040 80b4 	bne.w	8002074 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f0c:	4b5e      	ldr	r3, [pc, #376]	; (8002088 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f0e:	60bb      	str	r3, [r7, #8]
       break;
 8001f10:	e0b3      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f12:	4b5e      	ldr	r3, [pc, #376]	; (800208c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f14:	60bb      	str	r3, [r7, #8]
      break;
 8001f16:	e0b0      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f18:	4b5a      	ldr	r3, [pc, #360]	; (8002084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f22:	4b58      	ldr	r3, [pc, #352]	; (8002084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d04a      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2e:	4b55      	ldr	r3, [pc, #340]	; (8002084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	099b      	lsrs	r3, r3, #6
 8001f34:	f04f 0400 	mov.w	r4, #0
 8001f38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	ea03 0501 	and.w	r5, r3, r1
 8001f44:	ea04 0602 	and.w	r6, r4, r2
 8001f48:	4629      	mov	r1, r5
 8001f4a:	4632      	mov	r2, r6
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	f04f 0400 	mov.w	r4, #0
 8001f54:	0154      	lsls	r4, r2, #5
 8001f56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f5a:	014b      	lsls	r3, r1, #5
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4622      	mov	r2, r4
 8001f60:	1b49      	subs	r1, r1, r5
 8001f62:	eb62 0206 	sbc.w	r2, r2, r6
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	f04f 0400 	mov.w	r4, #0
 8001f6e:	0194      	lsls	r4, r2, #6
 8001f70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f74:	018b      	lsls	r3, r1, #6
 8001f76:	1a5b      	subs	r3, r3, r1
 8001f78:	eb64 0402 	sbc.w	r4, r4, r2
 8001f7c:	f04f 0100 	mov.w	r1, #0
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	00e2      	lsls	r2, r4, #3
 8001f86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f8a:	00d9      	lsls	r1, r3, #3
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4614      	mov	r4, r2
 8001f90:	195b      	adds	r3, r3, r5
 8001f92:	eb44 0406 	adc.w	r4, r4, r6
 8001f96:	f04f 0100 	mov.w	r1, #0
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	0262      	lsls	r2, r4, #9
 8001fa0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001fa4:	0259      	lsls	r1, r3, #9
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4614      	mov	r4, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	4621      	mov	r1, r4
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f04f 0400 	mov.w	r4, #0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4623      	mov	r3, r4
 8001fb8:	f7fe f906 	bl	80001c8 <__aeabi_uldivmod>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	460c      	mov	r4, r1
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	e049      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc4:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	099b      	lsrs	r3, r3, #6
 8001fca:	f04f 0400 	mov.w	r4, #0
 8001fce:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	ea03 0501 	and.w	r5, r3, r1
 8001fda:	ea04 0602 	and.w	r6, r4, r2
 8001fde:	4629      	mov	r1, r5
 8001fe0:	4632      	mov	r2, r6
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	f04f 0400 	mov.w	r4, #0
 8001fea:	0154      	lsls	r4, r2, #5
 8001fec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ff0:	014b      	lsls	r3, r1, #5
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4622      	mov	r2, r4
 8001ff6:	1b49      	subs	r1, r1, r5
 8001ff8:	eb62 0206 	sbc.w	r2, r2, r6
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	f04f 0400 	mov.w	r4, #0
 8002004:	0194      	lsls	r4, r2, #6
 8002006:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800200a:	018b      	lsls	r3, r1, #6
 800200c:	1a5b      	subs	r3, r3, r1
 800200e:	eb64 0402 	sbc.w	r4, r4, r2
 8002012:	f04f 0100 	mov.w	r1, #0
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	00e2      	lsls	r2, r4, #3
 800201c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002020:	00d9      	lsls	r1, r3, #3
 8002022:	460b      	mov	r3, r1
 8002024:	4614      	mov	r4, r2
 8002026:	195b      	adds	r3, r3, r5
 8002028:	eb44 0406 	adc.w	r4, r4, r6
 800202c:	f04f 0100 	mov.w	r1, #0
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	02a2      	lsls	r2, r4, #10
 8002036:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800203a:	0299      	lsls	r1, r3, #10
 800203c:	460b      	mov	r3, r1
 800203e:	4614      	mov	r4, r2
 8002040:	4618      	mov	r0, r3
 8002042:	4621      	mov	r1, r4
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f04f 0400 	mov.w	r4, #0
 800204a:	461a      	mov	r2, r3
 800204c:	4623      	mov	r3, r4
 800204e:	f7fe f8bb 	bl	80001c8 <__aeabi_uldivmod>
 8002052:	4603      	mov	r3, r0
 8002054:	460c      	mov	r4, r1
 8002056:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	0c1b      	lsrs	r3, r3, #16
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	3301      	adds	r3, #1
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002070:	60bb      	str	r3, [r7, #8]
      break;
 8002072:	e002      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002076:	60bb      	str	r3, [r7, #8]
      break;
 8002078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800207a:	68bb      	ldr	r3, [r7, #8]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002084:	40023800 	.word	0x40023800
 8002088:	00f42400 	.word	0x00f42400
 800208c:	007a1200 	.word	0x007a1200

08002090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000018 	.word	0x20000018

080020a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020ac:	f7ff fff0 	bl	8002090 <HAL_RCC_GetHCLKFreq>
 80020b0:	4601      	mov	r1, r0
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	0a9b      	lsrs	r3, r3, #10
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	4a03      	ldr	r2, [pc, #12]	; (80020cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020be:	5cd3      	ldrb	r3, [r2, r3]
 80020c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	0800d88c 	.word	0x0800d88c

080020d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020d4:	f7ff ffdc 	bl	8002090 <HAL_RCC_GetHCLKFreq>
 80020d8:	4601      	mov	r1, r0
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	0b5b      	lsrs	r3, r3, #13
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4a03      	ldr	r2, [pc, #12]	; (80020f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020e6:	5cd3      	ldrb	r3, [r2, r3]
 80020e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	0800d88c 	.word	0x0800d88c

080020f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e056      	b.n	80021b8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d106      	bne.n	800212a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7fe ff59 	bl	8000fdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2202      	movs	r2, #2
 800212e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002140:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	ea42 0103 	orr.w	r1, r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	0c1b      	lsrs	r3, r3, #16
 8002188:	f003 0104 	and.w	r1, r3, #4
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69da      	ldr	r2, [r3, #28]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	4613      	mov	r3, r2
 80021ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_SPI_Transmit+0x22>
 80021de:	2302      	movs	r3, #2
 80021e0:	e11e      	b.n	8002420 <HAL_SPI_Transmit+0x260>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021ea:	f7ff f85b 	bl	80012a4 <HAL_GetTick>
 80021ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d002      	beq.n	8002206 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002200:	2302      	movs	r3, #2
 8002202:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002204:	e103      	b.n	800240e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_SPI_Transmit+0x52>
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002216:	e0fa      	b.n	800240e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2203      	movs	r2, #3
 800221c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	88fa      	ldrh	r2, [r7, #6]
 8002230:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	88fa      	ldrh	r2, [r7, #6]
 8002236:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800225e:	d107      	bne.n	8002270 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800226e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227a:	2b40      	cmp	r3, #64	; 0x40
 800227c:	d007      	beq.n	800228e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800228c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002296:	d14b      	bne.n	8002330 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <HAL_SPI_Transmit+0xe6>
 80022a0:	8afb      	ldrh	r3, [r7, #22]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d13e      	bne.n	8002324 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	881a      	ldrh	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	1c9a      	adds	r2, r3, #2
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022ca:	e02b      	b.n	8002324 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d112      	bne.n	8002300 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	881a      	ldrh	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	1c9a      	adds	r2, r3, #2
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80022fe:	e011      	b.n	8002324 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002300:	f7fe ffd0 	bl	80012a4 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d803      	bhi.n	8002318 <HAL_SPI_Transmit+0x158>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d102      	bne.n	800231e <HAL_SPI_Transmit+0x15e>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d102      	bne.n	8002324 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002322:	e074      	b.n	800240e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002328:	b29b      	uxth	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1ce      	bne.n	80022cc <HAL_SPI_Transmit+0x10c>
 800232e:	e04c      	b.n	80023ca <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <HAL_SPI_Transmit+0x17e>
 8002338:	8afb      	ldrh	r3, [r7, #22]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d140      	bne.n	80023c0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	330c      	adds	r3, #12
 8002348:	7812      	ldrb	r2, [r2, #0]
 800234a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002364:	e02c      	b.n	80023c0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b02      	cmp	r3, #2
 8002372:	d113      	bne.n	800239c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	330c      	adds	r3, #12
 800237e:	7812      	ldrb	r2, [r2, #0]
 8002380:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	86da      	strh	r2, [r3, #54]	; 0x36
 800239a:	e011      	b.n	80023c0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800239c:	f7fe ff82 	bl	80012a4 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d803      	bhi.n	80023b4 <HAL_SPI_Transmit+0x1f4>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b2:	d102      	bne.n	80023ba <HAL_SPI_Transmit+0x1fa>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d102      	bne.n	80023c0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023be:	e026      	b.n	800240e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1cd      	bne.n	8002366 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	6839      	ldr	r1, [r7, #0]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f894 	bl	80024fc <SPI_EndRxTxTransaction>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2220      	movs	r2, #32
 80023de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10a      	bne.n	80023fe <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	77fb      	strb	r3, [r7, #31]
 800240a:	e000      	b.n	800240e <HAL_SPI_Transmit+0x24e>
  }

error:
 800240c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800241e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3720      	adds	r7, #32
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	4613      	mov	r3, r2
 8002436:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002438:	e04c      	b.n	80024d4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d048      	beq.n	80024d4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002442:	f7fe ff2f 	bl	80012a4 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d902      	bls.n	8002458 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d13d      	bne.n	80024d4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002466:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002470:	d111      	bne.n	8002496 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800247a:	d004      	beq.n	8002486 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002484:	d107      	bne.n	8002496 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002494:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800249e:	d10f      	bne.n	80024c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e00f      	b.n	80024f4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	4013      	ands	r3, r2
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d1a3      	bne.n	800243a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af02      	add	r7, sp, #8
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <SPI_EndRxTxTransaction+0x7c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1b      	ldr	r2, [pc, #108]	; (800257c <SPI_EndRxTxTransaction+0x80>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	0d5b      	lsrs	r3, r3, #21
 8002514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002526:	d112      	bne.n	800254e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2200      	movs	r2, #0
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f7ff ff78 	bl	8002428 <SPI_WaitFlagStateUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d016      	beq.n	800256c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f043 0220 	orr.w	r2, r3, #32
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e00f      	b.n	800256e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	3b01      	subs	r3, #1
 8002558:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002564:	2b80      	cmp	r3, #128	; 0x80
 8002566:	d0f2      	beq.n	800254e <SPI_EndRxTxTransaction+0x52>
 8002568:	e000      	b.n	800256c <SPI_EndRxTxTransaction+0x70>
        break;
 800256a:	bf00      	nop
  }

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000018 	.word	0x20000018
 800257c:	165e9f81 	.word	0x165e9f81

08002580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e03f      	b.n	8002612 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fe fd60 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2224      	movs	r2, #36	; 0x24
 80025b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f90b 	bl	80027e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695a      	ldr	r2, [r3, #20]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b088      	sub	sp, #32
 800261e:	af02      	add	r7, sp, #8
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	603b      	str	r3, [r7, #0]
 8002626:	4613      	mov	r3, r2
 8002628:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b20      	cmp	r3, #32
 8002638:	f040 8083 	bne.w	8002742 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <HAL_UART_Transmit+0x2e>
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e07b      	b.n	8002744 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_UART_Transmit+0x40>
 8002656:	2302      	movs	r3, #2
 8002658:	e074      	b.n	8002744 <HAL_UART_Transmit+0x12a>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2221      	movs	r2, #33	; 0x21
 800266c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002670:	f7fe fe18 	bl	80012a4 <HAL_GetTick>
 8002674:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	88fa      	ldrh	r2, [r7, #6]
 800267a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	88fa      	ldrh	r2, [r7, #6]
 8002680:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800268a:	e042      	b.n	8002712 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a2:	d122      	bne.n	80026ea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2200      	movs	r2, #0
 80026ac:	2180      	movs	r1, #128	; 0x80
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f84c 	bl	800274c <UART_WaitOnFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e042      	b.n	8002744 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026d0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d103      	bne.n	80026e2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	3302      	adds	r3, #2
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	e017      	b.n	8002712 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	3301      	adds	r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	e013      	b.n	8002712 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2200      	movs	r2, #0
 80026f2:	2180      	movs	r1, #128	; 0x80
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f829 	bl	800274c <UART_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e01f      	b.n	8002744 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	60ba      	str	r2, [r7, #8]
 800270a:	781a      	ldrb	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002716:	b29b      	uxth	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1b7      	bne.n	800268c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2200      	movs	r2, #0
 8002724:	2140      	movs	r1, #64	; 0x40
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 f810 	bl	800274c <UART_WaitOnFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e006      	b.n	8002744 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	e000      	b.n	8002744 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002742:	2302      	movs	r3, #2
  }
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	4613      	mov	r3, r2
 800275a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800275c:	e02c      	b.n	80027b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d028      	beq.n	80027b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d007      	beq.n	800277c <UART_WaitOnFlagUntilTimeout+0x30>
 800276c:	f7fe fd9a 	bl	80012a4 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	429a      	cmp	r2, r3
 800277a:	d21d      	bcs.n	80027b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800278a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e00f      	b.n	80027d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4013      	ands	r3, r2
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d0c3      	beq.n	800275e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002822:	f023 030c 	bic.w	r3, r3, #12
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	68f9      	ldr	r1, [r7, #12]
 800282c:	430b      	orrs	r3, r1
 800282e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800284e:	f040 818b 	bne.w	8002b68 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4ac1      	ldr	r2, [pc, #772]	; (8002b5c <UART_SetConfig+0x37c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d005      	beq.n	8002868 <UART_SetConfig+0x88>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4abf      	ldr	r2, [pc, #764]	; (8002b60 <UART_SetConfig+0x380>)
 8002862:	4293      	cmp	r3, r2
 8002864:	f040 80bd 	bne.w	80029e2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002868:	f7ff fc32 	bl	80020d0 <HAL_RCC_GetPCLK2Freq>
 800286c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	461d      	mov	r5, r3
 8002872:	f04f 0600 	mov.w	r6, #0
 8002876:	46a8      	mov	r8, r5
 8002878:	46b1      	mov	r9, r6
 800287a:	eb18 0308 	adds.w	r3, r8, r8
 800287e:	eb49 0409 	adc.w	r4, r9, r9
 8002882:	4698      	mov	r8, r3
 8002884:	46a1      	mov	r9, r4
 8002886:	eb18 0805 	adds.w	r8, r8, r5
 800288a:	eb49 0906 	adc.w	r9, r9, r6
 800288e:	f04f 0100 	mov.w	r1, #0
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800289a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800289e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028a2:	4688      	mov	r8, r1
 80028a4:	4691      	mov	r9, r2
 80028a6:	eb18 0005 	adds.w	r0, r8, r5
 80028aa:	eb49 0106 	adc.w	r1, r9, r6
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	461d      	mov	r5, r3
 80028b4:	f04f 0600 	mov.w	r6, #0
 80028b8:	196b      	adds	r3, r5, r5
 80028ba:	eb46 0406 	adc.w	r4, r6, r6
 80028be:	461a      	mov	r2, r3
 80028c0:	4623      	mov	r3, r4
 80028c2:	f7fd fc81 	bl	80001c8 <__aeabi_uldivmod>
 80028c6:	4603      	mov	r3, r0
 80028c8:	460c      	mov	r4, r1
 80028ca:	461a      	mov	r2, r3
 80028cc:	4ba5      	ldr	r3, [pc, #660]	; (8002b64 <UART_SetConfig+0x384>)
 80028ce:	fba3 2302 	umull	r2, r3, r3, r2
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	461d      	mov	r5, r3
 80028dc:	f04f 0600 	mov.w	r6, #0
 80028e0:	46a9      	mov	r9, r5
 80028e2:	46b2      	mov	sl, r6
 80028e4:	eb19 0309 	adds.w	r3, r9, r9
 80028e8:	eb4a 040a 	adc.w	r4, sl, sl
 80028ec:	4699      	mov	r9, r3
 80028ee:	46a2      	mov	sl, r4
 80028f0:	eb19 0905 	adds.w	r9, r9, r5
 80028f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80028f8:	f04f 0100 	mov.w	r1, #0
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002904:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002908:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800290c:	4689      	mov	r9, r1
 800290e:	4692      	mov	sl, r2
 8002910:	eb19 0005 	adds.w	r0, r9, r5
 8002914:	eb4a 0106 	adc.w	r1, sl, r6
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	461d      	mov	r5, r3
 800291e:	f04f 0600 	mov.w	r6, #0
 8002922:	196b      	adds	r3, r5, r5
 8002924:	eb46 0406 	adc.w	r4, r6, r6
 8002928:	461a      	mov	r2, r3
 800292a:	4623      	mov	r3, r4
 800292c:	f7fd fc4c 	bl	80001c8 <__aeabi_uldivmod>
 8002930:	4603      	mov	r3, r0
 8002932:	460c      	mov	r4, r1
 8002934:	461a      	mov	r2, r3
 8002936:	4b8b      	ldr	r3, [pc, #556]	; (8002b64 <UART_SetConfig+0x384>)
 8002938:	fba3 1302 	umull	r1, r3, r3, r2
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	2164      	movs	r1, #100	; 0x64
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	3332      	adds	r3, #50	; 0x32
 800294a:	4a86      	ldr	r2, [pc, #536]	; (8002b64 <UART_SetConfig+0x384>)
 800294c:	fba2 2303 	umull	r2, r3, r2, r3
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002958:	4498      	add	r8, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	461d      	mov	r5, r3
 800295e:	f04f 0600 	mov.w	r6, #0
 8002962:	46a9      	mov	r9, r5
 8002964:	46b2      	mov	sl, r6
 8002966:	eb19 0309 	adds.w	r3, r9, r9
 800296a:	eb4a 040a 	adc.w	r4, sl, sl
 800296e:	4699      	mov	r9, r3
 8002970:	46a2      	mov	sl, r4
 8002972:	eb19 0905 	adds.w	r9, r9, r5
 8002976:	eb4a 0a06 	adc.w	sl, sl, r6
 800297a:	f04f 0100 	mov.w	r1, #0
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002986:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800298a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800298e:	4689      	mov	r9, r1
 8002990:	4692      	mov	sl, r2
 8002992:	eb19 0005 	adds.w	r0, r9, r5
 8002996:	eb4a 0106 	adc.w	r1, sl, r6
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	461d      	mov	r5, r3
 80029a0:	f04f 0600 	mov.w	r6, #0
 80029a4:	196b      	adds	r3, r5, r5
 80029a6:	eb46 0406 	adc.w	r4, r6, r6
 80029aa:	461a      	mov	r2, r3
 80029ac:	4623      	mov	r3, r4
 80029ae:	f7fd fc0b 	bl	80001c8 <__aeabi_uldivmod>
 80029b2:	4603      	mov	r3, r0
 80029b4:	460c      	mov	r4, r1
 80029b6:	461a      	mov	r2, r3
 80029b8:	4b6a      	ldr	r3, [pc, #424]	; (8002b64 <UART_SetConfig+0x384>)
 80029ba:	fba3 1302 	umull	r1, r3, r3, r2
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2164      	movs	r1, #100	; 0x64
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	3332      	adds	r3, #50	; 0x32
 80029cc:	4a65      	ldr	r2, [pc, #404]	; (8002b64 <UART_SetConfig+0x384>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	f003 0207 	and.w	r2, r3, #7
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4442      	add	r2, r8
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	e26f      	b.n	8002ec2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029e2:	f7ff fb61 	bl	80020a8 <HAL_RCC_GetPCLK1Freq>
 80029e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	461d      	mov	r5, r3
 80029ec:	f04f 0600 	mov.w	r6, #0
 80029f0:	46a8      	mov	r8, r5
 80029f2:	46b1      	mov	r9, r6
 80029f4:	eb18 0308 	adds.w	r3, r8, r8
 80029f8:	eb49 0409 	adc.w	r4, r9, r9
 80029fc:	4698      	mov	r8, r3
 80029fe:	46a1      	mov	r9, r4
 8002a00:	eb18 0805 	adds.w	r8, r8, r5
 8002a04:	eb49 0906 	adc.w	r9, r9, r6
 8002a08:	f04f 0100 	mov.w	r1, #0
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a1c:	4688      	mov	r8, r1
 8002a1e:	4691      	mov	r9, r2
 8002a20:	eb18 0005 	adds.w	r0, r8, r5
 8002a24:	eb49 0106 	adc.w	r1, r9, r6
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	461d      	mov	r5, r3
 8002a2e:	f04f 0600 	mov.w	r6, #0
 8002a32:	196b      	adds	r3, r5, r5
 8002a34:	eb46 0406 	adc.w	r4, r6, r6
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4623      	mov	r3, r4
 8002a3c:	f7fd fbc4 	bl	80001c8 <__aeabi_uldivmod>
 8002a40:	4603      	mov	r3, r0
 8002a42:	460c      	mov	r4, r1
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <UART_SetConfig+0x384>)
 8002a48:	fba3 2302 	umull	r2, r3, r3, r2
 8002a4c:	095b      	lsrs	r3, r3, #5
 8002a4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	461d      	mov	r5, r3
 8002a56:	f04f 0600 	mov.w	r6, #0
 8002a5a:	46a9      	mov	r9, r5
 8002a5c:	46b2      	mov	sl, r6
 8002a5e:	eb19 0309 	adds.w	r3, r9, r9
 8002a62:	eb4a 040a 	adc.w	r4, sl, sl
 8002a66:	4699      	mov	r9, r3
 8002a68:	46a2      	mov	sl, r4
 8002a6a:	eb19 0905 	adds.w	r9, r9, r5
 8002a6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a72:	f04f 0100 	mov.w	r1, #0
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a86:	4689      	mov	r9, r1
 8002a88:	4692      	mov	sl, r2
 8002a8a:	eb19 0005 	adds.w	r0, r9, r5
 8002a8e:	eb4a 0106 	adc.w	r1, sl, r6
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	461d      	mov	r5, r3
 8002a98:	f04f 0600 	mov.w	r6, #0
 8002a9c:	196b      	adds	r3, r5, r5
 8002a9e:	eb46 0406 	adc.w	r4, r6, r6
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4623      	mov	r3, r4
 8002aa6:	f7fd fb8f 	bl	80001c8 <__aeabi_uldivmod>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	460c      	mov	r4, r1
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <UART_SetConfig+0x384>)
 8002ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	2164      	movs	r1, #100	; 0x64
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	3332      	adds	r3, #50	; 0x32
 8002ac4:	4a27      	ldr	r2, [pc, #156]	; (8002b64 <UART_SetConfig+0x384>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ad2:	4498      	add	r8, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	461d      	mov	r5, r3
 8002ad8:	f04f 0600 	mov.w	r6, #0
 8002adc:	46a9      	mov	r9, r5
 8002ade:	46b2      	mov	sl, r6
 8002ae0:	eb19 0309 	adds.w	r3, r9, r9
 8002ae4:	eb4a 040a 	adc.w	r4, sl, sl
 8002ae8:	4699      	mov	r9, r3
 8002aea:	46a2      	mov	sl, r4
 8002aec:	eb19 0905 	adds.w	r9, r9, r5
 8002af0:	eb4a 0a06 	adc.w	sl, sl, r6
 8002af4:	f04f 0100 	mov.w	r1, #0
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b08:	4689      	mov	r9, r1
 8002b0a:	4692      	mov	sl, r2
 8002b0c:	eb19 0005 	adds.w	r0, r9, r5
 8002b10:	eb4a 0106 	adc.w	r1, sl, r6
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	461d      	mov	r5, r3
 8002b1a:	f04f 0600 	mov.w	r6, #0
 8002b1e:	196b      	adds	r3, r5, r5
 8002b20:	eb46 0406 	adc.w	r4, r6, r6
 8002b24:	461a      	mov	r2, r3
 8002b26:	4623      	mov	r3, r4
 8002b28:	f7fd fb4e 	bl	80001c8 <__aeabi_uldivmod>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	460c      	mov	r4, r1
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <UART_SetConfig+0x384>)
 8002b34:	fba3 1302 	umull	r1, r3, r3, r2
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	2164      	movs	r1, #100	; 0x64
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	3332      	adds	r3, #50	; 0x32
 8002b46:	4a07      	ldr	r2, [pc, #28]	; (8002b64 <UART_SetConfig+0x384>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	f003 0207 	and.w	r2, r3, #7
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4442      	add	r2, r8
 8002b58:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002b5a:	e1b2      	b.n	8002ec2 <UART_SetConfig+0x6e2>
 8002b5c:	40011000 	.word	0x40011000
 8002b60:	40011400 	.word	0x40011400
 8002b64:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4ad7      	ldr	r2, [pc, #860]	; (8002ecc <UART_SetConfig+0x6ec>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d005      	beq.n	8002b7e <UART_SetConfig+0x39e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4ad6      	ldr	r2, [pc, #856]	; (8002ed0 <UART_SetConfig+0x6f0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	f040 80d1 	bne.w	8002d20 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b7e:	f7ff faa7 	bl	80020d0 <HAL_RCC_GetPCLK2Freq>
 8002b82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	469a      	mov	sl, r3
 8002b88:	f04f 0b00 	mov.w	fp, #0
 8002b8c:	46d0      	mov	r8, sl
 8002b8e:	46d9      	mov	r9, fp
 8002b90:	eb18 0308 	adds.w	r3, r8, r8
 8002b94:	eb49 0409 	adc.w	r4, r9, r9
 8002b98:	4698      	mov	r8, r3
 8002b9a:	46a1      	mov	r9, r4
 8002b9c:	eb18 080a 	adds.w	r8, r8, sl
 8002ba0:	eb49 090b 	adc.w	r9, r9, fp
 8002ba4:	f04f 0100 	mov.w	r1, #0
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002bb0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002bb4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002bb8:	4688      	mov	r8, r1
 8002bba:	4691      	mov	r9, r2
 8002bbc:	eb1a 0508 	adds.w	r5, sl, r8
 8002bc0:	eb4b 0609 	adc.w	r6, fp, r9
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	f04f 0400 	mov.w	r4, #0
 8002bd6:	0094      	lsls	r4, r2, #2
 8002bd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bdc:	008b      	lsls	r3, r1, #2
 8002bde:	461a      	mov	r2, r3
 8002be0:	4623      	mov	r3, r4
 8002be2:	4628      	mov	r0, r5
 8002be4:	4631      	mov	r1, r6
 8002be6:	f7fd faef 	bl	80001c8 <__aeabi_uldivmod>
 8002bea:	4603      	mov	r3, r0
 8002bec:	460c      	mov	r4, r1
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4bb8      	ldr	r3, [pc, #736]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002bf2:	fba3 2302 	umull	r2, r3, r3, r2
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	469b      	mov	fp, r3
 8002c00:	f04f 0c00 	mov.w	ip, #0
 8002c04:	46d9      	mov	r9, fp
 8002c06:	46e2      	mov	sl, ip
 8002c08:	eb19 0309 	adds.w	r3, r9, r9
 8002c0c:	eb4a 040a 	adc.w	r4, sl, sl
 8002c10:	4699      	mov	r9, r3
 8002c12:	46a2      	mov	sl, r4
 8002c14:	eb19 090b 	adds.w	r9, r9, fp
 8002c18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c1c:	f04f 0100 	mov.w	r1, #0
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c30:	4689      	mov	r9, r1
 8002c32:	4692      	mov	sl, r2
 8002c34:	eb1b 0509 	adds.w	r5, fp, r9
 8002c38:	eb4c 060a 	adc.w	r6, ip, sl
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4619      	mov	r1, r3
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	f04f 0400 	mov.w	r4, #0
 8002c4e:	0094      	lsls	r4, r2, #2
 8002c50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c54:	008b      	lsls	r3, r1, #2
 8002c56:	461a      	mov	r2, r3
 8002c58:	4623      	mov	r3, r4
 8002c5a:	4628      	mov	r0, r5
 8002c5c:	4631      	mov	r1, r6
 8002c5e:	f7fd fab3 	bl	80001c8 <__aeabi_uldivmod>
 8002c62:	4603      	mov	r3, r0
 8002c64:	460c      	mov	r4, r1
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b9a      	ldr	r3, [pc, #616]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	2164      	movs	r1, #100	; 0x64
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	3332      	adds	r3, #50	; 0x32
 8002c7c:	4a95      	ldr	r2, [pc, #596]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c88:	4498      	add	r8, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	469b      	mov	fp, r3
 8002c8e:	f04f 0c00 	mov.w	ip, #0
 8002c92:	46d9      	mov	r9, fp
 8002c94:	46e2      	mov	sl, ip
 8002c96:	eb19 0309 	adds.w	r3, r9, r9
 8002c9a:	eb4a 040a 	adc.w	r4, sl, sl
 8002c9e:	4699      	mov	r9, r3
 8002ca0:	46a2      	mov	sl, r4
 8002ca2:	eb19 090b 	adds.w	r9, r9, fp
 8002ca6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002caa:	f04f 0100 	mov.w	r1, #0
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cbe:	4689      	mov	r9, r1
 8002cc0:	4692      	mov	sl, r2
 8002cc2:	eb1b 0509 	adds.w	r5, fp, r9
 8002cc6:	eb4c 060a 	adc.w	r6, ip, sl
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	f04f 0400 	mov.w	r4, #0
 8002cdc:	0094      	lsls	r4, r2, #2
 8002cde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ce2:	008b      	lsls	r3, r1, #2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4623      	mov	r3, r4
 8002ce8:	4628      	mov	r0, r5
 8002cea:	4631      	mov	r1, r6
 8002cec:	f7fd fa6c 	bl	80001c8 <__aeabi_uldivmod>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	460c      	mov	r4, r1
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4b77      	ldr	r3, [pc, #476]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	2164      	movs	r1, #100	; 0x64
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	3332      	adds	r3, #50	; 0x32
 8002d0a:	4a72      	ldr	r2, [pc, #456]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	f003 020f 	and.w	r2, r3, #15
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4442      	add	r2, r8
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	e0d0      	b.n	8002ec2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d20:	f7ff f9c2 	bl	80020a8 <HAL_RCC_GetPCLK1Freq>
 8002d24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	469a      	mov	sl, r3
 8002d2a:	f04f 0b00 	mov.w	fp, #0
 8002d2e:	46d0      	mov	r8, sl
 8002d30:	46d9      	mov	r9, fp
 8002d32:	eb18 0308 	adds.w	r3, r8, r8
 8002d36:	eb49 0409 	adc.w	r4, r9, r9
 8002d3a:	4698      	mov	r8, r3
 8002d3c:	46a1      	mov	r9, r4
 8002d3e:	eb18 080a 	adds.w	r8, r8, sl
 8002d42:	eb49 090b 	adc.w	r9, r9, fp
 8002d46:	f04f 0100 	mov.w	r1, #0
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d5a:	4688      	mov	r8, r1
 8002d5c:	4691      	mov	r9, r2
 8002d5e:	eb1a 0508 	adds.w	r5, sl, r8
 8002d62:	eb4b 0609 	adc.w	r6, fp, r9
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	f04f 0400 	mov.w	r4, #0
 8002d78:	0094      	lsls	r4, r2, #2
 8002d7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d7e:	008b      	lsls	r3, r1, #2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4623      	mov	r3, r4
 8002d84:	4628      	mov	r0, r5
 8002d86:	4631      	mov	r1, r6
 8002d88:	f7fd fa1e 	bl	80001c8 <__aeabi_uldivmod>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	460c      	mov	r4, r1
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b50      	ldr	r3, [pc, #320]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002d94:	fba3 2302 	umull	r2, r3, r3, r2
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	469b      	mov	fp, r3
 8002da2:	f04f 0c00 	mov.w	ip, #0
 8002da6:	46d9      	mov	r9, fp
 8002da8:	46e2      	mov	sl, ip
 8002daa:	eb19 0309 	adds.w	r3, r9, r9
 8002dae:	eb4a 040a 	adc.w	r4, sl, sl
 8002db2:	4699      	mov	r9, r3
 8002db4:	46a2      	mov	sl, r4
 8002db6:	eb19 090b 	adds.w	r9, r9, fp
 8002dba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002dbe:	f04f 0100 	mov.w	r1, #0
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dd2:	4689      	mov	r9, r1
 8002dd4:	4692      	mov	sl, r2
 8002dd6:	eb1b 0509 	adds.w	r5, fp, r9
 8002dda:	eb4c 060a 	adc.w	r6, ip, sl
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4619      	mov	r1, r3
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	f04f 0400 	mov.w	r4, #0
 8002df0:	0094      	lsls	r4, r2, #2
 8002df2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002df6:	008b      	lsls	r3, r1, #2
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4623      	mov	r3, r4
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	4631      	mov	r1, r6
 8002e00:	f7fd f9e2 	bl	80001c8 <__aeabi_uldivmod>
 8002e04:	4603      	mov	r3, r0
 8002e06:	460c      	mov	r4, r1
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b32      	ldr	r3, [pc, #200]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	2164      	movs	r1, #100	; 0x64
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	3332      	adds	r3, #50	; 0x32
 8002e1e:	4a2d      	ldr	r2, [pc, #180]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e2a:	4498      	add	r8, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	469b      	mov	fp, r3
 8002e30:	f04f 0c00 	mov.w	ip, #0
 8002e34:	46d9      	mov	r9, fp
 8002e36:	46e2      	mov	sl, ip
 8002e38:	eb19 0309 	adds.w	r3, r9, r9
 8002e3c:	eb4a 040a 	adc.w	r4, sl, sl
 8002e40:	4699      	mov	r9, r3
 8002e42:	46a2      	mov	sl, r4
 8002e44:	eb19 090b 	adds.w	r9, r9, fp
 8002e48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e4c:	f04f 0100 	mov.w	r1, #0
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e60:	4689      	mov	r9, r1
 8002e62:	4692      	mov	sl, r2
 8002e64:	eb1b 0509 	adds.w	r5, fp, r9
 8002e68:	eb4c 060a 	adc.w	r6, ip, sl
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4619      	mov	r1, r3
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	f04f 0400 	mov.w	r4, #0
 8002e7e:	0094      	lsls	r4, r2, #2
 8002e80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e84:	008b      	lsls	r3, r1, #2
 8002e86:	461a      	mov	r2, r3
 8002e88:	4623      	mov	r3, r4
 8002e8a:	4628      	mov	r0, r5
 8002e8c:	4631      	mov	r1, r6
 8002e8e:	f7fd f99b 	bl	80001c8 <__aeabi_uldivmod>
 8002e92:	4603      	mov	r3, r0
 8002e94:	460c      	mov	r4, r1
 8002e96:	461a      	mov	r2, r3
 8002e98:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	2164      	movs	r1, #100	; 0x64
 8002ea2:	fb01 f303 	mul.w	r3, r1, r3
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	3332      	adds	r3, #50	; 0x32
 8002eac:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <UART_SetConfig+0x6f4>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	f003 020f 	and.w	r2, r3, #15
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4442      	add	r2, r8
 8002ebe:	609a      	str	r2, [r3, #8]
}
 8002ec0:	e7ff      	b.n	8002ec2 <UART_SetConfig+0x6e2>
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ecc:	40011000 	.word	0x40011000
 8002ed0:	40011400 	.word	0x40011400
 8002ed4:	51eb851f 	.word	0x51eb851f

08002ed8 <__libc_init_array>:
 8002ed8:	b570      	push	{r4, r5, r6, lr}
 8002eda:	4e0d      	ldr	r6, [pc, #52]	; (8002f10 <__libc_init_array+0x38>)
 8002edc:	4c0d      	ldr	r4, [pc, #52]	; (8002f14 <__libc_init_array+0x3c>)
 8002ede:	1ba4      	subs	r4, r4, r6
 8002ee0:	10a4      	asrs	r4, r4, #2
 8002ee2:	2500      	movs	r5, #0
 8002ee4:	42a5      	cmp	r5, r4
 8002ee6:	d109      	bne.n	8002efc <__libc_init_array+0x24>
 8002ee8:	4e0b      	ldr	r6, [pc, #44]	; (8002f18 <__libc_init_array+0x40>)
 8002eea:	4c0c      	ldr	r4, [pc, #48]	; (8002f1c <__libc_init_array+0x44>)
 8002eec:	f000 f820 	bl	8002f30 <_init>
 8002ef0:	1ba4      	subs	r4, r4, r6
 8002ef2:	10a4      	asrs	r4, r4, #2
 8002ef4:	2500      	movs	r5, #0
 8002ef6:	42a5      	cmp	r5, r4
 8002ef8:	d105      	bne.n	8002f06 <__libc_init_array+0x2e>
 8002efa:	bd70      	pop	{r4, r5, r6, pc}
 8002efc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f00:	4798      	blx	r3
 8002f02:	3501      	adds	r5, #1
 8002f04:	e7ee      	b.n	8002ee4 <__libc_init_array+0xc>
 8002f06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f0a:	4798      	blx	r3
 8002f0c:	3501      	adds	r5, #1
 8002f0e:	e7f2      	b.n	8002ef6 <__libc_init_array+0x1e>
 8002f10:	0800d89c 	.word	0x0800d89c
 8002f14:	0800d89c 	.word	0x0800d89c
 8002f18:	0800d89c 	.word	0x0800d89c
 8002f1c:	0800d8a0 	.word	0x0800d8a0

08002f20 <memset>:
 8002f20:	4402      	add	r2, r0
 8002f22:	4603      	mov	r3, r0
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d100      	bne.n	8002f2a <memset+0xa>
 8002f28:	4770      	bx	lr
 8002f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f2e:	e7f9      	b.n	8002f24 <memset+0x4>

08002f30 <_init>:
 8002f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f32:	bf00      	nop
 8002f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f36:	bc08      	pop	{r3}
 8002f38:	469e      	mov	lr, r3
 8002f3a:	4770      	bx	lr

08002f3c <_fini>:
 8002f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3e:	bf00      	nop
 8002f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f42:	bc08      	pop	{r3}
 8002f44:	469e      	mov	lr, r3
 8002f46:	4770      	bx	lr
